version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gauth-postgres
    environment:
      POSTGRES_DB: gauth
      POSTGRES_USER: gauth
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U gauth -d gauth" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gauth-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: gauth-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gauth-network

  # gauth Service
  gauth:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: gauth-service
    ports:
      - "9090:9090" # gRPC port
      - "8080:8080" # HTTP port
      - "9464:9464" # Prometheus metrics port
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: gauth
      DB_PASSWORD: password
      DB_DATABASE: gauth
      DB_SSL_MODE: disable

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # Renclave
      RENCLAVE_HOST: renclave-v2
      RENCLAVE_PORT: 3000

      # Auth
      JWT_SECRET: development-secret-key-change-in-production
      ENCRYPTION_KEY: development-32-byte-key-change-prod

      # Logging
      LOG_LEVEL: info
      LOG_FORMAT: json

      # Telemetry
      TELEMETRY_TRACING_ENABLED: "true"
      TELEMETRY_METRICS_ENABLED: "true"
      TELEMETRY_OTLP_ENDPOINT: "otel-collector:4317"
      TELEMETRY_OTLP_INSECURE: "true"
      TELEMETRY_TRACE_SAMPLING_RATIO: "1.0"
      TELEMETRY_METRICS_PORT: "9464"
      ENVIRONMENT: "development"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      otel-collector:
        condition: service_started
    healthcheck:
      test: [ "CMD", "grpc_health_probe", "-addr=localhost:9090" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - gauth-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"

  # renclave-v2 Service (from the other project)
  renclave-v2:
    image: renclave-v2:latest
    container_name: renclave-v2-service
    ports:
      - "3000:3000"
    environment:
      RUST_LOG: info
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - gauth-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"

  # Database Migration (run once)
  migrate:
    image: migrate/migrate:v4.16.2
    container_name: gauth-migrate
    volumes:
      - ./migrations:/migrations
    command: [ "-path", "/migrations", "-database", "postgres://gauth:password@postgres:5432/gauth?sslmode=disable", "up" ]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - gauth-network
    restart: "no"

  # Development Tools
  adminer:
    image: adminer:4.8.1
    container_name: gauth-adminer
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - gauth-network
    profiles:
      - dev

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: gauth-redis-commander
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    networks:
      - gauth-network
    profiles:
      - dev

  # Observability Stack

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./observability/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # Health check extension
    networks:
      - gauth-network
    restart: unless-stopped
    depends_on:
      - prometheus
      - loki
      - jaeger

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --web.enable-lifecycle
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - gauth-network
    restart: unless-stopped

  # Loki for logs
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./observability/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - gauth-network
    restart: unless-stopped

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./observability/promtail-config.yaml:/etc/promtail/config.yaml
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - gauth-network
    restart: unless-stopped
    depends_on:
      - loki

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686" # UI
      - "14250:14250" # Model
      - "14268:14268" # Collector HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - gauth-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./observability/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./observability/grafana-dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./observability/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - gauth-network
    restart: unless-stopped
    depends_on:
      - prometheus
      - loki
      - jaeger

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  loki_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  gauth-network:
    driver: bridge
