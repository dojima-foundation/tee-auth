syntax = "proto3";

package gauth.v1;

option go_package = "github.com/dojima-foundation/tee-auth/gauth/api/proto";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// GAuth service provides authentication and organization management
// following Turnkey's architecture patterns
service GAuthService {
  // Organization management
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse);
  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse);
  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse);
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse);

  // User management
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);

  // Wallet management
  rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse);
  rpc GetWallet(GetWalletRequest) returns (GetWalletResponse);
  rpc ListWallets(ListWalletsRequest) returns (ListWalletsResponse);
  rpc DeleteWallet(DeleteWalletRequest) returns (DeleteWalletResponse);

  // Private key management
  rpc CreatePrivateKey(CreatePrivateKeyRequest) returns (CreatePrivateKeyResponse);
  rpc GetPrivateKey(GetPrivateKeyRequest) returns (GetPrivateKeyResponse);
  rpc ListPrivateKeys(ListPrivateKeysRequest) returns (ListPrivateKeysResponse);
  rpc DeletePrivateKey(DeletePrivateKeyRequest) returns (DeletePrivateKeyResponse);

  // Activity management (critical operations)
  rpc CreateActivity(CreateActivityRequest) returns (CreateActivityResponse);
  rpc GetActivity(GetActivityRequest) returns (GetActivityResponse);
  rpc ListActivities(ListActivitiesRequest) returns (ListActivitiesResponse);

  // Communication with renclave-v2
  rpc RequestSeedGeneration(SeedGenerationRequest) returns (SeedGenerationResponse);
  rpc ValidateSeed(SeedValidationRequest) returns (SeedValidationResponse);
  rpc GetEnclaveInfo(google.protobuf.Empty) returns (EnclaveInfoResponse);

  // Authentication and authorization
  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse);
  rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse);

  // Google OAuth
  rpc GetGoogleOAuthURL(GoogleOAuthURLRequest) returns (GoogleOAuthURLResponse);
  rpc HandleGoogleOAuthCallback(GoogleOAuthCallbackRequest) returns (GoogleOAuthCallbackResponse);
  rpc RefreshGoogleOAuthToken(RefreshGoogleOAuthTokenRequest) returns (RefreshGoogleOAuthTokenResponse);

  // Health and status
  rpc Health(google.protobuf.Empty) returns (HealthResponse);
  rpc Status(google.protobuf.Empty) returns (StatusResponse);
}

// Organization messages
message Organization {
  string id = 1;
  string version = 2;
  string name = 3;
  repeated User users = 4;
  Quorum root_quorum = 5;
  repeated Invitation invitations = 6;
  repeated Policy policies = 7;
  repeated Tag tags = 8;
  repeated PrivateKey private_keys = 9;
  repeated Wallet wallets = 10;
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
}

message User {
  string id = 1;
  string organization_id = 2;
  string username = 3;
  string email = 4;
  string public_key = 5;
  repeated AuthMethod auth_methods = 6;
  repeated string tags = 7;
  bool is_active = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

message AuthMethod {
  string id = 1;
  string user_id = 2;
  string type = 3; // API_KEY, PASSKEY, OAUTH
  string name = 4;
  string data = 5; // JSON data specific to auth type
  bool is_active = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
}

message Quorum {
  repeated string user_ids = 1;
  int32 threshold = 2;
}

message Invitation {
  string id = 1;
  string organization_id = 2;
  string email = 3;
  string role = 4;
  string token = 5;
  google.protobuf.Timestamp expires_at = 6;
  optional google.protobuf.Timestamp accepted_at = 7;
  google.protobuf.Timestamp created_at = 8;
}

message Policy {
  string id = 1;
  string organization_id = 2;
  string name = 3;
  string description = 4;
  string rules = 5; // JSON policy rules
  bool is_active = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
}

message Tag {
  string id = 1;
  string organization_id = 2;
  string name = 3;
  string description = 4;
  string color = 5;
  google.protobuf.Timestamp created_at = 6;
}

message PrivateKey {
  string id = 1;
  string organization_id = 2;
  string wallet_id = 3; // Link to wallet
  string name = 4;
  string public_key = 5;
  string curve = 6; // SECP256K1, ED25519, etc.
  string path = 7; // BIP32 derivation path
  repeated string tags = 8;
  bool is_active = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

message Wallet {
  string id = 1;
  string organization_id = 2;
  string name = 3;
  string public_key = 4;
  repeated WalletAccount accounts = 5;
  repeated string tags = 6;
  bool is_active = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
}

message WalletAccount {
  string id = 1;
  string wallet_id = 2;
  string name = 3;
  string path = 4; // BIP44 derivation path
  string public_key = 5;
  string address = 6;
  string curve = 7;
  string address_format = 8;
  bool is_active = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

message Activity {
  string id = 1;
  string organization_id = 2;
  string type = 3;
  string status = 4; // PENDING, COMPLETED, FAILED
  string parameters = 5; // JSON parameters
  optional string result = 6; // JSON result
  ActivityIntent intent = 7;
  string created_by = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

message ActivityIntent {
  string fingerprint = 1;
  string summary = 2;
}

// Request/Response messages
message CreateOrganizationRequest {
  string name = 1;
  string initial_user_email = 2;
  string initial_user_public_key = 3;
}

message CreateOrganizationResponse {
  Organization organization = 1;
  string status = 2;
}

message GetOrganizationRequest {
  string id = 1;
}

message GetOrganizationResponse {
  Organization organization = 1;
}

message UpdateOrganizationRequest {
  string id = 1;
  optional string name = 2;
}

message UpdateOrganizationResponse {
  Organization organization = 1;
}

message ListOrganizationsRequest {
  int32 page_size = 1;
  string page_token = 2;
}

message ListOrganizationsResponse {
  repeated Organization organizations = 1;
  string next_page_token = 2;
}

message CreateUserRequest {
  string organization_id = 1;
  string username = 2;
  string email = 3;
  string public_key = 4;
  repeated string tags = 5;
}

message CreateUserResponse {
  User user = 1;
}

message GetUserRequest {
  string id = 1;
}

message GetUserResponse {
  User user = 1;
}

message UpdateUserRequest {
  string id = 1;
  optional string username = 2;
  optional string email = 3;
  repeated string tags = 4;
  optional bool is_active = 5;
}

message UpdateUserResponse {
  User user = 1;
}

message ListUsersRequest {
  string organization_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListUsersResponse {
  repeated User users = 1;
  string next_page_token = 2;
}

message CreateActivityRequest {
  string organization_id = 1;
  string type = 2;
  string parameters = 3; // JSON parameters
  string created_by = 4;
}

message CreateActivityResponse {
  Activity activity = 1;
}

message GetActivityRequest {
  string id = 1;
}

message GetActivityResponse {
  Activity activity = 1;
}

message ListActivitiesRequest {
  string organization_id = 1;
  optional string type = 2;
  optional string status = 3;
  int32 page_size = 4;
  string page_token = 5;
}

message ListActivitiesResponse {
  repeated Activity activities = 1;
  string next_page_token = 2;
}

// Communication with renclave-v2
message SeedGenerationRequest {
  string organization_id = 1;
  string user_id = 2;
  int32 strength = 3; // 128, 160, 192, 224, 256
  optional string passphrase = 4;
}

message SeedGenerationResponse {
  string seed_phrase = 1;
  string entropy = 2;
  int32 strength = 3;
  int32 word_count = 4;
  string request_id = 5;
}

message SeedValidationRequest {
  string seed_phrase = 1;
}

message SeedValidationResponse {
  bool is_valid = 1;
  int32 strength = 2;
  int32 word_count = 3;
  repeated string errors = 4;
}

message EnclaveInfoResponse {
  string version = 1;
  string enclave_id = 2;
  repeated string capabilities = 3;
  bool healthy = 4;
}

// Authentication and authorization
message AuthenticateRequest {
  string organization_id = 1;
  string user_id = 2;
  string auth_method_id = 3;
  string signature = 4; // Signature of the request
  string timestamp = 5; // ISO 8601 timestamp
}

message AuthenticateResponse {
  bool authenticated = 1;
  string session_token = 2;
  google.protobuf.Timestamp expires_at = 3;
  User user = 4;
}

message AuthorizeRequest {
  string session_token = 1;
  string activity_type = 2;
  string parameters = 3; // JSON parameters
}

message AuthorizeResponse {
  bool authorized = 1;
  string reason = 2;
  repeated string required_approvals = 3; // User IDs required for quorum
}

// Google OAuth
message GoogleOAuthURLRequest {
  string organization_id = 1;
  string redirect_uri = 2;
  repeated string scopes = 3; // e.g., "openid", "profile", "email"
}

message GoogleOAuthURLResponse {
  string url = 1;
  string state = 2;
}

message GoogleOAuthCallbackRequest {
  string state = 1;
  string code = 2;
  string error = 3;
}

message GoogleOAuthCallbackResponse {
  string session_token = 1;
  google.protobuf.Timestamp expires_at = 2;
  User user = 3;
}

message RefreshGoogleOAuthTokenRequest {
  string refresh_token = 1;
}

message RefreshGoogleOAuthTokenResponse {
  string access_token = 1;
  int32 expires_in = 2;
  string refresh_token = 3;
  string token_type = 4;
}

// Health and status
message HealthResponse {
  string status = 1; // OK, DEGRADED, UNHEALTHY
  repeated ServiceStatus services = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message ServiceStatus {
  string name = 1;
  string status = 2;
  optional string error = 3;
}

message StatusResponse {
  string version = 1;
  string build_time = 2;
  string git_commit = 3;
  google.protobuf.Timestamp uptime = 4;
  map<string, string> metrics = 5;
}

// Wallet management messages
message CreateWalletRequest {
  string organization_id = 1;
  string name = 2;
  repeated CreateWalletAccount accounts = 3;
  optional int32 mnemonic_length = 4; // 12, 15, 18, 21, 24 (default: 12)
  repeated string tags = 5;
}

message CreateWalletAccount {
  string curve = 1; // CURVE_SECP256K1, CURVE_ED25519
  string path_format = 2; // PATH_FORMAT_BIP32
  string path = 3; // e.g., m/44'/60'/0'/0/0
  string address_format = 4; // ADDRESS_FORMAT_ETHEREUM, etc.
}

message CreateWalletResponse {
  Wallet wallet = 1;
  repeated string addresses = 2; // Generated addresses
}

message GetWalletRequest {
  string id = 1;
}

message GetWalletResponse {
  Wallet wallet = 1;
}

message ListWalletsRequest {
  string organization_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListWalletsResponse {
  repeated Wallet wallets = 1;
  string next_page_token = 2;
}

message DeleteWalletRequest {
  string id = 1;
  optional bool delete_without_export = 2; // default: false
}

message DeleteWalletResponse {
  bool success = 1;
  string message = 2;
}

// Private key management messages
message CreatePrivateKeyRequest {
  string organization_id = 1;
  string wallet_id = 2; // Link to wallet
  string name = 3;
  string curve = 4; // CURVE_SECP256K1, CURVE_ED25519
  optional string private_key_material = 5; // Optional: provide key material, otherwise generate
  repeated string tags = 6;
}

message CreatePrivateKeyResponse {
  PrivateKey private_key = 1;
}

message GetPrivateKeyRequest {
  string id = 1;
}

message GetPrivateKeyResponse {
  PrivateKey private_key = 1;
}

message ListPrivateKeysRequest {
  string organization_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListPrivateKeysResponse {
  repeated PrivateKey private_keys = 1;
  string next_page_token = 2;
}

message DeletePrivateKeyRequest {
  string id = 1;
  optional bool delete_without_export = 2; // default: false
}

message DeletePrivateKeyResponse {
  bool success = 1;
  string message = 2;
}
