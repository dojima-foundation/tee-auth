{
    "info": {
        "_postman_id": "renclave-v2-api-collection",
        "name": "Renclave-v2 API",
        "description": "Complete API collection for the Renclave-v2 secure enclave service. Includes seed generation, validation, key derivation, address derivation, and enclave information endpoints. Enhanced with entropy validation capabilities and quorum key encryption for maximum security.",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Health & Status",
            "item": [
                {
                    "name": "Health Check",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{renclave_base_url}}/health",
                            "host": [
                                "{{renclave_base_url}}"
                            ],
                            "path": [
                                "health"
                            ]
                        },
                        "description": "Check the health status of the renclave-v2 service"
                    },
                    "response": []
                },
                {
                    "name": "Get Enclave Info",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{renclave_base_url}}/info",
                            "host": [
                                "{{renclave_base_url}}"
                            ],
                            "path": [
                                "info"
                            ]
                        },
                        "description": "Get information about the enclave including version, enclave ID, and capabilities"
                    },
                    "response": []
                },
                {
                    "name": "Enclave Info",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{renclave_base_url}}/enclave/info",
                            "host": [
                                "{{renclave_base_url}}"
                            ],
                            "path": [
                                "enclave",
                                "info"
                            ]
                        },
                        "description": "Get detailed enclave information and status"
                    },
                    "response": []
                }
            ],
            "description": "Health and status monitoring endpoints"
        },
        {
            "name": "Seed Management",
            "item": [
                {
                    "name": "Generate Seed",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"strength\": 256,\n  \"passphrase\": \"optional-secure-passphrase\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{renclave_base_url}}/generate-seed",
                            "host": [
                                "{{renclave_base_url}}"
                            ],
                            "path": [
                                "generate-seed"
                            ]
                        },
                        "description": "Generate a new BIP39 seed phrase with specified strength (128, 160, 192, 224, or 256 bits). Returns encrypted seed_phrase and encrypted entropy (hex-encoded) that should be stored securely. All sensitive data is encrypted with quorum keys for maximum security."
                    },
                    "response": []
                },
                {
                    "name": "Validate Seed",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"seed_phrase\": \"{{test_seed_phrase}}\",\n  \"encrypted_entropy\": \"{{encrypted_entropy}}\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{renclave_base_url}}/validate-seed",
                            "host": [
                                "{{renclave_base_url}}"
                            ],
                            "path": [
                                "validate-seed"
                            ]
                        },
                        "description": "Validate a BIP39 seed phrase for correctness and checksum. Enhanced with optional entropy validation - when encrypted_entropy is provided, validates that the entropy matches the seed phrase using BIP39 derivation. Supports both plain BIP39 seeds and quorum-key encrypted seeds."
                    },
                    "response": []
                },
                {
                    "name": "Validate Seed with Entropy",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"seed_phrase\": \"abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about\",\n  \"encrypted_entropy\": \"af1adfb81e222380b9cb2dcc5407f6d4fea7ab14b713b17fb6b1f9e068176e32\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{renclave_base_url}}/validate-seed",
                            "host": [
                                "{{renclave_base_url}}"
                            ],
                            "path": [
                                "validate-seed"
                            ]
                        },
                        "description": "Example: Validate a plain BIP39 seed phrase with entropy validation. This demonstrates the enhanced validate-seed API that can validate both encrypted and plain seeds, with optional entropy verification using BIP39 derivation."
                    },
                    "response": []
                }
            ],
            "description": "Seed phrase generation and validation endpoints with enhanced entropy validation capabilities"
        },
        {
            "name": "Key Derivation",
            "item": [
                {
                    "name": "Derive Key - Secp256k1",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"encrypted_seed_phrase\": \"{{test_encrypted_seed_phrase}}\",\n  \"path\": \"m/44'/60'/0'/0/0\",\n  \"curve\": \"CURVE_SECP256K1\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{renclave_base_url}}/derive-key",
                            "host": [
                                "{{renclave_base_url}}"
                            ],
                            "path": [
                                "derive-key"
                            ]
                        },
                        "description": "Derive a private key from an encrypted seed phrase using BIP32 derivation path for Ethereum (m/44'/60'/0'/0/0). Returns private key, public key, and address."
                    },
                    "response": []
                },
                {
                    "name": "Derive Key - Bitcoin",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"encrypted_seed_phrase\": \"{{test_encrypted_seed_phrase}}\",\n  \"path\": \"m/44'/0'/0'/0/0\",\n  \"curve\": \"CURVE_SECP256K1\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{renclave_base_url}}/derive-key",
                            "host": [
                                "{{renclave_base_url}}"
                            ],
                            "path": [
                                "derive-key"
                            ]
                        },
                        "description": "Derive a private key from an encrypted seed phrase using BIP32 derivation path for Bitcoin (m/44'/0'/0'/0/0). Returns private key, public key, and address."
                    },
                    "response": []
                },
                {
                    "name": "Derive Key - Test Invalid Path",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"encrypted_seed_phrase\": \"{{test_encrypted_seed_phrase}}\",\n  \"path\": \"invalid/path\",\n  \"curve\": \"CURVE_SECP256K1\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{renclave_base_url}}/derive-key",
                            "host": [
                                "{{renclave_base_url}}"
                            ],
                            "path": [
                                "derive-key"
                            ]
                        },
                        "description": "Test error handling with invalid derivation path. Should return 400 error."
                    },
                    "response": []
                },
                {
                    "name": "Derive Key - Test Invalid Seed",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"encrypted_seed_phrase\": \"invalid_hex_string\",\n  \"path\": \"m/44'/60'/0'/0/0\",\n  \"curve\": \"CURVE_SECP256K1\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{renclave_base_url}}/derive-key",
                            "host": [
                                "{{renclave_base_url}}"
                            ],
                            "path": [
                                "derive-key"
                            ]
                        },
                        "description": "Test error handling with invalid encrypted seed phrase. Should return 500 error."
                    },
                    "response": []
                }
            ],
            "description": "Private key derivation endpoints with comprehensive test cases including valid paths, error scenarios, and different curve types"
        },
        {
            "name": "Address Derivation",
            "item": [
                {
                    "name": "Derive Address",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"encrypted_seed_phrase\": \"{{test_encrypted_seed_phrase}}\",\n  \"path\": \"{{test_derivation_path}}\",\n  \"curve\": \"{{test_curve}}\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{renclave_base_url}}/derive-address",
                            "host": [
                                "{{renclave_base_url}}"
                            ],
                            "path": [
                                "derive-address"
                            ]
                        },
                        "description": "Derive a public address from an encrypted seed phrase using BIP32 derivation path"
                    },
                    "response": []
                }
            ],
            "description": "Public address derivation endpoints"
        },
        {
            "name": "Network Management",
            "item": [
                {
                    "name": "Network Status",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{renclave_base_url}}/network/status",
                            "host": [
                                "{{renclave_base_url}}"
                            ],
                            "path": [
                                "network",
                                "status"
                            ]
                        },
                        "description": "Get network connectivity status and configuration"
                    },
                    "response": []
                },
                {
                    "name": "Test Connectivity",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"target_host\": \"example.com\",\n  \"target_port\": 443,\n  \"timeout_seconds\": 5\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{renclave_base_url}}/network/test",
                            "host": [
                                "{{renclave_base_url}}"
                            ],
                            "path": [
                                "network",
                                "test"
                            ]
                        },
                        "description": "Test network connectivity to a specific host and port"
                    },
                    "response": []
                }
            ],
            "description": "Network connectivity and testing endpoints"
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Set default headers for all requests",
                    "pm.request.headers.add({",
                    "    key: 'User-Agent',",
                    "    value: 'PostmanRuntime/7.45.0'",
                    "});"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Common test script for all requests",
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response time is less than 5000ms\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                    "});",
                    "",
                    "pm.test(\"Content-Type is application/json\", function () {",
                    "    pm.response.to.have.header(\"Content-Type\");",
                    "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                    "});",
                    "",
                    "// Additional tests for specific endpoints",
                    "if (pm.request.url.path.includes('generate-seed')) {",
                    "    pm.test(\"Seed generation response has required fields\", function () {",
                    "        const response = pm.response.json();",
                    "        pm.expect(response).to.have.property('seed_phrase');",
                    "        pm.expect(response).to.have.property('entropy'); // Now encrypted",
                    "        pm.expect(response).to.have.property('strength');",
                    "        pm.expect(response).to.have.property('word_count');",
                    "        // Verify entropy is hex-encoded (encrypted)",
                    "        pm.expect(response.entropy).to.match(/^[0-9a-fA-F]+$/);",
                    "    });",
                    "}",
                    "",
                    "if (pm.request.url.path.includes('validate-seed')) {",
                    "    pm.test(\"Seed validation response has required fields\", function () {",
                    "        const response = pm.response.json();",
                    "        pm.expect(response).to.have.property('valid');",
                    "        pm.expect(response).to.have.property('word_count');",
                    "        // Enhanced fields for entropy validation",
                    "        if (response.entropy_match !== undefined) {",
                    "            pm.expect(response).to.have.property('entropy_match');",
                    "        }",
                    "        if (response.derived_entropy !== undefined) {",
                    "            pm.expect(response).to.have.property('derived_entropy');",
                    "        }",
                    "    });",
                    "}",
                    "",
                    "if (pm.request.url.path.includes('derive-address')) {",
                    "    pm.test(\"Address derivation response has required fields\", function () {",
                    "        const response = pm.response.json();",
                    "        pm.expect(response).to.have.property('address');",
                    "        pm.expect(response).to.have.property('path');",
                    "        pm.expect(response).to.have.property('curve');",
                    "    });",
                    "}",
                    "",
                    "if (pm.request.url.path.includes('derive-key')) {",
                    "    pm.test(\"Key derivation response has required fields\", function () {",
                    "        const response = pm.response.json();",
                    "        pm.expect(response).to.have.property('private_key');",
                    "        pm.expect(response).to.have.property('public_key');",
                    "        pm.expect(response).to.have.property('address');",
                    "        pm.expect(response).to.have.property('path');",
                    "        pm.expect(response).to.have.property('curve');",
                    "    });",
                    "    ",
                    "    pm.test(\"Key derivation response has valid key formats\", function () {",
                    "        const response = pm.response.json();",
                    "        ",
                    "        // Check private key is hex string",
                    "        pm.expect(response.private_key).to.match(/^[0-9a-fA-F]+$/);",
                    "        pm.expect(response.private_key.length).to.be.above(0);",
                    "        ",
                    "        // Check public key is hex string",
                    "        pm.expect(response.public_key).to.match(/^[0-9a-fA-F]+$/);",
                    "        pm.expect(response.public_key.length).to.be.above(0);",
                    "        ",
                    "        // Check address format (should start with 0x)",
                    "        pm.expect(response.address).to.match(/^0x[0-9a-fA-F]+$/);",
                    "        pm.expect(response.address.length).to.be.above(2);",
                    "        ",
                    "        // Check path format",
                    "        pm.expect(response.path).to.match(/^m\\/\\d+'?(\\/\\d+'?)*$/);",
                    "        ",
                    "        // Check curve is valid",
                    "        pm.expect(['CURVE_SECP256K1', 'CURVE_P256', 'CURVE_ED25519']).to.include(response.curve);",
                    "    });",
                    "    ",
                    "    pm.test(\"Key derivation response has consistent data\", function () {",
                    "        const response = pm.response.json();",
                    "        ",
                    "        // Check that the path in response matches the requested path",
                    "        const requestBody = JSON.parse(pm.request.body.raw);",
                    "        pm.expect(response.path).to.equal(requestBody.path);",
                    "        pm.expect(response.curve).to.equal(requestBody.curve);",
                    "    });",
                    "}"
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "renclave_base_url",
            "value": "http://localhost:3000",
            "type": "string"
        },
        {
            "key": "test_seed_phrase",
            "value": "abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about",
            "type": "string"
        },
        {
            "key": "test_derivation_path",
            "value": "m/44'/60'/0'/0/0",
            "type": "string"
        },
        {
            "key": "test_curve",
            "value": "CURVE_SECP256K1",
            "type": "string"
        },
        {
            "key": "test_passphrase",
            "value": "optional-secure-passphrase",
            "type": "string"
        }
    ]
}