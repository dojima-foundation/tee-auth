# Approve activity
Source: https://docs.turnkey.com/api-reference/activities/approve-activity

Approve an activity.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="approve_activity" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_APPROVE_ACTIVITY`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="fingerprint" type="string" required={true} default="">
      An artifact verifying a User's action.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="approveActivityIntent" type="object" required={true}>
          The approveActivityIntent object

          <Expandable title="approveActivityIntent details">
            <NestedParam parentKey="activity.intent.approveActivityIntent" childKey="fingerprint" type="string" required={true}>
              An artifact verifying a User's action.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/approve_activity \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_APPROVE_ACTIVITY",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "fingerprint": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().approveActivity({
    fingerprint: "<string> (An artifact verifying a User's action.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_APPROVE_ACTIVITY",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "approveActivityIntent": {
              "fingerprint": "<string>"
            }
          },
          "result": "<object> (approved activity result, if completed)",
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Create API keys
Source: https://docs.turnkey.com/api-reference/activities/create-api-keys

Add API keys to an existing user.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="create_api_keys" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_CREATE_API_KEYS_V2`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <ParamField body="apiKeys" type="array" required={true} path="parameters.apiKeys">
      <p>A list of API Keys.</p>

      <Expandable title="item details">
        <NestedParam parentKey="parameters.apiKeys" childKey="apiKeyName" type="string" required={true} default="">
          Human-readable name for an API Key.
        </NestedParam>

        <NestedParam parentKey="parameters.apiKeys" childKey="publicKey" type="string" required={true} default="">
          The public component of a cryptographic key pair used to sign messages and transactions.
        </NestedParam>

        <NestedParam parentKey="parameters.apiKeys" childKey="curveType" type="enum<string>" required={true} default="">
          Enum options: `API_KEY_CURVE_P256`, `API_KEY_CURVE_SECP256K1`, `API_KEY_CURVE_ED25519`
        </NestedParam>

        <NestedParam parentKey="parameters.apiKeys" childKey="expirationSeconds" type="string" required={false} default="">
          Optional window (in seconds) indicating how long the API Key should last.
        </NestedParam>
      </Expandable>
    </ParamField>

    <NestedParam parentKey="parameters" childKey="userId" type="string" required={true} default="">
      Unique identifier for a given User.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="createApiKeysIntentV2" type="object" required={true}>
          The createApiKeysIntentV2 object

          <Expandable title="createApiKeysIntentV2 details">
            <NestedParam parentKey="activity.intent.createApiKeysIntentV2" childKey="apiKeys" type="array" required={true}>
              A list of API Keys.

              <Expandable title="apiKeys details">
                <NestedParam parentKey="activity.intent.createApiKeysIntentV2.apiKeys" childKey="apiKeyName" type="string" required={true}>
                  Human-readable name for an API Key.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createApiKeysIntentV2.apiKeys" childKey="publicKey" type="string" required={true}>
                  The public component of a cryptographic key pair used to sign messages and transactions.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createApiKeysIntentV2.apiKeys" childKey="curveType" type="enum" required={true}>
                  curveType field

                  Enum options: `API_KEY_CURVE_P256`, `API_KEY_CURVE_SECP256K1`, `API_KEY_CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createApiKeysIntentV2.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                  Optional window (in seconds) indicating how long the API Key should last.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createApiKeysIntentV2" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="createApiKeysResult" type="object" required={true}>
          The createApiKeysResult object

          <Expandable title="createApiKeysResult details">
            <NestedParam parentKey="activity.result.createApiKeysResult" childKey="apiKeyIds" type="array" required={true}>
              A list of API Key IDs.

              <Expandable title="apiKeyIds details">
                <NestedParam parentKey="activity.result.createApiKeysResult.apiKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/create_api_keys \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_CREATE_API_KEYS_V2",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "apiKeys": [
              {
                  "apiKeyName": "<string>",
                  "publicKey": "<string>",
                  "curveType": "<API_KEY_CURVE_P256>",
                  "expirationSeconds": "<string>"
              }
          ],
          "userId": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().createApiKeys({
    apiKeys: [{ // A list of API Keys.,
      apiKeyName: "<string> (Human-readable name for an API Key.)",
      publicKey: "<string> (The public component of a cryptographic key pair used to sign messages and transactions.)",
      curveType: "<API_KEY_CURVE_P256>" // curveType field,
      expirationSeconds: "<string> (Optional window (in seconds) indicating how long the API Key should last.)",
    }],
    userId: "<string> (Unique identifier for a given User.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_CREATE_API_KEYS_V2",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "createApiKeysIntentV2": {
              "apiKeys": [
                {
                  "apiKeyName": "<string>",
                  "publicKey": "<string>",
                  "curveType": "<API_KEY_CURVE_P256>",
                  "expirationSeconds": "<string>"
                }
              ],
              "userId": "<string>"
            }
          },
          "result": {
            "createApiKeysResult": {
              "apiKeyIds": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Create authenticators
Source: https://docs.turnkey.com/api-reference/activities/create-authenticators

Create authenticators to authenticate requests to Turnkey.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="create_authenticators" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <ParamField body="authenticators" type="array" required={true} path="parameters.authenticators">
      <p>A list of Authenticators.</p>

      <Expandable title="item details">
        <NestedParam parentKey="parameters.authenticators" childKey="authenticatorName" type="string" required={true} default="">
          Human-readable name for an Authenticator.
        </NestedParam>

        <NestedParam parentKey="parameters.authenticators" childKey="challenge" type="string" required={true} default="">
          Challenge presented for authentication purposes.
        </NestedParam>

        <ParamField body="attestation" type="object" required={true} path="parameters.authenticators.attestation">
          <p>attestation field</p>

          <Expandable title="details">
            <NestedParam parentKey="parameters.authenticators.attestation" childKey="credentialId" type="string" required={true} default="">
              The cbor encoded then base64 url encoded id of the credential.
            </NestedParam>

            <NestedParam parentKey="parameters.authenticators.attestation" childKey="clientDataJson" type="string" required={true} default="">
              A base64 url encoded payload containing metadata about the signing context and the challenge.
            </NestedParam>

            <NestedParam parentKey="parameters.authenticators.attestation" childKey="attestationObject" type="string" required={true} default="">
              A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
            </NestedParam>

            <NestedParam parentKey="parameters.authenticators.attestation" childKey="transports" type="enum<string[]>" required={true} default="">
              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
            </NestedParam>
          </Expandable>
        </ParamField>
      </Expandable>
    </ParamField>

    <NestedParam parentKey="parameters" childKey="userId" type="string" required={true} default="">
      Unique identifier for a given User.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="createAuthenticatorsIntentV2" type="object" required={true}>
          The createAuthenticatorsIntentV2 object

          <Expandable title="createAuthenticatorsIntentV2 details">
            <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2" childKey="authenticators" type="array" required={true}>
              A list of Authenticators.

              <Expandable title="authenticators details">
                <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2.authenticators" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2.authenticators" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2.authenticators" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                      The cbor encoded then base64 url encoded id of the credential.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                      A base64 url encoded payload containing metadata about the signing context and the challenge.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                      A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2.authenticators.attestation" childKey="transports" type="array" required={true}>
                      The type of authenticator transports.

                      <Expandable title="transports details">
                        <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                          item field

                          Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="createAuthenticatorsResult" type="object" required={true}>
          The createAuthenticatorsResult object

          <Expandable title="createAuthenticatorsResult details">
            <NestedParam parentKey="activity.result.createAuthenticatorsResult" childKey="authenticatorIds" type="array" required={true}>
              A list of Authenticator IDs.

              <Expandable title="authenticatorIds details">
                <NestedParam parentKey="activity.result.createAuthenticatorsResult.authenticatorIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/create_authenticators \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "authenticators": [
              {
                  "authenticatorName": "<string>",
                  "challenge": "<string>",
                  "attestation": {
                      "credentialId": "<string>",
                      "clientDataJson": "<string>",
                      "attestationObject": "<string>",
                      "transports": [
                          "<AUTHENTICATOR_TRANSPORT_BLE>"
                      ]
                  }
              }
          ],
          "userId": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().createAuthenticators({
    authenticators: [{ // A list of Authenticators.,
      authenticatorName: "<string> (Human-readable name for an Authenticator.)",
      challenge: "<string> (Challenge presented for authentication purposes.)",
      attestation: { // attestation field,
        credentialId: "<string> (The cbor encoded then base64 url encoded id of the credential.)",
        clientDataJson: "<string> (A base64 url encoded payload containing metadata about the signing context and the challenge.)",
        attestationObject: "<string> (A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.)",
        transports: "<AUTHENTICATOR_TRANSPORT_BLE>" // The type of authenticator transports.,
      },
    }],
    userId: "<string> (Unique identifier for a given User.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "createAuthenticatorsIntentV2": {
              "authenticators": [
                {
                  "authenticatorName": "<string>",
                  "challenge": "<string>",
                  "attestation": {
                    "credentialId": "<string>",
                    "clientDataJson": "<string>",
                    "attestationObject": "<string>",
                    "transports": [
                      "<AUTHENTICATOR_TRANSPORT_BLE>"
                    ]
                  }
                }
              ],
              "userId": "<string>"
            }
          },
          "result": {
            "createAuthenticatorsResult": {
              "authenticatorIds": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Create invitations
Source: https://docs.turnkey.com/api-reference/activities/create-invitations

Create invitations to join an existing organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="create_invitations" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_CREATE_INVITATIONS`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <ParamField body="invitations" type="array" required={true} path="parameters.invitations">
      <p>A list of Invitations.</p>

      <Expandable title="item details">
        <NestedParam parentKey="parameters.invitations" childKey="receiverUserName" type="string" required={true} default="">
          The name of the intended Invitation recipient.
        </NestedParam>

        <NestedParam parentKey="parameters.invitations" childKey="receiverUserEmail" type="string" required={true} default="">
          The email address of the intended Invitation recipient.
        </NestedParam>

        <ParamField body="receiverUserTags" type="array" required={true} path="parameters.invitations.receiverUserTags">
          <p>A list of tags assigned to the Invitation recipient. This field, if not needed, should be an empty array in your request body.</p>

          <Expandable title="item details">
            <p>Array item type: <code>string</code></p>
            <p>item field</p>
          </Expandable>
        </ParamField>

        <NestedParam parentKey="parameters.invitations" childKey="accessType" type="enum<string>" required={true} default="">
          Enum options: `ACCESS_TYPE_WEB`, `ACCESS_TYPE_API`, `ACCESS_TYPE_ALL`
        </NestedParam>

        <NestedParam parentKey="parameters.invitations" childKey="senderUserId" type="string" required={true} default="">
          Unique identifier for the Sender of an Invitation.
        </NestedParam>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="createInvitationsIntent" type="object" required={true}>
          The createInvitationsIntent object

          <Expandable title="createInvitationsIntent details">
            <NestedParam parentKey="activity.intent.createInvitationsIntent" childKey="invitations" type="array" required={true}>
              A list of Invitations.

              <Expandable title="invitations details">
                <NestedParam parentKey="activity.intent.createInvitationsIntent.invitations" childKey="receiverUserName" type="string" required={true}>
                  The name of the intended Invitation recipient.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createInvitationsIntent.invitations" childKey="receiverUserEmail" type="string" required={true}>
                  The email address of the intended Invitation recipient.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createInvitationsIntent.invitations" childKey="receiverUserTags" type="array" required={true}>
                  A list of tags assigned to the Invitation recipient. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="receiverUserTags details">
                    <NestedParam parentKey="activity.intent.createInvitationsIntent.invitations.receiverUserTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createInvitationsIntent.invitations" childKey="accessType" type="enum" required={true}>
                  accessType field

                  Enum options: `ACCESS_TYPE_WEB`, `ACCESS_TYPE_API`, `ACCESS_TYPE_ALL`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createInvitationsIntent.invitations" childKey="senderUserId" type="string" required={true}>
                  Unique identifier for the Sender of an Invitation.
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="createInvitationsResult" type="object" required={true}>
          The createInvitationsResult object

          <Expandable title="createInvitationsResult details">
            <NestedParam parentKey="activity.result.createInvitationsResult" childKey="invitationIds" type="array" required={true}>
              A list of Invitation IDs

              <Expandable title="invitationIds details">
                <NestedParam parentKey="activity.result.createInvitationsResult.invitationIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/create_invitations \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_CREATE_INVITATIONS",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "invitations": [
              {
                  "receiverUserName": "<string>",
                  "receiverUserEmail": "<string>",
                  "receiverUserTags": [
                      "<string>"
                  ],
                  "accessType": "<ACCESS_TYPE_WEB>",
                  "senderUserId": "<string>"
              }
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().createInvitations({
    invitations: [{ // A list of Invitations.,
      receiverUserName: "<string> (The name of the intended Invitation recipient.)",
      receiverUserEmail: "<string> (The email address of the intended Invitation recipient.)",
      receiverUserTags: ["<string>"] // A list of tags assigned to the Invitation recipient. This field, if not needed, should be an empty array in your request body.,
      accessType: "<ACCESS_TYPE_WEB>" // accessType field,
      senderUserId: "<string> (Unique identifier for the Sender of an Invitation.)",
    }]
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_CREATE_INVITATIONS",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "createInvitationsIntent": {
              "invitations": [
                {
                  "receiverUserName": "<string>",
                  "receiverUserEmail": "<string>",
                  "receiverUserTags": [
                    "<string>"
                  ],
                  "accessType": "<ACCESS_TYPE_WEB>",
                  "senderUserId": "<string>"
                }
              ]
            }
          },
          "result": {
            "createInvitationsResult": {
              "invitationIds": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Create Oauth providers
Source: https://docs.turnkey.com/api-reference/activities/create-oauth-providers

Create Oauth providers for a specified user.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="create_oauth_providers" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="userId" type="string" required={true} default="">
      The ID of the User to add an Oauth provider to
    </NestedParam>

    <ParamField body="oauthProviders" type="array" required={true} path="parameters.oauthProviders">
      <p>A list of Oauth providers.</p>

      <Expandable title="item details">
        <NestedParam parentKey="parameters.oauthProviders" childKey="providerName" type="string" required={true} default="">
          Human-readable name to identify a Provider.
        </NestedParam>

        <NestedParam parentKey="parameters.oauthProviders" childKey="oidcToken" type="string" required={true} default="">
          Base64 encoded OIDC token
        </NestedParam>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="createOauthProvidersIntent" type="object" required={true}>
          The createOauthProvidersIntent object

          <Expandable title="createOauthProvidersIntent details">
            <NestedParam parentKey="activity.intent.createOauthProvidersIntent" childKey="userId" type="string" required={true}>
              The ID of the User to add an Oauth provider to
            </NestedParam>

            <NestedParam parentKey="activity.intent.createOauthProvidersIntent" childKey="oauthProviders" type="array" required={true}>
              A list of Oauth providers.

              <Expandable title="oauthProviders details">
                <NestedParam parentKey="activity.intent.createOauthProvidersIntent.oauthProviders" childKey="providerName" type="string" required={true}>
                  Human-readable name to identify a Provider.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createOauthProvidersIntent.oauthProviders" childKey="oidcToken" type="string" required={true}>
                  Base64 encoded OIDC token
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="createOauthProvidersResult" type="object" required={true}>
          The createOauthProvidersResult object

          <Expandable title="createOauthProvidersResult details">
            <NestedParam parentKey="activity.result.createOauthProvidersResult" childKey="providerIds" type="array" required={true}>
              A list of unique identifiers for Oauth Providers

              <Expandable title="providerIds details">
                <NestedParam parentKey="activity.result.createOauthProvidersResult.providerIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/create_oauth_providers \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "userId": "<string>",
          "oauthProviders": [
              {
                  "providerName": "<string>",
                  "oidcToken": "<string>"
              }
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().createOauthProviders({
    userId: "<string> (The ID of the User to add an Oauth provider to)",
    oauthProviders: [{ // A list of Oauth providers.,
      providerName: "<string> (Human-readable name to identify a Provider.)",
      oidcToken: "<string> (Base64 encoded OIDC token)",
    }]
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "createOauthProvidersIntent": {
              "userId": "<string>",
              "oauthProviders": [
                {
                  "providerName": "<string>",
                  "oidcToken": "<string>"
                }
              ]
            }
          },
          "result": {
            "createOauthProvidersResult": {
              "providerIds": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Create policies
Source: https://docs.turnkey.com/api-reference/activities/create-policies

Create new policies.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="create_policies" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_CREATE_POLICIES`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <ParamField body="policies" type="array" required={true} path="parameters.policies">
      <p>An array of policy intents to be created.</p>

      <Expandable title="item details">
        <NestedParam parentKey="parameters.policies" childKey="policyName" type="string" required={true} default="">
          Human-readable name for a Policy.
        </NestedParam>

        <NestedParam parentKey="parameters.policies" childKey="effect" type="enum<string>" required={true} default="">
          Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
        </NestedParam>

        <NestedParam parentKey="parameters.policies" childKey="condition" type="string" required={false} default="">
          The condition expression that triggers the Effect
        </NestedParam>

        <NestedParam parentKey="parameters.policies" childKey="consensus" type="string" required={false} default="">
          The consensus expression that triggers the Effect
        </NestedParam>

        <NestedParam parentKey="parameters.policies" childKey="notes" type="string" required={false} default="">
          notes field
        </NestedParam>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="createPoliciesIntent" type="object" required={true}>
          The createPoliciesIntent object

          <Expandable title="createPoliciesIntent details">
            <NestedParam parentKey="activity.intent.createPoliciesIntent" childKey="policies" type="array" required={true}>
              An array of policy intents to be created.

              <Expandable title="policies details">
                <NestedParam parentKey="activity.intent.createPoliciesIntent.policies" childKey="policyName" type="string" required={true}>
                  Human-readable name for a Policy.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPoliciesIntent.policies" childKey="effect" type="enum" required={true}>
                  effect field

                  Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPoliciesIntent.policies" childKey="condition" type="string" required={false}>
                  The condition expression that triggers the Effect
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPoliciesIntent.policies" childKey="consensus" type="string" required={false}>
                  The consensus expression that triggers the Effect
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPoliciesIntent.policies" childKey="notes" type="string" required={false}>
                  notes field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="createPoliciesResult" type="object" required={true}>
          The createPoliciesResult object

          <Expandable title="createPoliciesResult details">
            <NestedParam parentKey="activity.result.createPoliciesResult" childKey="policyIds" type="array" required={true}>
              A list of unique identifiers for the created policies.

              <Expandable title="policyIds details">
                <NestedParam parentKey="activity.result.createPoliciesResult.policyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/create_policies \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_CREATE_POLICIES",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "policies": [
              {
                  "policyName": "<string>",
                  "effect": "<EFFECT_ALLOW>",
                  "condition": "<string>",
                  "consensus": "<string>",
                  "notes": "<string>"
              }
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().createPolicies({
    policies: [{ // An array of policy intents to be created.,
      policyName: "<string> (Human-readable name for a Policy.)",
      effect: "<EFFECT_ALLOW>" // effect field,
      condition: "<string> (The condition expression that triggers the Effect)",
      consensus: "<string> (The consensus expression that triggers the Effect)",
      notes: "<string> (notes field)",
    }]
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_CREATE_POLICIES",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "createPoliciesIntent": {
              "policies": [
                {
                  "policyName": "<string>",
                  "effect": "<EFFECT_ALLOW>",
                  "condition": "<string>",
                  "consensus": "<string>",
                  "notes": "<string>"
                }
              ]
            }
          },
          "result": {
            "createPoliciesResult": {
              "policyIds": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Create policy
Source: https://docs.turnkey.com/api-reference/activities/create-policy

Create a new policy.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="create_policy" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_CREATE_POLICY_V3`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="policyName" type="string" required={true} default="">
      Human-readable name for a Policy.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="effect" type="enum<string>" required={true} default="">
      Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="condition" type="string" required={false} default="">
      The condition expression that triggers the Effect
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="consensus" type="string" required={false} default="">
      The consensus expression that triggers the Effect
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="notes" type="string" required={false} default="">
      notes field
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="createPolicyIntentV3" type="object" required={true}>
          The createPolicyIntentV3 object

          <Expandable title="createPolicyIntentV3 details">
            <NestedParam parentKey="activity.intent.createPolicyIntentV3" childKey="policyName" type="string" required={true}>
              Human-readable name for a Policy.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createPolicyIntentV3" childKey="effect" type="enum" required={true}>
              effect field

              Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
            </NestedParam>

            <NestedParam parentKey="activity.intent.createPolicyIntentV3" childKey="condition" type="string" required={false}>
              The condition expression that triggers the Effect
            </NestedParam>

            <NestedParam parentKey="activity.intent.createPolicyIntentV3" childKey="consensus" type="string" required={false}>
              The consensus expression that triggers the Effect
            </NestedParam>

            <NestedParam parentKey="activity.intent.createPolicyIntentV3" childKey="notes" type="string" required={false}>
              notes field
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="createPolicyResult" type="object" required={true}>
          The createPolicyResult object

          <Expandable title="createPolicyResult details">
            <NestedParam parentKey="activity.result.createPolicyResult" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/create_policy \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_CREATE_POLICY_V3",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "policyName": "<string>",
          "effect": "<EFFECT_ALLOW>",
          "condition": "<string>",
          "consensus": "<string>",
          "notes": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().createPolicy({
    policyName: "<string> (Human-readable name for a Policy.)",
    effect: "<EFFECT_ALLOW>" // effect field,
    condition: "<string> (The condition expression that triggers the Effect)",
    consensus: "<string> (The consensus expression that triggers the Effect)",
    notes: "<string> (notes field)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_CREATE_POLICY_V3",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "createPolicyIntentV3": {
              "policyName": "<string>",
              "effect": "<EFFECT_ALLOW>",
              "condition": "<string>",
              "consensus": "<string>",
              "notes": "<string>"
            }
          },
          "result": {
            "createPolicyResult": {
              "policyId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Create private key tag
Source: https://docs.turnkey.com/api-reference/activities/create-private-key-tag

Create a private key tag and add it to private keys.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="create_private_key_tag" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="privateKeyTagName" type="string" required={true} default="">
      Human-readable name for a Private Key Tag.
    </NestedParam>

    <ParamField body="privateKeyIds" type="array" required={true} path="parameters.privateKeyIds">
      <p>A list of Private Key IDs.</p>

      <Expandable title="item details">
        <p>Array item type: <code>string</code></p>
        <p>item field</p>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="createPrivateKeyTagIntent" type="object" required={true}>
          The createPrivateKeyTagIntent object

          <Expandable title="createPrivateKeyTagIntent details">
            <NestedParam parentKey="activity.intent.createPrivateKeyTagIntent" childKey="privateKeyTagName" type="string" required={true}>
              Human-readable name for a Private Key Tag.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createPrivateKeyTagIntent" childKey="privateKeyIds" type="array" required={true}>
              A list of Private Key IDs.

              <Expandable title="privateKeyIds details">
                <NestedParam parentKey="activity.intent.createPrivateKeyTagIntent.privateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="createPrivateKeyTagResult" type="object" required={true}>
          The createPrivateKeyTagResult object

          <Expandable title="createPrivateKeyTagResult details">
            <NestedParam parentKey="activity.result.createPrivateKeyTagResult" childKey="privateKeyTagId" type="string" required={true}>
              Unique identifier for a given Private Key Tag.
            </NestedParam>

            <NestedParam parentKey="activity.result.createPrivateKeyTagResult" childKey="privateKeyIds" type="array" required={true}>
              A list of Private Key IDs.

              <Expandable title="privateKeyIds details">
                <NestedParam parentKey="activity.result.createPrivateKeyTagResult.privateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/create_private_key_tag \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "privateKeyTagName": "<string>",
          "privateKeyIds": [
              "<string>"
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().createPrivateKeyTag({
    privateKeyTagName: "<string> (Human-readable name for a Private Key Tag.)",
    privateKeyIds: ["<string>"] // A list of Private Key IDs.
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "createPrivateKeyTagIntent": {
              "privateKeyTagName": "<string>",
              "privateKeyIds": [
                "<string>"
              ]
            }
          },
          "result": {
            "createPrivateKeyTagResult": {
              "privateKeyTagId": "<string>",
              "privateKeyIds": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Create private keys
Source: https://docs.turnkey.com/api-reference/activities/create-private-keys

Create new private keys.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="create_private_keys" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <ParamField body="privateKeys" type="array" required={true} path="parameters.privateKeys">
      <p>A list of Private Keys.</p>

      <Expandable title="item details">
        <NestedParam parentKey="parameters.privateKeys" childKey="privateKeyName" type="string" required={true} default="">
          Human-readable name for a Private Key.
        </NestedParam>

        <NestedParam parentKey="parameters.privateKeys" childKey="curve" type="enum<string>" required={true} default="">
          Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
        </NestedParam>

        <ParamField body="privateKeyTags" type="array" required={true} path="parameters.privateKeys.privateKeyTags">
          <p>A list of Private Key Tag IDs. This field, if not needed, should be an empty array in your request body.</p>

          <Expandable title="item details">
            <p>Array item type: <code>string</code></p>
            <p>item field</p>
          </Expandable>
        </ParamField>

        <NestedParam parentKey="parameters.privateKeys" childKey="addressFormats" type="enum<string[]>" required={true} default="">
          Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
        </NestedParam>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="createPrivateKeysIntentV2" type="object" required={true}>
          The createPrivateKeysIntentV2 object

          <Expandable title="createPrivateKeysIntentV2 details">
            <NestedParam parentKey="activity.intent.createPrivateKeysIntentV2" childKey="privateKeys" type="array" required={true}>
              A list of Private Keys.

              <Expandable title="privateKeys details">
                <NestedParam parentKey="activity.intent.createPrivateKeysIntentV2.privateKeys" childKey="privateKeyName" type="string" required={true}>
                  Human-readable name for a Private Key.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPrivateKeysIntentV2.privateKeys" childKey="curve" type="enum" required={true}>
                  curve field

                  Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPrivateKeysIntentV2.privateKeys" childKey="privateKeyTags" type="array" required={true}>
                  A list of Private Key Tag IDs. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="privateKeyTags details">
                    <NestedParam parentKey="activity.intent.createPrivateKeysIntentV2.privateKeys.privateKeyTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPrivateKeysIntentV2.privateKeys" childKey="addressFormats" type="array" required={true}>
                  Cryptocurrency-specific formats for a derived address (e.g., Ethereum).

                  <Expandable title="addressFormats details">
                    <NestedParam parentKey="activity.intent.createPrivateKeysIntentV2.privateKeys.addressFormats" childKey="item" type="enum" required={true}>
                      item field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="createPrivateKeysResultV2" type="object" required={true}>
          The createPrivateKeysResultV2 object

          <Expandable title="createPrivateKeysResultV2 details">
            <NestedParam parentKey="activity.result.createPrivateKeysResultV2" childKey="privateKeys" type="array" required={true}>
              A list of Private Key IDs and addresses.

              <Expandable title="privateKeys details">
                <NestedParam parentKey="activity.result.createPrivateKeysResultV2.privateKeys" childKey="privateKeyId" type="string" required={false}>
                  privateKeyId field
                </NestedParam>

                <NestedParam parentKey="activity.result.createPrivateKeysResultV2.privateKeys" childKey="addresses" type="array" required={false}>
                  addresses field

                  <Expandable title="addresses details">
                    <NestedParam parentKey="activity.result.createPrivateKeysResultV2.privateKeys.addresses" childKey="format" type="enum" required={false}>
                      format field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>

                    <NestedParam parentKey="activity.result.createPrivateKeysResultV2.privateKeys.addresses" childKey="address" type="string" required={false}>
                      address field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/create_private_keys \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "privateKeys": [
              {
                  "privateKeyName": "<string>",
                  "curve": "<CURVE_SECP256K1>",
                  "privateKeyTags": [
                      "<string>"
                  ],
                  "addressFormats": [
                      "<ADDRESS_FORMAT_UNCOMPRESSED>"
                  ]
              }
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().createPrivateKeys({
    privateKeys: [{ // A list of Private Keys.,
      privateKeyName: "<string> (Human-readable name for a Private Key.)",
      curve: "<CURVE_SECP256K1>" // curve field,
      privateKeyTags: ["<string>"] // A list of Private Key Tag IDs. This field, if not needed, should be an empty array in your request body.,
      addressFormats: "<ADDRESS_FORMAT_UNCOMPRESSED>" // Cryptocurrency-specific formats for a derived address (e.g., Ethereum).,
    }]
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "createPrivateKeysIntentV2": {
              "privateKeys": [
                {
                  "privateKeyName": "<string>",
                  "curve": "<CURVE_SECP256K1>",
                  "privateKeyTags": [
                    "<string>"
                  ],
                  "addressFormats": [
                    "<ADDRESS_FORMAT_UNCOMPRESSED>"
                  ]
                }
              ]
            }
          },
          "result": {
            "createPrivateKeysResultV2": {
              "privateKeys": [
                {
                  "privateKeyId": "<string>",
                  "addresses": [
                    {
                      "format": "<ADDRESS_FORMAT_UNCOMPRESSED>",
                      "address": "<string>"
                    }
                  ]
                }
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Create read only session
Source: https://docs.turnkey.com/api-reference/activities/create-read-only-session

Create a read only session for a user (valid for 1 hour).

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="create_read_only_session" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true}>
  The parameters object containing the specific intent data for this activity.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="createReadOnlySessionIntent" type="object" required={true}>
          The createReadOnlySessionIntent object
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="createReadOnlySessionResult" type="object" required={true}>
          The createReadOnlySessionResult object

          <Expandable title="createReadOnlySessionResult details">
            <NestedParam parentKey="activity.result.createReadOnlySessionResult" childKey="organizationId" type="string" required={true}>
              Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadOnlySessionResult" childKey="organizationName" type="string" required={true}>
              Human-readable name for an Organization.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadOnlySessionResult" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadOnlySessionResult" childKey="username" type="string" required={true}>
              Human-readable name for a User.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadOnlySessionResult" childKey="session" type="string" required={true}>
              String representing a read only session
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadOnlySessionResult" childKey="sessionExpiry" type="string" required={true}>
              UTC timestamp in seconds representing the expiry time for the read only session.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/create_read_only_session \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {}
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().createReadOnlySession({});
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "createReadOnlySessionIntent": {}
          },
          "result": {
            "createReadOnlySessionResult": {
              "organizationId": "<string>",
              "organizationName": "<string>",
              "userId": "<string>",
              "username": "<string>",
              "session": "<string>",
              "sessionExpiry": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Create read write session
Source: https://docs.turnkey.com/api-reference/activities/create-read-write-session

Create a read write session for a user.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="create_read_write_session" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="targetPublicKey" type="string" required={true} default="">
      Client-side public key generated by the user, to which the read write session bundle (credentials) will be encrypted.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="userId" type="string" required={false} default="">
      Unique identifier for a given User.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="apiKeyName" type="string" required={false} default="">
      Optional human-readable name for an API Key. If none provided, default to Read Write Session - \<Timestamp>
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="expirationSeconds" type="string" required={false} default="">
      Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="invalidateExisting" type="boolean" required={false} default="">
      Invalidate all other previously generated ReadWriteSession API keys
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="createReadWriteSessionIntentV2" type="object" required={true}>
          The createReadWriteSessionIntentV2 object

          <Expandable title="createReadWriteSessionIntentV2 details">
            <NestedParam parentKey="activity.intent.createReadWriteSessionIntentV2" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the read write session bundle (credentials) will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createReadWriteSessionIntentV2" childKey="userId" type="string" required={false}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createReadWriteSessionIntentV2" childKey="apiKeyName" type="string" required={false}>
              Optional human-readable name for an API Key. If none provided, default to Read Write Session - \<Timestamp>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createReadWriteSessionIntentV2" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createReadWriteSessionIntentV2" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated ReadWriteSession API keys
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="createReadWriteSessionResultV2" type="object" required={true}>
          The createReadWriteSessionResultV2 object

          <Expandable title="createReadWriteSessionResultV2 details">
            <NestedParam parentKey="activity.result.createReadWriteSessionResultV2" childKey="organizationId" type="string" required={true}>
              Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadWriteSessionResultV2" childKey="organizationName" type="string" required={true}>
              Human-readable name for an Organization.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadWriteSessionResultV2" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadWriteSessionResultV2" childKey="username" type="string" required={true}>
              Human-readable name for a User.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadWriteSessionResultV2" childKey="apiKeyId" type="string" required={true}>
              Unique identifier for the created API key.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadWriteSessionResultV2" childKey="credentialBundle" type="string" required={true}>
              HPKE encrypted credential bundle
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/create_read_write_session \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "targetPublicKey": "<string>",
          "userId": "<string>",
          "apiKeyName": "<string>",
          "expirationSeconds": "<string>",
          "invalidateExisting": "<boolean>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().createReadWriteSession({
    targetPublicKey: "<string> (Client-side public key generated by the user, to which the read write session bundle (credentials) will be encrypted.)",
    userId: "<string> (Unique identifier for a given User.)",
    apiKeyName: "<string> (Optional human-readable name for an API Key. If none provided, default to Read Write Session - <Timestamp>)",
    expirationSeconds: "<string> (Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.)",
    invalidateExisting: true // Invalidate all other previously generated ReadWriteSession API keys
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "createReadWriteSessionIntentV2": {
              "targetPublicKey": "<string>",
              "userId": "<string>",
              "apiKeyName": "<string>",
              "expirationSeconds": "<string>",
              "invalidateExisting": "<boolean>"
            }
          },
          "result": {
            "createReadWriteSessionResultV2": {
              "organizationId": "<string>",
              "organizationName": "<string>",
              "userId": "<string>",
              "username": "<string>",
              "apiKeyId": "<string>",
              "credentialBundle": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Create smart contract interface
Source: https://docs.turnkey.com/api-reference/activities/create-smart-contract-interface

Create an ABI/IDL in JSON.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="create_smart_contract_interface" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_CREATE_SMART_CONTRACT_INTERFACE`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="smartContractAddress" type="string" required={true} default="">
      Corresponding contract address or program ID
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="smartContractInterface" type="string" required={true} default="">
      ABI/IDL as a JSON string
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="type" type="enum<string>" required={true} default="">
      Enum options: `SMART_CONTRACT_INTERFACE_TYPE_ETHEREUM`, `SMART_CONTRACT_INTERFACE_TYPE_SOLANA`
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="label" type="string" required={true} default="">
      Human-readable name for a Smart Contract Interface.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="notes" type="string" required={false} default="">
      Notes for a Smart Contract Interface.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="createSmartContractInterfaceIntent" type="object" required={true}>
          The createSmartContractInterfaceIntent object

          <Expandable title="createSmartContractInterfaceIntent details">
            <NestedParam parentKey="activity.intent.createSmartContractInterfaceIntent" childKey="smartContractAddress" type="string" required={true}>
              Corresponding contract address or program ID
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSmartContractInterfaceIntent" childKey="smartContractInterface" type="string" required={true}>
              ABI/IDL as a JSON string
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSmartContractInterfaceIntent" childKey="type" type="enum" required={true}>
              type field

              Enum options: `SMART_CONTRACT_INTERFACE_TYPE_ETHEREUM`, `SMART_CONTRACT_INTERFACE_TYPE_SOLANA`
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSmartContractInterfaceIntent" childKey="label" type="string" required={true}>
              Human-readable name for a Smart Contract Interface.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSmartContractInterfaceIntent" childKey="notes" type="string" required={false}>
              Notes for a Smart Contract Interface.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="createSmartContractInterfaceResult" type="object" required={true}>
          The createSmartContractInterfaceResult object

          <Expandable title="createSmartContractInterfaceResult details">
            <NestedParam parentKey="activity.result.createSmartContractInterfaceResult" childKey="smartContractInterfaceId" type="string" required={true}>
              The ID of the created Smart Contract Interface.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/create_smart_contract_interface \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_CREATE_SMART_CONTRACT_INTERFACE",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "smartContractAddress": "<string>",
          "smartContractInterface": "<string>",
          "type": "<SMART_CONTRACT_INTERFACE_TYPE_ETHEREUM>",
          "label": "<string>",
          "notes": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().createSmartContractInterface({
    smartContractAddress: "<string> (Corresponding contract address or program ID)",
    smartContractInterface: "<string> (ABI/IDL as a JSON string)",
    type: "<SMART_CONTRACT_INTERFACE_TYPE_ETHEREUM>" // type field,
    label: "<string> (Human-readable name for a Smart Contract Interface.)",
    notes: "<string> (Notes for a Smart Contract Interface.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_CREATE_SMART_CONTRACT_INTERFACE",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "createSmartContractInterfaceIntent": {
              "smartContractAddress": "<string>",
              "smartContractInterface": "<string>",
              "type": "<SMART_CONTRACT_INTERFACE_TYPE_ETHEREUM>",
              "label": "<string>",
              "notes": "<string>"
            }
          },
          "result": {
            "createSmartContractInterfaceResult": {
              "smartContractInterfaceId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Create sub-organization
Source: https://docs.turnkey.com/api-reference/activities/create-sub-organization

Create a new sub-organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="create_sub_organization" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="subOrganizationName" type="string" required={true} default="">
      Name for this sub-organization
    </NestedParam>

    <ParamField body="rootUsers" type="array" required={true} path="parameters.rootUsers">
      <p>Root users to create within this sub-organization</p>

      <Expandable title="item details">
        <NestedParam parentKey="parameters.rootUsers" childKey="userName" type="string" required={true} default="">
          Human-readable name for a User.
        </NestedParam>

        <NestedParam parentKey="parameters.rootUsers" childKey="userEmail" type="string" required={false} default="">
          The user's email address.
        </NestedParam>

        <NestedParam parentKey="parameters.rootUsers" childKey="userPhoneNumber" type="string" required={false} default="">
          The user's phone number in E.164 format e.g. +13214567890
        </NestedParam>

        <ParamField body="apiKeys" type="array" required={true} path="parameters.rootUsers.apiKeys">
          <p>A list of API Key parameters. This field, if not needed, should be an empty array in your request body.</p>

          <Expandable title="item details">
            <NestedParam parentKey="parameters.rootUsers.apiKeys" childKey="apiKeyName" type="string" required={true} default="">
              Human-readable name for an API Key.
            </NestedParam>

            <NestedParam parentKey="parameters.rootUsers.apiKeys" childKey="publicKey" type="string" required={true} default="">
              The public component of a cryptographic key pair used to sign messages and transactions.
            </NestedParam>

            <NestedParam parentKey="parameters.rootUsers.apiKeys" childKey="curveType" type="enum<string>" required={true} default="">
              Enum options: `API_KEY_CURVE_P256`, `API_KEY_CURVE_SECP256K1`, `API_KEY_CURVE_ED25519`
            </NestedParam>

            <NestedParam parentKey="parameters.rootUsers.apiKeys" childKey="expirationSeconds" type="string" required={false} default="">
              Optional window (in seconds) indicating how long the API Key should last.
            </NestedParam>
          </Expandable>
        </ParamField>

        <ParamField body="authenticators" type="array" required={true} path="parameters.rootUsers.authenticators">
          <p>A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.</p>

          <Expandable title="item details">
            <NestedParam parentKey="parameters.rootUsers.authenticators" childKey="authenticatorName" type="string" required={true} default="">
              Human-readable name for an Authenticator.
            </NestedParam>

            <NestedParam parentKey="parameters.rootUsers.authenticators" childKey="challenge" type="string" required={true} default="">
              Challenge presented for authentication purposes.
            </NestedParam>

            <ParamField body="attestation" type="object" required={true} path="parameters.rootUsers.authenticators.attestation">
              <p>attestation field</p>

              <Expandable title="details">
                <NestedParam parentKey="parameters.rootUsers.authenticators.attestation" childKey="credentialId" type="string" required={true} default="">
                  The cbor encoded then base64 url encoded id of the credential.
                </NestedParam>

                <NestedParam parentKey="parameters.rootUsers.authenticators.attestation" childKey="clientDataJson" type="string" required={true} default="">
                  A base64 url encoded payload containing metadata about the signing context and the challenge.
                </NestedParam>

                <NestedParam parentKey="parameters.rootUsers.authenticators.attestation" childKey="attestationObject" type="string" required={true} default="">
                  A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                </NestedParam>

                <NestedParam parentKey="parameters.rootUsers.authenticators.attestation" childKey="transports" type="enum<string[]>" required={true} default="">
                  Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                </NestedParam>
              </Expandable>
            </ParamField>
          </Expandable>
        </ParamField>

        <ParamField body="oauthProviders" type="array" required={true} path="parameters.rootUsers.oauthProviders">
          <p>A list of Oauth providers. This field, if not needed, should be an empty array in your request body.</p>

          <Expandable title="item details">
            <NestedParam parentKey="parameters.rootUsers.oauthProviders" childKey="providerName" type="string" required={true} default="">
              Human-readable name to identify a Provider.
            </NestedParam>

            <NestedParam parentKey="parameters.rootUsers.oauthProviders" childKey="oidcToken" type="string" required={true} default="">
              Base64 encoded OIDC token
            </NestedParam>
          </Expandable>
        </ParamField>
      </Expandable>
    </ParamField>

    <NestedParam parentKey="parameters" childKey="rootQuorumThreshold" type="number" required={true} default="">
      The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
    </NestedParam>

    <ParamField body="wallet" type="object" required={false} path="parameters.wallet">
      <p>wallet field</p>

      <Expandable title="details">
        <NestedParam parentKey="parameters.wallet" childKey="walletName" type="string" required={true} default="">
          Human-readable name for a Wallet.
        </NestedParam>

        <ParamField body="accounts" type="array" required={true} path="parameters.wallet.accounts">
          <p>A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.</p>

          <Expandable title="item details">
            <NestedParam parentKey="parameters.wallet.accounts" childKey="curve" type="enum<string>" required={true} default="">
              Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
            </NestedParam>

            <NestedParam parentKey="parameters.wallet.accounts" childKey="pathFormat" type="enum<string>" required={true} default="">
              Enum options: `PATH_FORMAT_BIP32`
            </NestedParam>

            <NestedParam parentKey="parameters.wallet.accounts" childKey="path" type="string" required={true} default="">
              Path used to generate a wallet Account.
            </NestedParam>

            <NestedParam parentKey="parameters.wallet.accounts" childKey="addressFormat" type="enum<string>" required={true} default="">
              Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
            </NestedParam>
          </Expandable>
        </ParamField>

        <NestedParam parentKey="parameters.wallet" childKey="mnemonicLength" type="number" required={false} default="">
          Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
        </NestedParam>
      </Expandable>
    </ParamField>

    <NestedParam parentKey="parameters" childKey="disableEmailRecovery" type="boolean" required={false} default="">
      Disable email recovery for the sub-organization
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="disableEmailAuth" type="boolean" required={false} default="">
      Disable email auth for the sub-organization
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="disableSmsAuth" type="boolean" required={false} default="">
      Disable OTP SMS auth for the sub-organization
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="disableOtpEmailAuth" type="boolean" required={false} default="">
      Disable OTP email auth for the sub-organization
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="createSubOrganizationIntentV7" type="object" required={true}>
          The createSubOrganizationIntentV7 object

          <Expandable title="createSubOrganizationIntentV7 details">
            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7" childKey="subOrganizationName" type="string" required={true}>
              Name for this sub-organization
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7" childKey="rootUsers" type="array" required={true}>
              Root users to create within this sub-organization

              <Expandable title="rootUsers details">
                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers" childKey="userPhoneNumber" type="string" required={false}>
                  The user's phone number in E.164 format e.g. +13214567890
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.apiKeys" childKey="curveType" type="enum" required={true}>
                      curveType field

                      Enum options: `API_KEY_CURVE_P256`, `API_KEY_CURVE_SECP256K1`, `API_KEY_CURVE_ED25519`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers" childKey="oauthProviders" type="array" required={true}>
                  A list of Oauth providers. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="oauthProviders details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.oauthProviders" childKey="providerName" type="string" required={true}>
                      Human-readable name to identify a Provider.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.oauthProviders" childKey="oidcToken" type="string" required={true}>
                      Base64 encoded OIDC token
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7" childKey="rootQuorumThreshold" type="number" required={true}>
              The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.wallet" childKey="walletName" type="string" required={true}>
                  Human-readable name for a Wallet.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.wallet" childKey="accounts" type="array" required={true}>
                  A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="accounts details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.wallet.accounts" childKey="curve" type="enum" required={true}>
                      curve field

                      Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.wallet.accounts" childKey="pathFormat" type="enum" required={true}>
                      pathFormat field

                      Enum options: `PATH_FORMAT_BIP32`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.wallet.accounts" childKey="path" type="string" required={true}>
                      Path used to generate a wallet Account.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.wallet.accounts" childKey="addressFormat" type="enum" required={true}>
                      addressFormat field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.wallet" childKey="mnemonicLength" type="number" required={false}>
                  Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7" childKey="disableEmailRecovery" type="boolean" required={false}>
              Disable email recovery for the sub-organization
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7" childKey="disableEmailAuth" type="boolean" required={false}>
              Disable email auth for the sub-organization
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7" childKey="disableSmsAuth" type="boolean" required={false}>
              Disable OTP SMS auth for the sub-organization
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7" childKey="disableOtpEmailAuth" type="boolean" required={false}>
              Disable OTP email auth for the sub-organization
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="createSubOrganizationResultV7" type="object" required={true}>
          The createSubOrganizationResultV7 object

          <Expandable title="createSubOrganizationResultV7 details">
            <NestedParam parentKey="activity.result.createSubOrganizationResultV7" childKey="subOrganizationId" type="string" required={true}>
              subOrganizationId field
            </NestedParam>

            <NestedParam parentKey="activity.result.createSubOrganizationResultV7" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activity.result.createSubOrganizationResultV7.wallet" childKey="walletId" type="string" required={true}>
                  walletId field
                </NestedParam>

                <NestedParam parentKey="activity.result.createSubOrganizationResultV7.wallet" childKey="addresses" type="array" required={true}>
                  A list of account addresses.

                  <Expandable title="addresses details">
                    <NestedParam parentKey="activity.result.createSubOrganizationResultV7.wallet.addresses" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.result.createSubOrganizationResultV7" childKey="rootUserIds" type="array" required={false}>
              rootUserIds field

              <Expandable title="rootUserIds details">
                <NestedParam parentKey="activity.result.createSubOrganizationResultV7.rootUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/create_sub_organization \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "subOrganizationName": "<string>",
          "rootUsers": [
              {
                  "userName": "<string>",
                  "userEmail": "<string>",
                  "userPhoneNumber": "<string>",
                  "apiKeys": [
                      {
                          "apiKeyName": "<string>",
                          "publicKey": "<string>",
                          "curveType": "<API_KEY_CURVE_P256>",
                          "expirationSeconds": "<string>"
                      }
                  ],
                  "authenticators": [
                      {
                          "authenticatorName": "<string>",
                          "challenge": "<string>",
                          "attestation": {
                              "credentialId": "<string>",
                              "clientDataJson": "<string>",
                              "attestationObject": "<string>",
                              "transports": [
                                  "<AUTHENTICATOR_TRANSPORT_BLE>"
                              ]
                          }
                      }
                  ],
                  "oauthProviders": [
                      {
                          "providerName": "<string>",
                          "oidcToken": "<string>"
                      }
                  ]
              }
          ],
          "rootQuorumThreshold": "<number>",
          "wallet": {
              "walletName": "<string>",
              "accounts": [
                  {
                      "curve": "<CURVE_SECP256K1>",
                      "pathFormat": "<PATH_FORMAT_BIP32>",
                      "path": "<string>",
                      "addressFormat": "<ADDRESS_FORMAT_UNCOMPRESSED>"
                  }
              ],
              "mnemonicLength": "<number>"
          },
          "disableEmailRecovery": "<boolean>",
          "disableEmailAuth": "<boolean>",
          "disableSmsAuth": "<boolean>",
          "disableOtpEmailAuth": "<boolean>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().createSubOrganization({
    subOrganizationName: "<string> (Name for this sub-organization)",
    rootUsers: [{ // Root users to create within this sub-organization,
      userName: "<string> (Human-readable name for a User.)",
      userEmail: "<string> (The user's email address.)",
      userPhoneNumber: "<string> (The user's phone number in E.164 format e.g. +13214567890)",
      apiKeys: [{ // A list of API Key parameters. This field, if not needed, should be an empty array in your request body.,
        apiKeyName: "<string> (Human-readable name for an API Key.)",
        publicKey: "<string> (The public component of a cryptographic key pair used to sign messages and transactions.)",
        curveType: "<API_KEY_CURVE_P256>" // curveType field,
        expirationSeconds: "<string> (Optional window (in seconds) indicating how long the API Key should last.)",
      }],
      authenticators: [{ // A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.,
        authenticatorName: "<string> (Human-readable name for an Authenticator.)",
        challenge: "<string> (Challenge presented for authentication purposes.)",
        attestation: { // attestation field,
          credentialId: "<string> (The cbor encoded then base64 url encoded id of the credential.)",
          clientDataJson: "<string> (A base64 url encoded payload containing metadata about the signing context and the challenge.)",
          attestationObject: "<string> (A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.)",
          transports: "<AUTHENTICATOR_TRANSPORT_BLE>" // The type of authenticator transports.,
        },
      }],
      oauthProviders: [{ // A list of Oauth providers. This field, if not needed, should be an empty array in your request body.,
        providerName: "<string> (Human-readable name to identify a Provider.)",
        oidcToken: "<string> (Base64 encoded OIDC token)",
      }],
    }],
    rootQuorumThreshold: 0 // The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users,
    wallet: { // wallet field,
      walletName: "<string> (Human-readable name for a Wallet.)",
      accounts: [{ // A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.,
        curve: "<CURVE_SECP256K1>" // curve field,
        pathFormat: "<PATH_FORMAT_BIP32>" // pathFormat field,
        path: "<string> (Path used to generate a wallet Account.)",
        addressFormat: "<ADDRESS_FORMAT_UNCOMPRESSED>" // addressFormat field,
      }],
      mnemonicLength: 0 // Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.,
    },
    disableEmailRecovery: true // Disable email recovery for the sub-organization,
    disableEmailAuth: true // Disable email auth for the sub-organization,
    disableSmsAuth: true // Disable OTP SMS auth for the sub-organization,
    disableOtpEmailAuth: true // Disable OTP email auth for the sub-organization
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "createSubOrganizationIntentV7": {
              "subOrganizationName": "<string>",
              "rootUsers": [
                {
                  "userName": "<string>",
                  "userEmail": "<string>",
                  "userPhoneNumber": "<string>",
                  "apiKeys": [
                    {
                      "apiKeyName": "<string>",
                      "publicKey": "<string>",
                      "curveType": "<API_KEY_CURVE_P256>",
                      "expirationSeconds": "<string>"
                    }
                  ],
                  "authenticators": [
                    {
                      "authenticatorName": "<string>",
                      "challenge": "<string>",
                      "attestation": {
                        "credentialId": "<string>",
                        "clientDataJson": "<string>",
                        "attestationObject": "<string>",
                        "transports": [
                          "<AUTHENTICATOR_TRANSPORT_BLE>"
                        ]
                      }
                    }
                  ],
                  "oauthProviders": [
                    {
                      "providerName": "<string>",
                      "oidcToken": "<string>"
                    }
                  ]
                }
              ],
              "rootQuorumThreshold": "<number>",
              "wallet": {
                "walletName": "<string>",
                "accounts": [
                  {
                    "curve": "<CURVE_SECP256K1>",
                    "pathFormat": "<PATH_FORMAT_BIP32>",
                    "path": "<string>",
                    "addressFormat": "<ADDRESS_FORMAT_UNCOMPRESSED>"
                  }
                ],
                "mnemonicLength": "<number>"
              },
              "disableEmailRecovery": "<boolean>",
              "disableEmailAuth": "<boolean>",
              "disableSmsAuth": "<boolean>",
              "disableOtpEmailAuth": "<boolean>"
            }
          },
          "result": {
            "createSubOrganizationResultV7": {
              "subOrganizationId": "<string>",
              "wallet": {
                "walletId": "<string>",
                "addresses": [
                  "<string>"
                ]
              },
              "rootUserIds": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Create user tag
Source: https://docs.turnkey.com/api-reference/activities/create-user-tag

Create a user tag and add it to users.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="create_user_tag" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_CREATE_USER_TAG`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="userTagName" type="string" required={true} default="">
      Human-readable name for a User Tag.
    </NestedParam>

    <ParamField body="userIds" type="array" required={true} path="parameters.userIds">
      <p>A list of User IDs.</p>

      <Expandable title="item details">
        <p>Array item type: <code>string</code></p>
        <p>item field</p>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="createUserTagIntent" type="object" required={true}>
          The createUserTagIntent object

          <Expandable title="createUserTagIntent details">
            <NestedParam parentKey="activity.intent.createUserTagIntent" childKey="userTagName" type="string" required={true}>
              Human-readable name for a User Tag.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createUserTagIntent" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activity.intent.createUserTagIntent.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="createUserTagResult" type="object" required={true}>
          The createUserTagResult object

          <Expandable title="createUserTagResult details">
            <NestedParam parentKey="activity.result.createUserTagResult" childKey="userTagId" type="string" required={true}>
              Unique identifier for a given User Tag.
            </NestedParam>

            <NestedParam parentKey="activity.result.createUserTagResult" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activity.result.createUserTagResult.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/create_user_tag \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_CREATE_USER_TAG",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "userTagName": "<string>",
          "userIds": [
              "<string>"
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().createUserTag({
    userTagName: "<string> (Human-readable name for a User Tag.)",
    userIds: ["<string>"] // A list of User IDs.
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_CREATE_USER_TAG",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "createUserTagIntent": {
              "userTagName": "<string>",
              "userIds": [
                "<string>"
              ]
            }
          },
          "result": {
            "createUserTagResult": {
              "userTagId": "<string>",
              "userIds": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Create users
Source: https://docs.turnkey.com/api-reference/activities/create-users

Create users in an existing organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="create_users" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_CREATE_USERS_V3`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <ParamField body="users" type="array" required={true} path="parameters.users">
      <p>A list of Users.</p>

      <Expandable title="item details">
        <NestedParam parentKey="parameters.users" childKey="userName" type="string" required={true} default="">
          Human-readable name for a User.
        </NestedParam>

        <NestedParam parentKey="parameters.users" childKey="userEmail" type="string" required={false} default="">
          The user's email address.
        </NestedParam>

        <NestedParam parentKey="parameters.users" childKey="userPhoneNumber" type="string" required={false} default="">
          The user's phone number in E.164 format e.g. +13214567890
        </NestedParam>

        <ParamField body="apiKeys" type="array" required={true} path="parameters.users.apiKeys">
          <p>A list of API Key parameters. This field, if not needed, should be an empty array in your request body.</p>

          <Expandable title="item details">
            <NestedParam parentKey="parameters.users.apiKeys" childKey="apiKeyName" type="string" required={true} default="">
              Human-readable name for an API Key.
            </NestedParam>

            <NestedParam parentKey="parameters.users.apiKeys" childKey="publicKey" type="string" required={true} default="">
              The public component of a cryptographic key pair used to sign messages and transactions.
            </NestedParam>

            <NestedParam parentKey="parameters.users.apiKeys" childKey="curveType" type="enum<string>" required={true} default="">
              Enum options: `API_KEY_CURVE_P256`, `API_KEY_CURVE_SECP256K1`, `API_KEY_CURVE_ED25519`
            </NestedParam>

            <NestedParam parentKey="parameters.users.apiKeys" childKey="expirationSeconds" type="string" required={false} default="">
              Optional window (in seconds) indicating how long the API Key should last.
            </NestedParam>
          </Expandable>
        </ParamField>

        <ParamField body="authenticators" type="array" required={true} path="parameters.users.authenticators">
          <p>A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.</p>

          <Expandable title="item details">
            <NestedParam parentKey="parameters.users.authenticators" childKey="authenticatorName" type="string" required={true} default="">
              Human-readable name for an Authenticator.
            </NestedParam>

            <NestedParam parentKey="parameters.users.authenticators" childKey="challenge" type="string" required={true} default="">
              Challenge presented for authentication purposes.
            </NestedParam>

            <ParamField body="attestation" type="object" required={true} path="parameters.users.authenticators.attestation">
              <p>attestation field</p>

              <Expandable title="details">
                <NestedParam parentKey="parameters.users.authenticators.attestation" childKey="credentialId" type="string" required={true} default="">
                  The cbor encoded then base64 url encoded id of the credential.
                </NestedParam>

                <NestedParam parentKey="parameters.users.authenticators.attestation" childKey="clientDataJson" type="string" required={true} default="">
                  A base64 url encoded payload containing metadata about the signing context and the challenge.
                </NestedParam>

                <NestedParam parentKey="parameters.users.authenticators.attestation" childKey="attestationObject" type="string" required={true} default="">
                  A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                </NestedParam>

                <NestedParam parentKey="parameters.users.authenticators.attestation" childKey="transports" type="enum<string[]>" required={true} default="">
                  Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                </NestedParam>
              </Expandable>
            </ParamField>
          </Expandable>
        </ParamField>

        <ParamField body="oauthProviders" type="array" required={true} path="parameters.users.oauthProviders">
          <p>A list of Oauth providers. This field, if not needed, should be an empty array in your request body.</p>

          <Expandable title="item details">
            <NestedParam parentKey="parameters.users.oauthProviders" childKey="providerName" type="string" required={true} default="">
              Human-readable name to identify a Provider.
            </NestedParam>

            <NestedParam parentKey="parameters.users.oauthProviders" childKey="oidcToken" type="string" required={true} default="">
              Base64 encoded OIDC token
            </NestedParam>
          </Expandable>
        </ParamField>

        <ParamField body="userTags" type="array" required={true} path="parameters.users.userTags">
          <p>A list of User Tag IDs. This field, if not needed, should be an empty array in your request body.</p>

          <Expandable title="item details">
            <p>Array item type: <code>string</code></p>
            <p>item field</p>
          </Expandable>
        </ParamField>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="createUsersIntentV3" type="object" required={true}>
          The createUsersIntentV3 object

          <Expandable title="createUsersIntentV3 details">
            <NestedParam parentKey="activity.intent.createUsersIntentV3" childKey="users" type="array" required={true}>
              A list of Users.

              <Expandable title="users details">
                <NestedParam parentKey="activity.intent.createUsersIntentV3.users" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntentV3.users" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntentV3.users" childKey="userPhoneNumber" type="string" required={false}>
                  The user's phone number in E.164 format e.g. +13214567890
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntentV3.users" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.apiKeys" childKey="curveType" type="enum" required={true}>
                      curveType field

                      Enum options: `API_KEY_CURVE_P256`, `API_KEY_CURVE_SECP256K1`, `API_KEY_CURVE_ED25519`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntentV3.users" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activity.intent.createUsersIntentV3.users.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createUsersIntentV3.users.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createUsersIntentV3.users.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createUsersIntentV3.users.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activity.intent.createUsersIntentV3.users.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntentV3.users" childKey="oauthProviders" type="array" required={true}>
                  A list of Oauth providers. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="oauthProviders details">
                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.oauthProviders" childKey="providerName" type="string" required={true}>
                      Human-readable name to identify a Provider.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.oauthProviders" childKey="oidcToken" type="string" required={true}>
                      Base64 encoded OIDC token
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntentV3.users" childKey="userTags" type="array" required={true}>
                  A list of User Tag IDs. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="userTags details">
                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.userTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="createUsersResult" type="object" required={true}>
          The createUsersResult object

          <Expandable title="createUsersResult details">
            <NestedParam parentKey="activity.result.createUsersResult" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activity.result.createUsersResult.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/create_users \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_CREATE_USERS_V3",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "users": [
              {
                  "userName": "<string>",
                  "userEmail": "<string>",
                  "userPhoneNumber": "<string>",
                  "apiKeys": [
                      {
                          "apiKeyName": "<string>",
                          "publicKey": "<string>",
                          "curveType": "<API_KEY_CURVE_P256>",
                          "expirationSeconds": "<string>"
                      }
                  ],
                  "authenticators": [
                      {
                          "authenticatorName": "<string>",
                          "challenge": "<string>",
                          "attestation": {
                              "credentialId": "<string>",
                              "clientDataJson": "<string>",
                              "attestationObject": "<string>",
                              "transports": [
                                  "<AUTHENTICATOR_TRANSPORT_BLE>"
                              ]
                          }
                      }
                  ],
                  "oauthProviders": [
                      {
                          "providerName": "<string>",
                          "oidcToken": "<string>"
                      }
                  ],
                  "userTags": [
                      "<string>"
                  ]
              }
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().createUsers({
    users: [{ // A list of Users.,
      userName: "<string> (Human-readable name for a User.)",
      userEmail: "<string> (The user's email address.)",
      userPhoneNumber: "<string> (The user's phone number in E.164 format e.g. +13214567890)",
      apiKeys: [{ // A list of API Key parameters. This field, if not needed, should be an empty array in your request body.,
        apiKeyName: "<string> (Human-readable name for an API Key.)",
        publicKey: "<string> (The public component of a cryptographic key pair used to sign messages and transactions.)",
        curveType: "<API_KEY_CURVE_P256>" // curveType field,
        expirationSeconds: "<string> (Optional window (in seconds) indicating how long the API Key should last.)",
      }],
      authenticators: [{ // A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.,
        authenticatorName: "<string> (Human-readable name for an Authenticator.)",
        challenge: "<string> (Challenge presented for authentication purposes.)",
        attestation: { // attestation field,
          credentialId: "<string> (The cbor encoded then base64 url encoded id of the credential.)",
          clientDataJson: "<string> (A base64 url encoded payload containing metadata about the signing context and the challenge.)",
          attestationObject: "<string> (A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.)",
          transports: "<AUTHENTICATOR_TRANSPORT_BLE>" // The type of authenticator transports.,
        },
      }],
      oauthProviders: [{ // A list of Oauth providers. This field, if not needed, should be an empty array in your request body.,
        providerName: "<string> (Human-readable name to identify a Provider.)",
        oidcToken: "<string> (Base64 encoded OIDC token)",
      }],
      userTags: ["<string>"] // A list of User Tag IDs. This field, if not needed, should be an empty array in your request body.,
    }]
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_CREATE_USERS_V3",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "createUsersIntentV3": {
              "users": [
                {
                  "userName": "<string>",
                  "userEmail": "<string>",
                  "userPhoneNumber": "<string>",
                  "apiKeys": [
                    {
                      "apiKeyName": "<string>",
                      "publicKey": "<string>",
                      "curveType": "<API_KEY_CURVE_P256>",
                      "expirationSeconds": "<string>"
                    }
                  ],
                  "authenticators": [
                    {
                      "authenticatorName": "<string>",
                      "challenge": "<string>",
                      "attestation": {
                        "credentialId": "<string>",
                        "clientDataJson": "<string>",
                        "attestationObject": "<string>",
                        "transports": [
                          "<AUTHENTICATOR_TRANSPORT_BLE>"
                        ]
                      }
                    }
                  ],
                  "oauthProviders": [
                    {
                      "providerName": "<string>",
                      "oidcToken": "<string>"
                    }
                  ],
                  "userTags": [
                    "<string>"
                  ]
                }
              ]
            }
          },
          "result": {
            "createUsersResult": {
              "userIds": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Create wallet
Source: https://docs.turnkey.com/api-reference/activities/create-wallet

Create a wallet and derive addresses.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="create_wallet" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_CREATE_WALLET`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="walletName" type="string" required={true} default="">
      Human-readable name for a Wallet.
    </NestedParam>

    <ParamField body="accounts" type="array" required={true} path="parameters.accounts">
      <p>A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.</p>

      <Expandable title="item details">
        <NestedParam parentKey="parameters.accounts" childKey="curve" type="enum<string>" required={true} default="">
          Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
        </NestedParam>

        <NestedParam parentKey="parameters.accounts" childKey="pathFormat" type="enum<string>" required={true} default="">
          Enum options: `PATH_FORMAT_BIP32`
        </NestedParam>

        <NestedParam parentKey="parameters.accounts" childKey="path" type="string" required={true} default="">
          Path used to generate a wallet Account.
        </NestedParam>

        <NestedParam parentKey="parameters.accounts" childKey="addressFormat" type="enum<string>" required={true} default="">
          Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
        </NestedParam>
      </Expandable>
    </ParamField>

    <NestedParam parentKey="parameters" childKey="mnemonicLength" type="number" required={false} default="">
      Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="createWalletIntent" type="object" required={true}>
          The createWalletIntent object

          <Expandable title="createWalletIntent details">
            <NestedParam parentKey="activity.intent.createWalletIntent" childKey="walletName" type="string" required={true}>
              Human-readable name for a Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createWalletIntent" childKey="accounts" type="array" required={true}>
              A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.

              <Expandable title="accounts details">
                <NestedParam parentKey="activity.intent.createWalletIntent.accounts" childKey="curve" type="enum" required={true}>
                  curve field

                  Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createWalletIntent.accounts" childKey="pathFormat" type="enum" required={true}>
                  pathFormat field

                  Enum options: `PATH_FORMAT_BIP32`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createWalletIntent.accounts" childKey="path" type="string" required={true}>
                  Path used to generate a wallet Account.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createWalletIntent.accounts" childKey="addressFormat" type="enum" required={true}>
                  addressFormat field

                  Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createWalletIntent" childKey="mnemonicLength" type="number" required={false}>
              Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="createWalletResult" type="object" required={true}>
          The createWalletResult object

          <Expandable title="createWalletResult details">
            <NestedParam parentKey="activity.result.createWalletResult" childKey="walletId" type="string" required={true}>
              Unique identifier for a Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.result.createWalletResult" childKey="addresses" type="array" required={true}>
              A list of account addresses.

              <Expandable title="addresses details">
                <NestedParam parentKey="activity.result.createWalletResult.addresses" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/create_wallet \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_CREATE_WALLET",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "walletName": "<string>",
          "accounts": [
              {
                  "curve": "<CURVE_SECP256K1>",
                  "pathFormat": "<PATH_FORMAT_BIP32>",
                  "path": "<string>",
                  "addressFormat": "<ADDRESS_FORMAT_UNCOMPRESSED>"
              }
          ],
          "mnemonicLength": "<number>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().createWallet({
    walletName: "<string> (Human-readable name for a Wallet.)",
    accounts: [{ // A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.,
      curve: "<CURVE_SECP256K1>" // curve field,
      pathFormat: "<PATH_FORMAT_BIP32>" // pathFormat field,
      path: "<string> (Path used to generate a wallet Account.)",
      addressFormat: "<ADDRESS_FORMAT_UNCOMPRESSED>" // addressFormat field,
    }],
    mnemonicLength: 0 // Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_CREATE_WALLET",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "createWalletIntent": {
              "walletName": "<string>",
              "accounts": [
                {
                  "curve": "<CURVE_SECP256K1>",
                  "pathFormat": "<PATH_FORMAT_BIP32>",
                  "path": "<string>",
                  "addressFormat": "<ADDRESS_FORMAT_UNCOMPRESSED>"
                }
              ],
              "mnemonicLength": "<number>"
            }
          },
          "result": {
            "createWalletResult": {
              "walletId": "<string>",
              "addresses": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Create wallet accounts
Source: https://docs.turnkey.com/api-reference/activities/create-wallet-accounts

Derive additional addresses using an existing wallet.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="create_wallet_accounts" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="walletId" type="string" required={true} default="">
      Unique identifier for a given Wallet.
    </NestedParam>

    <ParamField body="accounts" type="array" required={true} path="parameters.accounts">
      <p>A list of wallet Accounts.</p>

      <Expandable title="item details">
        <NestedParam parentKey="parameters.accounts" childKey="curve" type="enum<string>" required={true} default="">
          Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
        </NestedParam>

        <NestedParam parentKey="parameters.accounts" childKey="pathFormat" type="enum<string>" required={true} default="">
          Enum options: `PATH_FORMAT_BIP32`
        </NestedParam>

        <NestedParam parentKey="parameters.accounts" childKey="path" type="string" required={true} default="">
          Path used to generate a wallet Account.
        </NestedParam>

        <NestedParam parentKey="parameters.accounts" childKey="addressFormat" type="enum<string>" required={true} default="">
          Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
        </NestedParam>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="createWalletAccountsIntent" type="object" required={true}>
          The createWalletAccountsIntent object

          <Expandable title="createWalletAccountsIntent details">
            <NestedParam parentKey="activity.intent.createWalletAccountsIntent" childKey="walletId" type="string" required={true}>
              Unique identifier for a given Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createWalletAccountsIntent" childKey="accounts" type="array" required={true}>
              A list of wallet Accounts.

              <Expandable title="accounts details">
                <NestedParam parentKey="activity.intent.createWalletAccountsIntent.accounts" childKey="curve" type="enum" required={true}>
                  curve field

                  Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createWalletAccountsIntent.accounts" childKey="pathFormat" type="enum" required={true}>
                  pathFormat field

                  Enum options: `PATH_FORMAT_BIP32`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createWalletAccountsIntent.accounts" childKey="path" type="string" required={true}>
                  Path used to generate a wallet Account.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createWalletAccountsIntent.accounts" childKey="addressFormat" type="enum" required={true}>
                  addressFormat field

                  Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="createWalletAccountsResult" type="object" required={true}>
          The createWalletAccountsResult object

          <Expandable title="createWalletAccountsResult details">
            <NestedParam parentKey="activity.result.createWalletAccountsResult" childKey="addresses" type="array" required={true}>
              A list of derived addresses.

              <Expandable title="addresses details">
                <NestedParam parentKey="activity.result.createWalletAccountsResult.addresses" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/create_wallet_accounts \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "walletId": "<string>",
          "accounts": [
              {
                  "curve": "<CURVE_SECP256K1>",
                  "pathFormat": "<PATH_FORMAT_BIP32>",
                  "path": "<string>",
                  "addressFormat": "<ADDRESS_FORMAT_UNCOMPRESSED>"
              }
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().createWalletAccounts({
    walletId: "<string> (Unique identifier for a given Wallet.)",
    accounts: [{ // A list of wallet Accounts.,
      curve: "<CURVE_SECP256K1>" // curve field,
      pathFormat: "<PATH_FORMAT_BIP32>" // pathFormat field,
      path: "<string> (Path used to generate a wallet Account.)",
      addressFormat: "<ADDRESS_FORMAT_UNCOMPRESSED>" // addressFormat field,
    }]
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "createWalletAccountsIntent": {
              "walletId": "<string>",
              "accounts": [
                {
                  "curve": "<CURVE_SECP256K1>",
                  "pathFormat": "<PATH_FORMAT_BIP32>",
                  "path": "<string>",
                  "addressFormat": "<ADDRESS_FORMAT_UNCOMPRESSED>"
                }
              ]
            }
          },
          "result": {
            "createWalletAccountsResult": {
              "addresses": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Delete API keys
Source: https://docs.turnkey.com/api-reference/activities/delete-api-keys

Remove api keys from a user.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="delete_api_keys" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_DELETE_API_KEYS`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="userId" type="string" required={true} default="">
      Unique identifier for a given User.
    </NestedParam>

    <ParamField body="apiKeyIds" type="array" required={true} path="parameters.apiKeyIds">
      <p>A list of API Key IDs.</p>

      <Expandable title="item details">
        <p>Array item type: <code>string</code></p>
        <p>item field</p>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="deleteApiKeysIntent" type="object" required={true}>
          The deleteApiKeysIntent object

          <Expandable title="deleteApiKeysIntent details">
            <NestedParam parentKey="activity.intent.deleteApiKeysIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.deleteApiKeysIntent" childKey="apiKeyIds" type="array" required={true}>
              A list of API Key IDs.

              <Expandable title="apiKeyIds details">
                <NestedParam parentKey="activity.intent.deleteApiKeysIntent.apiKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="deleteApiKeysResult" type="object" required={true}>
          The deleteApiKeysResult object

          <Expandable title="deleteApiKeysResult details">
            <NestedParam parentKey="activity.result.deleteApiKeysResult" childKey="apiKeyIds" type="array" required={true}>
              A list of API Key IDs.

              <Expandable title="apiKeyIds details">
                <NestedParam parentKey="activity.result.deleteApiKeysResult.apiKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/delete_api_keys \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_DELETE_API_KEYS",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "userId": "<string>",
          "apiKeyIds": [
              "<string>"
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().deleteApiKeys({
    userId: "<string> (Unique identifier for a given User.)",
    apiKeyIds: ["<string>"] // A list of API Key IDs.
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_DELETE_API_KEYS",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "deleteApiKeysIntent": {
              "userId": "<string>",
              "apiKeyIds": [
                "<string>"
              ]
            }
          },
          "result": {
            "deleteApiKeysResult": {
              "apiKeyIds": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Delete authenticators
Source: https://docs.turnkey.com/api-reference/activities/delete-authenticators

Remove authenticators from a user.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="delete_authenticators" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_DELETE_AUTHENTICATORS`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="userId" type="string" required={true} default="">
      Unique identifier for a given User.
    </NestedParam>

    <ParamField body="authenticatorIds" type="array" required={true} path="parameters.authenticatorIds">
      <p>A list of Authenticator IDs.</p>

      <Expandable title="item details">
        <p>Array item type: <code>string</code></p>
        <p>item field</p>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="deleteAuthenticatorsIntent" type="object" required={true}>
          The deleteAuthenticatorsIntent object

          <Expandable title="deleteAuthenticatorsIntent details">
            <NestedParam parentKey="activity.intent.deleteAuthenticatorsIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.deleteAuthenticatorsIntent" childKey="authenticatorIds" type="array" required={true}>
              A list of Authenticator IDs.

              <Expandable title="authenticatorIds details">
                <NestedParam parentKey="activity.intent.deleteAuthenticatorsIntent.authenticatorIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="deleteAuthenticatorsResult" type="object" required={true}>
          The deleteAuthenticatorsResult object

          <Expandable title="deleteAuthenticatorsResult details">
            <NestedParam parentKey="activity.result.deleteAuthenticatorsResult" childKey="authenticatorIds" type="array" required={true}>
              Unique identifier for a given Authenticator.

              <Expandable title="authenticatorIds details">
                <NestedParam parentKey="activity.result.deleteAuthenticatorsResult.authenticatorIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/delete_authenticators \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_DELETE_AUTHENTICATORS",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "userId": "<string>",
          "authenticatorIds": [
              "<string>"
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().deleteAuthenticators({
    userId: "<string> (Unique identifier for a given User.)",
    authenticatorIds: ["<string>"] // A list of Authenticator IDs.
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_DELETE_AUTHENTICATORS",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "deleteAuthenticatorsIntent": {
              "userId": "<string>",
              "authenticatorIds": [
                "<string>"
              ]
            }
          },
          "result": {
            "deleteAuthenticatorsResult": {
              "authenticatorIds": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Delete invitation
Source: https://docs.turnkey.com/api-reference/activities/delete-invitation

Delete an existing invitation.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="delete_invitation" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_DELETE_INVITATION`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="invitationId" type="string" required={true} default="">
      Unique identifier for a given Invitation object.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="deleteInvitationIntent" type="object" required={true}>
          The deleteInvitationIntent object

          <Expandable title="deleteInvitationIntent details">
            <NestedParam parentKey="activity.intent.deleteInvitationIntent" childKey="invitationId" type="string" required={true}>
              Unique identifier for a given Invitation object.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="deleteInvitationResult" type="object" required={true}>
          The deleteInvitationResult object

          <Expandable title="deleteInvitationResult details">
            <NestedParam parentKey="activity.result.deleteInvitationResult" childKey="invitationId" type="string" required={true}>
              Unique identifier for a given Invitation.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/delete_invitation \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_DELETE_INVITATION",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "invitationId": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().deleteInvitation({
    invitationId: "<string> (Unique identifier for a given Invitation object.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_DELETE_INVITATION",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "deleteInvitationIntent": {
              "invitationId": "<string>"
            }
          },
          "result": {
            "deleteInvitationResult": {
              "invitationId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Delete Oauth providers
Source: https://docs.turnkey.com/api-reference/activities/delete-oauth-providers

Remove Oauth providers for a specified user.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="delete_oauth_providers" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="userId" type="string" required={true} default="">
      The ID of the User to remove an Oauth provider from
    </NestedParam>

    <ParamField body="providerIds" type="array" required={true} path="parameters.providerIds">
      <p>Unique identifier for a given Provider.</p>

      <Expandable title="item details">
        <p>Array item type: <code>string</code></p>
        <p>item field</p>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="deleteOauthProvidersIntent" type="object" required={true}>
          The deleteOauthProvidersIntent object

          <Expandable title="deleteOauthProvidersIntent details">
            <NestedParam parentKey="activity.intent.deleteOauthProvidersIntent" childKey="userId" type="string" required={true}>
              The ID of the User to remove an Oauth provider from
            </NestedParam>

            <NestedParam parentKey="activity.intent.deleteOauthProvidersIntent" childKey="providerIds" type="array" required={true}>
              Unique identifier for a given Provider.

              <Expandable title="providerIds details">
                <NestedParam parentKey="activity.intent.deleteOauthProvidersIntent.providerIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="deleteOauthProvidersResult" type="object" required={true}>
          The deleteOauthProvidersResult object

          <Expandable title="deleteOauthProvidersResult details">
            <NestedParam parentKey="activity.result.deleteOauthProvidersResult" childKey="providerIds" type="array" required={true}>
              A list of unique identifiers for Oauth Providers

              <Expandable title="providerIds details">
                <NestedParam parentKey="activity.result.deleteOauthProvidersResult.providerIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/delete_oauth_providers \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "userId": "<string>",
          "providerIds": [
              "<string>"
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().deleteOauthProviders({
    userId: "<string> (The ID of the User to remove an Oauth provider from)",
    providerIds: ["<string>"] // Unique identifier for a given Provider.
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "deleteOauthProvidersIntent": {
              "userId": "<string>",
              "providerIds": [
                "<string>"
              ]
            }
          },
          "result": {
            "deleteOauthProvidersResult": {
              "providerIds": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Delete policy
Source: https://docs.turnkey.com/api-reference/activities/delete-policy

Delete an existing policy.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="delete_policy" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_DELETE_POLICY`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="policyId" type="string" required={true} default="">
      Unique identifier for a given Policy.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="deletePolicyIntent" type="object" required={true}>
          The deletePolicyIntent object

          <Expandable title="deletePolicyIntent details">
            <NestedParam parentKey="activity.intent.deletePolicyIntent" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="deletePolicyResult" type="object" required={true}>
          The deletePolicyResult object

          <Expandable title="deletePolicyResult details">
            <NestedParam parentKey="activity.result.deletePolicyResult" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/delete_policy \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_DELETE_POLICY",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "policyId": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().deletePolicy({
    policyId: "<string> (Unique identifier for a given Policy.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_DELETE_POLICY",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "deletePolicyIntent": {
              "policyId": "<string>"
            }
          },
          "result": {
            "deletePolicyResult": {
              "policyId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Delete private key tags
Source: https://docs.turnkey.com/api-reference/activities/delete-private-key-tags

Delete private key tags within an organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="delete_private_key_tags" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <ParamField body="privateKeyTagIds" type="array" required={true} path="parameters.privateKeyTagIds">
      <p>A list of Private Key Tag IDs.</p>

      <Expandable title="item details">
        <p>Array item type: <code>string</code></p>
        <p>item field</p>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="deletePrivateKeyTagsIntent" type="object" required={true}>
          The deletePrivateKeyTagsIntent object

          <Expandable title="deletePrivateKeyTagsIntent details">
            <NestedParam parentKey="activity.intent.deletePrivateKeyTagsIntent" childKey="privateKeyTagIds" type="array" required={true}>
              A list of Private Key Tag IDs.

              <Expandable title="privateKeyTagIds details">
                <NestedParam parentKey="activity.intent.deletePrivateKeyTagsIntent.privateKeyTagIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="deletePrivateKeyTagsResult" type="object" required={true}>
          The deletePrivateKeyTagsResult object

          <Expandable title="deletePrivateKeyTagsResult details">
            <NestedParam parentKey="activity.result.deletePrivateKeyTagsResult" childKey="privateKeyTagIds" type="array" required={true}>
              A list of Private Key Tag IDs.

              <Expandable title="privateKeyTagIds details">
                <NestedParam parentKey="activity.result.deletePrivateKeyTagsResult.privateKeyTagIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.result.deletePrivateKeyTagsResult" childKey="privateKeyIds" type="array" required={true}>
              A list of Private Key IDs.

              <Expandable title="privateKeyIds details">
                <NestedParam parentKey="activity.result.deletePrivateKeyTagsResult.privateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/delete_private_key_tags \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "privateKeyTagIds": [
              "<string>"
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().deletePrivateKeyTags({
    privateKeyTagIds: ["<string>"] // A list of Private Key Tag IDs.
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "deletePrivateKeyTagsIntent": {
              "privateKeyTagIds": [
                "<string>"
              ]
            }
          },
          "result": {
            "deletePrivateKeyTagsResult": {
              "privateKeyTagIds": [
                "<string>"
              ],
              "privateKeyIds": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Delete private keys
Source: https://docs.turnkey.com/api-reference/activities/delete-private-keys

Delete private keys for an organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="delete_private_keys" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_DELETE_PRIVATE_KEYS`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <ParamField body="privateKeyIds" type="array" required={true} path="parameters.privateKeyIds">
      <p>List of unique identifiers for private keys within an organization</p>

      <Expandable title="item details">
        <p>Array item type: <code>string</code></p>
        <p>item field</p>
      </Expandable>
    </ParamField>

    <NestedParam parentKey="parameters" childKey="deleteWithoutExport" type="boolean" required={false} default="">
      Optional parameter for deleting the private keys, even if any have not been previously exported. If they have been exported, this field is ignored.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="deletePrivateKeysIntent" type="object" required={true}>
          The deletePrivateKeysIntent object

          <Expandable title="deletePrivateKeysIntent details">
            <NestedParam parentKey="activity.intent.deletePrivateKeysIntent" childKey="privateKeyIds" type="array" required={true}>
              List of unique identifiers for private keys within an organization

              <Expandable title="privateKeyIds details">
                <NestedParam parentKey="activity.intent.deletePrivateKeysIntent.privateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.deletePrivateKeysIntent" childKey="deleteWithoutExport" type="boolean" required={false}>
              Optional parameter for deleting the private keys, even if any have not been previously exported. If they have been exported, this field is ignored.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="deletePrivateKeysResult" type="object" required={true}>
          The deletePrivateKeysResult object

          <Expandable title="deletePrivateKeysResult details">
            <NestedParam parentKey="activity.result.deletePrivateKeysResult" childKey="privateKeyIds" type="array" required={true}>
              A list of private key unique identifiers that were removed

              <Expandable title="privateKeyIds details">
                <NestedParam parentKey="activity.result.deletePrivateKeysResult.privateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/delete_private_keys \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_DELETE_PRIVATE_KEYS",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "privateKeyIds": [
              "<string>"
          ],
          "deleteWithoutExport": "<boolean>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().deletePrivateKeys({
    privateKeyIds: ["<string>"] // List of unique identifiers for private keys within an organization,
    deleteWithoutExport: true // Optional parameter for deleting the private keys, even if any have not been previously exported. If they have been exported, this field is ignored.
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_DELETE_PRIVATE_KEYS",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "deletePrivateKeysIntent": {
              "privateKeyIds": [
                "<string>"
              ],
              "deleteWithoutExport": "<boolean>"
            }
          },
          "result": {
            "deletePrivateKeysResult": {
              "privateKeyIds": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Delete smart contract interface
Source: https://docs.turnkey.com/api-reference/activities/delete-smart-contract-interface

Delete a smart contract interface.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="delete_smart_contract_interface" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_DELETE_SMART_CONTRACT_INTERFACE`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="smartContractInterfaceId" type="string" required={true} default="">
      The ID of a Smart Contract Interface intended for deletion.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="deleteSmartContractInterfaceIntent" type="object" required={true}>
          The deleteSmartContractInterfaceIntent object

          <Expandable title="deleteSmartContractInterfaceIntent details">
            <NestedParam parentKey="activity.intent.deleteSmartContractInterfaceIntent" childKey="smartContractInterfaceId" type="string" required={true}>
              The ID of a Smart Contract Interface intended for deletion.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="deleteSmartContractInterfaceResult" type="object" required={true}>
          The deleteSmartContractInterfaceResult object

          <Expandable title="deleteSmartContractInterfaceResult details">
            <NestedParam parentKey="activity.result.deleteSmartContractInterfaceResult" childKey="smartContractInterfaceId" type="string" required={true}>
              The ID of the deleted Smart Contract Interface.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/delete_smart_contract_interface \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_DELETE_SMART_CONTRACT_INTERFACE",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "smartContractInterfaceId": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().deleteSmartContractInterface({
    smartContractInterfaceId: "<string> (The ID of a Smart Contract Interface intended for deletion.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_DELETE_SMART_CONTRACT_INTERFACE",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "deleteSmartContractInterfaceIntent": {
              "smartContractInterfaceId": "<string>"
            }
          },
          "result": {
            "deleteSmartContractInterfaceResult": {
              "smartContractInterfaceId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Delete sub-organization
Source: https://docs.turnkey.com/api-reference/activities/delete-sub-organization

Delete a sub-organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="delete_sub_organization" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="deleteWithoutExport" type="boolean" required={false} default="">
      Sub-organization deletion, by default, requires associated wallets and private keys to be exported for security reasons. Set this boolean to true to force sub-organization deletion even if some wallets or private keys within it have not been exported yet. Default: false.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="deleteSubOrganizationIntent" type="object" required={true}>
          The deleteSubOrganizationIntent object

          <Expandable title="deleteSubOrganizationIntent details">
            <NestedParam parentKey="activity.intent.deleteSubOrganizationIntent" childKey="deleteWithoutExport" type="boolean" required={false}>
              Sub-organization deletion, by default, requires associated wallets and private keys to be exported for security reasons. Set this boolean to true to force sub-organization deletion even if some wallets or private keys within it have not been exported yet. Default: false.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="deleteSubOrganizationResult" type="object" required={true}>
          The deleteSubOrganizationResult object

          <Expandable title="deleteSubOrganizationResult details">
            <NestedParam parentKey="activity.result.deleteSubOrganizationResult" childKey="subOrganizationUuid" type="string" required={true}>
              Unique identifier of the sub organization that was removed
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/delete_sub_organization \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "deleteWithoutExport": "<boolean>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().deleteSubOrganization({
    deleteWithoutExport: true // Sub-organization deletion, by default, requires associated wallets and private keys to be exported for security reasons. Set this boolean to true to force sub-organization deletion even if some wallets or private keys within it have not been exported yet. Default: false.
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "deleteSubOrganizationIntent": {
              "deleteWithoutExport": "<boolean>"
            }
          },
          "result": {
            "deleteSubOrganizationResult": {
              "subOrganizationUuid": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Delete user tags
Source: https://docs.turnkey.com/api-reference/activities/delete-user-tags

Delete user tags within an organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="delete_user_tags" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_DELETE_USER_TAGS`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <ParamField body="userTagIds" type="array" required={true} path="parameters.userTagIds">
      <p>A list of User Tag IDs.</p>

      <Expandable title="item details">
        <p>Array item type: <code>string</code></p>
        <p>item field</p>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="deleteUserTagsIntent" type="object" required={true}>
          The deleteUserTagsIntent object

          <Expandable title="deleteUserTagsIntent details">
            <NestedParam parentKey="activity.intent.deleteUserTagsIntent" childKey="userTagIds" type="array" required={true}>
              A list of User Tag IDs.

              <Expandable title="userTagIds details">
                <NestedParam parentKey="activity.intent.deleteUserTagsIntent.userTagIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="deleteUserTagsResult" type="object" required={true}>
          The deleteUserTagsResult object

          <Expandable title="deleteUserTagsResult details">
            <NestedParam parentKey="activity.result.deleteUserTagsResult" childKey="userTagIds" type="array" required={true}>
              A list of User Tag IDs.

              <Expandable title="userTagIds details">
                <NestedParam parentKey="activity.result.deleteUserTagsResult.userTagIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.result.deleteUserTagsResult" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activity.result.deleteUserTagsResult.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/delete_user_tags \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_DELETE_USER_TAGS",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "userTagIds": [
              "<string>"
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().deleteUserTags({
    userTagIds: ["<string>"] // A list of User Tag IDs.
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_DELETE_USER_TAGS",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "deleteUserTagsIntent": {
              "userTagIds": [
                "<string>"
              ]
            }
          },
          "result": {
            "deleteUserTagsResult": {
              "userTagIds": [
                "<string>"
              ],
              "userIds": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Delete users
Source: https://docs.turnkey.com/api-reference/activities/delete-users

Delete users within an organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="delete_users" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_DELETE_USERS`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <ParamField body="userIds" type="array" required={true} path="parameters.userIds">
      <p>A list of User IDs.</p>

      <Expandable title="item details">
        <p>Array item type: <code>string</code></p>
        <p>item field</p>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="deleteUsersIntent" type="object" required={true}>
          The deleteUsersIntent object

          <Expandable title="deleteUsersIntent details">
            <NestedParam parentKey="activity.intent.deleteUsersIntent" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activity.intent.deleteUsersIntent.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="deleteUsersResult" type="object" required={true}>
          The deleteUsersResult object

          <Expandable title="deleteUsersResult details">
            <NestedParam parentKey="activity.result.deleteUsersResult" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activity.result.deleteUsersResult.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/delete_users \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_DELETE_USERS",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "userIds": [
              "<string>"
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().deleteUsers({
    userIds: ["<string>"] // A list of User IDs.
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_DELETE_USERS",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "deleteUsersIntent": {
              "userIds": [
                "<string>"
              ]
            }
          },
          "result": {
            "deleteUsersResult": {
              "userIds": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Delete wallets
Source: https://docs.turnkey.com/api-reference/activities/delete-wallets

Delete wallets for an organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="delete_wallets" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_DELETE_WALLETS`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <ParamField body="walletIds" type="array" required={true} path="parameters.walletIds">
      <p>List of unique identifiers for wallets within an organization</p>

      <Expandable title="item details">
        <p>Array item type: <code>string</code></p>
        <p>item field</p>
      </Expandable>
    </ParamField>

    <NestedParam parentKey="parameters" childKey="deleteWithoutExport" type="boolean" required={false} default="">
      Optional parameter for deleting the wallets, even if any have not been previously exported. If they have been exported, this field is ignored.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="deleteWalletsIntent" type="object" required={true}>
          The deleteWalletsIntent object

          <Expandable title="deleteWalletsIntent details">
            <NestedParam parentKey="activity.intent.deleteWalletsIntent" childKey="walletIds" type="array" required={true}>
              List of unique identifiers for wallets within an organization

              <Expandable title="walletIds details">
                <NestedParam parentKey="activity.intent.deleteWalletsIntent.walletIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.deleteWalletsIntent" childKey="deleteWithoutExport" type="boolean" required={false}>
              Optional parameter for deleting the wallets, even if any have not been previously exported. If they have been exported, this field is ignored.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="deleteWalletsResult" type="object" required={true}>
          The deleteWalletsResult object

          <Expandable title="deleteWalletsResult details">
            <NestedParam parentKey="activity.result.deleteWalletsResult" childKey="walletIds" type="array" required={true}>
              A list of wallet unique identifiers that were removed

              <Expandable title="walletIds details">
                <NestedParam parentKey="activity.result.deleteWalletsResult.walletIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/delete_wallets \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_DELETE_WALLETS",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "walletIds": [
              "<string>"
          ],
          "deleteWithoutExport": "<boolean>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().deleteWallets({
    walletIds: ["<string>"] // List of unique identifiers for wallets within an organization,
    deleteWithoutExport: true // Optional parameter for deleting the wallets, even if any have not been previously exported. If they have been exported, this field is ignored.
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_DELETE_WALLETS",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "deleteWalletsIntent": {
              "walletIds": [
                "<string>"
              ],
              "deleteWithoutExport": "<boolean>"
            }
          },
          "result": {
            "deleteWalletsResult": {
              "walletIds": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Export private key
Source: https://docs.turnkey.com/api-reference/activities/export-private-key

Export a private key.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="export_private_key" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_EXPORT_PRIVATE_KEY`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="privateKeyId" type="string" required={true} default="">
      Unique identifier for a given Private Key.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="targetPublicKey" type="string" required={true} default="">
      Client-side public key generated by the user, to which the export bundle will be encrypted.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="exportPrivateKeyIntent" type="object" required={true}>
          The exportPrivateKeyIntent object

          <Expandable title="exportPrivateKeyIntent details">
            <NestedParam parentKey="activity.intent.exportPrivateKeyIntent" childKey="privateKeyId" type="string" required={true}>
              Unique identifier for a given Private Key.
            </NestedParam>

            <NestedParam parentKey="activity.intent.exportPrivateKeyIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the export bundle will be encrypted.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="exportPrivateKeyResult" type="object" required={true}>
          The exportPrivateKeyResult object

          <Expandable title="exportPrivateKeyResult details">
            <NestedParam parentKey="activity.result.exportPrivateKeyResult" childKey="privateKeyId" type="string" required={true}>
              Unique identifier for a given Private Key.
            </NestedParam>

            <NestedParam parentKey="activity.result.exportPrivateKeyResult" childKey="exportBundle" type="string" required={true}>
              Export bundle containing a private key encrypted to the client's target public key.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/export_private_key \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "privateKeyId": "<string>",
          "targetPublicKey": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().exportPrivateKey({
    privateKeyId: "<string> (Unique identifier for a given Private Key.)",
    targetPublicKey: "<string> (Client-side public key generated by the user, to which the export bundle will be encrypted.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "exportPrivateKeyIntent": {
              "privateKeyId": "<string>",
              "targetPublicKey": "<string>"
            }
          },
          "result": {
            "exportPrivateKeyResult": {
              "privateKeyId": "<string>",
              "exportBundle": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Export wallet
Source: https://docs.turnkey.com/api-reference/activities/export-wallet

Export a wallet.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="export_wallet" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_EXPORT_WALLET`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="walletId" type="string" required={true} default="">
      Unique identifier for a given Wallet.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="targetPublicKey" type="string" required={true} default="">
      Client-side public key generated by the user, to which the export bundle will be encrypted.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="language" type="enum<string>" required={false} default="">
      Enum options: `MNEMONIC_LANGUAGE_ENGLISH`, `MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE`, `MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE`, `MNEMONIC_LANGUAGE_CZECH`, `MNEMONIC_LANGUAGE_FRENCH`, `MNEMONIC_LANGUAGE_ITALIAN`, `MNEMONIC_LANGUAGE_JAPANESE`, `MNEMONIC_LANGUAGE_KOREAN`, `MNEMONIC_LANGUAGE_SPANISH`
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="exportWalletIntent" type="object" required={true}>
          The exportWalletIntent object

          <Expandable title="exportWalletIntent details">
            <NestedParam parentKey="activity.intent.exportWalletIntent" childKey="walletId" type="string" required={true}>
              Unique identifier for a given Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.intent.exportWalletIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the export bundle will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activity.intent.exportWalletIntent" childKey="language" type="enum" required={false}>
              language field

              Enum options: `MNEMONIC_LANGUAGE_ENGLISH`, `MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE`, `MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE`, `MNEMONIC_LANGUAGE_CZECH`, `MNEMONIC_LANGUAGE_FRENCH`, `MNEMONIC_LANGUAGE_ITALIAN`, `MNEMONIC_LANGUAGE_JAPANESE`, `MNEMONIC_LANGUAGE_KOREAN`, `MNEMONIC_LANGUAGE_SPANISH`
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="exportWalletResult" type="object" required={true}>
          The exportWalletResult object

          <Expandable title="exportWalletResult details">
            <NestedParam parentKey="activity.result.exportWalletResult" childKey="walletId" type="string" required={true}>
              Unique identifier for a given Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.result.exportWalletResult" childKey="exportBundle" type="string" required={true}>
              Export bundle containing a wallet mnemonic + optional newline passphrase encrypted by the client's target public key.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/export_wallet \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_EXPORT_WALLET",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "walletId": "<string>",
          "targetPublicKey": "<string>",
          "language": "<MNEMONIC_LANGUAGE_ENGLISH>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().exportWallet({
    walletId: "<string> (Unique identifier for a given Wallet.)",
    targetPublicKey: "<string> (Client-side public key generated by the user, to which the export bundle will be encrypted.)",
    language: "<MNEMONIC_LANGUAGE_ENGLISH>" // language field
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_EXPORT_WALLET",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "exportWalletIntent": {
              "walletId": "<string>",
              "targetPublicKey": "<string>",
              "language": "<MNEMONIC_LANGUAGE_ENGLISH>"
            }
          },
          "result": {
            "exportWalletResult": {
              "walletId": "<string>",
              "exportBundle": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Export wallet account
Source: https://docs.turnkey.com/api-reference/activities/export-wallet-account

Export a wallet account.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="export_wallet_account" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="address" type="string" required={true} default="">
      Address to identify Wallet Account.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="targetPublicKey" type="string" required={true} default="">
      Client-side public key generated by the user, to which the export bundle will be encrypted.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="exportWalletAccountIntent" type="object" required={true}>
          The exportWalletAccountIntent object

          <Expandable title="exportWalletAccountIntent details">
            <NestedParam parentKey="activity.intent.exportWalletAccountIntent" childKey="address" type="string" required={true}>
              Address to identify Wallet Account.
            </NestedParam>

            <NestedParam parentKey="activity.intent.exportWalletAccountIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the export bundle will be encrypted.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="exportWalletAccountResult" type="object" required={true}>
          The exportWalletAccountResult object

          <Expandable title="exportWalletAccountResult details">
            <NestedParam parentKey="activity.result.exportWalletAccountResult" childKey="address" type="string" required={true}>
              Address to identify Wallet Account.
            </NestedParam>

            <NestedParam parentKey="activity.result.exportWalletAccountResult" childKey="exportBundle" type="string" required={true}>
              Export bundle containing a private key encrypted by the client's target public key.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/export_wallet_account \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "address": "<string>",
          "targetPublicKey": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().exportWalletAccount({
    address: "<string> (Address to identify Wallet Account.)",
    targetPublicKey: "<string> (Client-side public key generated by the user, to which the export bundle will be encrypted.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "exportWalletAccountIntent": {
              "address": "<string>",
              "targetPublicKey": "<string>"
            }
          },
          "result": {
            "exportWalletAccountResult": {
              "address": "<string>",
              "exportBundle": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Import private key
Source: https://docs.turnkey.com/api-reference/activities/import-private-key

Import a private key.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="import_private_key" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_IMPORT_PRIVATE_KEY`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="userId" type="string" required={true} default="">
      The ID of the User importing a Private Key.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="privateKeyName" type="string" required={true} default="">
      Human-readable name for a Private Key.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="encryptedBundle" type="string" required={true} default="">
      Bundle containing a raw private key encrypted to the enclave's target public key.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="curve" type="enum<string>" required={true} default="">
      Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="addressFormats" type="enum<string[]>" required={true} default="">
      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="importPrivateKeyIntent" type="object" required={true}>
          The importPrivateKeyIntent object

          <Expandable title="importPrivateKeyIntent details">
            <NestedParam parentKey="activity.intent.importPrivateKeyIntent" childKey="userId" type="string" required={true}>
              The ID of the User importing a Private Key.
            </NestedParam>

            <NestedParam parentKey="activity.intent.importPrivateKeyIntent" childKey="privateKeyName" type="string" required={true}>
              Human-readable name for a Private Key.
            </NestedParam>

            <NestedParam parentKey="activity.intent.importPrivateKeyIntent" childKey="encryptedBundle" type="string" required={true}>
              Bundle containing a raw private key encrypted to the enclave's target public key.
            </NestedParam>

            <NestedParam parentKey="activity.intent.importPrivateKeyIntent" childKey="curve" type="enum" required={true}>
              curve field

              Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
            </NestedParam>

            <NestedParam parentKey="activity.intent.importPrivateKeyIntent" childKey="addressFormats" type="array" required={true}>
              Cryptocurrency-specific formats for a derived address (e.g., Ethereum).

              <Expandable title="addressFormats details">
                <NestedParam parentKey="activity.intent.importPrivateKeyIntent.addressFormats" childKey="item" type="enum" required={true}>
                  item field

                  Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="importPrivateKeyResult" type="object" required={true}>
          The importPrivateKeyResult object

          <Expandable title="importPrivateKeyResult details">
            <NestedParam parentKey="activity.result.importPrivateKeyResult" childKey="privateKeyId" type="string" required={true}>
              Unique identifier for a Private Key.
            </NestedParam>

            <NestedParam parentKey="activity.result.importPrivateKeyResult" childKey="addresses" type="array" required={true}>
              A list of addresses.

              <Expandable title="addresses details">
                <NestedParam parentKey="activity.result.importPrivateKeyResult.addresses" childKey="format" type="enum" required={false}>
                  format field

                  Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                </NestedParam>

                <NestedParam parentKey="activity.result.importPrivateKeyResult.addresses" childKey="address" type="string" required={false}>
                  address field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/import_private_key \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "userId": "<string>",
          "privateKeyName": "<string>",
          "encryptedBundle": "<string>",
          "curve": "<CURVE_SECP256K1>",
          "addressFormats": [
              "<ADDRESS_FORMAT_UNCOMPRESSED>"
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().importPrivateKey({
    userId: "<string> (The ID of the User importing a Private Key.)",
    privateKeyName: "<string> (Human-readable name for a Private Key.)",
    encryptedBundle: "<string> (Bundle containing a raw private key encrypted to the enclave's target public key.)",
    curve: "<CURVE_SECP256K1>" // curve field,
    addressFormats: "<ADDRESS_FORMAT_UNCOMPRESSED>" // Cryptocurrency-specific formats for a derived address (e.g., Ethereum).
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "importPrivateKeyIntent": {
              "userId": "<string>",
              "privateKeyName": "<string>",
              "encryptedBundle": "<string>",
              "curve": "<CURVE_SECP256K1>",
              "addressFormats": [
                "<ADDRESS_FORMAT_UNCOMPRESSED>"
              ]
            }
          },
          "result": {
            "importPrivateKeyResult": {
              "privateKeyId": "<string>",
              "addresses": [
                {
                  "format": "<ADDRESS_FORMAT_UNCOMPRESSED>",
                  "address": "<string>"
                }
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Import wallet
Source: https://docs.turnkey.com/api-reference/activities/import-wallet

Import a wallet.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="import_wallet" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_IMPORT_WALLET`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="userId" type="string" required={true} default="">
      The ID of the User importing a Wallet.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="walletName" type="string" required={true} default="">
      Human-readable name for a Wallet.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="encryptedBundle" type="string" required={true} default="">
      Bundle containing a wallet mnemonic encrypted to the enclave's target public key.
    </NestedParam>

    <ParamField body="accounts" type="array" required={true} path="parameters.accounts">
      <p>A list of wallet Accounts.</p>

      <Expandable title="item details">
        <NestedParam parentKey="parameters.accounts" childKey="curve" type="enum<string>" required={true} default="">
          Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
        </NestedParam>

        <NestedParam parentKey="parameters.accounts" childKey="pathFormat" type="enum<string>" required={true} default="">
          Enum options: `PATH_FORMAT_BIP32`
        </NestedParam>

        <NestedParam parentKey="parameters.accounts" childKey="path" type="string" required={true} default="">
          Path used to generate a wallet Account.
        </NestedParam>

        <NestedParam parentKey="parameters.accounts" childKey="addressFormat" type="enum<string>" required={true} default="">
          Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
        </NestedParam>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="importWalletIntent" type="object" required={true}>
          The importWalletIntent object

          <Expandable title="importWalletIntent details">
            <NestedParam parentKey="activity.intent.importWalletIntent" childKey="userId" type="string" required={true}>
              The ID of the User importing a Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.intent.importWalletIntent" childKey="walletName" type="string" required={true}>
              Human-readable name for a Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.intent.importWalletIntent" childKey="encryptedBundle" type="string" required={true}>
              Bundle containing a wallet mnemonic encrypted to the enclave's target public key.
            </NestedParam>

            <NestedParam parentKey="activity.intent.importWalletIntent" childKey="accounts" type="array" required={true}>
              A list of wallet Accounts.

              <Expandable title="accounts details">
                <NestedParam parentKey="activity.intent.importWalletIntent.accounts" childKey="curve" type="enum" required={true}>
                  curve field

                  Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activity.intent.importWalletIntent.accounts" childKey="pathFormat" type="enum" required={true}>
                  pathFormat field

                  Enum options: `PATH_FORMAT_BIP32`
                </NestedParam>

                <NestedParam parentKey="activity.intent.importWalletIntent.accounts" childKey="path" type="string" required={true}>
                  Path used to generate a wallet Account.
                </NestedParam>

                <NestedParam parentKey="activity.intent.importWalletIntent.accounts" childKey="addressFormat" type="enum" required={true}>
                  addressFormat field

                  Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="importWalletResult" type="object" required={true}>
          The importWalletResult object

          <Expandable title="importWalletResult details">
            <NestedParam parentKey="activity.result.importWalletResult" childKey="walletId" type="string" required={true}>
              Unique identifier for a Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.result.importWalletResult" childKey="addresses" type="array" required={true}>
              A list of account addresses.

              <Expandable title="addresses details">
                <NestedParam parentKey="activity.result.importWalletResult.addresses" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/import_wallet \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_IMPORT_WALLET",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "userId": "<string>",
          "walletName": "<string>",
          "encryptedBundle": "<string>",
          "accounts": [
              {
                  "curve": "<CURVE_SECP256K1>",
                  "pathFormat": "<PATH_FORMAT_BIP32>",
                  "path": "<string>",
                  "addressFormat": "<ADDRESS_FORMAT_UNCOMPRESSED>"
              }
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().importWallet({
    userId: "<string> (The ID of the User importing a Wallet.)",
    walletName: "<string> (Human-readable name for a Wallet.)",
    encryptedBundle: "<string> (Bundle containing a wallet mnemonic encrypted to the enclave's target public key.)",
    accounts: [{ // A list of wallet Accounts.,
      curve: "<CURVE_SECP256K1>" // curve field,
      pathFormat: "<PATH_FORMAT_BIP32>" // pathFormat field,
      path: "<string> (Path used to generate a wallet Account.)",
      addressFormat: "<ADDRESS_FORMAT_UNCOMPRESSED>" // addressFormat field,
    }]
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_IMPORT_WALLET",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "importWalletIntent": {
              "userId": "<string>",
              "walletName": "<string>",
              "encryptedBundle": "<string>",
              "accounts": [
                {
                  "curve": "<CURVE_SECP256K1>",
                  "pathFormat": "<PATH_FORMAT_BIP32>",
                  "path": "<string>",
                  "addressFormat": "<ADDRESS_FORMAT_UNCOMPRESSED>"
                }
              ]
            }
          },
          "result": {
            "importWalletResult": {
              "walletId": "<string>",
              "addresses": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Init email recovery
Source: https://docs.turnkey.com/api-reference/activities/init-email-recovery

Initialize a new email recovery.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="init_user_email_recovery" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="email" type="string" required={true} default="">
      Email of the user starting recovery
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="targetPublicKey" type="string" required={true} default="">
      Client-side public key generated by the user, to which the recovery bundle will be encrypted.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="expirationSeconds" type="string" required={false} default="">
      Expiration window (in seconds) indicating how long the recovery credential is valid for. If not provided, a default of 15 minutes will be used.
    </NestedParam>

    <ParamField body="emailCustomization" type="object" required={false} path="parameters.emailCustomization">
      <p>emailCustomization field</p>

      <Expandable title="details">
        <NestedParam parentKey="parameters.emailCustomization" childKey="appName" type="string" required={false} default="">
          The name of the application.
        </NestedParam>

        <NestedParam parentKey="parameters.emailCustomization" childKey="logoUrl" type="string" required={false} default="">
          A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
        </NestedParam>

        <NestedParam parentKey="parameters.emailCustomization" childKey="magicLinkTemplate" type="string" required={false} default="">
          A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
        </NestedParam>

        <NestedParam parentKey="parameters.emailCustomization" childKey="templateVariables" type="string" required={false} default="">
          JSON object containing key/value pairs to be used with custom templates.
        </NestedParam>

        <NestedParam parentKey="parameters.emailCustomization" childKey="templateId" type="string" required={false} default="">
          Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
        </NestedParam>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="initUserEmailRecoveryIntent" type="object" required={true}>
          The initUserEmailRecoveryIntent object

          <Expandable title="initUserEmailRecoveryIntent details">
            <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent" childKey="email" type="string" required={true}>
              Email of the user starting recovery
            </NestedParam>

            <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the recovery bundle will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the recovery credential is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent" childKey="emailCustomization" type="object" required={false}>
              emailCustomization field

              <Expandable title="emailCustomization details">
                <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent.emailCustomization" childKey="appName" type="string" required={false}>
                  The name of the application.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent.emailCustomization" childKey="logoUrl" type="string" required={false}>
                  A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent.emailCustomization" childKey="magicLinkTemplate" type="string" required={false}>
                  A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent.emailCustomization" childKey="templateVariables" type="string" required={false}>
                  JSON object containing key/value pairs to be used with custom templates.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent.emailCustomization" childKey="templateId" type="string" required={false}>
                  Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="initUserEmailRecoveryResult" type="object" required={true}>
          The initUserEmailRecoveryResult object

          <Expandable title="initUserEmailRecoveryResult details">
            <NestedParam parentKey="activity.result.initUserEmailRecoveryResult" childKey="userId" type="string" required={true}>
              Unique identifier for the user being recovered.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/init_user_email_recovery \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "email": "<string>",
          "targetPublicKey": "<string>",
          "expirationSeconds": "<string>",
          "emailCustomization": {
              "appName": "<string>",
              "logoUrl": "<string>",
              "magicLinkTemplate": "<string>",
              "templateVariables": "<string>",
              "templateId": "<string>"
          }
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().initUserEmailRecovery({
    email: "<string> (Email of the user starting recovery)",
    targetPublicKey: "<string> (Client-side public key generated by the user, to which the recovery bundle will be encrypted.)",
    expirationSeconds: "<string> (Expiration window (in seconds) indicating how long the recovery credential is valid for. If not provided, a default of 15 minutes will be used.)",
    emailCustomization: { // emailCustomization field,
      appName: "<string> (The name of the application.)",
      logoUrl: "<string> (A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.)",
      magicLinkTemplate: "<string> (A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.)",
      templateVariables: "<string> (JSON object containing key/value pairs to be used with custom templates.)",
      templateId: "<string> (Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.)",
    }
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "initUserEmailRecoveryIntent": {
              "email": "<string>",
              "targetPublicKey": "<string>",
              "expirationSeconds": "<string>",
              "emailCustomization": {
                "appName": "<string>",
                "logoUrl": "<string>",
                "magicLinkTemplate": "<string>",
                "templateVariables": "<string>",
                "templateId": "<string>"
              }
            }
          },
          "result": {
            "initUserEmailRecoveryResult": {
              "userId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Init fiat on ramp
Source: https://docs.turnkey.com/api-reference/activities/init-fiat-on-ramp

Initiate a fiat on ramp flow.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="init_fiat_on_ramp" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_INIT_FIAT_ON_RAMP`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="onrampProvider" type="enum<string>" required={true} default="">
      Enum options: `FIAT_ON_RAMP_PROVIDER_COINBASE`, `FIAT_ON_RAMP_PROVIDER_MOONPAY`
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="walletAddress" type="string" required={true} default="">
      Destination wallet address for the buy transaction.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="network" type="enum<string>" required={true} default="">
      Enum options: `FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BITCOIN`, `FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_ETHEREUM`, `FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_SOLANA`, `FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BASE`
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="cryptoCurrencyCode" type="enum<string>" required={true} default="">
      Enum options: `FIAT_ON_RAMP_CRYPTO_CURRENCY_BTC`, `FIAT_ON_RAMP_CRYPTO_CURRENCY_ETH`, `FIAT_ON_RAMP_CRYPTO_CURRENCY_SOL`, `FIAT_ON_RAMP_CRYPTO_CURRENCY_USDC`
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="fiatCurrencyCode" type="enum<string>" required={false} default="">
      Enum options: `FIAT_ON_RAMP_CURRENCY_AUD`, `FIAT_ON_RAMP_CURRENCY_BGN`, `FIAT_ON_RAMP_CURRENCY_BRL`, `FIAT_ON_RAMP_CURRENCY_CAD`, `FIAT_ON_RAMP_CURRENCY_CHF`, `FIAT_ON_RAMP_CURRENCY_COP`, `FIAT_ON_RAMP_CURRENCY_CZK`, `FIAT_ON_RAMP_CURRENCY_DKK`, `FIAT_ON_RAMP_CURRENCY_DOP`, `FIAT_ON_RAMP_CURRENCY_EGP`, `FIAT_ON_RAMP_CURRENCY_EUR`, `FIAT_ON_RAMP_CURRENCY_GBP`, `FIAT_ON_RAMP_CURRENCY_HKD`, `FIAT_ON_RAMP_CURRENCY_IDR`, `FIAT_ON_RAMP_CURRENCY_ILS`, `FIAT_ON_RAMP_CURRENCY_JOD`, `FIAT_ON_RAMP_CURRENCY_KES`, `FIAT_ON_RAMP_CURRENCY_KWD`, `FIAT_ON_RAMP_CURRENCY_LKR`, `FIAT_ON_RAMP_CURRENCY_MXN`, `FIAT_ON_RAMP_CURRENCY_NGN`, `FIAT_ON_RAMP_CURRENCY_NOK`, `FIAT_ON_RAMP_CURRENCY_NZD`, `FIAT_ON_RAMP_CURRENCY_OMR`, `FIAT_ON_RAMP_CURRENCY_PEN`, `FIAT_ON_RAMP_CURRENCY_PLN`, `FIAT_ON_RAMP_CURRENCY_RON`, `FIAT_ON_RAMP_CURRENCY_SEK`, `FIAT_ON_RAMP_CURRENCY_THB`, `FIAT_ON_RAMP_CURRENCY_TRY`, `FIAT_ON_RAMP_CURRENCY_TWD`, `FIAT_ON_RAMP_CURRENCY_USD`, `FIAT_ON_RAMP_CURRENCY_VND`, `FIAT_ON_RAMP_CURRENCY_ZAR`
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="fiatCurrencyAmount" type="string" required={false} default="">
      Specifies a preset fiat amount for the transaction, e.g., '100'. Must be greater than '20'. If not provided, the user will be prompted to enter an amount.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="paymentMethod" type="enum<string>" required={false} default="">
      Enum options: `FIAT_ON_RAMP_PAYMENT_METHOD_CREDIT_DEBIT_CARD`, `FIAT_ON_RAMP_PAYMENT_METHOD_APPLE_PAY`, `FIAT_ON_RAMP_PAYMENT_METHOD_GBP_BANK_TRANSFER`, `FIAT_ON_RAMP_PAYMENT_METHOD_GBP_OPEN_BANKING_PAYMENT`, `FIAT_ON_RAMP_PAYMENT_METHOD_GOOGLE_PAY`, `FIAT_ON_RAMP_PAYMENT_METHOD_SEPA_BANK_TRANSFER`, `FIAT_ON_RAMP_PAYMENT_METHOD_PIX_INSTANT_PAYMENT`, `FIAT_ON_RAMP_PAYMENT_METHOD_PAYPAL`, `FIAT_ON_RAMP_PAYMENT_METHOD_VENMO`, `FIAT_ON_RAMP_PAYMENT_METHOD_MOONPAY_BALANCE`, `FIAT_ON_RAMP_PAYMENT_METHOD_CRYPTO_ACCOUNT`, `FIAT_ON_RAMP_PAYMENT_METHOD_FIAT_WALLET`, `FIAT_ON_RAMP_PAYMENT_METHOD_ACH_BANK_ACCOUNT`
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="countryCode" type="string" required={false} default="">
      ISO 3166-1 two-digit country code for Coinbase representing the purchasing user’s country of residence, e.g., US, GB.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="countrySubdivisionCode" type="string" required={false} default="">
      ISO 3166-2 two-digit country subdivision code for Coinbase representing the purchasing user’s subdivision of residence within their country, e.g. NY. Required if country\_code=US.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="sandboxMode" type="boolean" required={false} default="">
      Optional flag to indicate whether to use the sandbox mode to simulate transactions for the on-ramp provider. Default is false.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="initFiatOnRampIntent" type="object" required={true}>
          The initFiatOnRampIntent object

          <Expandable title="initFiatOnRampIntent details">
            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="onrampProvider" type="enum" required={true}>
              onrampProvider field

              Enum options: `FIAT_ON_RAMP_PROVIDER_COINBASE`, `FIAT_ON_RAMP_PROVIDER_MOONPAY`
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="walletAddress" type="string" required={true}>
              Destination wallet address for the buy transaction.
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="network" type="enum" required={true}>
              network field

              Enum options: `FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BITCOIN`, `FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_ETHEREUM`, `FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_SOLANA`, `FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BASE`
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="cryptoCurrencyCode" type="enum" required={true}>
              cryptoCurrencyCode field

              Enum options: `FIAT_ON_RAMP_CRYPTO_CURRENCY_BTC`, `FIAT_ON_RAMP_CRYPTO_CURRENCY_ETH`, `FIAT_ON_RAMP_CRYPTO_CURRENCY_SOL`, `FIAT_ON_RAMP_CRYPTO_CURRENCY_USDC`
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="fiatCurrencyCode" type="enum" required={false}>
              fiatCurrencyCode field

              Enum options: `FIAT_ON_RAMP_CURRENCY_AUD`, `FIAT_ON_RAMP_CURRENCY_BGN`, `FIAT_ON_RAMP_CURRENCY_BRL`, `FIAT_ON_RAMP_CURRENCY_CAD`, `FIAT_ON_RAMP_CURRENCY_CHF`, `FIAT_ON_RAMP_CURRENCY_COP`, `FIAT_ON_RAMP_CURRENCY_CZK`, `FIAT_ON_RAMP_CURRENCY_DKK`, `FIAT_ON_RAMP_CURRENCY_DOP`, `FIAT_ON_RAMP_CURRENCY_EGP`, `FIAT_ON_RAMP_CURRENCY_EUR`, `FIAT_ON_RAMP_CURRENCY_GBP`, `FIAT_ON_RAMP_CURRENCY_HKD`, `FIAT_ON_RAMP_CURRENCY_IDR`, `FIAT_ON_RAMP_CURRENCY_ILS`, `FIAT_ON_RAMP_CURRENCY_JOD`, `FIAT_ON_RAMP_CURRENCY_KES`, `FIAT_ON_RAMP_CURRENCY_KWD`, `FIAT_ON_RAMP_CURRENCY_LKR`, `FIAT_ON_RAMP_CURRENCY_MXN`, `FIAT_ON_RAMP_CURRENCY_NGN`, `FIAT_ON_RAMP_CURRENCY_NOK`, `FIAT_ON_RAMP_CURRENCY_NZD`, `FIAT_ON_RAMP_CURRENCY_OMR`, `FIAT_ON_RAMP_CURRENCY_PEN`, `FIAT_ON_RAMP_CURRENCY_PLN`, `FIAT_ON_RAMP_CURRENCY_RON`, `FIAT_ON_RAMP_CURRENCY_SEK`, `FIAT_ON_RAMP_CURRENCY_THB`, `FIAT_ON_RAMP_CURRENCY_TRY`, `FIAT_ON_RAMP_CURRENCY_TWD`, `FIAT_ON_RAMP_CURRENCY_USD`, `FIAT_ON_RAMP_CURRENCY_VND`, `FIAT_ON_RAMP_CURRENCY_ZAR`
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="fiatCurrencyAmount" type="string" required={false}>
              Specifies a preset fiat amount for the transaction, e.g., '100'. Must be greater than '20'. If not provided, the user will be prompted to enter an amount.
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="paymentMethod" type="enum" required={false}>
              paymentMethod field

              Enum options: `FIAT_ON_RAMP_PAYMENT_METHOD_CREDIT_DEBIT_CARD`, `FIAT_ON_RAMP_PAYMENT_METHOD_APPLE_PAY`, `FIAT_ON_RAMP_PAYMENT_METHOD_GBP_BANK_TRANSFER`, `FIAT_ON_RAMP_PAYMENT_METHOD_GBP_OPEN_BANKING_PAYMENT`, `FIAT_ON_RAMP_PAYMENT_METHOD_GOOGLE_PAY`, `FIAT_ON_RAMP_PAYMENT_METHOD_SEPA_BANK_TRANSFER`, `FIAT_ON_RAMP_PAYMENT_METHOD_PIX_INSTANT_PAYMENT`, `FIAT_ON_RAMP_PAYMENT_METHOD_PAYPAL`, `FIAT_ON_RAMP_PAYMENT_METHOD_VENMO`, `FIAT_ON_RAMP_PAYMENT_METHOD_MOONPAY_BALANCE`, `FIAT_ON_RAMP_PAYMENT_METHOD_CRYPTO_ACCOUNT`, `FIAT_ON_RAMP_PAYMENT_METHOD_FIAT_WALLET`, `FIAT_ON_RAMP_PAYMENT_METHOD_ACH_BANK_ACCOUNT`
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="countryCode" type="string" required={false}>
              ISO 3166-1 two-digit country code for Coinbase representing the purchasing user’s country of residence, e.g., US, GB.
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="countrySubdivisionCode" type="string" required={false}>
              ISO 3166-2 two-digit country subdivision code for Coinbase representing the purchasing user’s subdivision of residence within their country, e.g. NY. Required if country\_code=US.
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="sandboxMode" type="boolean" required={false}>
              Optional flag to indicate whether to use the sandbox mode to simulate transactions for the on-ramp provider. Default is false.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="initFiatOnRampResult" type="object" required={true}>
          The initFiatOnRampResult object

          <Expandable title="initFiatOnRampResult details">
            <NestedParam parentKey="activity.result.initFiatOnRampResult" childKey="onRampUrl" type="string" required={true}>
              Unique URL for a given fiat on-ramp flow.
            </NestedParam>

            <NestedParam parentKey="activity.result.initFiatOnRampResult" childKey="onRampTransactionId" type="string" required={true}>
              Unique identifier used to retrieve transaction statuses for a given fiat on-ramp flow.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/init_fiat_on_ramp \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_INIT_FIAT_ON_RAMP",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "onrampProvider": "<FIAT_ON_RAMP_PROVIDER_COINBASE>",
          "walletAddress": "<string>",
          "network": "<FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BITCOIN>",
          "cryptoCurrencyCode": "<FIAT_ON_RAMP_CRYPTO_CURRENCY_BTC>",
          "fiatCurrencyCode": "<FIAT_ON_RAMP_CURRENCY_AUD>",
          "fiatCurrencyAmount": "<string>",
          "paymentMethod": "<FIAT_ON_RAMP_PAYMENT_METHOD_CREDIT_DEBIT_CARD>",
          "countryCode": "<string>",
          "countrySubdivisionCode": "<string>",
          "sandboxMode": "<boolean>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().initFiatOnRamp({
    onrampProvider: "<FIAT_ON_RAMP_PROVIDER_COINBASE>" // onrampProvider field,
    walletAddress: "<string> (Destination wallet address for the buy transaction.)",
    network: "<FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BITCOIN>" // network field,
    cryptoCurrencyCode: "<FIAT_ON_RAMP_CRYPTO_CURRENCY_BTC>" // cryptoCurrencyCode field,
    fiatCurrencyCode: "<FIAT_ON_RAMP_CURRENCY_AUD>" // fiatCurrencyCode field,
    fiatCurrencyAmount: "<string> (Specifies a preset fiat amount for the transaction, e.g., '100'. Must be greater than '20'. If not provided, the user will be prompted to enter an amount.)",
    paymentMethod: "<FIAT_ON_RAMP_PAYMENT_METHOD_CREDIT_DEBIT_CARD>" // paymentMethod field,
    countryCode: "<string> (ISO 3166-1 two-digit country code for Coinbase representing the purchasing user’s country of residence, e.g., US, GB.)",
    countrySubdivisionCode: "<string> (ISO 3166-2 two-digit country subdivision code for Coinbase representing the purchasing user’s subdivision of residence within their country, e.g. NY. Required if country_code=US.)",
    sandboxMode: true // Optional flag to indicate whether to use the sandbox mode to simulate transactions for the on-ramp provider. Default is false.
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_INIT_FIAT_ON_RAMP",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "initFiatOnRampIntent": {
              "onrampProvider": "<FIAT_ON_RAMP_PROVIDER_COINBASE>",
              "walletAddress": "<string>",
              "network": "<FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BITCOIN>",
              "cryptoCurrencyCode": "<FIAT_ON_RAMP_CRYPTO_CURRENCY_BTC>",
              "fiatCurrencyCode": "<FIAT_ON_RAMP_CURRENCY_AUD>",
              "fiatCurrencyAmount": "<string>",
              "paymentMethod": "<FIAT_ON_RAMP_PAYMENT_METHOD_CREDIT_DEBIT_CARD>",
              "countryCode": "<string>",
              "countrySubdivisionCode": "<string>",
              "sandboxMode": "<boolean>"
            }
          },
          "result": {
            "initFiatOnRampResult": {
              "onRampUrl": "<string>",
              "onRampTransactionId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Init generic OTP
Source: https://docs.turnkey.com/api-reference/activities/init-generic-otp

Initiate a generic OTP activity.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="init_otp" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_INIT_OTP`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="otpType" type="string" required={true} default="">
      Whether to send OTP via SMS or email. Possible values: OTP\_TYPE\_SMS, OTP\_TYPE\_EMAIL
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="contact" type="string" required={true} default="">
      Email or phone number to send the OTP code to
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="otpLength" type="number" required={false} default="">
      Optional length of the OTP code. Default = 9
    </NestedParam>

    <ParamField body="emailCustomization" type="object" required={false} path="parameters.emailCustomization">
      <p>emailCustomization field</p>

      <Expandable title="details">
        <NestedParam parentKey="parameters.emailCustomization" childKey="appName" type="string" required={false} default="">
          The name of the application.
        </NestedParam>

        <NestedParam parentKey="parameters.emailCustomization" childKey="logoUrl" type="string" required={false} default="">
          A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
        </NestedParam>

        <NestedParam parentKey="parameters.emailCustomization" childKey="magicLinkTemplate" type="string" required={false} default="">
          A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
        </NestedParam>

        <NestedParam parentKey="parameters.emailCustomization" childKey="templateVariables" type="string" required={false} default="">
          JSON object containing key/value pairs to be used with custom templates.
        </NestedParam>

        <NestedParam parentKey="parameters.emailCustomization" childKey="templateId" type="string" required={false} default="">
          Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
        </NestedParam>
      </Expandable>
    </ParamField>

    <ParamField body="smsCustomization" type="object" required={false} path="parameters.smsCustomization">
      <p>smsCustomization field</p>

      <Expandable title="details">
        <NestedParam parentKey="parameters.smsCustomization" childKey="template" type="string" required={false} default="">
          Template containing references to .OtpCode i.e Your OTP is \{\{.OtpCode}}
        </NestedParam>
      </Expandable>
    </ParamField>

    <NestedParam parentKey="parameters" childKey="userIdentifier" type="string" required={false} default="">
      Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="sendFromEmailAddress" type="string" required={false} default="">
      Optional custom email address from which to send the OTP email
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="alphanumeric" type="boolean" required={false} default="">
      Optional flag to specify if the OTP code should be alphanumeric (Crockford’s Base32). Default = true
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="sendFromEmailSenderName" type="string" required={false} default="">
      Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="expirationSeconds" type="string" required={false} default="">
      Expiration window (in seconds) indicating how long the OTP is valid for. If not provided, a default of 5 minutes will be used. Maximum value is 600 seconds (10 minutes)
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="replyToEmailAddress" type="string" required={false} default="">
      Optional custom email address to use as reply-to
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="initOtpIntent" type="object" required={true}>
          The initOtpIntent object

          <Expandable title="initOtpIntent details">
            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="otpType" type="string" required={true}>
              Whether to send OTP via SMS or email. Possible values: OTP\_TYPE\_SMS, OTP\_TYPE\_EMAIL
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="contact" type="string" required={true}>
              Email or phone number to send the OTP code to
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="otpLength" type="number" required={false}>
              Optional length of the OTP code. Default = 9
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="emailCustomization" type="object" required={false}>
              emailCustomization field

              <Expandable title="emailCustomization details">
                <NestedParam parentKey="activity.intent.initOtpIntent.emailCustomization" childKey="appName" type="string" required={false}>
                  The name of the application.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpIntent.emailCustomization" childKey="logoUrl" type="string" required={false}>
                  A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpIntent.emailCustomization" childKey="magicLinkTemplate" type="string" required={false}>
                  A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpIntent.emailCustomization" childKey="templateVariables" type="string" required={false}>
                  JSON object containing key/value pairs to be used with custom templates.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpIntent.emailCustomization" childKey="templateId" type="string" required={false}>
                  Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="smsCustomization" type="object" required={false}>
              smsCustomization field

              <Expandable title="smsCustomization details">
                <NestedParam parentKey="activity.intent.initOtpIntent.smsCustomization" childKey="template" type="string" required={false}>
                  Template containing references to .OtpCode i.e Your OTP is \{\{.OtpCode}}
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="userIdentifier" type="string" required={false}>
              Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="sendFromEmailAddress" type="string" required={false}>
              Optional custom email address from which to send the OTP email
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="alphanumeric" type="boolean" required={false}>
              Optional flag to specify if the OTP code should be alphanumeric (Crockford’s Base32). Default = true
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="sendFromEmailSenderName" type="string" required={false}>
              Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the OTP is valid for. If not provided, a default of 5 minutes will be used. Maximum value is 600 seconds (10 minutes)
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="replyToEmailAddress" type="string" required={false}>
              Optional custom email address to use as reply-to
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="initOtpResult" type="object" required={true}>
          The initOtpResult object

          <Expandable title="initOtpResult details">
            <NestedParam parentKey="activity.result.initOtpResult" childKey="otpId" type="string" required={true}>
              Unique identifier for an OTP authentication
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/init_otp \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_INIT_OTP",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "otpType": "<string>",
          "contact": "<string>",
          "otpLength": "<number>",
          "emailCustomization": {
              "appName": "<string>",
              "logoUrl": "<string>",
              "magicLinkTemplate": "<string>",
              "templateVariables": "<string>",
              "templateId": "<string>"
          },
          "smsCustomization": {
              "template": "<string>"
          },
          "userIdentifier": "<string>",
          "sendFromEmailAddress": "<string>",
          "alphanumeric": "<boolean>",
          "sendFromEmailSenderName": "<string>",
          "expirationSeconds": "<string>",
          "replyToEmailAddress": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().initOtp({
    otpType: "<string> (Whether to send OTP via SMS or email. Possible values: OTP_TYPE_SMS, OTP_TYPE_EMAIL)",
    contact: "<string> (Email or phone number to send the OTP code to)",
    otpLength: 0 // Optional length of the OTP code. Default = 9,
    emailCustomization: { // emailCustomization field,
      appName: "<string> (The name of the application.)",
      logoUrl: "<string> (A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.)",
      magicLinkTemplate: "<string> (A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.)",
      templateVariables: "<string> (JSON object containing key/value pairs to be used with custom templates.)",
      templateId: "<string> (Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.)",
    },
    smsCustomization: { // smsCustomization field,
      template: "<string> (Template containing references to .OtpCode i.e Your OTP is {{.OtpCode}})",
    },
    userIdentifier: "<string> (Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.)",
    sendFromEmailAddress: "<string> (Optional custom email address from which to send the OTP email)",
    alphanumeric: true // Optional flag to specify if the OTP code should be alphanumeric (Crockford’s Base32). Default = true,
    sendFromEmailSenderName: "<string> (Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications')",
    expirationSeconds: "<string> (Expiration window (in seconds) indicating how long the OTP is valid for. If not provided, a default of 5 minutes will be used. Maximum value is 600 seconds (10 minutes))",
    replyToEmailAddress: "<string> (Optional custom email address to use as reply-to)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_INIT_OTP",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "initOtpIntent": {
              "otpType": "<string>",
              "contact": "<string>",
              "otpLength": "<number>",
              "emailCustomization": {
                "appName": "<string>",
                "logoUrl": "<string>",
                "magicLinkTemplate": "<string>",
                "templateVariables": "<string>",
                "templateId": "<string>"
              },
              "smsCustomization": {
                "template": "<string>"
              },
              "userIdentifier": "<string>",
              "sendFromEmailAddress": "<string>",
              "alphanumeric": "<boolean>",
              "sendFromEmailSenderName": "<string>",
              "expirationSeconds": "<string>",
              "replyToEmailAddress": "<string>"
            }
          },
          "result": {
            "initOtpResult": {
              "otpId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Init import private key
Source: https://docs.turnkey.com/api-reference/activities/init-import-private-key

Initialize a new private key import.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="init_import_private_key" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="userId" type="string" required={true} default="">
      The ID of the User importing a Private Key.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="initImportPrivateKeyIntent" type="object" required={true}>
          The initImportPrivateKeyIntent object

          <Expandable title="initImportPrivateKeyIntent details">
            <NestedParam parentKey="activity.intent.initImportPrivateKeyIntent" childKey="userId" type="string" required={true}>
              The ID of the User importing a Private Key.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="initImportPrivateKeyResult" type="object" required={true}>
          The initImportPrivateKeyResult object

          <Expandable title="initImportPrivateKeyResult details">
            <NestedParam parentKey="activity.result.initImportPrivateKeyResult" childKey="importBundle" type="string" required={true}>
              Import bundle containing a public key and signature to use for importing client data.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/init_import_private_key \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "userId": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().initImportPrivateKey({
    userId: "<string> (The ID of the User importing a Private Key.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "initImportPrivateKeyIntent": {
              "userId": "<string>"
            }
          },
          "result": {
            "initImportPrivateKeyResult": {
              "importBundle": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Init import wallet
Source: https://docs.turnkey.com/api-reference/activities/init-import-wallet

Initialize a new wallet import.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="init_import_wallet" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_INIT_IMPORT_WALLET`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="userId" type="string" required={true} default="">
      The ID of the User importing a Wallet.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="initImportWalletIntent" type="object" required={true}>
          The initImportWalletIntent object

          <Expandable title="initImportWalletIntent details">
            <NestedParam parentKey="activity.intent.initImportWalletIntent" childKey="userId" type="string" required={true}>
              The ID of the User importing a Wallet.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="initImportWalletResult" type="object" required={true}>
          The initImportWalletResult object

          <Expandable title="initImportWalletResult details">
            <NestedParam parentKey="activity.result.initImportWalletResult" childKey="importBundle" type="string" required={true}>
              Import bundle containing a public key and signature to use for importing client data.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/init_import_wallet \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_INIT_IMPORT_WALLET",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "userId": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().initImportWallet({
    userId: "<string> (The ID of the User importing a Wallet.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_INIT_IMPORT_WALLET",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "initImportWalletIntent": {
              "userId": "<string>"
            }
          },
          "result": {
            "initImportWalletResult": {
              "importBundle": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Init OTP auth
Source: https://docs.turnkey.com/api-reference/activities/init-otp-auth

Initiate an OTP auth activity.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="init_otp_auth" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_INIT_OTP_AUTH_V2`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="otpType" type="string" required={true} default="">
      Enum to specifiy whether to send OTP via SMS or email
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="contact" type="string" required={true} default="">
      Email or phone number to send the OTP code to
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="otpLength" type="number" required={false} default="">
      Optional length of the OTP code. Default = 9
    </NestedParam>

    <ParamField body="emailCustomization" type="object" required={false} path="parameters.emailCustomization">
      <p>emailCustomization field</p>

      <Expandable title="details">
        <NestedParam parentKey="parameters.emailCustomization" childKey="appName" type="string" required={false} default="">
          The name of the application.
        </NestedParam>

        <NestedParam parentKey="parameters.emailCustomization" childKey="logoUrl" type="string" required={false} default="">
          A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
        </NestedParam>

        <NestedParam parentKey="parameters.emailCustomization" childKey="magicLinkTemplate" type="string" required={false} default="">
          A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
        </NestedParam>

        <NestedParam parentKey="parameters.emailCustomization" childKey="templateVariables" type="string" required={false} default="">
          JSON object containing key/value pairs to be used with custom templates.
        </NestedParam>

        <NestedParam parentKey="parameters.emailCustomization" childKey="templateId" type="string" required={false} default="">
          Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
        </NestedParam>
      </Expandable>
    </ParamField>

    <ParamField body="smsCustomization" type="object" required={false} path="parameters.smsCustomization">
      <p>smsCustomization field</p>

      <Expandable title="details">
        <NestedParam parentKey="parameters.smsCustomization" childKey="template" type="string" required={false} default="">
          Template containing references to .OtpCode i.e Your OTP is \{\{.OtpCode}}
        </NestedParam>
      </Expandable>
    </ParamField>

    <NestedParam parentKey="parameters" childKey="userIdentifier" type="string" required={false} default="">
      Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="sendFromEmailAddress" type="string" required={false} default="">
      Optional custom email address from which to send the OTP email
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="alphanumeric" type="boolean" required={false} default="">
      Optional flag to specify if the OTP code should be alphanumeric (Crockford’s Base32). Default = true
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="sendFromEmailSenderName" type="string" required={false} default="">
      Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="replyToEmailAddress" type="string" required={false} default="">
      Optional custom email address to use as reply-to
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="initOtpAuthIntentV2" type="object" required={true}>
          The initOtpAuthIntentV2 object

          <Expandable title="initOtpAuthIntentV2 details">
            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="otpType" type="string" required={true}>
              Enum to specifiy whether to send OTP via SMS or email
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="contact" type="string" required={true}>
              Email or phone number to send the OTP code to
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="otpLength" type="number" required={false}>
              Optional length of the OTP code. Default = 9
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="emailCustomization" type="object" required={false}>
              emailCustomization field

              <Expandable title="emailCustomization details">
                <NestedParam parentKey="activity.intent.initOtpAuthIntentV2.emailCustomization" childKey="appName" type="string" required={false}>
                  The name of the application.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpAuthIntentV2.emailCustomization" childKey="logoUrl" type="string" required={false}>
                  A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpAuthIntentV2.emailCustomization" childKey="magicLinkTemplate" type="string" required={false}>
                  A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpAuthIntentV2.emailCustomization" childKey="templateVariables" type="string" required={false}>
                  JSON object containing key/value pairs to be used with custom templates.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpAuthIntentV2.emailCustomization" childKey="templateId" type="string" required={false}>
                  Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="smsCustomization" type="object" required={false}>
              smsCustomization field

              <Expandable title="smsCustomization details">
                <NestedParam parentKey="activity.intent.initOtpAuthIntentV2.smsCustomization" childKey="template" type="string" required={false}>
                  Template containing references to .OtpCode i.e Your OTP is \{\{.OtpCode}}
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="userIdentifier" type="string" required={false}>
              Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="sendFromEmailAddress" type="string" required={false}>
              Optional custom email address from which to send the OTP email
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="alphanumeric" type="boolean" required={false}>
              Optional flag to specify if the OTP code should be alphanumeric (Crockford’s Base32). Default = true
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="sendFromEmailSenderName" type="string" required={false}>
              Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="replyToEmailAddress" type="string" required={false}>
              Optional custom email address to use as reply-to
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="initOtpAuthResultV2" type="object" required={true}>
          The initOtpAuthResultV2 object

          <Expandable title="initOtpAuthResultV2 details">
            <NestedParam parentKey="activity.result.initOtpAuthResultV2" childKey="otpId" type="string" required={true}>
              Unique identifier for an OTP authentication
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/init_otp_auth \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_INIT_OTP_AUTH_V2",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "otpType": "<string>",
          "contact": "<string>",
          "otpLength": "<number>",
          "emailCustomization": {
              "appName": "<string>",
              "logoUrl": "<string>",
              "magicLinkTemplate": "<string>",
              "templateVariables": "<string>",
              "templateId": "<string>"
          },
          "smsCustomization": {
              "template": "<string>"
          },
          "userIdentifier": "<string>",
          "sendFromEmailAddress": "<string>",
          "alphanumeric": "<boolean>",
          "sendFromEmailSenderName": "<string>",
          "replyToEmailAddress": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().initOtpAuth({
    otpType: "<string> (Enum to specifiy whether to send OTP via SMS or email)",
    contact: "<string> (Email or phone number to send the OTP code to)",
    otpLength: 0 // Optional length of the OTP code. Default = 9,
    emailCustomization: { // emailCustomization field,
      appName: "<string> (The name of the application.)",
      logoUrl: "<string> (A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.)",
      magicLinkTemplate: "<string> (A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.)",
      templateVariables: "<string> (JSON object containing key/value pairs to be used with custom templates.)",
      templateId: "<string> (Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.)",
    },
    smsCustomization: { // smsCustomization field,
      template: "<string> (Template containing references to .OtpCode i.e Your OTP is {{.OtpCode}})",
    },
    userIdentifier: "<string> (Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.)",
    sendFromEmailAddress: "<string> (Optional custom email address from which to send the OTP email)",
    alphanumeric: true // Optional flag to specify if the OTP code should be alphanumeric (Crockford’s Base32). Default = true,
    sendFromEmailSenderName: "<string> (Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications')",
    replyToEmailAddress: "<string> (Optional custom email address to use as reply-to)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_INIT_OTP_AUTH_V2",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "initOtpAuthIntentV2": {
              "otpType": "<string>",
              "contact": "<string>",
              "otpLength": "<number>",
              "emailCustomization": {
                "appName": "<string>",
                "logoUrl": "<string>",
                "magicLinkTemplate": "<string>",
                "templateVariables": "<string>",
                "templateId": "<string>"
              },
              "smsCustomization": {
                "template": "<string>"
              },
              "userIdentifier": "<string>",
              "sendFromEmailAddress": "<string>",
              "alphanumeric": "<boolean>",
              "sendFromEmailSenderName": "<string>",
              "replyToEmailAddress": "<string>"
            }
          },
          "result": {
            "initOtpAuthResultV2": {
              "otpId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Login with a stamp
Source: https://docs.turnkey.com/api-reference/activities/login-with-a-stamp

Create a session for a user through stamping client side (API key, wallet client, or passkey client).

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="stamp_login" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_STAMP_LOGIN`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="publicKey" type="string" required={true} default="">
      Client-side public key generated by the user, which will be conditionally added to org data based on the passkey stamp associated with this request
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="expirationSeconds" type="string" required={false} default="">
      Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="invalidateExisting" type="boolean" required={false} default="">
      Invalidate all other previously generated Login API keys
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="stampLoginIntent" type="object" required={true}>
          The stampLoginIntent object

          <Expandable title="stampLoginIntent details">
            <NestedParam parentKey="activity.intent.stampLoginIntent" childKey="publicKey" type="string" required={true}>
              Client-side public key generated by the user, which will be conditionally added to org data based on the passkey stamp associated with this request
            </NestedParam>

            <NestedParam parentKey="activity.intent.stampLoginIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activity.intent.stampLoginIntent" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated Login API keys
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="stampLoginResult" type="object" required={true}>
          The stampLoginResult object

          <Expandable title="stampLoginResult details">
            <NestedParam parentKey="activity.result.stampLoginResult" childKey="session" type="string" required={true}>
              Signed JWT containing an expiry, public key, session type, user id, and organization id
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/stamp_login \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_STAMP_LOGIN",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "publicKey": "<string>",
          "expirationSeconds": "<string>",
          "invalidateExisting": "<boolean>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().stampLogin({
    publicKey: "<string> (Client-side public key generated by the user, which will be conditionally added to org data based on the passkey stamp associated with this request)",
    expirationSeconds: "<string> (Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.)",
    invalidateExisting: true // Invalidate all other previously generated Login API keys
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_STAMP_LOGIN",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "stampLoginIntent": {
              "publicKey": "<string>",
              "expirationSeconds": "<string>",
              "invalidateExisting": "<boolean>"
            }
          },
          "result": {
            "stampLoginResult": {
              "session": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Login with Oauth
Source: https://docs.turnkey.com/api-reference/activities/login-with-oauth

Create an Oauth session for a user.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="oauth_login" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_OAUTH_LOGIN`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="oidcToken" type="string" required={true} default="">
      Base64 encoded OIDC token
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="publicKey" type="string" required={true} default="">
      Client-side public key generated by the user, which will be conditionally added to org data based on the validity of the oidc token associated with this request
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="expirationSeconds" type="string" required={false} default="">
      Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="invalidateExisting" type="boolean" required={false} default="">
      Invalidate all other previously generated Login API keys
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="oauthLoginIntent" type="object" required={true}>
          The oauthLoginIntent object

          <Expandable title="oauthLoginIntent details">
            <NestedParam parentKey="activity.intent.oauthLoginIntent" childKey="oidcToken" type="string" required={true}>
              Base64 encoded OIDC token
            </NestedParam>

            <NestedParam parentKey="activity.intent.oauthLoginIntent" childKey="publicKey" type="string" required={true}>
              Client-side public key generated by the user, which will be conditionally added to org data based on the validity of the oidc token associated with this request
            </NestedParam>

            <NestedParam parentKey="activity.intent.oauthLoginIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activity.intent.oauthLoginIntent" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated Login API keys
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="oauthLoginResult" type="object" required={true}>
          The oauthLoginResult object

          <Expandable title="oauthLoginResult details">
            <NestedParam parentKey="activity.result.oauthLoginResult" childKey="session" type="string" required={true}>
              Signed JWT containing an expiry, public key, session type, user id, and organization id
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/oauth_login \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_OAUTH_LOGIN",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "oidcToken": "<string>",
          "publicKey": "<string>",
          "expirationSeconds": "<string>",
          "invalidateExisting": "<boolean>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().oauthLogin({
    oidcToken: "<string> (Base64 encoded OIDC token)",
    publicKey: "<string> (Client-side public key generated by the user, which will be conditionally added to org data based on the validity of the oidc token associated with this request)",
    expirationSeconds: "<string> (Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.)",
    invalidateExisting: true // Invalidate all other previously generated Login API keys
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_OAUTH_LOGIN",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "oauthLoginIntent": {
              "oidcToken": "<string>",
              "publicKey": "<string>",
              "expirationSeconds": "<string>",
              "invalidateExisting": "<boolean>"
            }
          },
          "result": {
            "oauthLoginResult": {
              "session": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Login with OTP
Source: https://docs.turnkey.com/api-reference/activities/login-with-otp

Create an OTP session for a user.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="otp_login" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_OTP_LOGIN`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="verificationToken" type="string" required={true} default="">
      Signed JWT containing a unique id, expiry, verification type, contact
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="publicKey" type="string" required={true} default="">
      Client-side public key generated by the user, which will be conditionally added to org data based on the validity of the verification token
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="expirationSeconds" type="string" required={false} default="">
      Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="invalidateExisting" type="boolean" required={false} default="">
      Invalidate all other previously generated Login API keys
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="otpLoginIntent" type="object" required={true}>
          The otpLoginIntent object

          <Expandable title="otpLoginIntent details">
            <NestedParam parentKey="activity.intent.otpLoginIntent" childKey="verificationToken" type="string" required={true}>
              Signed JWT containing a unique id, expiry, verification type, contact
            </NestedParam>

            <NestedParam parentKey="activity.intent.otpLoginIntent" childKey="publicKey" type="string" required={true}>
              Client-side public key generated by the user, which will be conditionally added to org data based on the validity of the verification token
            </NestedParam>

            <NestedParam parentKey="activity.intent.otpLoginIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activity.intent.otpLoginIntent" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated Login API keys
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="otpLoginResult" type="object" required={true}>
          The otpLoginResult object

          <Expandable title="otpLoginResult details">
            <NestedParam parentKey="activity.result.otpLoginResult" childKey="session" type="string" required={true}>
              Signed JWT containing an expiry, public key, session type, user id, and organization id
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/otp_login \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_OTP_LOGIN",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "verificationToken": "<string>",
          "publicKey": "<string>",
          "expirationSeconds": "<string>",
          "invalidateExisting": "<boolean>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().otpLogin({
    verificationToken: "<string> (Signed JWT containing a unique id, expiry, verification type, contact)",
    publicKey: "<string> (Client-side public key generated by the user, which will be conditionally added to org data based on the validity of the verification token)",
    expirationSeconds: "<string> (Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.)",
    invalidateExisting: true // Invalidate all other previously generated Login API keys
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_OTP_LOGIN",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "otpLoginIntent": {
              "verificationToken": "<string>",
              "publicKey": "<string>",
              "expirationSeconds": "<string>",
              "invalidateExisting": "<boolean>"
            }
          },
          "result": {
            "otpLoginResult": {
              "session": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Oauth
Source: https://docs.turnkey.com/api-reference/activities/oauth

Authenticate a user with an OIDC token (Oauth).

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="oauth" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_OAUTH`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="oidcToken" type="string" required={true} default="">
      Base64 encoded OIDC token
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="targetPublicKey" type="string" required={true} default="">
      Client-side public key generated by the user, to which the oauth bundle (credentials) will be encrypted.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="apiKeyName" type="string" required={false} default="">
      Optional human-readable name for an API Key. If none provided, default to Oauth - \<Timestamp>
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="expirationSeconds" type="string" required={false} default="">
      Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="invalidateExisting" type="boolean" required={false} default="">
      Invalidate all other previously generated Oauth API keys
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="oauthIntent" type="object" required={true}>
          The oauthIntent object

          <Expandable title="oauthIntent details">
            <NestedParam parentKey="activity.intent.oauthIntent" childKey="oidcToken" type="string" required={true}>
              Base64 encoded OIDC token
            </NestedParam>

            <NestedParam parentKey="activity.intent.oauthIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the oauth bundle (credentials) will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activity.intent.oauthIntent" childKey="apiKeyName" type="string" required={false}>
              Optional human-readable name for an API Key. If none provided, default to Oauth - \<Timestamp>
            </NestedParam>

            <NestedParam parentKey="activity.intent.oauthIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activity.intent.oauthIntent" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated Oauth API keys
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="oauthResult" type="object" required={true}>
          The oauthResult object

          <Expandable title="oauthResult details">
            <NestedParam parentKey="activity.result.oauthResult" childKey="userId" type="string" required={true}>
              Unique identifier for the authenticating User.
            </NestedParam>

            <NestedParam parentKey="activity.result.oauthResult" childKey="apiKeyId" type="string" required={true}>
              Unique identifier for the created API key.
            </NestedParam>

            <NestedParam parentKey="activity.result.oauthResult" childKey="credentialBundle" type="string" required={true}>
              HPKE encrypted credential bundle
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/oauth \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_OAUTH",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "oidcToken": "<string>",
          "targetPublicKey": "<string>",
          "apiKeyName": "<string>",
          "expirationSeconds": "<string>",
          "invalidateExisting": "<boolean>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().oauth({
    oidcToken: "<string> (Base64 encoded OIDC token)",
    targetPublicKey: "<string> (Client-side public key generated by the user, to which the oauth bundle (credentials) will be encrypted.)",
    apiKeyName: "<string> (Optional human-readable name for an API Key. If none provided, default to Oauth - <Timestamp>)",
    expirationSeconds: "<string> (Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.)",
    invalidateExisting: true // Invalidate all other previously generated Oauth API keys
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_OAUTH",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "oauthIntent": {
              "oidcToken": "<string>",
              "targetPublicKey": "<string>",
              "apiKeyName": "<string>",
              "expirationSeconds": "<string>",
              "invalidateExisting": "<boolean>"
            }
          },
          "result": {
            "oauthResult": {
              "userId": "<string>",
              "apiKeyId": "<string>",
              "credentialBundle": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# OTP auth
Source: https://docs.turnkey.com/api-reference/activities/otp-auth

Authenticate a user with an OTP code sent via email or SMS.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="otp_auth" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_OTP_AUTH`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="otpId" type="string" required={true} default="">
      ID representing the result of an init OTP activity.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="otpCode" type="string" required={true} default="">
      OTP sent out to a user's contact (email or SMS)
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="targetPublicKey" type="string" required={true} default="">
      Client-side public key generated by the user, to which the OTP bundle (credentials) will be encrypted.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="apiKeyName" type="string" required={false} default="">
      Optional human-readable name for an API Key. If none provided, default to OTP Auth - \<Timestamp>
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="expirationSeconds" type="string" required={false} default="">
      Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="invalidateExisting" type="boolean" required={false} default="">
      Invalidate all other previously generated OTP Auth API keys
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="otpAuthIntent" type="object" required={true}>
          The otpAuthIntent object

          <Expandable title="otpAuthIntent details">
            <NestedParam parentKey="activity.intent.otpAuthIntent" childKey="otpId" type="string" required={true}>
              ID representing the result of an init OTP activity.
            </NestedParam>

            <NestedParam parentKey="activity.intent.otpAuthIntent" childKey="otpCode" type="string" required={true}>
              OTP sent out to a user's contact (email or SMS)
            </NestedParam>

            <NestedParam parentKey="activity.intent.otpAuthIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the OTP bundle (credentials) will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activity.intent.otpAuthIntent" childKey="apiKeyName" type="string" required={false}>
              Optional human-readable name for an API Key. If none provided, default to OTP Auth - \<Timestamp>
            </NestedParam>

            <NestedParam parentKey="activity.intent.otpAuthIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activity.intent.otpAuthIntent" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated OTP Auth API keys
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="otpAuthResult" type="object" required={true}>
          The otpAuthResult object

          <Expandable title="otpAuthResult details">
            <NestedParam parentKey="activity.result.otpAuthResult" childKey="userId" type="string" required={true}>
              Unique identifier for the authenticating User.
            </NestedParam>

            <NestedParam parentKey="activity.result.otpAuthResult" childKey="apiKeyId" type="string" required={false}>
              Unique identifier for the created API key.
            </NestedParam>

            <NestedParam parentKey="activity.result.otpAuthResult" childKey="credentialBundle" type="string" required={false}>
              HPKE encrypted credential bundle
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/otp_auth \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_OTP_AUTH",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "otpId": "<string>",
          "otpCode": "<string>",
          "targetPublicKey": "<string>",
          "apiKeyName": "<string>",
          "expirationSeconds": "<string>",
          "invalidateExisting": "<boolean>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().otpAuth({
    otpId: "<string> (ID representing the result of an init OTP activity.)",
    otpCode: "<string> (OTP sent out to a user's contact (email or SMS))",
    targetPublicKey: "<string> (Client-side public key generated by the user, to which the OTP bundle (credentials) will be encrypted.)",
    apiKeyName: "<string> (Optional human-readable name for an API Key. If none provided, default to OTP Auth - <Timestamp>)",
    expirationSeconds: "<string> (Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.)",
    invalidateExisting: true // Invalidate all other previously generated OTP Auth API keys
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_OTP_AUTH",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "otpAuthIntent": {
              "otpId": "<string>",
              "otpCode": "<string>",
              "targetPublicKey": "<string>",
              "apiKeyName": "<string>",
              "expirationSeconds": "<string>",
              "invalidateExisting": "<boolean>"
            }
          },
          "result": {
            "otpAuthResult": {
              "userId": "<string>",
              "apiKeyId": "<string>",
              "credentialBundle": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Activities
Source: https://docs.turnkey.com/api-reference/activities/overview

Activities are requests to securely execute a workload in Turnkey.

# What are activities?

Activities (also called [submissions](/developer-reference/api-overview/submissions)) are requests to create, modify, or use resources within Turnkey.
Submission endpoints are always prefixed with `/public/v1/submit`.

* **Policy Enforcement:** Activities are subject to consensus or condition enforcement via the policy engine.
* **Optimistic Execution:** Activities are executed optimistically synchronous—if possible, the request completes synchronously; otherwise, it falls back to asynchronous processing.
* **Activity Status:**
  * `COMPLETED`: The activity was successful and the `result` field is populated.
  * `FAILED`: The activity failed and the `failure` field contains the reason.
  * `CONSENSUS_NEEDED`: More signatures are required to process the request.
  * `PENDING`: The request is processing asynchronously.
* **Status Updates:** You can get updates by re-submitting the request (idempotent) or polling `get_activity` with the activity ID.
* **Idempotency:** The API is idempotent—identical requests (same POST body) return the same activity. To generate a new activity, change the `timestampMs` value in your request.


# Perform email auth
Source: https://docs.turnkey.com/api-reference/activities/perform-email-auth

Authenticate a user via email.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="email_auth" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_EMAIL_AUTH_V2`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="email" type="string" required={true} default="">
      Email of the authenticating user.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="targetPublicKey" type="string" required={true} default="">
      Client-side public key generated by the user, to which the email auth bundle (credentials) will be encrypted.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="apiKeyName" type="string" required={false} default="">
      Optional human-readable name for an API Key. If none provided, default to Email Auth - \<Timestamp>
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="expirationSeconds" type="string" required={false} default="">
      Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
    </NestedParam>

    <ParamField body="emailCustomization" type="object" required={false} path="parameters.emailCustomization">
      <p>emailCustomization field</p>

      <Expandable title="details">
        <NestedParam parentKey="parameters.emailCustomization" childKey="appName" type="string" required={false} default="">
          The name of the application.
        </NestedParam>

        <NestedParam parentKey="parameters.emailCustomization" childKey="logoUrl" type="string" required={false} default="">
          A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
        </NestedParam>

        <NestedParam parentKey="parameters.emailCustomization" childKey="magicLinkTemplate" type="string" required={false} default="">
          A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
        </NestedParam>

        <NestedParam parentKey="parameters.emailCustomization" childKey="templateVariables" type="string" required={false} default="">
          JSON object containing key/value pairs to be used with custom templates.
        </NestedParam>

        <NestedParam parentKey="parameters.emailCustomization" childKey="templateId" type="string" required={false} default="">
          Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
        </NestedParam>
      </Expandable>
    </ParamField>

    <NestedParam parentKey="parameters" childKey="invalidateExisting" type="boolean" required={false} default="">
      Invalidate all other previously generated Email Auth API keys
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="sendFromEmailAddress" type="string" required={false} default="">
      Optional custom email address from which to send the email
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="sendFromEmailSenderName" type="string" required={false} default="">
      Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="replyToEmailAddress" type="string" required={false} default="">
      Optional custom email address to use as reply-to
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="emailAuthIntentV2" type="object" required={true}>
          The emailAuthIntentV2 object

          <Expandable title="emailAuthIntentV2 details">
            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="email" type="string" required={true}>
              Email of the authenticating user.
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the email auth bundle (credentials) will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="apiKeyName" type="string" required={false}>
              Optional human-readable name for an API Key. If none provided, default to Email Auth - \<Timestamp>
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="emailCustomization" type="object" required={false}>
              emailCustomization field

              <Expandable title="emailCustomization details">
                <NestedParam parentKey="activity.intent.emailAuthIntentV2.emailCustomization" childKey="appName" type="string" required={false}>
                  The name of the application.
                </NestedParam>

                <NestedParam parentKey="activity.intent.emailAuthIntentV2.emailCustomization" childKey="logoUrl" type="string" required={false}>
                  A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
                </NestedParam>

                <NestedParam parentKey="activity.intent.emailAuthIntentV2.emailCustomization" childKey="magicLinkTemplate" type="string" required={false}>
                  A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
                </NestedParam>

                <NestedParam parentKey="activity.intent.emailAuthIntentV2.emailCustomization" childKey="templateVariables" type="string" required={false}>
                  JSON object containing key/value pairs to be used with custom templates.
                </NestedParam>

                <NestedParam parentKey="activity.intent.emailAuthIntentV2.emailCustomization" childKey="templateId" type="string" required={false}>
                  Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated Email Auth API keys
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="sendFromEmailAddress" type="string" required={false}>
              Optional custom email address from which to send the email
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="sendFromEmailSenderName" type="string" required={false}>
              Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="replyToEmailAddress" type="string" required={false}>
              Optional custom email address to use as reply-to
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="emailAuthResult" type="object" required={true}>
          The emailAuthResult object

          <Expandable title="emailAuthResult details">
            <NestedParam parentKey="activity.result.emailAuthResult" childKey="userId" type="string" required={true}>
              Unique identifier for the authenticating User.
            </NestedParam>

            <NestedParam parentKey="activity.result.emailAuthResult" childKey="apiKeyId" type="string" required={true}>
              Unique identifier for the created API key.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/email_auth \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_EMAIL_AUTH_V2",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "email": "<string>",
          "targetPublicKey": "<string>",
          "apiKeyName": "<string>",
          "expirationSeconds": "<string>",
          "emailCustomization": {
              "appName": "<string>",
              "logoUrl": "<string>",
              "magicLinkTemplate": "<string>",
              "templateVariables": "<string>",
              "templateId": "<string>"
          },
          "invalidateExisting": "<boolean>",
          "sendFromEmailAddress": "<string>",
          "sendFromEmailSenderName": "<string>",
          "replyToEmailAddress": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().emailAuth({
    email: "<string> (Email of the authenticating user.)",
    targetPublicKey: "<string> (Client-side public key generated by the user, to which the email auth bundle (credentials) will be encrypted.)",
    apiKeyName: "<string> (Optional human-readable name for an API Key. If none provided, default to Email Auth - <Timestamp>)",
    expirationSeconds: "<string> (Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.)",
    emailCustomization: { // emailCustomization field,
      appName: "<string> (The name of the application.)",
      logoUrl: "<string> (A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.)",
      magicLinkTemplate: "<string> (A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.)",
      templateVariables: "<string> (JSON object containing key/value pairs to be used with custom templates.)",
      templateId: "<string> (Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.)",
    },
    invalidateExisting: true // Invalidate all other previously generated Email Auth API keys,
    sendFromEmailAddress: "<string> (Optional custom email address from which to send the email)",
    sendFromEmailSenderName: "<string> (Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications')",
    replyToEmailAddress: "<string> (Optional custom email address to use as reply-to)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_EMAIL_AUTH_V2",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "emailAuthIntentV2": {
              "email": "<string>",
              "targetPublicKey": "<string>",
              "apiKeyName": "<string>",
              "expirationSeconds": "<string>",
              "emailCustomization": {
                "appName": "<string>",
                "logoUrl": "<string>",
                "magicLinkTemplate": "<string>",
                "templateVariables": "<string>",
                "templateId": "<string>"
              },
              "invalidateExisting": "<boolean>",
              "sendFromEmailAddress": "<string>",
              "sendFromEmailSenderName": "<string>",
              "replyToEmailAddress": "<string>"
            }
          },
          "result": {
            "emailAuthResult": {
              "userId": "<string>",
              "apiKeyId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Recover a user
Source: https://docs.turnkey.com/api-reference/activities/recover-a-user

Complete the process of recovering a user by adding an authenticator.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="recover_user" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_RECOVER_USER`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <ParamField body="authenticator" type="object" required={true} path="parameters.authenticator">
      <p>authenticator field</p>

      <Expandable title="details">
        <NestedParam parentKey="parameters.authenticator" childKey="authenticatorName" type="string" required={true} default="">
          Human-readable name for an Authenticator.
        </NestedParam>

        <NestedParam parentKey="parameters.authenticator" childKey="challenge" type="string" required={true} default="">
          Challenge presented for authentication purposes.
        </NestedParam>

        <ParamField body="attestation" type="object" required={true} path="parameters.authenticator.attestation">
          <p>attestation field</p>

          <Expandable title="details">
            <NestedParam parentKey="parameters.authenticator.attestation" childKey="credentialId" type="string" required={true} default="">
              The cbor encoded then base64 url encoded id of the credential.
            </NestedParam>

            <NestedParam parentKey="parameters.authenticator.attestation" childKey="clientDataJson" type="string" required={true} default="">
              A base64 url encoded payload containing metadata about the signing context and the challenge.
            </NestedParam>

            <NestedParam parentKey="parameters.authenticator.attestation" childKey="attestationObject" type="string" required={true} default="">
              A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
            </NestedParam>

            <NestedParam parentKey="parameters.authenticator.attestation" childKey="transports" type="enum<string[]>" required={true} default="">
              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
            </NestedParam>
          </Expandable>
        </ParamField>
      </Expandable>
    </ParamField>

    <NestedParam parentKey="parameters" childKey="userId" type="string" required={true} default="">
      Unique identifier for the user performing recovery.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="recoverUserIntent" type="object" required={true}>
          The recoverUserIntent object

          <Expandable title="recoverUserIntent details">
            <NestedParam parentKey="activity.intent.recoverUserIntent" childKey="authenticator" type="object" required={true}>
              authenticator field

              <Expandable title="authenticator details">
                <NestedParam parentKey="activity.intent.recoverUserIntent.authenticator" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activity.intent.recoverUserIntent.authenticator" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>

                <NestedParam parentKey="activity.intent.recoverUserIntent.authenticator" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activity.intent.recoverUserIntent.authenticator.attestation" childKey="credentialId" type="string" required={true}>
                      The cbor encoded then base64 url encoded id of the credential.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.recoverUserIntent.authenticator.attestation" childKey="clientDataJson" type="string" required={true}>
                      A base64 url encoded payload containing metadata about the signing context and the challenge.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.recoverUserIntent.authenticator.attestation" childKey="attestationObject" type="string" required={true}>
                      A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.recoverUserIntent.authenticator.attestation" childKey="transports" type="array" required={true}>
                      The type of authenticator transports.

                      <Expandable title="transports details">
                        <NestedParam parentKey="activity.intent.recoverUserIntent.authenticator.attestation.transports" childKey="item" type="enum" required={true}>
                          item field

                          Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.recoverUserIntent" childKey="userId" type="string" required={true}>
              Unique identifier for the user performing recovery.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="recoverUserResult" type="object" required={true}>
          The recoverUserResult object

          <Expandable title="recoverUserResult details">
            <NestedParam parentKey="activity.result.recoverUserResult" childKey="authenticatorId" type="array" required={true}>
              ID of the authenticator created.

              <Expandable title="authenticatorId details">
                <NestedParam parentKey="activity.result.recoverUserResult.authenticatorId" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/recover_user \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_RECOVER_USER",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "authenticator": {
              "authenticatorName": "<string>",
              "challenge": "<string>",
              "attestation": {
                  "credentialId": "<string>",
                  "clientDataJson": "<string>",
                  "attestationObject": "<string>",
                  "transports": [
                      "<AUTHENTICATOR_TRANSPORT_BLE>"
                  ]
              }
          },
          "userId": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().recoverUser({
    authenticator: { // authenticator field,
      authenticatorName: "<string> (Human-readable name for an Authenticator.)",
      challenge: "<string> (Challenge presented for authentication purposes.)",
      attestation: { // attestation field,
        credentialId: "<string> (The cbor encoded then base64 url encoded id of the credential.)",
        clientDataJson: "<string> (A base64 url encoded payload containing metadata about the signing context and the challenge.)",
        attestationObject: "<string> (A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.)",
        transports: "<AUTHENTICATOR_TRANSPORT_BLE>" // The type of authenticator transports.,
      },
    },
    userId: "<string> (Unique identifier for the user performing recovery.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_RECOVER_USER",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "recoverUserIntent": {
              "authenticator": {
                "authenticatorName": "<string>",
                "challenge": "<string>",
                "attestation": {
                  "credentialId": "<string>",
                  "clientDataJson": "<string>",
                  "attestationObject": "<string>",
                  "transports": [
                    "<AUTHENTICATOR_TRANSPORT_BLE>"
                  ]
                }
              },
              "userId": "<string>"
            }
          },
          "result": {
            "recoverUserResult": {
              "authenticatorId": [
                "<string>"
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Reject activity
Source: https://docs.turnkey.com/api-reference/activities/reject-activity

Reject an activity.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="reject_activity" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_REJECT_ACTIVITY`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="fingerprint" type="string" required={true} default="">
      An artifact verifying a User's action.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      ACTIVITY\_STATUS\_REJECTED
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="rejectActivityIntent" type="object" required={true}>
          The rejectActivityIntent object

          <Expandable title="rejectActivityIntent details">
            <NestedParam parentKey="activity.intent.rejectActivityIntent" childKey="fingerprint" type="string" required={true}>
              An artifact verifying a User's action.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/reject_activity \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_REJECT_ACTIVITY",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "fingerprint": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().rejectActivity({
    fingerprint: "<string> (An artifact verifying a User's action.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_REJECT_ACTIVITY",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "rejectActivityIntent": {
              "fingerprint": "<string>"
            }
          },
          "result": {},
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Remove organization feature
Source: https://docs.turnkey.com/api-reference/activities/remove-organization-feature

Remove an organization feature. This activity must be approved by the current root quorum.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="remove_organization_feature" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="name" type="enum<string>" required={true} default="">
      Enum options: `FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY`, `FEATURE_NAME_WEBAUTHN_ORIGINS`, `FEATURE_NAME_EMAIL_AUTH`, `FEATURE_NAME_EMAIL_RECOVERY`, `FEATURE_NAME_WEBHOOK`, `FEATURE_NAME_SMS_AUTH`, `FEATURE_NAME_OTP_EMAIL_AUTH`
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="removeOrganizationFeatureIntent" type="object" required={true}>
          The removeOrganizationFeatureIntent object

          <Expandable title="removeOrganizationFeatureIntent details">
            <NestedParam parentKey="activity.intent.removeOrganizationFeatureIntent" childKey="name" type="enum" required={true}>
              name field

              Enum options: `FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY`, `FEATURE_NAME_WEBAUTHN_ORIGINS`, `FEATURE_NAME_EMAIL_AUTH`, `FEATURE_NAME_EMAIL_RECOVERY`, `FEATURE_NAME_WEBHOOK`, `FEATURE_NAME_SMS_AUTH`, `FEATURE_NAME_OTP_EMAIL_AUTH`
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="removeOrganizationFeatureResult" type="object" required={true}>
          The removeOrganizationFeatureResult object

          <Expandable title="removeOrganizationFeatureResult details">
            <NestedParam parentKey="activity.result.removeOrganizationFeatureResult" childKey="features" type="array" required={true}>
              Resulting list of organization features.

              <Expandable title="features details">
                <NestedParam parentKey="activity.result.removeOrganizationFeatureResult.features" childKey="name" type="enum" required={false}>
                  name field

                  Enum options: `FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY`, `FEATURE_NAME_WEBAUTHN_ORIGINS`, `FEATURE_NAME_EMAIL_AUTH`, `FEATURE_NAME_EMAIL_RECOVERY`, `FEATURE_NAME_WEBHOOK`, `FEATURE_NAME_SMS_AUTH`, `FEATURE_NAME_OTP_EMAIL_AUTH`
                </NestedParam>

                <NestedParam parentKey="activity.result.removeOrganizationFeatureResult.features" childKey="value" type="string" required={false}>
                  value field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/remove_organization_feature \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "name": "<FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().removeOrganizationFeature({
    name: "<FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY>" // name field
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "removeOrganizationFeatureIntent": {
              "name": "<FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY>"
            }
          },
          "result": {
            "removeOrganizationFeatureResult": {
              "features": [
                {
                  "name": "<FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY>",
                  "value": "<string>"
                }
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Set organization feature
Source: https://docs.turnkey.com/api-reference/activities/set-organization-feature

Set an organization feature. This activity must be approved by the current root quorum.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="set_organization_feature" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="name" type="enum<string>" required={true} default="">
      Enum options: `FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY`, `FEATURE_NAME_WEBAUTHN_ORIGINS`, `FEATURE_NAME_EMAIL_AUTH`, `FEATURE_NAME_EMAIL_RECOVERY`, `FEATURE_NAME_WEBHOOK`, `FEATURE_NAME_SMS_AUTH`, `FEATURE_NAME_OTP_EMAIL_AUTH`
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="value" type="string" required={true} default="">
      Optional value for the feature. Will override existing values if feature is already set.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="setOrganizationFeatureIntent" type="object" required={true}>
          The setOrganizationFeatureIntent object

          <Expandable title="setOrganizationFeatureIntent details">
            <NestedParam parentKey="activity.intent.setOrganizationFeatureIntent" childKey="name" type="enum" required={true}>
              name field

              Enum options: `FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY`, `FEATURE_NAME_WEBAUTHN_ORIGINS`, `FEATURE_NAME_EMAIL_AUTH`, `FEATURE_NAME_EMAIL_RECOVERY`, `FEATURE_NAME_WEBHOOK`, `FEATURE_NAME_SMS_AUTH`, `FEATURE_NAME_OTP_EMAIL_AUTH`
            </NestedParam>

            <NestedParam parentKey="activity.intent.setOrganizationFeatureIntent" childKey="value" type="string" required={true}>
              Optional value for the feature. Will override existing values if feature is already set.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="setOrganizationFeatureResult" type="object" required={true}>
          The setOrganizationFeatureResult object

          <Expandable title="setOrganizationFeatureResult details">
            <NestedParam parentKey="activity.result.setOrganizationFeatureResult" childKey="features" type="array" required={true}>
              Resulting list of organization features.

              <Expandable title="features details">
                <NestedParam parentKey="activity.result.setOrganizationFeatureResult.features" childKey="name" type="enum" required={false}>
                  name field

                  Enum options: `FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY`, `FEATURE_NAME_WEBAUTHN_ORIGINS`, `FEATURE_NAME_EMAIL_AUTH`, `FEATURE_NAME_EMAIL_RECOVERY`, `FEATURE_NAME_WEBHOOK`, `FEATURE_NAME_SMS_AUTH`, `FEATURE_NAME_OTP_EMAIL_AUTH`
                </NestedParam>

                <NestedParam parentKey="activity.result.setOrganizationFeatureResult.features" childKey="value" type="string" required={false}>
                  value field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/set_organization_feature \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "name": "<FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY>",
          "value": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().setOrganizationFeature({
    name: "<FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY>" // name field,
    value: "<string> (Optional value for the feature. Will override existing values if feature is already set.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "setOrganizationFeatureIntent": {
              "name": "<FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY>",
              "value": "<string>"
            }
          },
          "result": {
            "setOrganizationFeatureResult": {
              "features": [
                {
                  "name": "<FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY>",
                  "value": "<string>"
                }
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Sign raw payload
Source: https://docs.turnkey.com/api-reference/activities/sign-raw-payload

Sign a raw payload.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="sign_raw_payload" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="signWith" type="string" required={true} default="">
      A Wallet account address, Private Key address, or Private Key identifier.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="payload" type="string" required={true} default="">
      Raw unsigned payload to be signed.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="encoding" type="enum<string>" required={true} default="">
      Enum options: `PAYLOAD_ENCODING_HEXADECIMAL`, `PAYLOAD_ENCODING_TEXT_UTF8`, `PAYLOAD_ENCODING_EIP712`
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="hashFunction" type="enum<string>" required={true} default="">
      Enum options: `HASH_FUNCTION_NO_OP`, `HASH_FUNCTION_SHA256`, `HASH_FUNCTION_KECCAK256`, `HASH_FUNCTION_NOT_APPLICABLE`
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="signRawPayloadIntentV2" type="object" required={true}>
          The signRawPayloadIntentV2 object

          <Expandable title="signRawPayloadIntentV2 details">
            <NestedParam parentKey="activity.intent.signRawPayloadIntentV2" childKey="signWith" type="string" required={true}>
              A Wallet account address, Private Key address, or Private Key identifier.
            </NestedParam>

            <NestedParam parentKey="activity.intent.signRawPayloadIntentV2" childKey="payload" type="string" required={true}>
              Raw unsigned payload to be signed.
            </NestedParam>

            <NestedParam parentKey="activity.intent.signRawPayloadIntentV2" childKey="encoding" type="enum" required={true}>
              encoding field

              Enum options: `PAYLOAD_ENCODING_HEXADECIMAL`, `PAYLOAD_ENCODING_TEXT_UTF8`, `PAYLOAD_ENCODING_EIP712`
            </NestedParam>

            <NestedParam parentKey="activity.intent.signRawPayloadIntentV2" childKey="hashFunction" type="enum" required={true}>
              hashFunction field

              Enum options: `HASH_FUNCTION_NO_OP`, `HASH_FUNCTION_SHA256`, `HASH_FUNCTION_KECCAK256`, `HASH_FUNCTION_NOT_APPLICABLE`
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="signRawPayloadResult" type="object" required={true}>
          The signRawPayloadResult object

          <Expandable title="signRawPayloadResult details">
            <NestedParam parentKey="activity.result.signRawPayloadResult" childKey="r" type="string" required={true}>
              Component of an ECSDA signature.
            </NestedParam>

            <NestedParam parentKey="activity.result.signRawPayloadResult" childKey="s" type="string" required={true}>
              Component of an ECSDA signature.
            </NestedParam>

            <NestedParam parentKey="activity.result.signRawPayloadResult" childKey="v" type="string" required={true}>
              Component of an ECSDA signature.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/sign_raw_payload \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "signWith": "<string>",
          "payload": "<string>",
          "encoding": "<PAYLOAD_ENCODING_HEXADECIMAL>",
          "hashFunction": "<HASH_FUNCTION_NO_OP>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().signRawPayload({
    signWith: "<string> (A Wallet account address, Private Key address, or Private Key identifier.)",
    payload: "<string> (Raw unsigned payload to be signed.)",
    encoding: "<PAYLOAD_ENCODING_HEXADECIMAL>" // encoding field,
    hashFunction: "<HASH_FUNCTION_NO_OP>" // hashFunction field
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "signRawPayloadIntentV2": {
              "signWith": "<string>",
              "payload": "<string>",
              "encoding": "<PAYLOAD_ENCODING_HEXADECIMAL>",
              "hashFunction": "<HASH_FUNCTION_NO_OP>"
            }
          },
          "result": {
            "signRawPayloadResult": {
              "r": "<string>",
              "s": "<string>",
              "v": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Sign raw payloads
Source: https://docs.turnkey.com/api-reference/activities/sign-raw-payloads

Sign multiple raw payloads with the same signing parameters.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="sign_raw_payloads" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_SIGN_RAW_PAYLOADS`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="signWith" type="string" required={true} default="">
      A Wallet account address, Private Key address, or Private Key identifier.
    </NestedParam>

    <ParamField body="payloads" type="array" required={true} path="parameters.payloads">
      <p>An array of raw unsigned payloads to be signed.</p>

      <Expandable title="item details">
        <p>Array item type: <code>string</code></p>
        <p>item field</p>
      </Expandable>
    </ParamField>

    <NestedParam parentKey="parameters" childKey="encoding" type="enum<string>" required={true} default="">
      Enum options: `PAYLOAD_ENCODING_HEXADECIMAL`, `PAYLOAD_ENCODING_TEXT_UTF8`, `PAYLOAD_ENCODING_EIP712`
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="hashFunction" type="enum<string>" required={true} default="">
      Enum options: `HASH_FUNCTION_NO_OP`, `HASH_FUNCTION_SHA256`, `HASH_FUNCTION_KECCAK256`, `HASH_FUNCTION_NOT_APPLICABLE`
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="signRawPayloadsIntent" type="object" required={true}>
          The signRawPayloadsIntent object

          <Expandable title="signRawPayloadsIntent details">
            <NestedParam parentKey="activity.intent.signRawPayloadsIntent" childKey="signWith" type="string" required={true}>
              A Wallet account address, Private Key address, or Private Key identifier.
            </NestedParam>

            <NestedParam parentKey="activity.intent.signRawPayloadsIntent" childKey="payloads" type="array" required={true}>
              An array of raw unsigned payloads to be signed.

              <Expandable title="payloads details">
                <NestedParam parentKey="activity.intent.signRawPayloadsIntent.payloads" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.signRawPayloadsIntent" childKey="encoding" type="enum" required={true}>
              encoding field

              Enum options: `PAYLOAD_ENCODING_HEXADECIMAL`, `PAYLOAD_ENCODING_TEXT_UTF8`, `PAYLOAD_ENCODING_EIP712`
            </NestedParam>

            <NestedParam parentKey="activity.intent.signRawPayloadsIntent" childKey="hashFunction" type="enum" required={true}>
              hashFunction field

              Enum options: `HASH_FUNCTION_NO_OP`, `HASH_FUNCTION_SHA256`, `HASH_FUNCTION_KECCAK256`, `HASH_FUNCTION_NOT_APPLICABLE`
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="signRawPayloadsResult" type="object" required={true}>
          The signRawPayloadsResult object

          <Expandable title="signRawPayloadsResult details">
            <NestedParam parentKey="activity.result.signRawPayloadsResult" childKey="signatures" type="array" required={false}>
              signatures field

              <Expandable title="signatures details">
                <NestedParam parentKey="activity.result.signRawPayloadsResult.signatures" childKey="r" type="string" required={true}>
                  Component of an ECSDA signature.
                </NestedParam>

                <NestedParam parentKey="activity.result.signRawPayloadsResult.signatures" childKey="s" type="string" required={true}>
                  Component of an ECSDA signature.
                </NestedParam>

                <NestedParam parentKey="activity.result.signRawPayloadsResult.signatures" childKey="v" type="string" required={true}>
                  Component of an ECSDA signature.
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/sign_raw_payloads \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "signWith": "<string>",
          "payloads": [
              "<string>"
          ],
          "encoding": "<PAYLOAD_ENCODING_HEXADECIMAL>",
          "hashFunction": "<HASH_FUNCTION_NO_OP>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().signRawPayloads({
    signWith: "<string> (A Wallet account address, Private Key address, or Private Key identifier.)",
    payloads: ["<string>"] // An array of raw unsigned payloads to be signed.,
    encoding: "<PAYLOAD_ENCODING_HEXADECIMAL>" // encoding field,
    hashFunction: "<HASH_FUNCTION_NO_OP>" // hashFunction field
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "signRawPayloadsIntent": {
              "signWith": "<string>",
              "payloads": [
                "<string>"
              ],
              "encoding": "<PAYLOAD_ENCODING_HEXADECIMAL>",
              "hashFunction": "<HASH_FUNCTION_NO_OP>"
            }
          },
          "result": {
            "signRawPayloadsResult": {
              "signatures": [
                {
                  "r": "<string>",
                  "s": "<string>",
                  "v": "<string>"
                }
              ]
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Sign transaction
Source: https://docs.turnkey.com/api-reference/activities/sign-transaction

Sign a transaction.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="sign_transaction" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_SIGN_TRANSACTION_V2`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="signWith" type="string" required={true} default="">
      A Wallet account address, Private Key address, or Private Key identifier.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="unsignedTransaction" type="string" required={true} default="">
      Raw unsigned transaction to be signed
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="type" type="enum<string>" required={true} default="">
      Enum options: `TRANSACTION_TYPE_ETHEREUM`, `TRANSACTION_TYPE_SOLANA`, `TRANSACTION_TYPE_TRON`
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="signTransactionIntentV2" type="object" required={true}>
          The signTransactionIntentV2 object

          <Expandable title="signTransactionIntentV2 details">
            <NestedParam parentKey="activity.intent.signTransactionIntentV2" childKey="signWith" type="string" required={true}>
              A Wallet account address, Private Key address, or Private Key identifier.
            </NestedParam>

            <NestedParam parentKey="activity.intent.signTransactionIntentV2" childKey="unsignedTransaction" type="string" required={true}>
              Raw unsigned transaction to be signed
            </NestedParam>

            <NestedParam parentKey="activity.intent.signTransactionIntentV2" childKey="type" type="enum" required={true}>
              type field

              Enum options: `TRANSACTION_TYPE_ETHEREUM`, `TRANSACTION_TYPE_SOLANA`, `TRANSACTION_TYPE_TRON`
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="signTransactionResult" type="object" required={true}>
          The signTransactionResult object

          <Expandable title="signTransactionResult details">
            <NestedParam parentKey="activity.result.signTransactionResult" childKey="signedTransaction" type="string" required={true}>
              signedTransaction field
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/sign_transaction \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_SIGN_TRANSACTION_V2",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "signWith": "<string>",
          "unsignedTransaction": "<string>",
          "type": "<TRANSACTION_TYPE_ETHEREUM>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().signTransaction({
    signWith: "<string> (A Wallet account address, Private Key address, or Private Key identifier.)",
    unsignedTransaction: "<string> (Raw unsigned transaction to be signed)",
    type: "<TRANSACTION_TYPE_ETHEREUM>" // type field
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_SIGN_TRANSACTION_V2",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "signTransactionIntentV2": {
              "signWith": "<string>",
              "unsignedTransaction": "<string>",
              "type": "<TRANSACTION_TYPE_ETHEREUM>"
            }
          },
          "result": {
            "signTransactionResult": {
              "signedTransaction": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Update policy
Source: https://docs.turnkey.com/api-reference/activities/update-policy

Update an existing policy.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="update_policy" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_UPDATE_POLICY_V2`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="policyId" type="string" required={true} default="">
      Unique identifier for a given Policy.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="policyName" type="string" required={false} default="">
      Human-readable name for a Policy.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="policyEffect" type="enum<string>" required={false} default="">
      Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="policyCondition" type="string" required={false} default="">
      The condition expression that triggers the Effect (optional).
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="policyConsensus" type="string" required={false} default="">
      The consensus expression that triggers the Effect (optional).
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="policyNotes" type="string" required={false} default="">
      Accompanying notes for a Policy (optional).
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="updatePolicyIntentV2" type="object" required={true}>
          The updatePolicyIntentV2 object

          <Expandable title="updatePolicyIntentV2 details">
            <NestedParam parentKey="activity.intent.updatePolicyIntentV2" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePolicyIntentV2" childKey="policyName" type="string" required={false}>
              Human-readable name for a Policy.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePolicyIntentV2" childKey="policyEffect" type="enum" required={false}>
              policyEffect field

              Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePolicyIntentV2" childKey="policyCondition" type="string" required={false}>
              The condition expression that triggers the Effect (optional).
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePolicyIntentV2" childKey="policyConsensus" type="string" required={false}>
              The consensus expression that triggers the Effect (optional).
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePolicyIntentV2" childKey="policyNotes" type="string" required={false}>
              Accompanying notes for a Policy (optional).
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="updatePolicyResultV2" type="object" required={true}>
          The updatePolicyResultV2 object

          <Expandable title="updatePolicyResultV2 details">
            <NestedParam parentKey="activity.result.updatePolicyResultV2" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/update_policy \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_UPDATE_POLICY_V2",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "policyId": "<string>",
          "policyName": "<string>",
          "policyEffect": "<EFFECT_ALLOW>",
          "policyCondition": "<string>",
          "policyConsensus": "<string>",
          "policyNotes": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().updatePolicy({
    policyId: "<string> (Unique identifier for a given Policy.)",
    policyName: "<string> (Human-readable name for a Policy.)",
    policyEffect: "<EFFECT_ALLOW>" // policyEffect field,
    policyCondition: "<string> (The condition expression that triggers the Effect (optional).)",
    policyConsensus: "<string> (The consensus expression that triggers the Effect (optional).)",
    policyNotes: "<string> (Accompanying notes for a Policy (optional).)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_UPDATE_POLICY_V2",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "updatePolicyIntentV2": {
              "policyId": "<string>",
              "policyName": "<string>",
              "policyEffect": "<EFFECT_ALLOW>",
              "policyCondition": "<string>",
              "policyConsensus": "<string>",
              "policyNotes": "<string>"
            }
          },
          "result": {
            "updatePolicyResultV2": {
              "policyId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Update private key tag
Source: https://docs.turnkey.com/api-reference/activities/update-private-key-tag

Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="update_private_key_tag" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="privateKeyTagId" type="string" required={true} default="">
      Unique identifier for a given Private Key Tag.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="newPrivateKeyTagName" type="string" required={false} default="">
      The new, human-readable name for the tag with the given ID.
    </NestedParam>

    <ParamField body="addPrivateKeyIds" type="array" required={true} path="parameters.addPrivateKeyIds">
      <p>A list of Private Keys IDs to add this tag to.</p>

      <Expandable title="item details">
        <p>Array item type: <code>string</code></p>
        <p>item field</p>
      </Expandable>
    </ParamField>

    <ParamField body="removePrivateKeyIds" type="array" required={true} path="parameters.removePrivateKeyIds">
      <p>A list of Private Key IDs to remove this tag from.</p>

      <Expandable title="item details">
        <p>Array item type: <code>string</code></p>
        <p>item field</p>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="updatePrivateKeyTagIntent" type="object" required={true}>
          The updatePrivateKeyTagIntent object

          <Expandable title="updatePrivateKeyTagIntent details">
            <NestedParam parentKey="activity.intent.updatePrivateKeyTagIntent" childKey="privateKeyTagId" type="string" required={true}>
              Unique identifier for a given Private Key Tag.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePrivateKeyTagIntent" childKey="newPrivateKeyTagName" type="string" required={false}>
              The new, human-readable name for the tag with the given ID.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePrivateKeyTagIntent" childKey="addPrivateKeyIds" type="array" required={true}>
              A list of Private Keys IDs to add this tag to.

              <Expandable title="addPrivateKeyIds details">
                <NestedParam parentKey="activity.intent.updatePrivateKeyTagIntent.addPrivateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePrivateKeyTagIntent" childKey="removePrivateKeyIds" type="array" required={true}>
              A list of Private Key IDs to remove this tag from.

              <Expandable title="removePrivateKeyIds details">
                <NestedParam parentKey="activity.intent.updatePrivateKeyTagIntent.removePrivateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="updatePrivateKeyTagResult" type="object" required={true}>
          The updatePrivateKeyTagResult object

          <Expandable title="updatePrivateKeyTagResult details">
            <NestedParam parentKey="activity.result.updatePrivateKeyTagResult" childKey="privateKeyTagId" type="string" required={true}>
              Unique identifier for a given Private Key Tag.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/update_private_key_tag \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "privateKeyTagId": "<string>",
          "newPrivateKeyTagName": "<string>",
          "addPrivateKeyIds": [
              "<string>"
          ],
          "removePrivateKeyIds": [
              "<string>"
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().updatePrivateKeyTag({
    privateKeyTagId: "<string> (Unique identifier for a given Private Key Tag.)",
    newPrivateKeyTagName: "<string> (The new, human-readable name for the tag with the given ID.)",
    addPrivateKeyIds: ["<string>"] // A list of Private Keys IDs to add this tag to.,
    removePrivateKeyIds: ["<string>"] // A list of Private Key IDs to remove this tag from.
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "updatePrivateKeyTagIntent": {
              "privateKeyTagId": "<string>",
              "newPrivateKeyTagName": "<string>",
              "addPrivateKeyIds": [
                "<string>"
              ],
              "removePrivateKeyIds": [
                "<string>"
              ]
            }
          },
          "result": {
            "updatePrivateKeyTagResult": {
              "privateKeyTagId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Update root quorum
Source: https://docs.turnkey.com/api-reference/activities/update-root-quorum

Set the threshold and members of the root quorum. This activity must be approved by the current root quorum.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="update_root_quorum" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_UPDATE_ROOT_QUORUM`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="threshold" type="number" required={true} default="">
      The threshold of unique approvals to reach quorum.
    </NestedParam>

    <ParamField body="userIds" type="array" required={true} path="parameters.userIds">
      <p>The unique identifiers of users who comprise the quorum set.</p>

      <Expandable title="item details">
        <p>Array item type: <code>string</code></p>
        <p>item field</p>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="updateRootQuorumIntent" type="object" required={true}>
          The updateRootQuorumIntent object

          <Expandable title="updateRootQuorumIntent details">
            <NestedParam parentKey="activity.intent.updateRootQuorumIntent" childKey="threshold" type="number" required={true}>
              The threshold of unique approvals to reach quorum.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateRootQuorumIntent" childKey="userIds" type="array" required={true}>
              The unique identifiers of users who comprise the quorum set.

              <Expandable title="userIds details">
                <NestedParam parentKey="activity.intent.updateRootQuorumIntent.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="updateRootQuorumResult" type="object" required={true}>
          The updateRootQuorumResult object
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/update_root_quorum \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "threshold": "<number>",
          "userIds": [
              "<string>"
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().updateRootQuorum({
    threshold: 0 // The threshold of unique approvals to reach quorum.,
    userIds: ["<string>"] // The unique identifiers of users who comprise the quorum set.
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "updateRootQuorumIntent": {
              "threshold": "<number>",
              "userIds": [
                "<string>"
              ]
            }
          },
          "result": {
            "updateRootQuorumResult": {}
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Update user
Source: https://docs.turnkey.com/api-reference/activities/update-user

Update a user in an existing organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="update_user" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_UPDATE_USER`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="userId" type="string" required={true} default="">
      Unique identifier for a given User.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="userName" type="string" required={false} default="">
      Human-readable name for a User.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="userEmail" type="string" required={false} default="">
      The user's email address.
    </NestedParam>

    <ParamField body="userTagIds" type="array" required={false} path="parameters.userTagIds">
      <p>An updated list of User Tags to apply to this User. This field, if not needed, should be an empty array in your request body.</p>

      <Expandable title="item details">
        <p>Array item type: <code>string</code></p>
        <p>item field</p>
      </Expandable>
    </ParamField>

    <NestedParam parentKey="parameters" childKey="userPhoneNumber" type="string" required={false} default="">
      The user's phone number in E.164 format e.g. +13214567890
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="updateUserIntent" type="object" required={true}>
          The updateUserIntent object

          <Expandable title="updateUserIntent details">
            <NestedParam parentKey="activity.intent.updateUserIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserIntent" childKey="userName" type="string" required={false}>
              Human-readable name for a User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserIntent" childKey="userEmail" type="string" required={false}>
              The user's email address.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserIntent" childKey="userTagIds" type="array" required={false}>
              An updated list of User Tags to apply to this User. This field, if not needed, should be an empty array in your request body.

              <Expandable title="userTagIds details">
                <NestedParam parentKey="activity.intent.updateUserIntent.userTagIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserIntent" childKey="userPhoneNumber" type="string" required={false}>
              The user's phone number in E.164 format e.g. +13214567890
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="updateUserResult" type="object" required={true}>
          The updateUserResult object

          <Expandable title="updateUserResult details">
            <NestedParam parentKey="activity.result.updateUserResult" childKey="userId" type="string" required={true}>
              A User ID.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/update_user \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_UPDATE_USER",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "userId": "<string>",
          "userName": "<string>",
          "userEmail": "<string>",
          "userTagIds": [
              "<string>"
          ],
          "userPhoneNumber": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().updateUser({
    userId: "<string> (Unique identifier for a given User.)",
    userName: "<string> (Human-readable name for a User.)",
    userEmail: "<string> (The user's email address.)",
    userTagIds: ["<string>"] // An updated list of User Tags to apply to this User. This field, if not needed, should be an empty array in your request body.,
    userPhoneNumber: "<string> (The user's phone number in E.164 format e.g. +13214567890)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_UPDATE_USER",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "updateUserIntent": {
              "userId": "<string>",
              "userName": "<string>",
              "userEmail": "<string>",
              "userTagIds": [
                "<string>"
              ],
              "userPhoneNumber": "<string>"
            }
          },
          "result": {
            "updateUserResult": {
              "userId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Update user tag
Source: https://docs.turnkey.com/api-reference/activities/update-user-tag

Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="update_user_tag" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_UPDATE_USER_TAG`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="userTagId" type="string" required={true} default="">
      Unique identifier for a given User Tag.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="newUserTagName" type="string" required={false} default="">
      The new, human-readable name for the tag with the given ID.
    </NestedParam>

    <ParamField body="addUserIds" type="array" required={true} path="parameters.addUserIds">
      <p>A list of User IDs to add this tag to.</p>

      <Expandable title="item details">
        <p>Array item type: <code>string</code></p>
        <p>item field</p>
      </Expandable>
    </ParamField>

    <ParamField body="removeUserIds" type="array" required={true} path="parameters.removeUserIds">
      <p>A list of User IDs to remove this tag from.</p>

      <Expandable title="item details">
        <p>Array item type: <code>string</code></p>
        <p>item field</p>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="updateUserTagIntent" type="object" required={true}>
          The updateUserTagIntent object

          <Expandable title="updateUserTagIntent details">
            <NestedParam parentKey="activity.intent.updateUserTagIntent" childKey="userTagId" type="string" required={true}>
              Unique identifier for a given User Tag.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserTagIntent" childKey="newUserTagName" type="string" required={false}>
              The new, human-readable name for the tag with the given ID.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserTagIntent" childKey="addUserIds" type="array" required={true}>
              A list of User IDs to add this tag to.

              <Expandable title="addUserIds details">
                <NestedParam parentKey="activity.intent.updateUserTagIntent.addUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserTagIntent" childKey="removeUserIds" type="array" required={true}>
              A list of User IDs to remove this tag from.

              <Expandable title="removeUserIds details">
                <NestedParam parentKey="activity.intent.updateUserTagIntent.removeUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="updateUserTagResult" type="object" required={true}>
          The updateUserTagResult object

          <Expandable title="updateUserTagResult details">
            <NestedParam parentKey="activity.result.updateUserTagResult" childKey="userTagId" type="string" required={true}>
              Unique identifier for a given User Tag.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/update_user_tag \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_UPDATE_USER_TAG",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "userTagId": "<string>",
          "newUserTagName": "<string>",
          "addUserIds": [
              "<string>"
          ],
          "removeUserIds": [
              "<string>"
          ]
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().updateUserTag({
    userTagId: "<string> (Unique identifier for a given User Tag.)",
    newUserTagName: "<string> (The new, human-readable name for the tag with the given ID.)",
    addUserIds: ["<string>"] // A list of User IDs to add this tag to.,
    removeUserIds: ["<string>"] // A list of User IDs to remove this tag from.
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_UPDATE_USER_TAG",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "updateUserTagIntent": {
              "userTagId": "<string>",
              "newUserTagName": "<string>",
              "addUserIds": [
                "<string>"
              ],
              "removeUserIds": [
                "<string>"
              ]
            }
          },
          "result": {
            "updateUserTagResult": {
              "userTagId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Update user's email
Source: https://docs.turnkey.com/api-reference/activities/update-users-email

Update a user's email in an existing organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="update_user_email" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_UPDATE_USER_EMAIL`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="userId" type="string" required={true} default="">
      Unique identifier for a given User.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="userEmail" type="string" required={true} default="">
      The user's email address. Setting this to an empty string will remove the user's email.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="verificationToken" type="string" required={false} default="">
      Signed JWT containing a unique id, expiry, verification type, contact
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="updateUserEmailIntent" type="object" required={true}>
          The updateUserEmailIntent object

          <Expandable title="updateUserEmailIntent details">
            <NestedParam parentKey="activity.intent.updateUserEmailIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserEmailIntent" childKey="userEmail" type="string" required={true}>
              The user's email address. Setting this to an empty string will remove the user's email.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserEmailIntent" childKey="verificationToken" type="string" required={false}>
              Signed JWT containing a unique id, expiry, verification type, contact
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="updateUserEmailResult" type="object" required={true}>
          The updateUserEmailResult object

          <Expandable title="updateUserEmailResult details">
            <NestedParam parentKey="activity.result.updateUserEmailResult" childKey="userId" type="string" required={true}>
              Unique identifier of the User whose email was updated.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/update_user_email \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_UPDATE_USER_EMAIL",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "userId": "<string>",
          "userEmail": "<string>",
          "verificationToken": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().updateUserEmail({
    userId: "<string> (Unique identifier for a given User.)",
    userEmail: "<string> (The user's email address. Setting this to an empty string will remove the user's email.)",
    verificationToken: "<string> (Signed JWT containing a unique id, expiry, verification type, contact)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_UPDATE_USER_EMAIL",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "updateUserEmailIntent": {
              "userId": "<string>",
              "userEmail": "<string>",
              "verificationToken": "<string>"
            }
          },
          "result": {
            "updateUserEmailResult": {
              "userId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Update user's name
Source: https://docs.turnkey.com/api-reference/activities/update-users-name

Update a user's name in an existing organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="update_user_name" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_UPDATE_USER_NAME`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="userId" type="string" required={true} default="">
      Unique identifier for a given User.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="userName" type="string" required={true} default="">
      Human-readable name for a User.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="updateUserNameIntent" type="object" required={true}>
          The updateUserNameIntent object

          <Expandable title="updateUserNameIntent details">
            <NestedParam parentKey="activity.intent.updateUserNameIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserNameIntent" childKey="userName" type="string" required={true}>
              Human-readable name for a User.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="updateUserNameResult" type="object" required={true}>
          The updateUserNameResult object

          <Expandable title="updateUserNameResult details">
            <NestedParam parentKey="activity.result.updateUserNameResult" childKey="userId" type="string" required={true}>
              Unique identifier of the User whose name was updated.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/update_user_name \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_UPDATE_USER_NAME",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "userId": "<string>",
          "userName": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().updateUserName({
    userId: "<string> (Unique identifier for a given User.)",
    userName: "<string> (Human-readable name for a User.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_UPDATE_USER_NAME",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "updateUserNameIntent": {
              "userId": "<string>",
              "userName": "<string>"
            }
          },
          "result": {
            "updateUserNameResult": {
              "userId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Update user's phone number
Source: https://docs.turnkey.com/api-reference/activities/update-users-phone-number

Update a user's phone number in an existing organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="update_user_phone_number" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_UPDATE_USER_PHONE_NUMBER`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="userId" type="string" required={true} default="">
      Unique identifier for a given User.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="userPhoneNumber" type="string" required={true} default="">
      The user's phone number in E.164 format e.g. +13214567890. Setting this to an empty string will remove the user's phone number.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="verificationToken" type="string" required={false} default="">
      Signed JWT containing a unique id, expiry, verification type, contact
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="updateUserPhoneNumberIntent" type="object" required={true}>
          The updateUserPhoneNumberIntent object

          <Expandable title="updateUserPhoneNumberIntent details">
            <NestedParam parentKey="activity.intent.updateUserPhoneNumberIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserPhoneNumberIntent" childKey="userPhoneNumber" type="string" required={true}>
              The user's phone number in E.164 format e.g. +13214567890. Setting this to an empty string will remove the user's phone number.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserPhoneNumberIntent" childKey="verificationToken" type="string" required={false}>
              Signed JWT containing a unique id, expiry, verification type, contact
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="updateUserPhoneNumberResult" type="object" required={true}>
          The updateUserPhoneNumberResult object

          <Expandable title="updateUserPhoneNumberResult details">
            <NestedParam parentKey="activity.result.updateUserPhoneNumberResult" childKey="userId" type="string" required={true}>
              Unique identifier of the User whose phone number was updated.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/update_user_phone_number \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_UPDATE_USER_PHONE_NUMBER",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "userId": "<string>",
          "userPhoneNumber": "<string>",
          "verificationToken": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().updateUserPhoneNumber({
    userId: "<string> (Unique identifier for a given User.)",
    userPhoneNumber: "<string> (The user's phone number in E.164 format e.g. +13214567890. Setting this to an empty string will remove the user's phone number.)",
    verificationToken: "<string> (Signed JWT containing a unique id, expiry, verification type, contact)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_UPDATE_USER_PHONE_NUMBER",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "updateUserPhoneNumberIntent": {
              "userId": "<string>",
              "userPhoneNumber": "<string>",
              "verificationToken": "<string>"
            }
          },
          "result": {
            "updateUserPhoneNumberResult": {
              "userId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Update wallet
Source: https://docs.turnkey.com/api-reference/activities/update-wallet

Update a wallet for an organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="update_wallet" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_UPDATE_WALLET`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="walletId" type="string" required={true} default="">
      Unique identifier for a given Wallet.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="walletName" type="string" required={false} default="">
      Human-readable name for a Wallet.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="updateWalletIntent" type="object" required={true}>
          The updateWalletIntent object

          <Expandable title="updateWalletIntent details">
            <NestedParam parentKey="activity.intent.updateWalletIntent" childKey="walletId" type="string" required={true}>
              Unique identifier for a given Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateWalletIntent" childKey="walletName" type="string" required={false}>
              Human-readable name for a Wallet.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="updateWalletResult" type="object" required={true}>
          The updateWalletResult object

          <Expandable title="updateWalletResult details">
            <NestedParam parentKey="activity.result.updateWalletResult" childKey="walletId" type="string" required={true}>
              A Wallet ID.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/update_wallet \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_UPDATE_WALLET",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "walletId": "<string>",
          "walletName": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().updateWallet({
    walletId: "<string> (Unique identifier for a given Wallet.)",
    walletName: "<string> (Human-readable name for a Wallet.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_UPDATE_WALLET",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "updateWalletIntent": {
              "walletId": "<string>",
              "walletName": "<string>"
            }
          },
          "result": {
            "updateWalletResult": {
              "walletId": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# Verify generic OTP
Source: https://docs.turnkey.com/api-reference/activities/verify-generic-otp

Verify a generic OTP.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="submit" path="verify_otp" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="type" type="enum<string>" required={true}>
  Enum options: `ACTIVITY_TYPE_VERIFY_OTP`
</ParamField>

<ParamField body="timestampMs" type="string" required={true}>
  Timestamp (in milliseconds) of the request, used to verify liveness of user requests.
</ParamField>

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given Organization.
</ParamField>

<ParamField body="parameters" type="object" required={true} path="parameters">
  <p>The parameters object containing the specific intent data for this activity.</p>

  <Expandable title="details">
    <NestedParam parentKey="parameters" childKey="otpId" type="string" required={true} default="">
      ID representing the result of an init OTP activity.
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="otpCode" type="string" required={true} default="">
      OTP sent out to a user's contact (email or SMS)
    </NestedParam>

    <NestedParam parentKey="parameters" childKey="expirationSeconds" type="string" required={false} default="">
      Expiration window (in seconds) indicating how long the verification token is valid for. If not provided, a default of 1 hour will be used. Maximum value is 86400 seconds (24 hours)
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  The activity object containing type, intent, and result

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="string" required={true}>
      The activity status
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="string" required={true}>
      The activity type
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      The intent of the activity

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="verifyOtpIntent" type="object" required={true}>
          The verifyOtpIntent object

          <Expandable title="verifyOtpIntent details">
            <NestedParam parentKey="activity.intent.verifyOtpIntent" childKey="otpId" type="string" required={true}>
              ID representing the result of an init OTP activity.
            </NestedParam>

            <NestedParam parentKey="activity.intent.verifyOtpIntent" childKey="otpCode" type="string" required={true}>
              OTP sent out to a user's contact (email or SMS)
            </NestedParam>

            <NestedParam parentKey="activity.intent.verifyOtpIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the verification token is valid for. If not provided, a default of 1 hour will be used. Maximum value is 86400 seconds (24 hours)
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      The result of the activity

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="verifyOtpResult" type="object" required={true}>
          The verifyOtpResult object

          <Expandable title="verifyOtpResult details">
            <NestedParam parentKey="activity.result.verifyOtpResult" childKey="verificationToken" type="string" required={true}>
              Signed JWT containing a unique id, expiry, verification type, contact. Verification status of a user is updated when the token is consumed (in OTP\_LOGIN requests)
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      Whether the activity can be approved.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      Whether the activity can be rejected.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="string" required={true}>
      The creation timestamp.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="string" required={true}>
      The last update timestamp.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/submit/verify_otp \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "type": "ACTIVITY_TYPE_VERIFY_OTP",
      "timestampMs": "<string> (e.g. 1746736509954)",
      "organizationId": "<string> (Your Organization ID)",
      "parameters": {
          "otpId": "<string>",
          "otpCode": "<string>",
          "expirationSeconds": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().verifyOtp({
    otpId: "<string> (ID representing the result of an init OTP activity.)",
    otpCode: "<string> (OTP sent out to a user's contact (email or SMS))",
    expirationSeconds: "<string> (Expiration window (in seconds) indicating how long the verification token is valid for. If not provided, a default of 1 hour will be used. Maximum value is 86400 seconds (24 hours))"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<activity-id>",
      "status": "ACTIVITY_STATUS_COMPLETED",
      "type": "ACTIVITY_TYPE_VERIFY_OTP",
      "organizationId": "<organization-id>",
      "timestampMs": "<timestamp> (e.g. 1746736509954)",
      "result": {
        "activity": {
          "id": "<string>",
          "organizationId": "<string>",
          "status": "<string>",
          "type": "<string>",
          "intent": {
            "verifyOtpIntent": {
              "otpId": "<string>",
              "otpCode": "<string>",
              "expirationSeconds": "<string>"
            }
          },
          "result": {
            "verifyOtpResult": {
              "verificationToken": "<string>"
            }
          },
          "votes": "<array>",
          "fingerprint": "<string>",
          "canApprove": "<boolean>",
          "canReject": "<boolean>",
          "createdAt": "<string>",
          "updatedAt": "<string>"
        }
      }
    }
  }
  ```
</ResponseExample>


# API reference
Source: https://docs.turnkey.com/api-reference/overview

Review our [API Introduction](/developer-reference/api-overview/intro) to get started.

export const tags = [{
  "id": "consensus",
  "label": "Consensus"
}, {
  "id": "api-keys",
  "label": "API keys"
}, {
  "id": "authenticators",
  "label": "Authenticators"
}, {
  "id": "invitations",
  "label": "Invitations"
}, {
  "id": "user-auth",
  "label": "User Auth"
}, {
  "id": "policies",
  "label": "Policies"
}, {
  "id": "private-key-tags",
  "label": "Private Key Tags"
}, {
  "id": "private-keys",
  "label": "Private Keys"
}, {
  "id": "sessions",
  "label": "Sessions"
}, {
  "id": "organizations",
  "label": "Organizations"
}, {
  "id": "user-tags",
  "label": "User Tags"
}, {
  "id": "users",
  "label": "Users"
}, {
  "id": "wallets",
  "label": "Wallets"
}, {
  "id": "user-recovery",
  "label": "User Recovery"
}, {
  "id": "on-ramp",
  "label": "On Ramp"
}, {
  "id": "user-verification",
  "label": "User Verification"
}, {
  "id": "features",
  "label": "Features"
}, {
  "id": "signing",
  "label": "Signing"
}, {
  "id": "activities",
  "label": "Activities"
}];

export const endpoints = [{
  "name": "Approve activity",
  "id": "approve-activity",
  "type": "activity",
  "tags": [{
    "id": "consensus",
    "label": "Consensus"
  }]
}, {
  "name": "Create API keys",
  "id": "create-api-keys",
  "type": "activity",
  "tags": [{
    "id": "api-keys",
    "label": "API Keys"
  }]
}, {
  "name": "Create authenticators",
  "id": "create-authenticators",
  "type": "activity",
  "tags": [{
    "id": "authenticators",
    "label": "Authenticators"
  }]
}, {
  "name": "Create invitations",
  "id": "create-invitations",
  "type": "activity",
  "tags": [{
    "id": "invitations",
    "label": "Invitations"
  }]
}, {
  "name": "Create Oauth providers",
  "id": "create-oauth-providers",
  "type": "activity",
  "tags": [{
    "id": "user-auth",
    "label": "User Auth"
  }]
}, {
  "name": "Create policies",
  "id": "create-policies",
  "type": "activity",
  "tags": [{
    "id": "policies",
    "label": "Policies"
  }]
}, {
  "name": "Create policy",
  "id": "create-policy",
  "type": "activity",
  "tags": [{
    "id": "policies",
    "label": "Policies"
  }]
}, {
  "name": "Create private key tag",
  "id": "create-private-key-tag",
  "type": "activity",
  "tags": [{
    "id": "private-key-tags",
    "label": "Private Key Tags"
  }]
}, {
  "name": "Create private keys",
  "id": "create-private-keys",
  "type": "activity",
  "tags": [{
    "id": "private-keys",
    "label": "Private Keys"
  }]
}, {
  "name": "Create read only session",
  "id": "create-read-only-session",
  "type": "activity",
  "tags": [{
    "id": "sessions",
    "label": "Sessions"
  }]
}, {
  "name": "Create read write session",
  "id": "create-read-write-session",
  "type": "activity",
  "tags": [{
    "id": "sessions",
    "label": "Sessions"
  }]
}, {
  "name": "Create smart contract interface",
  "id": "create-smart-contract-interface",
  "type": "activity",
  "tags": [{
    "id": "policies",
    "label": "Policies"
  }]
}, {
  "name": "Create sub-organization",
  "id": "create-sub-organization",
  "type": "activity",
  "tags": [{
    "id": "organizations",
    "label": "Organizations"
  }]
}, {
  "name": "Create user tag",
  "id": "create-user-tag",
  "type": "activity",
  "tags": [{
    "id": "user-tags",
    "label": "User Tags"
  }]
}, {
  "name": "Create users",
  "id": "create-users",
  "type": "activity",
  "tags": [{
    "id": "users",
    "label": "Users"
  }]
}, {
  "name": "Create wallet",
  "id": "create-wallet",
  "type": "activity",
  "tags": [{
    "id": "wallets",
    "label": "Wallets"
  }]
}, {
  "name": "Create wallet accounts",
  "id": "create-wallet-accounts",
  "type": "activity",
  "tags": [{
    "id": "wallets",
    "label": "Wallets"
  }]
}, {
  "name": "Delete API keys",
  "id": "delete-api-keys",
  "type": "activity",
  "tags": [{
    "id": "api-keys",
    "label": "API Keys"
  }]
}, {
  "name": "Delete authenticators",
  "id": "delete-authenticators",
  "type": "activity",
  "tags": [{
    "id": "authenticators",
    "label": "Authenticators"
  }]
}, {
  "name": "Delete invitation",
  "id": "delete-invitation",
  "type": "activity",
  "tags": [{
    "id": "invitations",
    "label": "Invitations"
  }]
}, {
  "name": "Delete Oauth providers",
  "id": "delete-oauth-providers",
  "type": "activity",
  "tags": [{
    "id": "user-auth",
    "label": "User Auth"
  }]
}, {
  "name": "Delete policy",
  "id": "delete-policy",
  "type": "activity",
  "tags": [{
    "id": "policies",
    "label": "Policies"
  }]
}, {
  "name": "Delete private key tags",
  "id": "delete-private-key-tags",
  "type": "activity",
  "tags": [{
    "id": "private-key-tags",
    "label": "Private Key Tags"
  }]
}, {
  "name": "Delete private keys",
  "id": "delete-private-keys",
  "type": "activity",
  "tags": [{
    "id": "private-keys",
    "label": "Private Keys"
  }]
}, {
  "name": "Delete smart contract interface",
  "id": "delete-smart-contract-interface",
  "type": "activity",
  "tags": [{
    "id": "policies",
    "label": "Policies"
  }]
}, {
  "name": "Delete sub-organization",
  "id": "delete-sub-organization",
  "type": "activity",
  "tags": [{
    "id": "organizations",
    "label": "Organizations"
  }]
}, {
  "name": "Delete user tags",
  "id": "delete-user-tags",
  "type": "activity",
  "tags": [{
    "id": "user-tags",
    "label": "User Tags"
  }]
}, {
  "name": "Delete users",
  "id": "delete-users",
  "type": "activity",
  "tags": [{
    "id": "users",
    "label": "Users"
  }]
}, {
  "name": "Delete wallets",
  "id": "delete-wallets",
  "type": "activity",
  "tags": [{
    "id": "wallets",
    "label": "Wallets"
  }]
}, {
  "name": "Export private key",
  "id": "export-private-key",
  "type": "activity",
  "tags": [{
    "id": "private-keys",
    "label": "Private Keys"
  }]
}, {
  "name": "Export wallet",
  "id": "export-wallet",
  "type": "activity",
  "tags": [{
    "id": "wallets",
    "label": "Wallets"
  }]
}, {
  "name": "Export wallet account",
  "id": "export-wallet-account",
  "type": "activity",
  "tags": [{
    "id": "wallets",
    "label": "Wallets"
  }]
}, {
  "name": "Import private key",
  "id": "import-private-key",
  "type": "activity",
  "tags": [{
    "id": "private-keys",
    "label": "Private Keys"
  }]
}, {
  "name": "Import wallet",
  "id": "import-wallet",
  "type": "activity",
  "tags": [{
    "id": "wallets",
    "label": "Wallets"
  }]
}, {
  "name": "Init email recovery",
  "id": "init-email-recovery",
  "type": "activity",
  "tags": [{
    "id": "user-recovery",
    "label": "User Recovery"
  }]
}, {
  "name": "Init fiat on ramp",
  "id": "init-fiat-on-ramp",
  "type": "activity",
  "tags": [{
    "id": "on-ramp",
    "label": "On Ramp"
  }]
}, {
  "name": "Init generic OTP",
  "id": "init-generic-otp",
  "type": "activity",
  "tags": [{
    "id": "user-verification",
    "label": "User Verification"
  }]
}, {
  "name": "Init import private key",
  "id": "init-import-private-key",
  "type": "activity",
  "tags": [{
    "id": "private-keys",
    "label": "Private Keys"
  }]
}, {
  "name": "Init import wallet",
  "id": "init-import-wallet",
  "type": "activity",
  "tags": [{
    "id": "wallets",
    "label": "Wallets"
  }]
}, {
  "name": "Init OTP auth",
  "id": "init-otp-auth",
  "type": "activity",
  "tags": [{
    "id": "user-auth",
    "label": "User Auth"
  }]
}, {
  "name": "Login with a stamp",
  "id": "login-with-a-stamp",
  "type": "activity",
  "tags": [{
    "id": "sessions",
    "label": "Sessions"
  }]
}, {
  "name": "Login with Oauth",
  "id": "login-with-oauth",
  "type": "activity",
  "tags": [{
    "id": "sessions",
    "label": "Sessions"
  }]
}, {
  "name": "Login with OTP",
  "id": "login-with-otp",
  "type": "activity",
  "tags": [{
    "id": "sessions",
    "label": "Sessions"
  }]
}, {
  "name": "Oauth",
  "id": "oauth",
  "type": "activity",
  "tags": [{
    "id": "user-auth",
    "label": "User Auth"
  }]
}, {
  "name": "OTP auth",
  "id": "otp-auth",
  "type": "activity",
  "tags": [{
    "id": "user-auth",
    "label": "User Auth"
  }]
}, {
  "name": "Perform email auth",
  "id": "perform-email-auth",
  "type": "activity",
  "tags": [{
    "id": "user-auth",
    "label": "User Auth"
  }]
}, {
  "name": "Recover a user",
  "id": "recover-a-user",
  "type": "activity",
  "tags": [{
    "id": "user-recovery",
    "label": "User Recovery"
  }]
}, {
  "name": "Reject activity",
  "id": "reject-activity",
  "type": "activity",
  "tags": [{
    "id": "consensus",
    "label": "Consensus"
  }]
}, {
  "name": "Remove organization feature",
  "id": "remove-organization-feature",
  "type": "activity",
  "tags": [{
    "id": "features",
    "label": "Features"
  }]
}, {
  "name": "Set organization feature",
  "id": "set-organization-feature",
  "type": "activity",
  "tags": [{
    "id": "features",
    "label": "Features"
  }]
}, {
  "name": "Sign raw payload",
  "id": "sign-raw-payload",
  "type": "activity",
  "tags": [{
    "id": "signing",
    "label": "Signing"
  }]
}, {
  "name": "Sign raw payloads",
  "id": "sign-raw-payloads",
  "type": "activity",
  "tags": [{
    "id": "signing",
    "label": "Signing"
  }]
}, {
  "name": "Sign transaction",
  "id": "sign-transaction",
  "type": "activity",
  "tags": [{
    "id": "signing",
    "label": "Signing"
  }]
}, {
  "name": "Update policy",
  "id": "update-policy",
  "type": "activity",
  "tags": [{
    "id": "policies",
    "label": "Policies"
  }]
}, {
  "name": "Update private key tag",
  "id": "update-private-key-tag",
  "type": "activity",
  "tags": [{
    "id": "private-key-tags",
    "label": "Private Key Tags"
  }]
}, {
  "name": "Update root quorum",
  "id": "update-root-quorum",
  "type": "activity",
  "tags": [{
    "id": "organizations",
    "label": "Organizations"
  }]
}, {
  "name": "Update user",
  "id": "update-user",
  "type": "activity",
  "tags": [{
    "id": "users",
    "label": "Users"
  }]
}, {
  "name": "Update user tag",
  "id": "update-user-tag",
  "type": "activity",
  "tags": [{
    "id": "user-tags",
    "label": "User Tags"
  }]
}, {
  "name": "Update user's email",
  "id": "update-user-s-email",
  "type": "activity",
  "tags": [{
    "id": "users",
    "label": "Users"
  }]
}, {
  "name": "Update user's name",
  "id": "update-user-s-name",
  "type": "activity",
  "tags": [{
    "id": "users",
    "label": "Users"
  }]
}, {
  "name": "Update user's phone number",
  "id": "update-user-s-phone-number",
  "type": "activity",
  "tags": [{
    "id": "users",
    "label": "Users"
  }]
}, {
  "name": "Update wallet",
  "id": "update-wallet",
  "type": "activity",
  "tags": [{
    "id": "wallets",
    "label": "Wallets"
  }]
}, {
  "name": "Verify generic OTP",
  "id": "verify-generic-otp",
  "type": "activity",
  "tags": [{
    "id": "user-verification",
    "label": "User Verification"
  }]
}, {
  "name": "Get activity",
  "id": "get-activity",
  "type": "query",
  "tags": [{
    "id": "activities",
    "label": "Activities"
  }]
}, {
  "name": "Get API key",
  "id": "get-api-key",
  "type": "query",
  "tags": [{
    "id": "api-keys",
    "label": "API keys"
  }]
}, {
  "name": "Get API keys",
  "id": "get-api-keys",
  "type": "query",
  "tags": [{
    "id": "api-keys",
    "label": "API keys"
  }]
}, {
  "name": "Get authenticator",
  "id": "get-authenticator",
  "type": "query",
  "tags": [{
    "id": "authenticators",
    "label": "Authenticators"
  }]
}, {
  "name": "Get authenticators",
  "id": "get-authenticators",
  "type": "query",
  "tags": [{
    "id": "authenticators",
    "label": "Authenticators"
  }]
}, {
  "name": "Get configs",
  "id": "get-configs",
  "type": "query",
  "tags": [{
    "id": "organizations",
    "label": "Organizations"
  }]
}, {
  "name": "Get Oauth providers",
  "id": "get-oauth-providers",
  "type": "query",
  "tags": [{
    "id": "user-auth",
    "label": "User Auth"
  }]
}, {
  "name": "Get policy",
  "id": "get-policy",
  "type": "query",
  "tags": [{
    "id": "policies",
    "label": "Policies"
  }]
}, {
  "name": "Get policy evaluations",
  "id": "get-policy-evaluations",
  "type": "query",
  "tags": [{
    "id": "activities",
    "label": "Activities"
  }]
}, {
  "name": "Get private key",
  "id": "get-private-key",
  "type": "query",
  "tags": [{
    "id": "private-keys",
    "label": "Private Keys"
  }]
}, {
  "name": "Get smart contract interface",
  "id": "get-smart-contract-interface",
  "type": "query",
  "tags": [{
    "id": "policies",
    "label": "Policies"
  }]
}, {
  "name": "Get sub-organizations",
  "id": "get-sub-organizations",
  "type": "query",
  "tags": [{
    "id": "organizations",
    "label": "Organizations"
  }]
}, {
  "name": "Get user",
  "id": "get-user",
  "type": "query",
  "tags": [{
    "id": "users",
    "label": "Users"
  }]
}, {
  "name": "Get verified sub-organizations",
  "id": "get-verified-sub-organizations",
  "type": "query",
  "tags": [{
    "id": "organizations",
    "label": "Organizations"
  }]
}, {
  "name": "Get wallet",
  "id": "get-wallet",
  "type": "query",
  "tags": [{
    "id": "wallets",
    "label": "Wallets"
  }]
}, {
  "name": "Get wallet account",
  "id": "get-wallet-account",
  "type": "query",
  "tags": [{
    "id": "wallets",
    "label": "Wallets"
  }]
}, {
  "name": "List activities",
  "id": "list-activities",
  "type": "query",
  "tags": [{
    "id": "activities",
    "label": "Activities"
  }]
}, {
  "name": "List policies",
  "id": "list-policies",
  "type": "query",
  "tags": [{
    "id": "policies",
    "label": "Policies"
  }]
}, {
  "name": "List private key tags",
  "id": "list-private-key-tags",
  "type": "query",
  "tags": [{
    "id": "private-key-tags",
    "label": "Private Key Tags"
  }]
}, {
  "name": "List private keys",
  "id": "list-private-keys",
  "type": "query",
  "tags": [{
    "id": "private-keys",
    "label": "Private Keys"
  }]
}, {
  "name": "List smart contract interfaces",
  "id": "list-smart-contract-interfaces",
  "type": "query",
  "tags": [{
    "id": "policies",
    "label": "Policies"
  }]
}, {
  "name": "List user tags",
  "id": "list-user-tags",
  "type": "query",
  "tags": [{
    "id": "user-tags",
    "label": "User Tags"
  }]
}, {
  "name": "List users",
  "id": "list-users",
  "type": "query",
  "tags": [{
    "id": "users",
    "label": "Users"
  }]
}, {
  "name": "List wallets",
  "id": "list-wallets",
  "type": "query",
  "tags": [{
    "id": "wallets",
    "label": "Wallets"
  }]
}, {
  "name": "List wallets accounts",
  "id": "list-wallets-accounts",
  "type": "query",
  "tags": [{
    "id": "wallets",
    "label": "Wallets"
  }]
}, {
  "name": "Who am I",
  "id": "who-am-i",
  "type": "query",
  "tags": [{
    "id": "sessions",
    "label": "Sessions"
  }]
}];

export const EndpointFilter = ({endpoints, tags}) => {
  const filterId = `endpoint-filter-${Math.random().toString(36).slice(2, 9)}`;
  const handleTagClick = value => {
    const rootEl = document.getElementById(filterId);
    if (!rootEl) return;
    const filterTags = rootEl.getAttribute('data-filter-tags') || '';
    const filterTagsArray = filterTags.split(',').filter(Boolean);
    const isType = ["all", "query", "activity"].includes(value);
    if (isType) {
      rootEl.setAttribute('data-filter-type', value);
    } else {
      if (filterTagsArray.includes(value)) {
        filterTagsArray.splice(filterTagsArray.indexOf(value), 1);
      } else {
        filterTagsArray.push(value);
      }
      rootEl.setAttribute('data-filter-tags', filterTagsArray.join(','));
    }
    const rows = rootEl.querySelectorAll('.endpoint-row');
    rows.forEach(r => {
      const tagsAttr = r.getAttribute('data-tags') || '';
      const tags = tagsAttr.split(',').filter(Boolean);
      const matchesTags = filterTagsArray.length === 0 || filterTagsArray.some(f => tags.includes(f));
      const rowType = r.getAttribute('data-endpoint-type') || 'all';
      const currentType = rootEl.getAttribute('data-filter-type');
      const matchesType = currentType === 'all' || rowType === currentType;
      r.style.display = matchesTags && matchesType ? 'block' : 'none';
    });
    const pills = rootEl.querySelectorAll('.endpoint-tag');
    pills.forEach(p => {
      if (p.hasAttribute('data-endpoint-type')) {
        const type = p.getAttribute('data-endpoint-type');
        if (type === rootEl.getAttribute('data-filter-type')) {
          p.style.backgroundColor = 'rgb(var(--primary-light))';
          p.style.color = 'white';
        } else {
          p.style.removeProperty('background-color');
          p.style.removeProperty('color');
        }
      } else {
        const tagId = p.getAttribute('data-tag');
        if (filterTagsArray.includes(tagId)) {
          p.style.backgroundColor = 'rgb(var(--primary-light))';
          p.style.color = 'white';
        } else {
          p.style.removeProperty('background-color');
          p.style.removeProperty('color');
        }
      }
    });
  };
  return <div>
<div className="flex flex-col gap-4" id={filterId} data-filter-tags="" data-filter-type="all">
<div className="flex flex-row gap-2 flex-wrap items-center">

          {tags.sort((a, b) => a.label.localeCompare(b.label)).map(tag => <span data-tag={tag.id} onClick={() => handleTagClick(tag.id)} className="endpoint-tag select-none h-8 text-xs px-2 cursor-pointer bg-gray-100/50 dark:bg-white/10 inline-flex items-center justify-center rounded-full text-gray-600 dark:text-gray-200 font-medium">
              {tag.label}
            </span>)}
        </div>
        <div className="flex flex-col pb-12 min-h-dvh">
          {endpoints.sort((a, b) => a.name.localeCompare(b.name)).map(endpoint => <div className="endpoint-row" data-tags={endpoint.tags.map(t => t.id).join(",")} data-endpoint-type={endpoint.type}>
              <span onClick={() => {
    window.location.href = `${endpoint.type === "query" ? "queries" : "activities"}/${endpoint.id}`;
  }} className="cursor-pointer py-2 font-normal border-b border-gray-100 dark:border-gray-700 group flex flex-row justify-between items-start md:items-center">
                <div className="flex flex-row gap-2 items-start md:items-center font-normal items-center">
                  <div className="">{endpoint.name}</div>

                  <span class="px-1 py-0.5 rounded text-[0.55rem] leading-tight font-bold bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200">
                    {endpoint.type}
                  </span>
                </div>
                <div className="flex flex-row gap-2">
                  {endpoint.tags.map(tag => <span key={tag.id} style={{
    padding: "0 10px",
    letterSpacing: "0.025rem"
  }} className="inline-flex h-6 items-center text-xs rounded-full bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
                      <span className="tracking-wide">{tag.label}</span>
                    </span>)}
                </div>
              </span>
            </div>)}
        </div>

      </div>
    </div>;
};

<EndpointFilter endpoints={endpoints} tags={tags} />


# Get activity
Source: https://docs.turnkey.com/api-reference/queries/get-activity

Get details about an activity.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="get_activity" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<ParamField body="activityId" type="string" required={true}>
  Unique identifier for a given activity object.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activity" type="object" required={true}>
  activity field

  <Expandable title="activity details">
    <NestedParam parentKey="activity" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="status" type="enum" required={true}>
      status field

      Enum options: `ACTIVITY_STATUS_CREATED`, `ACTIVITY_STATUS_PENDING`, `ACTIVITY_STATUS_COMPLETED`, `ACTIVITY_STATUS_FAILED`, `ACTIVITY_STATUS_CONSENSUS_NEEDED`, `ACTIVITY_STATUS_REJECTED`
    </NestedParam>

    <NestedParam parentKey="activity" childKey="type" type="enum" required={true}>
      type field

      Enum options: `ACTIVITY_TYPE_CREATE_API_KEYS`, `ACTIVITY_TYPE_CREATE_USERS`, `ACTIVITY_TYPE_CREATE_PRIVATE_KEYS`, `ACTIVITY_TYPE_SIGN_RAW_PAYLOAD`, `ACTIVITY_TYPE_CREATE_INVITATIONS`, `ACTIVITY_TYPE_ACCEPT_INVITATION`, `ACTIVITY_TYPE_CREATE_POLICY`, `ACTIVITY_TYPE_DISABLE_PRIVATE_KEY`, `ACTIVITY_TYPE_DELETE_USERS`, `ACTIVITY_TYPE_DELETE_API_KEYS`, `ACTIVITY_TYPE_DELETE_INVITATION`, `ACTIVITY_TYPE_DELETE_ORGANIZATION`, `ACTIVITY_TYPE_DELETE_POLICY`, `ACTIVITY_TYPE_CREATE_USER_TAG`, `ACTIVITY_TYPE_DELETE_USER_TAGS`, `ACTIVITY_TYPE_CREATE_ORGANIZATION`, `ACTIVITY_TYPE_SIGN_TRANSACTION`, `ACTIVITY_TYPE_APPROVE_ACTIVITY`, `ACTIVITY_TYPE_REJECT_ACTIVITY`, `ACTIVITY_TYPE_DELETE_AUTHENTICATORS`, `ACTIVITY_TYPE_CREATE_AUTHENTICATORS`, `ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG`, `ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS`, `ACTIVITY_TYPE_SET_PAYMENT_METHOD`, `ACTIVITY_TYPE_ACTIVATE_BILLING_TIER`, `ACTIVITY_TYPE_DELETE_PAYMENT_METHOD`, `ACTIVITY_TYPE_CREATE_POLICY_V2`, `ACTIVITY_TYPE_CREATE_POLICY_V3`, `ACTIVITY_TYPE_CREATE_API_ONLY_USERS`, `ACTIVITY_TYPE_UPDATE_ROOT_QUORUM`, `ACTIVITY_TYPE_UPDATE_USER_TAG`, `ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG`, `ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2`, `ACTIVITY_TYPE_CREATE_ORGANIZATION_V2`, `ACTIVITY_TYPE_CREATE_USERS_V2`, `ACTIVITY_TYPE_ACCEPT_INVITATION_V2`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2`, `ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS`, `ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2`, `ACTIVITY_TYPE_UPDATE_USER`, `ACTIVITY_TYPE_UPDATE_POLICY`, `ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3`, `ACTIVITY_TYPE_CREATE_WALLET`, `ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS`, `ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY`, `ACTIVITY_TYPE_RECOVER_USER`, `ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE`, `ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE`, `ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2`, `ACTIVITY_TYPE_SIGN_TRANSACTION_V2`, `ACTIVITY_TYPE_EXPORT_PRIVATE_KEY`, `ACTIVITY_TYPE_EXPORT_WALLET`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4`, `ACTIVITY_TYPE_EMAIL_AUTH`, `ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT`, `ACTIVITY_TYPE_INIT_IMPORT_WALLET`, `ACTIVITY_TYPE_IMPORT_WALLET`, `ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY`, `ACTIVITY_TYPE_IMPORT_PRIVATE_KEY`, `ACTIVITY_TYPE_CREATE_POLICIES`, `ACTIVITY_TYPE_SIGN_RAW_PAYLOADS`, `ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION`, `ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS`, `ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5`, `ACTIVITY_TYPE_OAUTH`, `ACTIVITY_TYPE_CREATE_API_KEYS_V2`, `ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION`, `ACTIVITY_TYPE_EMAIL_AUTH_V2`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6`, `ACTIVITY_TYPE_DELETE_PRIVATE_KEYS`, `ACTIVITY_TYPE_DELETE_WALLETS`, `ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2`, `ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION`, `ACTIVITY_TYPE_INIT_OTP_AUTH`, `ACTIVITY_TYPE_OTP_AUTH`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7`, `ACTIVITY_TYPE_UPDATE_WALLET`, `ACTIVITY_TYPE_UPDATE_POLICY_V2`, `ACTIVITY_TYPE_CREATE_USERS_V3`, `ACTIVITY_TYPE_INIT_OTP_AUTH_V2`, `ACTIVITY_TYPE_INIT_OTP`, `ACTIVITY_TYPE_VERIFY_OTP`, `ACTIVITY_TYPE_OTP_LOGIN`, `ACTIVITY_TYPE_STAMP_LOGIN`, `ACTIVITY_TYPE_OAUTH_LOGIN`, `ACTIVITY_TYPE_UPDATE_USER_NAME`, `ACTIVITY_TYPE_UPDATE_USER_EMAIL`, `ACTIVITY_TYPE_UPDATE_USER_PHONE_NUMBER`, `ACTIVITY_TYPE_INIT_FIAT_ON_RAMP`, `ACTIVITY_TYPE_CREATE_SMART_CONTRACT_INTERFACE`, `ACTIVITY_TYPE_DELETE_SMART_CONTRACT_INTERFACE`
    </NestedParam>

    <NestedParam parentKey="activity" childKey="intent" type="object" required={true}>
      intent field

      <Expandable title="intent details">
        <NestedParam parentKey="activity.intent" childKey="createOrganizationIntent" type="object" required={false}>
          createOrganizationIntent field

          <Expandable title="createOrganizationIntent details">
            <NestedParam parentKey="activity.intent.createOrganizationIntent" childKey="organizationName" type="string" required={true}>
              Human-readable name for an Organization.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createOrganizationIntent" childKey="rootEmail" type="string" required={true}>
              The root user's email address.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createOrganizationIntent" childKey="rootAuthenticator" type="object" required={true}>
              rootAuthenticator field

              <Expandable title="rootAuthenticator details">
                <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator" childKey="userId" type="string" required={true}>
                  Unique identifier for a given User.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator.attestation" childKey="id" type="string" required={true}>
                      id field
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator.attestation" childKey="type" type="enum" required={true}>
                      type field

                      Enum options: `public-key`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator.attestation" childKey="rawId" type="string" required={true}>
                      rawId field
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator.attestation" childKey="authenticatorAttachment" type="enum" required={false}>
                      authenticatorAttachment field

                      Enum options: `cross-platform`, `platform`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator.attestation" childKey="response" type="object" required={true}>
                      response field

                      <Expandable title="response details">
                        <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator.attestation.response" childKey="clientDataJson" type="string" required={true}>
                          clientDataJson field
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator.attestation.response" childKey="attestationObject" type="string" required={true}>
                          attestationObject field
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator.attestation.response" childKey="transports" type="array" required={false}>
                          transports field

                          <Expandable title="transports details">
                            <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator.attestation.response.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator.attestation.response" childKey="authenticatorAttachment" type="enum" required={false}>
                          authenticatorAttachment field

                          Enum options: `cross-platform`, `platform`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator.attestation" childKey="clientExtensionResults" type="object" required={true}>
                      clientExtensionResults field

                      <Expandable title="clientExtensionResults details">
                        <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator.attestation.clientExtensionResults" childKey="appid" type="boolean" required={false}>
                          appid field
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator.attestation.clientExtensionResults" childKey="appidExclude" type="boolean" required={false}>
                          appidExclude field
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator.attestation.clientExtensionResults" childKey="credProps" type="object" required={false}>
                          credProps field

                          <Expandable title="credProps details">
                            <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator.attestation.clientExtensionResults.credProps" childKey="rk" type="boolean" required={true}>
                              rk field
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createOrganizationIntent.rootAuthenticator" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createOrganizationIntent" childKey="rootUserId" type="string" required={false}>
              Unique identifier for the root user object.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createAuthenticatorsIntent" type="object" required={false}>
          createAuthenticatorsIntent field

          <Expandable title="createAuthenticatorsIntent details">
            <NestedParam parentKey="activity.intent.createAuthenticatorsIntent" childKey="authenticators" type="array" required={true}>
              A list of Authenticators.

              <Expandable title="authenticators details">
                <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators" childKey="userId" type="string" required={true}>
                  Unique identifier for a given User.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators.attestation" childKey="id" type="string" required={true}>
                      id field
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators.attestation" childKey="type" type="enum" required={true}>
                      type field

                      Enum options: `public-key`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators.attestation" childKey="rawId" type="string" required={true}>
                      rawId field
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators.attestation" childKey="authenticatorAttachment" type="enum" required={false}>
                      authenticatorAttachment field

                      Enum options: `cross-platform`, `platform`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators.attestation" childKey="response" type="object" required={true}>
                      response field

                      <Expandable title="response details">
                        <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators.attestation.response" childKey="clientDataJson" type="string" required={true}>
                          clientDataJson field
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators.attestation.response" childKey="attestationObject" type="string" required={true}>
                          attestationObject field
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators.attestation.response" childKey="transports" type="array" required={false}>
                          transports field

                          <Expandable title="transports details">
                            <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators.attestation.response.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators.attestation.response" childKey="authenticatorAttachment" type="enum" required={false}>
                          authenticatorAttachment field

                          Enum options: `cross-platform`, `platform`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators.attestation" childKey="clientExtensionResults" type="object" required={true}>
                      clientExtensionResults field

                      <Expandable title="clientExtensionResults details">
                        <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators.attestation.clientExtensionResults" childKey="appid" type="boolean" required={false}>
                          appid field
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators.attestation.clientExtensionResults" childKey="appidExclude" type="boolean" required={false}>
                          appidExclude field
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators.attestation.clientExtensionResults" childKey="credProps" type="object" required={false}>
                          credProps field

                          <Expandable title="credProps details">
                            <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators.attestation.clientExtensionResults.credProps" childKey="rk" type="boolean" required={true}>
                              rk field
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createAuthenticatorsIntent.authenticators" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createAuthenticatorsIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createUsersIntent" type="object" required={false}>
          createUsersIntent field

          <Expandable title="createUsersIntent details">
            <NestedParam parentKey="activity.intent.createUsersIntent" childKey="users" type="array" required={true}>
              A list of Users.

              <Expandable title="users details">
                <NestedParam parentKey="activity.intent.createUsersIntent.users" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntent.users" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntent.users" childKey="accessType" type="enum" required={true}>
                  accessType field

                  Enum options: `ACCESS_TYPE_WEB`, `ACCESS_TYPE_API`, `ACCESS_TYPE_ALL`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntent.users" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activity.intent.createUsersIntent.users.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntent.users.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntent.users.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntent.users" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators" childKey="userId" type="string" required={true}>
                      Unique identifier for a given User.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators.attestation" childKey="id" type="string" required={true}>
                          id field
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators.attestation" childKey="type" type="enum" required={true}>
                          type field

                          Enum options: `public-key`
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators.attestation" childKey="rawId" type="string" required={true}>
                          rawId field
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators.attestation" childKey="authenticatorAttachment" type="enum" required={false}>
                          authenticatorAttachment field

                          Enum options: `cross-platform`, `platform`
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators.attestation" childKey="response" type="object" required={true}>
                          response field

                          <Expandable title="response details">
                            <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators.attestation.response" childKey="clientDataJson" type="string" required={true}>
                              clientDataJson field
                            </NestedParam>

                            <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators.attestation.response" childKey="attestationObject" type="string" required={true}>
                              attestationObject field
                            </NestedParam>

                            <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators.attestation.response" childKey="transports" type="array" required={false}>
                              transports field

                              <Expandable title="transports details">
                                <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators.attestation.response.transports" childKey="item" type="enum" required={true}>
                                  item field

                                  Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                                </NestedParam>
                              </Expandable>
                            </NestedParam>

                            <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators.attestation.response" childKey="authenticatorAttachment" type="enum" required={false}>
                              authenticatorAttachment field

                              Enum options: `cross-platform`, `platform`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators.attestation" childKey="clientExtensionResults" type="object" required={true}>
                          clientExtensionResults field

                          <Expandable title="clientExtensionResults details">
                            <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators.attestation.clientExtensionResults" childKey="appid" type="boolean" required={false}>
                              appid field
                            </NestedParam>

                            <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators.attestation.clientExtensionResults" childKey="appidExclude" type="boolean" required={false}>
                              appidExclude field
                            </NestedParam>

                            <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators.attestation.clientExtensionResults" childKey="credProps" type="object" required={false}>
                              credProps field

                              <Expandable title="credProps details">
                                <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators.attestation.clientExtensionResults.credProps" childKey="rk" type="boolean" required={true}>
                                  rk field
                                </NestedParam>
                              </Expandable>
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntent.users.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntent.users" childKey="userTags" type="array" required={true}>
                  A list of User Tag IDs. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="userTags details">
                    <NestedParam parentKey="activity.intent.createUsersIntent.users.userTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createPrivateKeysIntent" type="object" required={false}>
          createPrivateKeysIntent field

          <Expandable title="createPrivateKeysIntent details">
            <NestedParam parentKey="activity.intent.createPrivateKeysIntent" childKey="privateKeys" type="array" required={true}>
              A list of Private Keys.

              <Expandable title="privateKeys details">
                <NestedParam parentKey="activity.intent.createPrivateKeysIntent.privateKeys" childKey="privateKeyName" type="string" required={true}>
                  Human-readable name for a Private Key.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPrivateKeysIntent.privateKeys" childKey="curve" type="enum" required={true}>
                  curve field

                  Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPrivateKeysIntent.privateKeys" childKey="privateKeyTags" type="array" required={true}>
                  A list of Private Key Tag IDs. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="privateKeyTags details">
                    <NestedParam parentKey="activity.intent.createPrivateKeysIntent.privateKeys.privateKeyTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPrivateKeysIntent.privateKeys" childKey="addressFormats" type="array" required={true}>
                  Cryptocurrency-specific formats for a derived address (e.g., Ethereum).

                  <Expandable title="addressFormats details">
                    <NestedParam parentKey="activity.intent.createPrivateKeysIntent.privateKeys.addressFormats" childKey="item" type="enum" required={true}>
                      item field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="signRawPayloadIntent" type="object" required={false}>
          signRawPayloadIntent field

          <Expandable title="signRawPayloadIntent details">
            <NestedParam parentKey="activity.intent.signRawPayloadIntent" childKey="privateKeyId" type="string" required={true}>
              Unique identifier for a given Private Key.
            </NestedParam>

            <NestedParam parentKey="activity.intent.signRawPayloadIntent" childKey="payload" type="string" required={true}>
              Raw unsigned payload to be signed.
            </NestedParam>

            <NestedParam parentKey="activity.intent.signRawPayloadIntent" childKey="encoding" type="enum" required={true}>
              encoding field

              Enum options: `PAYLOAD_ENCODING_HEXADECIMAL`, `PAYLOAD_ENCODING_TEXT_UTF8`, `PAYLOAD_ENCODING_EIP712`
            </NestedParam>

            <NestedParam parentKey="activity.intent.signRawPayloadIntent" childKey="hashFunction" type="enum" required={true}>
              hashFunction field

              Enum options: `HASH_FUNCTION_NO_OP`, `HASH_FUNCTION_SHA256`, `HASH_FUNCTION_KECCAK256`, `HASH_FUNCTION_NOT_APPLICABLE`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createInvitationsIntent" type="object" required={false}>
          createInvitationsIntent field

          <Expandable title="createInvitationsIntent details">
            <NestedParam parentKey="activity.intent.createInvitationsIntent" childKey="invitations" type="array" required={true}>
              A list of Invitations.

              <Expandable title="invitations details">
                <NestedParam parentKey="activity.intent.createInvitationsIntent.invitations" childKey="receiverUserName" type="string" required={true}>
                  The name of the intended Invitation recipient.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createInvitationsIntent.invitations" childKey="receiverUserEmail" type="string" required={true}>
                  The email address of the intended Invitation recipient.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createInvitationsIntent.invitations" childKey="receiverUserTags" type="array" required={true}>
                  A list of tags assigned to the Invitation recipient. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="receiverUserTags details">
                    <NestedParam parentKey="activity.intent.createInvitationsIntent.invitations.receiverUserTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createInvitationsIntent.invitations" childKey="accessType" type="enum" required={true}>
                  accessType field

                  Enum options: `ACCESS_TYPE_WEB`, `ACCESS_TYPE_API`, `ACCESS_TYPE_ALL`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createInvitationsIntent.invitations" childKey="senderUserId" type="string" required={true}>
                  Unique identifier for the Sender of an Invitation.
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="acceptInvitationIntent" type="object" required={false}>
          acceptInvitationIntent field

          <Expandable title="acceptInvitationIntent details">
            <NestedParam parentKey="activity.intent.acceptInvitationIntent" childKey="invitationId" type="string" required={true}>
              Unique identifier for a given Invitation object.
            </NestedParam>

            <NestedParam parentKey="activity.intent.acceptInvitationIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.acceptInvitationIntent" childKey="authenticator" type="object" required={true}>
              authenticator field

              <Expandable title="authenticator details">
                <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator" childKey="userId" type="string" required={true}>
                  Unique identifier for a given User.
                </NestedParam>

                <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator.attestation" childKey="id" type="string" required={true}>
                      id field
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator.attestation" childKey="type" type="enum" required={true}>
                      type field

                      Enum options: `public-key`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator.attestation" childKey="rawId" type="string" required={true}>
                      rawId field
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator.attestation" childKey="authenticatorAttachment" type="enum" required={false}>
                      authenticatorAttachment field

                      Enum options: `cross-platform`, `platform`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator.attestation" childKey="response" type="object" required={true}>
                      response field

                      <Expandable title="response details">
                        <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator.attestation.response" childKey="clientDataJson" type="string" required={true}>
                          clientDataJson field
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator.attestation.response" childKey="attestationObject" type="string" required={true}>
                          attestationObject field
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator.attestation.response" childKey="transports" type="array" required={false}>
                          transports field

                          <Expandable title="transports details">
                            <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator.attestation.response.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator.attestation.response" childKey="authenticatorAttachment" type="enum" required={false}>
                          authenticatorAttachment field

                          Enum options: `cross-platform`, `platform`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator.attestation" childKey="clientExtensionResults" type="object" required={true}>
                      clientExtensionResults field

                      <Expandable title="clientExtensionResults details">
                        <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator.attestation.clientExtensionResults" childKey="appid" type="boolean" required={false}>
                          appid field
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator.attestation.clientExtensionResults" childKey="appidExclude" type="boolean" required={false}>
                          appidExclude field
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator.attestation.clientExtensionResults" childKey="credProps" type="object" required={false}>
                          credProps field

                          <Expandable title="credProps details">
                            <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator.attestation.clientExtensionResults.credProps" childKey="rk" type="boolean" required={true}>
                              rk field
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.acceptInvitationIntent.authenticator" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createPolicyIntent" type="object" required={false}>
          createPolicyIntent field

          <Expandable title="createPolicyIntent details">
            <NestedParam parentKey="activity.intent.createPolicyIntent" childKey="policyName" type="string" required={true}>
              Human-readable name for a Policy.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createPolicyIntent" childKey="selectors" type="array" required={true}>
              A list of simple functions each including a subject, target and boolean. See Policy Engine Language section for additional details.

              <Expandable title="selectors details">
                <NestedParam parentKey="activity.intent.createPolicyIntent.selectors" childKey="subject" type="string" required={false}>
                  subject field
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPolicyIntent.selectors" childKey="operator" type="enum" required={false}>
                  operator field

                  Enum options: `OPERATOR_EQUAL`, `OPERATOR_MORE_THAN`, `OPERATOR_MORE_THAN_OR_EQUAL`, `OPERATOR_LESS_THAN`, `OPERATOR_LESS_THAN_OR_EQUAL`, `OPERATOR_CONTAINS`, `OPERATOR_NOT_EQUAL`, `OPERATOR_IN`, `OPERATOR_NOT_IN`, `OPERATOR_CONTAINS_ONE`, `OPERATOR_CONTAINS_ALL`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPolicyIntent.selectors" childKey="target" type="string" required={false}>
                  target field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createPolicyIntent" childKey="effect" type="enum" required={true}>
              effect field

              Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
            </NestedParam>

            <NestedParam parentKey="activity.intent.createPolicyIntent" childKey="notes" type="string" required={false}>
              notes field
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="disablePrivateKeyIntent" type="object" required={false}>
          disablePrivateKeyIntent field

          <Expandable title="disablePrivateKeyIntent details">
            <NestedParam parentKey="activity.intent.disablePrivateKeyIntent" childKey="privateKeyId" type="string" required={true}>
              Unique identifier for a given Private Key.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="deleteUsersIntent" type="object" required={false}>
          deleteUsersIntent field

          <Expandable title="deleteUsersIntent details">
            <NestedParam parentKey="activity.intent.deleteUsersIntent" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activity.intent.deleteUsersIntent.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="deleteAuthenticatorsIntent" type="object" required={false}>
          deleteAuthenticatorsIntent field

          <Expandable title="deleteAuthenticatorsIntent details">
            <NestedParam parentKey="activity.intent.deleteAuthenticatorsIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.deleteAuthenticatorsIntent" childKey="authenticatorIds" type="array" required={true}>
              A list of Authenticator IDs.

              <Expandable title="authenticatorIds details">
                <NestedParam parentKey="activity.intent.deleteAuthenticatorsIntent.authenticatorIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="deleteInvitationIntent" type="object" required={false}>
          deleteInvitationIntent field

          <Expandable title="deleteInvitationIntent details">
            <NestedParam parentKey="activity.intent.deleteInvitationIntent" childKey="invitationId" type="string" required={true}>
              Unique identifier for a given Invitation object.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="deleteOrganizationIntent" type="object" required={false}>
          deleteOrganizationIntent field

          <Expandable title="deleteOrganizationIntent details">
            <NestedParam parentKey="activity.intent.deleteOrganizationIntent" childKey="organizationId" type="string" required={true}>
              Unique identifier for a given Organization.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="deletePolicyIntent" type="object" required={false}>
          deletePolicyIntent field

          <Expandable title="deletePolicyIntent details">
            <NestedParam parentKey="activity.intent.deletePolicyIntent" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createUserTagIntent" type="object" required={false}>
          createUserTagIntent field

          <Expandable title="createUserTagIntent details">
            <NestedParam parentKey="activity.intent.createUserTagIntent" childKey="userTagName" type="string" required={true}>
              Human-readable name for a User Tag.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createUserTagIntent" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activity.intent.createUserTagIntent.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="deleteUserTagsIntent" type="object" required={false}>
          deleteUserTagsIntent field

          <Expandable title="deleteUserTagsIntent details">
            <NestedParam parentKey="activity.intent.deleteUserTagsIntent" childKey="userTagIds" type="array" required={true}>
              A list of User Tag IDs.

              <Expandable title="userTagIds details">
                <NestedParam parentKey="activity.intent.deleteUserTagsIntent.userTagIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="signTransactionIntent" type="object" required={false}>
          signTransactionIntent field

          <Expandable title="signTransactionIntent details">
            <NestedParam parentKey="activity.intent.signTransactionIntent" childKey="privateKeyId" type="string" required={true}>
              Unique identifier for a given Private Key.
            </NestedParam>

            <NestedParam parentKey="activity.intent.signTransactionIntent" childKey="unsignedTransaction" type="string" required={true}>
              Raw unsigned transaction to be signed by a particular Private Key.
            </NestedParam>

            <NestedParam parentKey="activity.intent.signTransactionIntent" childKey="type" type="enum" required={true}>
              type field

              Enum options: `TRANSACTION_TYPE_ETHEREUM`, `TRANSACTION_TYPE_SOLANA`, `TRANSACTION_TYPE_TRON`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createApiKeysIntent" type="object" required={false}>
          createApiKeysIntent field

          <Expandable title="createApiKeysIntent details">
            <NestedParam parentKey="activity.intent.createApiKeysIntent" childKey="apiKeys" type="array" required={true}>
              A list of API Keys.

              <Expandable title="apiKeys details">
                <NestedParam parentKey="activity.intent.createApiKeysIntent.apiKeys" childKey="apiKeyName" type="string" required={true}>
                  Human-readable name for an API Key.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createApiKeysIntent.apiKeys" childKey="publicKey" type="string" required={true}>
                  The public component of a cryptographic key pair used to sign messages and transactions.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createApiKeysIntent.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                  Optional window (in seconds) indicating how long the API Key should last.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createApiKeysIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="deleteApiKeysIntent" type="object" required={false}>
          deleteApiKeysIntent field

          <Expandable title="deleteApiKeysIntent details">
            <NestedParam parentKey="activity.intent.deleteApiKeysIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.deleteApiKeysIntent" childKey="apiKeyIds" type="array" required={true}>
              A list of API Key IDs.

              <Expandable title="apiKeyIds details">
                <NestedParam parentKey="activity.intent.deleteApiKeysIntent.apiKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="approveActivityIntent" type="object" required={false}>
          approveActivityIntent field

          <Expandable title="approveActivityIntent details">
            <NestedParam parentKey="activity.intent.approveActivityIntent" childKey="fingerprint" type="string" required={true}>
              An artifact verifying a User's action.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="rejectActivityIntent" type="object" required={false}>
          rejectActivityIntent field

          <Expandable title="rejectActivityIntent details">
            <NestedParam parentKey="activity.intent.rejectActivityIntent" childKey="fingerprint" type="string" required={true}>
              An artifact verifying a User's action.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createPrivateKeyTagIntent" type="object" required={false}>
          createPrivateKeyTagIntent field

          <Expandable title="createPrivateKeyTagIntent details">
            <NestedParam parentKey="activity.intent.createPrivateKeyTagIntent" childKey="privateKeyTagName" type="string" required={true}>
              Human-readable name for a Private Key Tag.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createPrivateKeyTagIntent" childKey="privateKeyIds" type="array" required={true}>
              A list of Private Key IDs.

              <Expandable title="privateKeyIds details">
                <NestedParam parentKey="activity.intent.createPrivateKeyTagIntent.privateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="deletePrivateKeyTagsIntent" type="object" required={false}>
          deletePrivateKeyTagsIntent field

          <Expandable title="deletePrivateKeyTagsIntent details">
            <NestedParam parentKey="activity.intent.deletePrivateKeyTagsIntent" childKey="privateKeyTagIds" type="array" required={true}>
              A list of Private Key Tag IDs.

              <Expandable title="privateKeyTagIds details">
                <NestedParam parentKey="activity.intent.deletePrivateKeyTagsIntent.privateKeyTagIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createPolicyIntentV2" type="object" required={false}>
          createPolicyIntentV2 field

          <Expandable title="createPolicyIntentV2 details">
            <NestedParam parentKey="activity.intent.createPolicyIntentV2" childKey="policyName" type="string" required={true}>
              Human-readable name for a Policy.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createPolicyIntentV2" childKey="selectors" type="array" required={true}>
              A list of simple functions each including a subject, target and boolean. See Policy Engine Language section for additional details.

              <Expandable title="selectors details">
                <NestedParam parentKey="activity.intent.createPolicyIntentV2.selectors" childKey="subject" type="string" required={false}>
                  subject field
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPolicyIntentV2.selectors" childKey="operator" type="enum" required={false}>
                  operator field

                  Enum options: `OPERATOR_EQUAL`, `OPERATOR_MORE_THAN`, `OPERATOR_MORE_THAN_OR_EQUAL`, `OPERATOR_LESS_THAN`, `OPERATOR_LESS_THAN_OR_EQUAL`, `OPERATOR_CONTAINS`, `OPERATOR_NOT_EQUAL`, `OPERATOR_IN`, `OPERATOR_NOT_IN`, `OPERATOR_CONTAINS_ONE`, `OPERATOR_CONTAINS_ALL`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPolicyIntentV2.selectors" childKey="targets" type="array" required={false}>
                  targets field

                  <Expandable title="targets details">
                    <NestedParam parentKey="activity.intent.createPolicyIntentV2.selectors.targets" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createPolicyIntentV2" childKey="effect" type="enum" required={true}>
              effect field

              Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
            </NestedParam>

            <NestedParam parentKey="activity.intent.createPolicyIntentV2" childKey="notes" type="string" required={false}>
              notes field
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="setPaymentMethodIntent" type="object" required={false}>
          setPaymentMethodIntent field

          <Expandable title="setPaymentMethodIntent details">
            <NestedParam parentKey="activity.intent.setPaymentMethodIntent" childKey="number" type="string" required={true}>
              The account number of the customer's credit card.
            </NestedParam>

            <NestedParam parentKey="activity.intent.setPaymentMethodIntent" childKey="cvv" type="string" required={true}>
              The verification digits of the customer's credit card.
            </NestedParam>

            <NestedParam parentKey="activity.intent.setPaymentMethodIntent" childKey="expiryMonth" type="string" required={true}>
              The month that the credit card expires.
            </NestedParam>

            <NestedParam parentKey="activity.intent.setPaymentMethodIntent" childKey="expiryYear" type="string" required={true}>
              The year that the credit card expires.
            </NestedParam>

            <NestedParam parentKey="activity.intent.setPaymentMethodIntent" childKey="cardHolderEmail" type="string" required={true}>
              The email that will receive invoices for the credit card.
            </NestedParam>

            <NestedParam parentKey="activity.intent.setPaymentMethodIntent" childKey="cardHolderName" type="string" required={true}>
              The name associated with the credit card.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="activateBillingTierIntent" type="object" required={false}>
          activateBillingTierIntent field

          <Expandable title="activateBillingTierIntent details">
            <NestedParam parentKey="activity.intent.activateBillingTierIntent" childKey="productId" type="string" required={true}>
              The product that the customer wants to subscribe to.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="deletePaymentMethodIntent" type="object" required={false}>
          deletePaymentMethodIntent field

          <Expandable title="deletePaymentMethodIntent details">
            <NestedParam parentKey="activity.intent.deletePaymentMethodIntent" childKey="paymentMethodId" type="string" required={true}>
              The payment method that the customer wants to remove.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createPolicyIntentV3" type="object" required={false}>
          createPolicyIntentV3 field

          <Expandable title="createPolicyIntentV3 details">
            <NestedParam parentKey="activity.intent.createPolicyIntentV3" childKey="policyName" type="string" required={true}>
              Human-readable name for a Policy.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createPolicyIntentV3" childKey="effect" type="enum" required={true}>
              effect field

              Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
            </NestedParam>

            <NestedParam parentKey="activity.intent.createPolicyIntentV3" childKey="condition" type="string" required={false}>
              The condition expression that triggers the Effect
            </NestedParam>

            <NestedParam parentKey="activity.intent.createPolicyIntentV3" childKey="consensus" type="string" required={false}>
              The consensus expression that triggers the Effect
            </NestedParam>

            <NestedParam parentKey="activity.intent.createPolicyIntentV3" childKey="notes" type="string" required={false}>
              notes field
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createApiOnlyUsersIntent" type="object" required={false}>
          createApiOnlyUsersIntent field

          <Expandable title="createApiOnlyUsersIntent details">
            <NestedParam parentKey="activity.intent.createApiOnlyUsersIntent" childKey="apiOnlyUsers" type="array" required={true}>
              A list of API-only Users to create.

              <Expandable title="apiOnlyUsers details">
                <NestedParam parentKey="activity.intent.createApiOnlyUsersIntent.apiOnlyUsers" childKey="userName" type="string" required={true}>
                  The name of the new API-only User.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createApiOnlyUsersIntent.apiOnlyUsers" childKey="userEmail" type="string" required={false}>
                  The email address for this API-only User (optional).
                </NestedParam>

                <NestedParam parentKey="activity.intent.createApiOnlyUsersIntent.apiOnlyUsers" childKey="userTags" type="array" required={true}>
                  A list of tags assigned to the new API-only User. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="userTags details">
                    <NestedParam parentKey="activity.intent.createApiOnlyUsersIntent.apiOnlyUsers.userTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createApiOnlyUsersIntent.apiOnlyUsers" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activity.intent.createApiOnlyUsersIntent.apiOnlyUsers.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createApiOnlyUsersIntent.apiOnlyUsers.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createApiOnlyUsersIntent.apiOnlyUsers.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="updateRootQuorumIntent" type="object" required={false}>
          updateRootQuorumIntent field

          <Expandable title="updateRootQuorumIntent details">
            <NestedParam parentKey="activity.intent.updateRootQuorumIntent" childKey="threshold" type="number" required={true}>
              The threshold of unique approvals to reach quorum.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateRootQuorumIntent" childKey="userIds" type="array" required={true}>
              The unique identifiers of users who comprise the quorum set.

              <Expandable title="userIds details">
                <NestedParam parentKey="activity.intent.updateRootQuorumIntent.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="updateUserTagIntent" type="object" required={false}>
          updateUserTagIntent field

          <Expandable title="updateUserTagIntent details">
            <NestedParam parentKey="activity.intent.updateUserTagIntent" childKey="userTagId" type="string" required={true}>
              Unique identifier for a given User Tag.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserTagIntent" childKey="newUserTagName" type="string" required={false}>
              The new, human-readable name for the tag with the given ID.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserTagIntent" childKey="addUserIds" type="array" required={true}>
              A list of User IDs to add this tag to.

              <Expandable title="addUserIds details">
                <NestedParam parentKey="activity.intent.updateUserTagIntent.addUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserTagIntent" childKey="removeUserIds" type="array" required={true}>
              A list of User IDs to remove this tag from.

              <Expandable title="removeUserIds details">
                <NestedParam parentKey="activity.intent.updateUserTagIntent.removeUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="updatePrivateKeyTagIntent" type="object" required={false}>
          updatePrivateKeyTagIntent field

          <Expandable title="updatePrivateKeyTagIntent details">
            <NestedParam parentKey="activity.intent.updatePrivateKeyTagIntent" childKey="privateKeyTagId" type="string" required={true}>
              Unique identifier for a given Private Key Tag.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePrivateKeyTagIntent" childKey="newPrivateKeyTagName" type="string" required={false}>
              The new, human-readable name for the tag with the given ID.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePrivateKeyTagIntent" childKey="addPrivateKeyIds" type="array" required={true}>
              A list of Private Keys IDs to add this tag to.

              <Expandable title="addPrivateKeyIds details">
                <NestedParam parentKey="activity.intent.updatePrivateKeyTagIntent.addPrivateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePrivateKeyTagIntent" childKey="removePrivateKeyIds" type="array" required={true}>
              A list of Private Key IDs to remove this tag from.

              <Expandable title="removePrivateKeyIds details">
                <NestedParam parentKey="activity.intent.updatePrivateKeyTagIntent.removePrivateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createAuthenticatorsIntentV2" type="object" required={false}>
          createAuthenticatorsIntentV2 field

          <Expandable title="createAuthenticatorsIntentV2 details">
            <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2" childKey="authenticators" type="array" required={true}>
              A list of Authenticators.

              <Expandable title="authenticators details">
                <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2.authenticators" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2.authenticators" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2.authenticators" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                      The cbor encoded then base64 url encoded id of the credential.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                      A base64 url encoded payload containing metadata about the signing context and the challenge.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                      A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2.authenticators.attestation" childKey="transports" type="array" required={true}>
                      The type of authenticator transports.

                      <Expandable title="transports details">
                        <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                          item field

                          Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createAuthenticatorsIntentV2" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="acceptInvitationIntentV2" type="object" required={false}>
          acceptInvitationIntentV2 field

          <Expandable title="acceptInvitationIntentV2 details">
            <NestedParam parentKey="activity.intent.acceptInvitationIntentV2" childKey="invitationId" type="string" required={true}>
              Unique identifier for a given Invitation object.
            </NestedParam>

            <NestedParam parentKey="activity.intent.acceptInvitationIntentV2" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.acceptInvitationIntentV2" childKey="authenticator" type="object" required={true}>
              authenticator field

              <Expandable title="authenticator details">
                <NestedParam parentKey="activity.intent.acceptInvitationIntentV2.authenticator" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activity.intent.acceptInvitationIntentV2.authenticator" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>

                <NestedParam parentKey="activity.intent.acceptInvitationIntentV2.authenticator" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activity.intent.acceptInvitationIntentV2.authenticator.attestation" childKey="credentialId" type="string" required={true}>
                      The cbor encoded then base64 url encoded id of the credential.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.acceptInvitationIntentV2.authenticator.attestation" childKey="clientDataJson" type="string" required={true}>
                      A base64 url encoded payload containing metadata about the signing context and the challenge.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.acceptInvitationIntentV2.authenticator.attestation" childKey="attestationObject" type="string" required={true}>
                      A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.acceptInvitationIntentV2.authenticator.attestation" childKey="transports" type="array" required={true}>
                      The type of authenticator transports.

                      <Expandable title="transports details">
                        <NestedParam parentKey="activity.intent.acceptInvitationIntentV2.authenticator.attestation.transports" childKey="item" type="enum" required={true}>
                          item field

                          Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createOrganizationIntentV2" type="object" required={false}>
          createOrganizationIntentV2 field

          <Expandable title="createOrganizationIntentV2 details">
            <NestedParam parentKey="activity.intent.createOrganizationIntentV2" childKey="organizationName" type="string" required={true}>
              Human-readable name for an Organization.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createOrganizationIntentV2" childKey="rootEmail" type="string" required={true}>
              The root user's email address.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createOrganizationIntentV2" childKey="rootAuthenticator" type="object" required={true}>
              rootAuthenticator field

              <Expandable title="rootAuthenticator details">
                <NestedParam parentKey="activity.intent.createOrganizationIntentV2.rootAuthenticator" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createOrganizationIntentV2.rootAuthenticator" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createOrganizationIntentV2.rootAuthenticator" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activity.intent.createOrganizationIntentV2.rootAuthenticator.attestation" childKey="credentialId" type="string" required={true}>
                      The cbor encoded then base64 url encoded id of the credential.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createOrganizationIntentV2.rootAuthenticator.attestation" childKey="clientDataJson" type="string" required={true}>
                      A base64 url encoded payload containing metadata about the signing context and the challenge.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createOrganizationIntentV2.rootAuthenticator.attestation" childKey="attestationObject" type="string" required={true}>
                      A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createOrganizationIntentV2.rootAuthenticator.attestation" childKey="transports" type="array" required={true}>
                      The type of authenticator transports.

                      <Expandable title="transports details">
                        <NestedParam parentKey="activity.intent.createOrganizationIntentV2.rootAuthenticator.attestation.transports" childKey="item" type="enum" required={true}>
                          item field

                          Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createOrganizationIntentV2" childKey="rootUserId" type="string" required={false}>
              Unique identifier for the root user object.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createUsersIntentV2" type="object" required={false}>
          createUsersIntentV2 field

          <Expandable title="createUsersIntentV2 details">
            <NestedParam parentKey="activity.intent.createUsersIntentV2" childKey="users" type="array" required={true}>
              A list of Users.

              <Expandable title="users details">
                <NestedParam parentKey="activity.intent.createUsersIntentV2.users" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntentV2.users" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntentV2.users" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activity.intent.createUsersIntentV2.users.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntentV2.users.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntentV2.users.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntentV2.users" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activity.intent.createUsersIntentV2.users.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntentV2.users.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntentV2.users.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activity.intent.createUsersIntentV2.users.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createUsersIntentV2.users.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createUsersIntentV2.users.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createUsersIntentV2.users.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activity.intent.createUsersIntentV2.users.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntentV2.users" childKey="userTags" type="array" required={true}>
                  A list of User Tag IDs. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="userTags details">
                    <NestedParam parentKey="activity.intent.createUsersIntentV2.users.userTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createSubOrganizationIntent" type="object" required={false}>
          createSubOrganizationIntent field

          <Expandable title="createSubOrganizationIntent details">
            <NestedParam parentKey="activity.intent.createSubOrganizationIntent" childKey="name" type="string" required={true}>
              Name for this sub-organization
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntent" childKey="rootAuthenticator" type="object" required={true}>
              rootAuthenticator field

              <Expandable title="rootAuthenticator details">
                <NestedParam parentKey="activity.intent.createSubOrganizationIntent.rootAuthenticator" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntent.rootAuthenticator" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntent.rootAuthenticator" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntent.rootAuthenticator.attestation" childKey="credentialId" type="string" required={true}>
                      The cbor encoded then base64 url encoded id of the credential.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntent.rootAuthenticator.attestation" childKey="clientDataJson" type="string" required={true}>
                      A base64 url encoded payload containing metadata about the signing context and the challenge.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntent.rootAuthenticator.attestation" childKey="attestationObject" type="string" required={true}>
                      A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntent.rootAuthenticator.attestation" childKey="transports" type="array" required={true}>
                      The type of authenticator transports.

                      <Expandable title="transports details">
                        <NestedParam parentKey="activity.intent.createSubOrganizationIntent.rootAuthenticator.attestation.transports" childKey="item" type="enum" required={true}>
                          item field

                          Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createSubOrganizationIntentV2" type="object" required={false}>
          createSubOrganizationIntentV2 field

          <Expandable title="createSubOrganizationIntentV2 details">
            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2" childKey="subOrganizationName" type="string" required={true}>
              Name for this sub-organization
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2" childKey="rootUsers" type="array" required={true}>
              Root users to create within this sub-organization

              <Expandable title="rootUsers details">
                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2.rootUsers" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2.rootUsers" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2.rootUsers" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2.rootUsers.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2.rootUsers.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2.rootUsers.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2.rootUsers" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2.rootUsers.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2.rootUsers.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2.rootUsers.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2.rootUsers.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2.rootUsers.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2.rootUsers.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2.rootUsers.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2.rootUsers.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV2" childKey="rootQuorumThreshold" type="number" required={true}>
              The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="updateAllowedOriginsIntent" type="object" required={false}>
          updateAllowedOriginsIntent field

          <Expandable title="updateAllowedOriginsIntent details">
            <NestedParam parentKey="activity.intent.updateAllowedOriginsIntent" childKey="allowedOrigins" type="array" required={true}>
              Additional origins requests are allowed from besides Turnkey origins

              <Expandable title="allowedOrigins details">
                <NestedParam parentKey="activity.intent.updateAllowedOriginsIntent.allowedOrigins" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createPrivateKeysIntentV2" type="object" required={false}>
          createPrivateKeysIntentV2 field

          <Expandable title="createPrivateKeysIntentV2 details">
            <NestedParam parentKey="activity.intent.createPrivateKeysIntentV2" childKey="privateKeys" type="array" required={true}>
              A list of Private Keys.

              <Expandable title="privateKeys details">
                <NestedParam parentKey="activity.intent.createPrivateKeysIntentV2.privateKeys" childKey="privateKeyName" type="string" required={true}>
                  Human-readable name for a Private Key.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPrivateKeysIntentV2.privateKeys" childKey="curve" type="enum" required={true}>
                  curve field

                  Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPrivateKeysIntentV2.privateKeys" childKey="privateKeyTags" type="array" required={true}>
                  A list of Private Key Tag IDs. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="privateKeyTags details">
                    <NestedParam parentKey="activity.intent.createPrivateKeysIntentV2.privateKeys.privateKeyTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPrivateKeysIntentV2.privateKeys" childKey="addressFormats" type="array" required={true}>
                  Cryptocurrency-specific formats for a derived address (e.g., Ethereum).

                  <Expandable title="addressFormats details">
                    <NestedParam parentKey="activity.intent.createPrivateKeysIntentV2.privateKeys.addressFormats" childKey="item" type="enum" required={true}>
                      item field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="updateUserIntent" type="object" required={false}>
          updateUserIntent field

          <Expandable title="updateUserIntent details">
            <NestedParam parentKey="activity.intent.updateUserIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserIntent" childKey="userName" type="string" required={false}>
              Human-readable name for a User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserIntent" childKey="userEmail" type="string" required={false}>
              The user's email address.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserIntent" childKey="userTagIds" type="array" required={false}>
              An updated list of User Tags to apply to this User. This field, if not needed, should be an empty array in your request body.

              <Expandable title="userTagIds details">
                <NestedParam parentKey="activity.intent.updateUserIntent.userTagIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserIntent" childKey="userPhoneNumber" type="string" required={false}>
              The user's phone number in E.164 format e.g. +13214567890
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="updatePolicyIntent" type="object" required={false}>
          updatePolicyIntent field

          <Expandable title="updatePolicyIntent details">
            <NestedParam parentKey="activity.intent.updatePolicyIntent" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePolicyIntent" childKey="policyName" type="string" required={false}>
              Human-readable name for a Policy.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePolicyIntent" childKey="policyEffect" type="enum" required={false}>
              policyEffect field

              Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePolicyIntent" childKey="policyCondition" type="string" required={false}>
              The condition expression that triggers the Effect (optional).
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePolicyIntent" childKey="policyConsensus" type="string" required={false}>
              The consensus expression that triggers the Effect (optional).
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePolicyIntent" childKey="policyNotes" type="string" required={false}>
              Accompanying notes for a Policy (optional).
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="setPaymentMethodIntentV2" type="object" required={false}>
          setPaymentMethodIntentV2 field

          <Expandable title="setPaymentMethodIntentV2 details">
            <NestedParam parentKey="activity.intent.setPaymentMethodIntentV2" childKey="paymentMethodId" type="string" required={true}>
              The id of the payment method that was created clientside.
            </NestedParam>

            <NestedParam parentKey="activity.intent.setPaymentMethodIntentV2" childKey="cardHolderEmail" type="string" required={true}>
              The email that will receive invoices for the credit card.
            </NestedParam>

            <NestedParam parentKey="activity.intent.setPaymentMethodIntentV2" childKey="cardHolderName" type="string" required={true}>
              The name associated with the credit card.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createSubOrganizationIntentV3" type="object" required={false}>
          createSubOrganizationIntentV3 field

          <Expandable title="createSubOrganizationIntentV3 details">
            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3" childKey="subOrganizationName" type="string" required={true}>
              Name for this sub-organization
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3" childKey="rootUsers" type="array" required={true}>
              Root users to create within this sub-organization

              <Expandable title="rootUsers details">
                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.rootUsers" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.rootUsers" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.rootUsers" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.rootUsers.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.rootUsers.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.rootUsers.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.rootUsers" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.rootUsers.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.rootUsers.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.rootUsers.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.rootUsers.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.rootUsers.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.rootUsers.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.rootUsers.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.rootUsers.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3" childKey="rootQuorumThreshold" type="number" required={true}>
              The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3" childKey="privateKeys" type="array" required={true}>
              A list of Private Keys.

              <Expandable title="privateKeys details">
                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.privateKeys" childKey="privateKeyName" type="string" required={true}>
                  Human-readable name for a Private Key.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.privateKeys" childKey="curve" type="enum" required={true}>
                  curve field

                  Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.privateKeys" childKey="privateKeyTags" type="array" required={true}>
                  A list of Private Key Tag IDs. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="privateKeyTags details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.privateKeys.privateKeyTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.privateKeys" childKey="addressFormats" type="array" required={true}>
                  Cryptocurrency-specific formats for a derived address (e.g., Ethereum).

                  <Expandable title="addressFormats details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV3.privateKeys.addressFormats" childKey="item" type="enum" required={true}>
                      item field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createWalletIntent" type="object" required={false}>
          createWalletIntent field

          <Expandable title="createWalletIntent details">
            <NestedParam parentKey="activity.intent.createWalletIntent" childKey="walletName" type="string" required={true}>
              Human-readable name for a Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createWalletIntent" childKey="accounts" type="array" required={true}>
              A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.

              <Expandable title="accounts details">
                <NestedParam parentKey="activity.intent.createWalletIntent.accounts" childKey="curve" type="enum" required={true}>
                  curve field

                  Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createWalletIntent.accounts" childKey="pathFormat" type="enum" required={true}>
                  pathFormat field

                  Enum options: `PATH_FORMAT_BIP32`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createWalletIntent.accounts" childKey="path" type="string" required={true}>
                  Path used to generate a wallet Account.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createWalletIntent.accounts" childKey="addressFormat" type="enum" required={true}>
                  addressFormat field

                  Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createWalletIntent" childKey="mnemonicLength" type="number" required={false}>
              Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createWalletAccountsIntent" type="object" required={false}>
          createWalletAccountsIntent field

          <Expandable title="createWalletAccountsIntent details">
            <NestedParam parentKey="activity.intent.createWalletAccountsIntent" childKey="walletId" type="string" required={true}>
              Unique identifier for a given Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createWalletAccountsIntent" childKey="accounts" type="array" required={true}>
              A list of wallet Accounts.

              <Expandable title="accounts details">
                <NestedParam parentKey="activity.intent.createWalletAccountsIntent.accounts" childKey="curve" type="enum" required={true}>
                  curve field

                  Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createWalletAccountsIntent.accounts" childKey="pathFormat" type="enum" required={true}>
                  pathFormat field

                  Enum options: `PATH_FORMAT_BIP32`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createWalletAccountsIntent.accounts" childKey="path" type="string" required={true}>
                  Path used to generate a wallet Account.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createWalletAccountsIntent.accounts" childKey="addressFormat" type="enum" required={true}>
                  addressFormat field

                  Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="initUserEmailRecoveryIntent" type="object" required={false}>
          initUserEmailRecoveryIntent field

          <Expandable title="initUserEmailRecoveryIntent details">
            <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent" childKey="email" type="string" required={true}>
              Email of the user starting recovery
            </NestedParam>

            <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the recovery bundle will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the recovery credential is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent" childKey="emailCustomization" type="object" required={false}>
              emailCustomization field

              <Expandable title="emailCustomization details">
                <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent.emailCustomization" childKey="appName" type="string" required={false}>
                  The name of the application.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent.emailCustomization" childKey="logoUrl" type="string" required={false}>
                  A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent.emailCustomization" childKey="magicLinkTemplate" type="string" required={false}>
                  A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent.emailCustomization" childKey="templateVariables" type="string" required={false}>
                  JSON object containing key/value pairs to be used with custom templates.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initUserEmailRecoveryIntent.emailCustomization" childKey="templateId" type="string" required={false}>
                  Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="recoverUserIntent" type="object" required={false}>
          recoverUserIntent field

          <Expandable title="recoverUserIntent details">
            <NestedParam parentKey="activity.intent.recoverUserIntent" childKey="authenticator" type="object" required={true}>
              authenticator field

              <Expandable title="authenticator details">
                <NestedParam parentKey="activity.intent.recoverUserIntent.authenticator" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activity.intent.recoverUserIntent.authenticator" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>

                <NestedParam parentKey="activity.intent.recoverUserIntent.authenticator" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activity.intent.recoverUserIntent.authenticator.attestation" childKey="credentialId" type="string" required={true}>
                      The cbor encoded then base64 url encoded id of the credential.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.recoverUserIntent.authenticator.attestation" childKey="clientDataJson" type="string" required={true}>
                      A base64 url encoded payload containing metadata about the signing context and the challenge.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.recoverUserIntent.authenticator.attestation" childKey="attestationObject" type="string" required={true}>
                      A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.recoverUserIntent.authenticator.attestation" childKey="transports" type="array" required={true}>
                      The type of authenticator transports.

                      <Expandable title="transports details">
                        <NestedParam parentKey="activity.intent.recoverUserIntent.authenticator.attestation.transports" childKey="item" type="enum" required={true}>
                          item field

                          Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.recoverUserIntent" childKey="userId" type="string" required={true}>
              Unique identifier for the user performing recovery.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="setOrganizationFeatureIntent" type="object" required={false}>
          setOrganizationFeatureIntent field

          <Expandable title="setOrganizationFeatureIntent details">
            <NestedParam parentKey="activity.intent.setOrganizationFeatureIntent" childKey="name" type="enum" required={true}>
              name field

              Enum options: `FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY`, `FEATURE_NAME_WEBAUTHN_ORIGINS`, `FEATURE_NAME_EMAIL_AUTH`, `FEATURE_NAME_EMAIL_RECOVERY`, `FEATURE_NAME_WEBHOOK`, `FEATURE_NAME_SMS_AUTH`, `FEATURE_NAME_OTP_EMAIL_AUTH`
            </NestedParam>

            <NestedParam parentKey="activity.intent.setOrganizationFeatureIntent" childKey="value" type="string" required={true}>
              Optional value for the feature. Will override existing values if feature is already set.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="removeOrganizationFeatureIntent" type="object" required={false}>
          removeOrganizationFeatureIntent field

          <Expandable title="removeOrganizationFeatureIntent details">
            <NestedParam parentKey="activity.intent.removeOrganizationFeatureIntent" childKey="name" type="enum" required={true}>
              name field

              Enum options: `FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY`, `FEATURE_NAME_WEBAUTHN_ORIGINS`, `FEATURE_NAME_EMAIL_AUTH`, `FEATURE_NAME_EMAIL_RECOVERY`, `FEATURE_NAME_WEBHOOK`, `FEATURE_NAME_SMS_AUTH`, `FEATURE_NAME_OTP_EMAIL_AUTH`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="signRawPayloadIntentV2" type="object" required={false}>
          signRawPayloadIntentV2 field

          <Expandable title="signRawPayloadIntentV2 details">
            <NestedParam parentKey="activity.intent.signRawPayloadIntentV2" childKey="signWith" type="string" required={true}>
              A Wallet account address, Private Key address, or Private Key identifier.
            </NestedParam>

            <NestedParam parentKey="activity.intent.signRawPayloadIntentV2" childKey="payload" type="string" required={true}>
              Raw unsigned payload to be signed.
            </NestedParam>

            <NestedParam parentKey="activity.intent.signRawPayloadIntentV2" childKey="encoding" type="enum" required={true}>
              encoding field

              Enum options: `PAYLOAD_ENCODING_HEXADECIMAL`, `PAYLOAD_ENCODING_TEXT_UTF8`, `PAYLOAD_ENCODING_EIP712`
            </NestedParam>

            <NestedParam parentKey="activity.intent.signRawPayloadIntentV2" childKey="hashFunction" type="enum" required={true}>
              hashFunction field

              Enum options: `HASH_FUNCTION_NO_OP`, `HASH_FUNCTION_SHA256`, `HASH_FUNCTION_KECCAK256`, `HASH_FUNCTION_NOT_APPLICABLE`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="signTransactionIntentV2" type="object" required={false}>
          signTransactionIntentV2 field

          <Expandable title="signTransactionIntentV2 details">
            <NestedParam parentKey="activity.intent.signTransactionIntentV2" childKey="signWith" type="string" required={true}>
              A Wallet account address, Private Key address, or Private Key identifier.
            </NestedParam>

            <NestedParam parentKey="activity.intent.signTransactionIntentV2" childKey="unsignedTransaction" type="string" required={true}>
              Raw unsigned transaction to be signed
            </NestedParam>

            <NestedParam parentKey="activity.intent.signTransactionIntentV2" childKey="type" type="enum" required={true}>
              type field

              Enum options: `TRANSACTION_TYPE_ETHEREUM`, `TRANSACTION_TYPE_SOLANA`, `TRANSACTION_TYPE_TRON`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="exportPrivateKeyIntent" type="object" required={false}>
          exportPrivateKeyIntent field

          <Expandable title="exportPrivateKeyIntent details">
            <NestedParam parentKey="activity.intent.exportPrivateKeyIntent" childKey="privateKeyId" type="string" required={true}>
              Unique identifier for a given Private Key.
            </NestedParam>

            <NestedParam parentKey="activity.intent.exportPrivateKeyIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the export bundle will be encrypted.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="exportWalletIntent" type="object" required={false}>
          exportWalletIntent field

          <Expandable title="exportWalletIntent details">
            <NestedParam parentKey="activity.intent.exportWalletIntent" childKey="walletId" type="string" required={true}>
              Unique identifier for a given Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.intent.exportWalletIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the export bundle will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activity.intent.exportWalletIntent" childKey="language" type="enum" required={false}>
              language field

              Enum options: `MNEMONIC_LANGUAGE_ENGLISH`, `MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE`, `MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE`, `MNEMONIC_LANGUAGE_CZECH`, `MNEMONIC_LANGUAGE_FRENCH`, `MNEMONIC_LANGUAGE_ITALIAN`, `MNEMONIC_LANGUAGE_JAPANESE`, `MNEMONIC_LANGUAGE_KOREAN`, `MNEMONIC_LANGUAGE_SPANISH`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createSubOrganizationIntentV4" type="object" required={false}>
          createSubOrganizationIntentV4 field

          <Expandable title="createSubOrganizationIntentV4 details">
            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4" childKey="subOrganizationName" type="string" required={true}>
              Name for this sub-organization
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4" childKey="rootUsers" type="array" required={true}>
              Root users to create within this sub-organization

              <Expandable title="rootUsers details">
                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.rootUsers" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.rootUsers" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.rootUsers" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.rootUsers.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.rootUsers.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.rootUsers.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.rootUsers" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.rootUsers.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.rootUsers.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.rootUsers.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.rootUsers.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.rootUsers.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.rootUsers.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.rootUsers.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.rootUsers.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4" childKey="rootQuorumThreshold" type="number" required={true}>
              The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.wallet" childKey="walletName" type="string" required={true}>
                  Human-readable name for a Wallet.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.wallet" childKey="accounts" type="array" required={true}>
                  A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="accounts details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.wallet.accounts" childKey="curve" type="enum" required={true}>
                      curve field

                      Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.wallet.accounts" childKey="pathFormat" type="enum" required={true}>
                      pathFormat field

                      Enum options: `PATH_FORMAT_BIP32`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.wallet.accounts" childKey="path" type="string" required={true}>
                      Path used to generate a wallet Account.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.wallet.accounts" childKey="addressFormat" type="enum" required={true}>
                      addressFormat field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4.wallet" childKey="mnemonicLength" type="number" required={false}>
                  Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4" childKey="disableEmailRecovery" type="boolean" required={false}>
              Disable email recovery for the sub-organization
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV4" childKey="disableEmailAuth" type="boolean" required={false}>
              Disable email auth for the sub-organization
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="emailAuthIntent" type="object" required={false}>
          emailAuthIntent field

          <Expandable title="emailAuthIntent details">
            <NestedParam parentKey="activity.intent.emailAuthIntent" childKey="email" type="string" required={true}>
              Email of the authenticating user.
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the email auth bundle (credentials) will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntent" childKey="apiKeyName" type="string" required={false}>
              Optional human-readable name for an API Key. If none provided, default to Email Auth - \<Timestamp>
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntent" childKey="emailCustomization" type="object" required={false}>
              emailCustomization field

              <Expandable title="emailCustomization details">
                <NestedParam parentKey="activity.intent.emailAuthIntent.emailCustomization" childKey="appName" type="string" required={false}>
                  The name of the application.
                </NestedParam>

                <NestedParam parentKey="activity.intent.emailAuthIntent.emailCustomization" childKey="logoUrl" type="string" required={false}>
                  A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
                </NestedParam>

                <NestedParam parentKey="activity.intent.emailAuthIntent.emailCustomization" childKey="magicLinkTemplate" type="string" required={false}>
                  A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
                </NestedParam>

                <NestedParam parentKey="activity.intent.emailAuthIntent.emailCustomization" childKey="templateVariables" type="string" required={false}>
                  JSON object containing key/value pairs to be used with custom templates.
                </NestedParam>

                <NestedParam parentKey="activity.intent.emailAuthIntent.emailCustomization" childKey="templateId" type="string" required={false}>
                  Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntent" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated Email Auth API keys
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntent" childKey="sendFromEmailAddress" type="string" required={false}>
              Optional custom email address from which to send the email
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntent" childKey="sendFromEmailSenderName" type="string" required={false}>
              Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntent" childKey="replyToEmailAddress" type="string" required={false}>
              Optional custom email address to use as reply-to
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="exportWalletAccountIntent" type="object" required={false}>
          exportWalletAccountIntent field

          <Expandable title="exportWalletAccountIntent details">
            <NestedParam parentKey="activity.intent.exportWalletAccountIntent" childKey="address" type="string" required={true}>
              Address to identify Wallet Account.
            </NestedParam>

            <NestedParam parentKey="activity.intent.exportWalletAccountIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the export bundle will be encrypted.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="initImportWalletIntent" type="object" required={false}>
          initImportWalletIntent field

          <Expandable title="initImportWalletIntent details">
            <NestedParam parentKey="activity.intent.initImportWalletIntent" childKey="userId" type="string" required={true}>
              The ID of the User importing a Wallet.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="importWalletIntent" type="object" required={false}>
          importWalletIntent field

          <Expandable title="importWalletIntent details">
            <NestedParam parentKey="activity.intent.importWalletIntent" childKey="userId" type="string" required={true}>
              The ID of the User importing a Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.intent.importWalletIntent" childKey="walletName" type="string" required={true}>
              Human-readable name for a Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.intent.importWalletIntent" childKey="encryptedBundle" type="string" required={true}>
              Bundle containing a wallet mnemonic encrypted to the enclave's target public key.
            </NestedParam>

            <NestedParam parentKey="activity.intent.importWalletIntent" childKey="accounts" type="array" required={true}>
              A list of wallet Accounts.

              <Expandable title="accounts details">
                <NestedParam parentKey="activity.intent.importWalletIntent.accounts" childKey="curve" type="enum" required={true}>
                  curve field

                  Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activity.intent.importWalletIntent.accounts" childKey="pathFormat" type="enum" required={true}>
                  pathFormat field

                  Enum options: `PATH_FORMAT_BIP32`
                </NestedParam>

                <NestedParam parentKey="activity.intent.importWalletIntent.accounts" childKey="path" type="string" required={true}>
                  Path used to generate a wallet Account.
                </NestedParam>

                <NestedParam parentKey="activity.intent.importWalletIntent.accounts" childKey="addressFormat" type="enum" required={true}>
                  addressFormat field

                  Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="initImportPrivateKeyIntent" type="object" required={false}>
          initImportPrivateKeyIntent field

          <Expandable title="initImportPrivateKeyIntent details">
            <NestedParam parentKey="activity.intent.initImportPrivateKeyIntent" childKey="userId" type="string" required={true}>
              The ID of the User importing a Private Key.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="importPrivateKeyIntent" type="object" required={false}>
          importPrivateKeyIntent field

          <Expandable title="importPrivateKeyIntent details">
            <NestedParam parentKey="activity.intent.importPrivateKeyIntent" childKey="userId" type="string" required={true}>
              The ID of the User importing a Private Key.
            </NestedParam>

            <NestedParam parentKey="activity.intent.importPrivateKeyIntent" childKey="privateKeyName" type="string" required={true}>
              Human-readable name for a Private Key.
            </NestedParam>

            <NestedParam parentKey="activity.intent.importPrivateKeyIntent" childKey="encryptedBundle" type="string" required={true}>
              Bundle containing a raw private key encrypted to the enclave's target public key.
            </NestedParam>

            <NestedParam parentKey="activity.intent.importPrivateKeyIntent" childKey="curve" type="enum" required={true}>
              curve field

              Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
            </NestedParam>

            <NestedParam parentKey="activity.intent.importPrivateKeyIntent" childKey="addressFormats" type="array" required={true}>
              Cryptocurrency-specific formats for a derived address (e.g., Ethereum).

              <Expandable title="addressFormats details">
                <NestedParam parentKey="activity.intent.importPrivateKeyIntent.addressFormats" childKey="item" type="enum" required={true}>
                  item field

                  Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createPoliciesIntent" type="object" required={false}>
          createPoliciesIntent field

          <Expandable title="createPoliciesIntent details">
            <NestedParam parentKey="activity.intent.createPoliciesIntent" childKey="policies" type="array" required={true}>
              An array of policy intents to be created.

              <Expandable title="policies details">
                <NestedParam parentKey="activity.intent.createPoliciesIntent.policies" childKey="policyName" type="string" required={true}>
                  Human-readable name for a Policy.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPoliciesIntent.policies" childKey="effect" type="enum" required={true}>
                  effect field

                  Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPoliciesIntent.policies" childKey="condition" type="string" required={false}>
                  The condition expression that triggers the Effect
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPoliciesIntent.policies" childKey="consensus" type="string" required={false}>
                  The consensus expression that triggers the Effect
                </NestedParam>

                <NestedParam parentKey="activity.intent.createPoliciesIntent.policies" childKey="notes" type="string" required={false}>
                  notes field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="signRawPayloadsIntent" type="object" required={false}>
          signRawPayloadsIntent field

          <Expandable title="signRawPayloadsIntent details">
            <NestedParam parentKey="activity.intent.signRawPayloadsIntent" childKey="signWith" type="string" required={true}>
              A Wallet account address, Private Key address, or Private Key identifier.
            </NestedParam>

            <NestedParam parentKey="activity.intent.signRawPayloadsIntent" childKey="payloads" type="array" required={true}>
              An array of raw unsigned payloads to be signed.

              <Expandable title="payloads details">
                <NestedParam parentKey="activity.intent.signRawPayloadsIntent.payloads" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.signRawPayloadsIntent" childKey="encoding" type="enum" required={true}>
              encoding field

              Enum options: `PAYLOAD_ENCODING_HEXADECIMAL`, `PAYLOAD_ENCODING_TEXT_UTF8`, `PAYLOAD_ENCODING_EIP712`
            </NestedParam>

            <NestedParam parentKey="activity.intent.signRawPayloadsIntent" childKey="hashFunction" type="enum" required={true}>
              hashFunction field

              Enum options: `HASH_FUNCTION_NO_OP`, `HASH_FUNCTION_SHA256`, `HASH_FUNCTION_KECCAK256`, `HASH_FUNCTION_NOT_APPLICABLE`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createReadOnlySessionIntent" type="object" required={false}>
          createReadOnlySessionIntent field
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createOauthProvidersIntent" type="object" required={false}>
          createOauthProvidersIntent field

          <Expandable title="createOauthProvidersIntent details">
            <NestedParam parentKey="activity.intent.createOauthProvidersIntent" childKey="userId" type="string" required={true}>
              The ID of the User to add an Oauth provider to
            </NestedParam>

            <NestedParam parentKey="activity.intent.createOauthProvidersIntent" childKey="oauthProviders" type="array" required={true}>
              A list of Oauth providers.

              <Expandable title="oauthProviders details">
                <NestedParam parentKey="activity.intent.createOauthProvidersIntent.oauthProviders" childKey="providerName" type="string" required={true}>
                  Human-readable name to identify a Provider.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createOauthProvidersIntent.oauthProviders" childKey="oidcToken" type="string" required={true}>
                  Base64 encoded OIDC token
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="deleteOauthProvidersIntent" type="object" required={false}>
          deleteOauthProvidersIntent field

          <Expandable title="deleteOauthProvidersIntent details">
            <NestedParam parentKey="activity.intent.deleteOauthProvidersIntent" childKey="userId" type="string" required={true}>
              The ID of the User to remove an Oauth provider from
            </NestedParam>

            <NestedParam parentKey="activity.intent.deleteOauthProvidersIntent" childKey="providerIds" type="array" required={true}>
              Unique identifier for a given Provider.

              <Expandable title="providerIds details">
                <NestedParam parentKey="activity.intent.deleteOauthProvidersIntent.providerIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createSubOrganizationIntentV5" type="object" required={false}>
          createSubOrganizationIntentV5 field

          <Expandable title="createSubOrganizationIntentV5 details">
            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5" childKey="subOrganizationName" type="string" required={true}>
              Name for this sub-organization
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5" childKey="rootUsers" type="array" required={true}>
              Root users to create within this sub-organization

              <Expandable title="rootUsers details">
                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers" childKey="oauthProviders" type="array" required={true}>
                  A list of Oauth providers. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="oauthProviders details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers.oauthProviders" childKey="providerName" type="string" required={true}>
                      Human-readable name to identify a Provider.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.rootUsers.oauthProviders" childKey="oidcToken" type="string" required={true}>
                      Base64 encoded OIDC token
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5" childKey="rootQuorumThreshold" type="number" required={true}>
              The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.wallet" childKey="walletName" type="string" required={true}>
                  Human-readable name for a Wallet.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.wallet" childKey="accounts" type="array" required={true}>
                  A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="accounts details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.wallet.accounts" childKey="curve" type="enum" required={true}>
                      curve field

                      Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.wallet.accounts" childKey="pathFormat" type="enum" required={true}>
                      pathFormat field

                      Enum options: `PATH_FORMAT_BIP32`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.wallet.accounts" childKey="path" type="string" required={true}>
                      Path used to generate a wallet Account.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.wallet.accounts" childKey="addressFormat" type="enum" required={true}>
                      addressFormat field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5.wallet" childKey="mnemonicLength" type="number" required={false}>
                  Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5" childKey="disableEmailRecovery" type="boolean" required={false}>
              Disable email recovery for the sub-organization
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV5" childKey="disableEmailAuth" type="boolean" required={false}>
              Disable email auth for the sub-organization
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="oauthIntent" type="object" required={false}>
          oauthIntent field

          <Expandable title="oauthIntent details">
            <NestedParam parentKey="activity.intent.oauthIntent" childKey="oidcToken" type="string" required={true}>
              Base64 encoded OIDC token
            </NestedParam>

            <NestedParam parentKey="activity.intent.oauthIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the oauth bundle (credentials) will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activity.intent.oauthIntent" childKey="apiKeyName" type="string" required={false}>
              Optional human-readable name for an API Key. If none provided, default to Oauth - \<Timestamp>
            </NestedParam>

            <NestedParam parentKey="activity.intent.oauthIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activity.intent.oauthIntent" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated Oauth API keys
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createApiKeysIntentV2" type="object" required={false}>
          createApiKeysIntentV2 field

          <Expandable title="createApiKeysIntentV2 details">
            <NestedParam parentKey="activity.intent.createApiKeysIntentV2" childKey="apiKeys" type="array" required={true}>
              A list of API Keys.

              <Expandable title="apiKeys details">
                <NestedParam parentKey="activity.intent.createApiKeysIntentV2.apiKeys" childKey="apiKeyName" type="string" required={true}>
                  Human-readable name for an API Key.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createApiKeysIntentV2.apiKeys" childKey="publicKey" type="string" required={true}>
                  The public component of a cryptographic key pair used to sign messages and transactions.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createApiKeysIntentV2.apiKeys" childKey="curveType" type="enum" required={true}>
                  curveType field

                  Enum options: `API_KEY_CURVE_P256`, `API_KEY_CURVE_SECP256K1`, `API_KEY_CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activity.intent.createApiKeysIntentV2.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                  Optional window (in seconds) indicating how long the API Key should last.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createApiKeysIntentV2" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createReadWriteSessionIntent" type="object" required={false}>
          createReadWriteSessionIntent field

          <Expandable title="createReadWriteSessionIntent details">
            <NestedParam parentKey="activity.intent.createReadWriteSessionIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the read write session bundle (credentials) will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createReadWriteSessionIntent" childKey="email" type="string" required={true}>
              Email of the user to create a read write session for
            </NestedParam>

            <NestedParam parentKey="activity.intent.createReadWriteSessionIntent" childKey="apiKeyName" type="string" required={false}>
              Optional human-readable name for an API Key. If none provided, default to Read Write Session - \<Timestamp>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createReadWriteSessionIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="emailAuthIntentV2" type="object" required={false}>
          emailAuthIntentV2 field

          <Expandable title="emailAuthIntentV2 details">
            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="email" type="string" required={true}>
              Email of the authenticating user.
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the email auth bundle (credentials) will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="apiKeyName" type="string" required={false}>
              Optional human-readable name for an API Key. If none provided, default to Email Auth - \<Timestamp>
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="emailCustomization" type="object" required={false}>
              emailCustomization field

              <Expandable title="emailCustomization details">
                <NestedParam parentKey="activity.intent.emailAuthIntentV2.emailCustomization" childKey="appName" type="string" required={false}>
                  The name of the application.
                </NestedParam>

                <NestedParam parentKey="activity.intent.emailAuthIntentV2.emailCustomization" childKey="logoUrl" type="string" required={false}>
                  A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
                </NestedParam>

                <NestedParam parentKey="activity.intent.emailAuthIntentV2.emailCustomization" childKey="magicLinkTemplate" type="string" required={false}>
                  A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
                </NestedParam>

                <NestedParam parentKey="activity.intent.emailAuthIntentV2.emailCustomization" childKey="templateVariables" type="string" required={false}>
                  JSON object containing key/value pairs to be used with custom templates.
                </NestedParam>

                <NestedParam parentKey="activity.intent.emailAuthIntentV2.emailCustomization" childKey="templateId" type="string" required={false}>
                  Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated Email Auth API keys
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="sendFromEmailAddress" type="string" required={false}>
              Optional custom email address from which to send the email
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="sendFromEmailSenderName" type="string" required={false}>
              Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
            </NestedParam>

            <NestedParam parentKey="activity.intent.emailAuthIntentV2" childKey="replyToEmailAddress" type="string" required={false}>
              Optional custom email address to use as reply-to
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createSubOrganizationIntentV6" type="object" required={false}>
          createSubOrganizationIntentV6 field

          <Expandable title="createSubOrganizationIntentV6 details">
            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6" childKey="subOrganizationName" type="string" required={true}>
              Name for this sub-organization
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6" childKey="rootUsers" type="array" required={true}>
              Root users to create within this sub-organization

              <Expandable title="rootUsers details">
                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers.apiKeys" childKey="curveType" type="enum" required={true}>
                      curveType field

                      Enum options: `API_KEY_CURVE_P256`, `API_KEY_CURVE_SECP256K1`, `API_KEY_CURVE_ED25519`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers" childKey="oauthProviders" type="array" required={true}>
                  A list of Oauth providers. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="oauthProviders details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers.oauthProviders" childKey="providerName" type="string" required={true}>
                      Human-readable name to identify a Provider.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.rootUsers.oauthProviders" childKey="oidcToken" type="string" required={true}>
                      Base64 encoded OIDC token
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6" childKey="rootQuorumThreshold" type="number" required={true}>
              The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.wallet" childKey="walletName" type="string" required={true}>
                  Human-readable name for a Wallet.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.wallet" childKey="accounts" type="array" required={true}>
                  A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="accounts details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.wallet.accounts" childKey="curve" type="enum" required={true}>
                      curve field

                      Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.wallet.accounts" childKey="pathFormat" type="enum" required={true}>
                      pathFormat field

                      Enum options: `PATH_FORMAT_BIP32`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.wallet.accounts" childKey="path" type="string" required={true}>
                      Path used to generate a wallet Account.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.wallet.accounts" childKey="addressFormat" type="enum" required={true}>
                      addressFormat field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6.wallet" childKey="mnemonicLength" type="number" required={false}>
                  Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6" childKey="disableEmailRecovery" type="boolean" required={false}>
              Disable email recovery for the sub-organization
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV6" childKey="disableEmailAuth" type="boolean" required={false}>
              Disable email auth for the sub-organization
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="deletePrivateKeysIntent" type="object" required={false}>
          deletePrivateKeysIntent field

          <Expandable title="deletePrivateKeysIntent details">
            <NestedParam parentKey="activity.intent.deletePrivateKeysIntent" childKey="privateKeyIds" type="array" required={true}>
              List of unique identifiers for private keys within an organization

              <Expandable title="privateKeyIds details">
                <NestedParam parentKey="activity.intent.deletePrivateKeysIntent.privateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.deletePrivateKeysIntent" childKey="deleteWithoutExport" type="boolean" required={false}>
              Optional parameter for deleting the private keys, even if any have not been previously exported. If they have been exported, this field is ignored.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="deleteWalletsIntent" type="object" required={false}>
          deleteWalletsIntent field

          <Expandable title="deleteWalletsIntent details">
            <NestedParam parentKey="activity.intent.deleteWalletsIntent" childKey="walletIds" type="array" required={true}>
              List of unique identifiers for wallets within an organization

              <Expandable title="walletIds details">
                <NestedParam parentKey="activity.intent.deleteWalletsIntent.walletIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.deleteWalletsIntent" childKey="deleteWithoutExport" type="boolean" required={false}>
              Optional parameter for deleting the wallets, even if any have not been previously exported. If they have been exported, this field is ignored.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createReadWriteSessionIntentV2" type="object" required={false}>
          createReadWriteSessionIntentV2 field

          <Expandable title="createReadWriteSessionIntentV2 details">
            <NestedParam parentKey="activity.intent.createReadWriteSessionIntentV2" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the read write session bundle (credentials) will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createReadWriteSessionIntentV2" childKey="userId" type="string" required={false}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createReadWriteSessionIntentV2" childKey="apiKeyName" type="string" required={false}>
              Optional human-readable name for an API Key. If none provided, default to Read Write Session - \<Timestamp>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createReadWriteSessionIntentV2" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createReadWriteSessionIntentV2" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated ReadWriteSession API keys
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="deleteSubOrganizationIntent" type="object" required={false}>
          deleteSubOrganizationIntent field

          <Expandable title="deleteSubOrganizationIntent details">
            <NestedParam parentKey="activity.intent.deleteSubOrganizationIntent" childKey="deleteWithoutExport" type="boolean" required={false}>
              Sub-organization deletion, by default, requires associated wallets and private keys to be exported for security reasons. Set this boolean to true to force sub-organization deletion even if some wallets or private keys within it have not been exported yet. Default: false.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="initOtpAuthIntent" type="object" required={false}>
          initOtpAuthIntent field

          <Expandable title="initOtpAuthIntent details">
            <NestedParam parentKey="activity.intent.initOtpAuthIntent" childKey="otpType" type="string" required={true}>
              Enum to specifiy whether to send OTP via SMS or email
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntent" childKey="contact" type="string" required={true}>
              Email or phone number to send the OTP code to
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntent" childKey="emailCustomization" type="object" required={false}>
              emailCustomization field

              <Expandable title="emailCustomization details">
                <NestedParam parentKey="activity.intent.initOtpAuthIntent.emailCustomization" childKey="appName" type="string" required={false}>
                  The name of the application.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpAuthIntent.emailCustomization" childKey="logoUrl" type="string" required={false}>
                  A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpAuthIntent.emailCustomization" childKey="magicLinkTemplate" type="string" required={false}>
                  A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpAuthIntent.emailCustomization" childKey="templateVariables" type="string" required={false}>
                  JSON object containing key/value pairs to be used with custom templates.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpAuthIntent.emailCustomization" childKey="templateId" type="string" required={false}>
                  Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntent" childKey="smsCustomization" type="object" required={false}>
              smsCustomization field

              <Expandable title="smsCustomization details">
                <NestedParam parentKey="activity.intent.initOtpAuthIntent.smsCustomization" childKey="template" type="string" required={false}>
                  Template containing references to .OtpCode i.e Your OTP is \{\{.OtpCode}}
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntent" childKey="userIdentifier" type="string" required={false}>
              Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntent" childKey="sendFromEmailAddress" type="string" required={false}>
              Optional custom email address from which to send the OTP email
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntent" childKey="sendFromEmailSenderName" type="string" required={false}>
              Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntent" childKey="replyToEmailAddress" type="string" required={false}>
              Optional custom email address to use as reply-to
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="otpAuthIntent" type="object" required={false}>
          otpAuthIntent field

          <Expandable title="otpAuthIntent details">
            <NestedParam parentKey="activity.intent.otpAuthIntent" childKey="otpId" type="string" required={true}>
              ID representing the result of an init OTP activity.
            </NestedParam>

            <NestedParam parentKey="activity.intent.otpAuthIntent" childKey="otpCode" type="string" required={true}>
              OTP sent out to a user's contact (email or SMS)
            </NestedParam>

            <NestedParam parentKey="activity.intent.otpAuthIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the OTP bundle (credentials) will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activity.intent.otpAuthIntent" childKey="apiKeyName" type="string" required={false}>
              Optional human-readable name for an API Key. If none provided, default to OTP Auth - \<Timestamp>
            </NestedParam>

            <NestedParam parentKey="activity.intent.otpAuthIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activity.intent.otpAuthIntent" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated OTP Auth API keys
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createSubOrganizationIntentV7" type="object" required={false}>
          createSubOrganizationIntentV7 field

          <Expandable title="createSubOrganizationIntentV7 details">
            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7" childKey="subOrganizationName" type="string" required={true}>
              Name for this sub-organization
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7" childKey="rootUsers" type="array" required={true}>
              Root users to create within this sub-organization

              <Expandable title="rootUsers details">
                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers" childKey="userPhoneNumber" type="string" required={false}>
                  The user's phone number in E.164 format e.g. +13214567890
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.apiKeys" childKey="curveType" type="enum" required={true}>
                      curveType field

                      Enum options: `API_KEY_CURVE_P256`, `API_KEY_CURVE_SECP256K1`, `API_KEY_CURVE_ED25519`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers" childKey="oauthProviders" type="array" required={true}>
                  A list of Oauth providers. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="oauthProviders details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.oauthProviders" childKey="providerName" type="string" required={true}>
                      Human-readable name to identify a Provider.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.rootUsers.oauthProviders" childKey="oidcToken" type="string" required={true}>
                      Base64 encoded OIDC token
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7" childKey="rootQuorumThreshold" type="number" required={true}>
              The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.wallet" childKey="walletName" type="string" required={true}>
                  Human-readable name for a Wallet.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.wallet" childKey="accounts" type="array" required={true}>
                  A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="accounts details">
                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.wallet.accounts" childKey="curve" type="enum" required={true}>
                      curve field

                      Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.wallet.accounts" childKey="pathFormat" type="enum" required={true}>
                      pathFormat field

                      Enum options: `PATH_FORMAT_BIP32`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.wallet.accounts" childKey="path" type="string" required={true}>
                      Path used to generate a wallet Account.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.wallet.accounts" childKey="addressFormat" type="enum" required={true}>
                      addressFormat field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7.wallet" childKey="mnemonicLength" type="number" required={false}>
                  Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7" childKey="disableEmailRecovery" type="boolean" required={false}>
              Disable email recovery for the sub-organization
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7" childKey="disableEmailAuth" type="boolean" required={false}>
              Disable email auth for the sub-organization
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7" childKey="disableSmsAuth" type="boolean" required={false}>
              Disable OTP SMS auth for the sub-organization
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSubOrganizationIntentV7" childKey="disableOtpEmailAuth" type="boolean" required={false}>
              Disable OTP email auth for the sub-organization
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="updateWalletIntent" type="object" required={false}>
          updateWalletIntent field

          <Expandable title="updateWalletIntent details">
            <NestedParam parentKey="activity.intent.updateWalletIntent" childKey="walletId" type="string" required={true}>
              Unique identifier for a given Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateWalletIntent" childKey="walletName" type="string" required={false}>
              Human-readable name for a Wallet.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="updatePolicyIntentV2" type="object" required={false}>
          updatePolicyIntentV2 field

          <Expandable title="updatePolicyIntentV2 details">
            <NestedParam parentKey="activity.intent.updatePolicyIntentV2" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePolicyIntentV2" childKey="policyName" type="string" required={false}>
              Human-readable name for a Policy.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePolicyIntentV2" childKey="policyEffect" type="enum" required={false}>
              policyEffect field

              Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePolicyIntentV2" childKey="policyCondition" type="string" required={false}>
              The condition expression that triggers the Effect (optional).
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePolicyIntentV2" childKey="policyConsensus" type="string" required={false}>
              The consensus expression that triggers the Effect (optional).
            </NestedParam>

            <NestedParam parentKey="activity.intent.updatePolicyIntentV2" childKey="policyNotes" type="string" required={false}>
              Accompanying notes for a Policy (optional).
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createUsersIntentV3" type="object" required={false}>
          createUsersIntentV3 field

          <Expandable title="createUsersIntentV3 details">
            <NestedParam parentKey="activity.intent.createUsersIntentV3" childKey="users" type="array" required={true}>
              A list of Users.

              <Expandable title="users details">
                <NestedParam parentKey="activity.intent.createUsersIntentV3.users" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntentV3.users" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntentV3.users" childKey="userPhoneNumber" type="string" required={false}>
                  The user's phone number in E.164 format e.g. +13214567890
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntentV3.users" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.apiKeys" childKey="curveType" type="enum" required={true}>
                      curveType field

                      Enum options: `API_KEY_CURVE_P256`, `API_KEY_CURVE_SECP256K1`, `API_KEY_CURVE_ED25519`
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntentV3.users" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activity.intent.createUsersIntentV3.users.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createUsersIntentV3.users.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createUsersIntentV3.users.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activity.intent.createUsersIntentV3.users.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activity.intent.createUsersIntentV3.users.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntentV3.users" childKey="oauthProviders" type="array" required={true}>
                  A list of Oauth providers. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="oauthProviders details">
                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.oauthProviders" childKey="providerName" type="string" required={true}>
                      Human-readable name to identify a Provider.
                    </NestedParam>

                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.oauthProviders" childKey="oidcToken" type="string" required={true}>
                      Base64 encoded OIDC token
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.intent.createUsersIntentV3.users" childKey="userTags" type="array" required={true}>
                  A list of User Tag IDs. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="userTags details">
                    <NestedParam parentKey="activity.intent.createUsersIntentV3.users.userTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="initOtpAuthIntentV2" type="object" required={false}>
          initOtpAuthIntentV2 field

          <Expandable title="initOtpAuthIntentV2 details">
            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="otpType" type="string" required={true}>
              Enum to specifiy whether to send OTP via SMS or email
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="contact" type="string" required={true}>
              Email or phone number to send the OTP code to
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="otpLength" type="number" required={false}>
              Optional length of the OTP code. Default = 9
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="emailCustomization" type="object" required={false}>
              emailCustomization field

              <Expandable title="emailCustomization details">
                <NestedParam parentKey="activity.intent.initOtpAuthIntentV2.emailCustomization" childKey="appName" type="string" required={false}>
                  The name of the application.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpAuthIntentV2.emailCustomization" childKey="logoUrl" type="string" required={false}>
                  A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpAuthIntentV2.emailCustomization" childKey="magicLinkTemplate" type="string" required={false}>
                  A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpAuthIntentV2.emailCustomization" childKey="templateVariables" type="string" required={false}>
                  JSON object containing key/value pairs to be used with custom templates.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpAuthIntentV2.emailCustomization" childKey="templateId" type="string" required={false}>
                  Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="smsCustomization" type="object" required={false}>
              smsCustomization field

              <Expandable title="smsCustomization details">
                <NestedParam parentKey="activity.intent.initOtpAuthIntentV2.smsCustomization" childKey="template" type="string" required={false}>
                  Template containing references to .OtpCode i.e Your OTP is \{\{.OtpCode}}
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="userIdentifier" type="string" required={false}>
              Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="sendFromEmailAddress" type="string" required={false}>
              Optional custom email address from which to send the OTP email
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="alphanumeric" type="boolean" required={false}>
              Optional flag to specify if the OTP code should be alphanumeric (Crockford’s Base32). Default = true
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="sendFromEmailSenderName" type="string" required={false}>
              Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpAuthIntentV2" childKey="replyToEmailAddress" type="string" required={false}>
              Optional custom email address to use as reply-to
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="initOtpIntent" type="object" required={false}>
          initOtpIntent field

          <Expandable title="initOtpIntent details">
            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="otpType" type="string" required={true}>
              Whether to send OTP via SMS or email. Possible values: OTP\_TYPE\_SMS, OTP\_TYPE\_EMAIL
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="contact" type="string" required={true}>
              Email or phone number to send the OTP code to
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="otpLength" type="number" required={false}>
              Optional length of the OTP code. Default = 9
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="emailCustomization" type="object" required={false}>
              emailCustomization field

              <Expandable title="emailCustomization details">
                <NestedParam parentKey="activity.intent.initOtpIntent.emailCustomization" childKey="appName" type="string" required={false}>
                  The name of the application.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpIntent.emailCustomization" childKey="logoUrl" type="string" required={false}>
                  A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpIntent.emailCustomization" childKey="magicLinkTemplate" type="string" required={false}>
                  A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpIntent.emailCustomization" childKey="templateVariables" type="string" required={false}>
                  JSON object containing key/value pairs to be used with custom templates.
                </NestedParam>

                <NestedParam parentKey="activity.intent.initOtpIntent.emailCustomization" childKey="templateId" type="string" required={false}>
                  Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="smsCustomization" type="object" required={false}>
              smsCustomization field

              <Expandable title="smsCustomization details">
                <NestedParam parentKey="activity.intent.initOtpIntent.smsCustomization" childKey="template" type="string" required={false}>
                  Template containing references to .OtpCode i.e Your OTP is \{\{.OtpCode}}
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="userIdentifier" type="string" required={false}>
              Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="sendFromEmailAddress" type="string" required={false}>
              Optional custom email address from which to send the OTP email
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="alphanumeric" type="boolean" required={false}>
              Optional flag to specify if the OTP code should be alphanumeric (Crockford’s Base32). Default = true
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="sendFromEmailSenderName" type="string" required={false}>
              Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the OTP is valid for. If not provided, a default of 5 minutes will be used. Maximum value is 600 seconds (10 minutes)
            </NestedParam>

            <NestedParam parentKey="activity.intent.initOtpIntent" childKey="replyToEmailAddress" type="string" required={false}>
              Optional custom email address to use as reply-to
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="verifyOtpIntent" type="object" required={false}>
          verifyOtpIntent field

          <Expandable title="verifyOtpIntent details">
            <NestedParam parentKey="activity.intent.verifyOtpIntent" childKey="otpId" type="string" required={true}>
              ID representing the result of an init OTP activity.
            </NestedParam>

            <NestedParam parentKey="activity.intent.verifyOtpIntent" childKey="otpCode" type="string" required={true}>
              OTP sent out to a user's contact (email or SMS)
            </NestedParam>

            <NestedParam parentKey="activity.intent.verifyOtpIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the verification token is valid for. If not provided, a default of 1 hour will be used. Maximum value is 86400 seconds (24 hours)
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="otpLoginIntent" type="object" required={false}>
          otpLoginIntent field

          <Expandable title="otpLoginIntent details">
            <NestedParam parentKey="activity.intent.otpLoginIntent" childKey="verificationToken" type="string" required={true}>
              Signed JWT containing a unique id, expiry, verification type, contact
            </NestedParam>

            <NestedParam parentKey="activity.intent.otpLoginIntent" childKey="publicKey" type="string" required={true}>
              Client-side public key generated by the user, which will be conditionally added to org data based on the validity of the verification token
            </NestedParam>

            <NestedParam parentKey="activity.intent.otpLoginIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activity.intent.otpLoginIntent" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated Login API keys
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="stampLoginIntent" type="object" required={false}>
          stampLoginIntent field

          <Expandable title="stampLoginIntent details">
            <NestedParam parentKey="activity.intent.stampLoginIntent" childKey="publicKey" type="string" required={true}>
              Client-side public key generated by the user, which will be conditionally added to org data based on the passkey stamp associated with this request
            </NestedParam>

            <NestedParam parentKey="activity.intent.stampLoginIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activity.intent.stampLoginIntent" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated Login API keys
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="oauthLoginIntent" type="object" required={false}>
          oauthLoginIntent field

          <Expandable title="oauthLoginIntent details">
            <NestedParam parentKey="activity.intent.oauthLoginIntent" childKey="oidcToken" type="string" required={true}>
              Base64 encoded OIDC token
            </NestedParam>

            <NestedParam parentKey="activity.intent.oauthLoginIntent" childKey="publicKey" type="string" required={true}>
              Client-side public key generated by the user, which will be conditionally added to org data based on the validity of the oidc token associated with this request
            </NestedParam>

            <NestedParam parentKey="activity.intent.oauthLoginIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activity.intent.oauthLoginIntent" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated Login API keys
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="updateUserNameIntent" type="object" required={false}>
          updateUserNameIntent field

          <Expandable title="updateUserNameIntent details">
            <NestedParam parentKey="activity.intent.updateUserNameIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserNameIntent" childKey="userName" type="string" required={true}>
              Human-readable name for a User.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="updateUserEmailIntent" type="object" required={false}>
          updateUserEmailIntent field

          <Expandable title="updateUserEmailIntent details">
            <NestedParam parentKey="activity.intent.updateUserEmailIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserEmailIntent" childKey="userEmail" type="string" required={true}>
              The user's email address. Setting this to an empty string will remove the user's email.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserEmailIntent" childKey="verificationToken" type="string" required={false}>
              Signed JWT containing a unique id, expiry, verification type, contact
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="updateUserPhoneNumberIntent" type="object" required={false}>
          updateUserPhoneNumberIntent field

          <Expandable title="updateUserPhoneNumberIntent details">
            <NestedParam parentKey="activity.intent.updateUserPhoneNumberIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserPhoneNumberIntent" childKey="userPhoneNumber" type="string" required={true}>
              The user's phone number in E.164 format e.g. +13214567890. Setting this to an empty string will remove the user's phone number.
            </NestedParam>

            <NestedParam parentKey="activity.intent.updateUserPhoneNumberIntent" childKey="verificationToken" type="string" required={false}>
              Signed JWT containing a unique id, expiry, verification type, contact
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="initFiatOnRampIntent" type="object" required={false}>
          initFiatOnRampIntent field

          <Expandable title="initFiatOnRampIntent details">
            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="onrampProvider" type="enum" required={true}>
              onrampProvider field

              Enum options: `FIAT_ON_RAMP_PROVIDER_COINBASE`, `FIAT_ON_RAMP_PROVIDER_MOONPAY`
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="walletAddress" type="string" required={true}>
              Destination wallet address for the buy transaction.
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="network" type="enum" required={true}>
              network field

              Enum options: `FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BITCOIN`, `FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_ETHEREUM`, `FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_SOLANA`, `FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BASE`
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="cryptoCurrencyCode" type="enum" required={true}>
              cryptoCurrencyCode field

              Enum options: `FIAT_ON_RAMP_CRYPTO_CURRENCY_BTC`, `FIAT_ON_RAMP_CRYPTO_CURRENCY_ETH`, `FIAT_ON_RAMP_CRYPTO_CURRENCY_SOL`, `FIAT_ON_RAMP_CRYPTO_CURRENCY_USDC`
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="fiatCurrencyCode" type="enum" required={false}>
              fiatCurrencyCode field

              Enum options: `FIAT_ON_RAMP_CURRENCY_AUD`, `FIAT_ON_RAMP_CURRENCY_BGN`, `FIAT_ON_RAMP_CURRENCY_BRL`, `FIAT_ON_RAMP_CURRENCY_CAD`, `FIAT_ON_RAMP_CURRENCY_CHF`, `FIAT_ON_RAMP_CURRENCY_COP`, `FIAT_ON_RAMP_CURRENCY_CZK`, `FIAT_ON_RAMP_CURRENCY_DKK`, `FIAT_ON_RAMP_CURRENCY_DOP`, `FIAT_ON_RAMP_CURRENCY_EGP`, `FIAT_ON_RAMP_CURRENCY_EUR`, `FIAT_ON_RAMP_CURRENCY_GBP`, `FIAT_ON_RAMP_CURRENCY_HKD`, `FIAT_ON_RAMP_CURRENCY_IDR`, `FIAT_ON_RAMP_CURRENCY_ILS`, `FIAT_ON_RAMP_CURRENCY_JOD`, `FIAT_ON_RAMP_CURRENCY_KES`, `FIAT_ON_RAMP_CURRENCY_KWD`, `FIAT_ON_RAMP_CURRENCY_LKR`, `FIAT_ON_RAMP_CURRENCY_MXN`, `FIAT_ON_RAMP_CURRENCY_NGN`, `FIAT_ON_RAMP_CURRENCY_NOK`, `FIAT_ON_RAMP_CURRENCY_NZD`, `FIAT_ON_RAMP_CURRENCY_OMR`, `FIAT_ON_RAMP_CURRENCY_PEN`, `FIAT_ON_RAMP_CURRENCY_PLN`, `FIAT_ON_RAMP_CURRENCY_RON`, `FIAT_ON_RAMP_CURRENCY_SEK`, `FIAT_ON_RAMP_CURRENCY_THB`, `FIAT_ON_RAMP_CURRENCY_TRY`, `FIAT_ON_RAMP_CURRENCY_TWD`, `FIAT_ON_RAMP_CURRENCY_USD`, `FIAT_ON_RAMP_CURRENCY_VND`, `FIAT_ON_RAMP_CURRENCY_ZAR`
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="fiatCurrencyAmount" type="string" required={false}>
              Specifies a preset fiat amount for the transaction, e.g., '100'. Must be greater than '20'. If not provided, the user will be prompted to enter an amount.
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="paymentMethod" type="enum" required={false}>
              paymentMethod field

              Enum options: `FIAT_ON_RAMP_PAYMENT_METHOD_CREDIT_DEBIT_CARD`, `FIAT_ON_RAMP_PAYMENT_METHOD_APPLE_PAY`, `FIAT_ON_RAMP_PAYMENT_METHOD_GBP_BANK_TRANSFER`, `FIAT_ON_RAMP_PAYMENT_METHOD_GBP_OPEN_BANKING_PAYMENT`, `FIAT_ON_RAMP_PAYMENT_METHOD_GOOGLE_PAY`, `FIAT_ON_RAMP_PAYMENT_METHOD_SEPA_BANK_TRANSFER`, `FIAT_ON_RAMP_PAYMENT_METHOD_PIX_INSTANT_PAYMENT`, `FIAT_ON_RAMP_PAYMENT_METHOD_PAYPAL`, `FIAT_ON_RAMP_PAYMENT_METHOD_VENMO`, `FIAT_ON_RAMP_PAYMENT_METHOD_MOONPAY_BALANCE`, `FIAT_ON_RAMP_PAYMENT_METHOD_CRYPTO_ACCOUNT`, `FIAT_ON_RAMP_PAYMENT_METHOD_FIAT_WALLET`, `FIAT_ON_RAMP_PAYMENT_METHOD_ACH_BANK_ACCOUNT`
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="countryCode" type="string" required={false}>
              ISO 3166-1 two-digit country code for Coinbase representing the purchasing user’s country of residence, e.g., US, GB.
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="countrySubdivisionCode" type="string" required={false}>
              ISO 3166-2 two-digit country subdivision code for Coinbase representing the purchasing user’s subdivision of residence within their country, e.g. NY. Required if country\_code=US.
            </NestedParam>

            <NestedParam parentKey="activity.intent.initFiatOnRampIntent" childKey="sandboxMode" type="boolean" required={false}>
              Optional flag to indicate whether to use the sandbox mode to simulate transactions for the on-ramp provider. Default is false.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="createSmartContractInterfaceIntent" type="object" required={false}>
          createSmartContractInterfaceIntent field

          <Expandable title="createSmartContractInterfaceIntent details">
            <NestedParam parentKey="activity.intent.createSmartContractInterfaceIntent" childKey="smartContractAddress" type="string" required={true}>
              Corresponding contract address or program ID
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSmartContractInterfaceIntent" childKey="smartContractInterface" type="string" required={true}>
              ABI/IDL as a JSON string
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSmartContractInterfaceIntent" childKey="type" type="enum" required={true}>
              type field

              Enum options: `SMART_CONTRACT_INTERFACE_TYPE_ETHEREUM`, `SMART_CONTRACT_INTERFACE_TYPE_SOLANA`
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSmartContractInterfaceIntent" childKey="label" type="string" required={true}>
              Human-readable name for a Smart Contract Interface.
            </NestedParam>

            <NestedParam parentKey="activity.intent.createSmartContractInterfaceIntent" childKey="notes" type="string" required={false}>
              Notes for a Smart Contract Interface.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.intent" childKey="deleteSmartContractInterfaceIntent" type="object" required={false}>
          deleteSmartContractInterfaceIntent field

          <Expandable title="deleteSmartContractInterfaceIntent details">
            <NestedParam parentKey="activity.intent.deleteSmartContractInterfaceIntent" childKey="smartContractInterfaceId" type="string" required={true}>
              The ID of a Smart Contract Interface intended for deletion.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="result" type="object" required={true}>
      result field

      <Expandable title="result details">
        <NestedParam parentKey="activity.result" childKey="createOrganizationResult" type="object" required={false}>
          createOrganizationResult field

          <Expandable title="createOrganizationResult details">
            <NestedParam parentKey="activity.result.createOrganizationResult" childKey="organizationId" type="string" required={true}>
              Unique identifier for a given Organization.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createAuthenticatorsResult" type="object" required={false}>
          createAuthenticatorsResult field

          <Expandable title="createAuthenticatorsResult details">
            <NestedParam parentKey="activity.result.createAuthenticatorsResult" childKey="authenticatorIds" type="array" required={true}>
              A list of Authenticator IDs.

              <Expandable title="authenticatorIds details">
                <NestedParam parentKey="activity.result.createAuthenticatorsResult.authenticatorIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createUsersResult" type="object" required={false}>
          createUsersResult field

          <Expandable title="createUsersResult details">
            <NestedParam parentKey="activity.result.createUsersResult" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activity.result.createUsersResult.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createPrivateKeysResult" type="object" required={false}>
          createPrivateKeysResult field

          <Expandable title="createPrivateKeysResult details">
            <NestedParam parentKey="activity.result.createPrivateKeysResult" childKey="privateKeyIds" type="array" required={true}>
              A list of Private Key IDs.

              <Expandable title="privateKeyIds details">
                <NestedParam parentKey="activity.result.createPrivateKeysResult.privateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createInvitationsResult" type="object" required={false}>
          createInvitationsResult field

          <Expandable title="createInvitationsResult details">
            <NestedParam parentKey="activity.result.createInvitationsResult" childKey="invitationIds" type="array" required={true}>
              A list of Invitation IDs

              <Expandable title="invitationIds details">
                <NestedParam parentKey="activity.result.createInvitationsResult.invitationIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="acceptInvitationResult" type="object" required={false}>
          acceptInvitationResult field

          <Expandable title="acceptInvitationResult details">
            <NestedParam parentKey="activity.result.acceptInvitationResult" childKey="invitationId" type="string" required={true}>
              Unique identifier for a given Invitation.
            </NestedParam>

            <NestedParam parentKey="activity.result.acceptInvitationResult" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="signRawPayloadResult" type="object" required={false}>
          signRawPayloadResult field

          <Expandable title="signRawPayloadResult details">
            <NestedParam parentKey="activity.result.signRawPayloadResult" childKey="r" type="string" required={true}>
              Component of an ECSDA signature.
            </NestedParam>

            <NestedParam parentKey="activity.result.signRawPayloadResult" childKey="s" type="string" required={true}>
              Component of an ECSDA signature.
            </NestedParam>

            <NestedParam parentKey="activity.result.signRawPayloadResult" childKey="v" type="string" required={true}>
              Component of an ECSDA signature.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createPolicyResult" type="object" required={false}>
          createPolicyResult field

          <Expandable title="createPolicyResult details">
            <NestedParam parentKey="activity.result.createPolicyResult" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="disablePrivateKeyResult" type="object" required={false}>
          disablePrivateKeyResult field

          <Expandable title="disablePrivateKeyResult details">
            <NestedParam parentKey="activity.result.disablePrivateKeyResult" childKey="privateKeyId" type="string" required={true}>
              Unique identifier for a given Private Key.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="deleteUsersResult" type="object" required={false}>
          deleteUsersResult field

          <Expandable title="deleteUsersResult details">
            <NestedParam parentKey="activity.result.deleteUsersResult" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activity.result.deleteUsersResult.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="deleteAuthenticatorsResult" type="object" required={false}>
          deleteAuthenticatorsResult field

          <Expandable title="deleteAuthenticatorsResult details">
            <NestedParam parentKey="activity.result.deleteAuthenticatorsResult" childKey="authenticatorIds" type="array" required={true}>
              Unique identifier for a given Authenticator.

              <Expandable title="authenticatorIds details">
                <NestedParam parentKey="activity.result.deleteAuthenticatorsResult.authenticatorIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="deleteInvitationResult" type="object" required={false}>
          deleteInvitationResult field

          <Expandable title="deleteInvitationResult details">
            <NestedParam parentKey="activity.result.deleteInvitationResult" childKey="invitationId" type="string" required={true}>
              Unique identifier for a given Invitation.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="deleteOrganizationResult" type="object" required={false}>
          deleteOrganizationResult field

          <Expandable title="deleteOrganizationResult details">
            <NestedParam parentKey="activity.result.deleteOrganizationResult" childKey="organizationId" type="string" required={true}>
              Unique identifier for a given Organization.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="deletePolicyResult" type="object" required={false}>
          deletePolicyResult field

          <Expandable title="deletePolicyResult details">
            <NestedParam parentKey="activity.result.deletePolicyResult" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createUserTagResult" type="object" required={false}>
          createUserTagResult field

          <Expandable title="createUserTagResult details">
            <NestedParam parentKey="activity.result.createUserTagResult" childKey="userTagId" type="string" required={true}>
              Unique identifier for a given User Tag.
            </NestedParam>

            <NestedParam parentKey="activity.result.createUserTagResult" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activity.result.createUserTagResult.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="deleteUserTagsResult" type="object" required={false}>
          deleteUserTagsResult field

          <Expandable title="deleteUserTagsResult details">
            <NestedParam parentKey="activity.result.deleteUserTagsResult" childKey="userTagIds" type="array" required={true}>
              A list of User Tag IDs.

              <Expandable title="userTagIds details">
                <NestedParam parentKey="activity.result.deleteUserTagsResult.userTagIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.result.deleteUserTagsResult" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activity.result.deleteUserTagsResult.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="signTransactionResult" type="object" required={false}>
          signTransactionResult field

          <Expandable title="signTransactionResult details">
            <NestedParam parentKey="activity.result.signTransactionResult" childKey="signedTransaction" type="string" required={true}>
              signedTransaction field
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="deleteApiKeysResult" type="object" required={false}>
          deleteApiKeysResult field

          <Expandable title="deleteApiKeysResult details">
            <NestedParam parentKey="activity.result.deleteApiKeysResult" childKey="apiKeyIds" type="array" required={true}>
              A list of API Key IDs.

              <Expandable title="apiKeyIds details">
                <NestedParam parentKey="activity.result.deleteApiKeysResult.apiKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createApiKeysResult" type="object" required={false}>
          createApiKeysResult field

          <Expandable title="createApiKeysResult details">
            <NestedParam parentKey="activity.result.createApiKeysResult" childKey="apiKeyIds" type="array" required={true}>
              A list of API Key IDs.

              <Expandable title="apiKeyIds details">
                <NestedParam parentKey="activity.result.createApiKeysResult.apiKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createPrivateKeyTagResult" type="object" required={false}>
          createPrivateKeyTagResult field

          <Expandable title="createPrivateKeyTagResult details">
            <NestedParam parentKey="activity.result.createPrivateKeyTagResult" childKey="privateKeyTagId" type="string" required={true}>
              Unique identifier for a given Private Key Tag.
            </NestedParam>

            <NestedParam parentKey="activity.result.createPrivateKeyTagResult" childKey="privateKeyIds" type="array" required={true}>
              A list of Private Key IDs.

              <Expandable title="privateKeyIds details">
                <NestedParam parentKey="activity.result.createPrivateKeyTagResult.privateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="deletePrivateKeyTagsResult" type="object" required={false}>
          deletePrivateKeyTagsResult field

          <Expandable title="deletePrivateKeyTagsResult details">
            <NestedParam parentKey="activity.result.deletePrivateKeyTagsResult" childKey="privateKeyTagIds" type="array" required={true}>
              A list of Private Key Tag IDs.

              <Expandable title="privateKeyTagIds details">
                <NestedParam parentKey="activity.result.deletePrivateKeyTagsResult.privateKeyTagIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.result.deletePrivateKeyTagsResult" childKey="privateKeyIds" type="array" required={true}>
              A list of Private Key IDs.

              <Expandable title="privateKeyIds details">
                <NestedParam parentKey="activity.result.deletePrivateKeyTagsResult.privateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="setPaymentMethodResult" type="object" required={false}>
          setPaymentMethodResult field

          <Expandable title="setPaymentMethodResult details">
            <NestedParam parentKey="activity.result.setPaymentMethodResult" childKey="lastFour" type="string" required={true}>
              The last four digits of the credit card added.
            </NestedParam>

            <NestedParam parentKey="activity.result.setPaymentMethodResult" childKey="cardHolderName" type="string" required={true}>
              The name associated with the payment method.
            </NestedParam>

            <NestedParam parentKey="activity.result.setPaymentMethodResult" childKey="cardHolderEmail" type="string" required={true}>
              The email address associated with the payment method.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="activateBillingTierResult" type="object" required={false}>
          activateBillingTierResult field

          <Expandable title="activateBillingTierResult details">
            <NestedParam parentKey="activity.result.activateBillingTierResult" childKey="productId" type="string" required={true}>
              The id of the product being subscribed to.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="deletePaymentMethodResult" type="object" required={false}>
          deletePaymentMethodResult field

          <Expandable title="deletePaymentMethodResult details">
            <NestedParam parentKey="activity.result.deletePaymentMethodResult" childKey="paymentMethodId" type="string" required={true}>
              The payment method that was removed.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createApiOnlyUsersResult" type="object" required={false}>
          createApiOnlyUsersResult field

          <Expandable title="createApiOnlyUsersResult details">
            <NestedParam parentKey="activity.result.createApiOnlyUsersResult" childKey="userIds" type="array" required={true}>
              A list of API-only User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activity.result.createApiOnlyUsersResult.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="updateRootQuorumResult" type="object" required={false}>
          updateRootQuorumResult field
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="updateUserTagResult" type="object" required={false}>
          updateUserTagResult field

          <Expandable title="updateUserTagResult details">
            <NestedParam parentKey="activity.result.updateUserTagResult" childKey="userTagId" type="string" required={true}>
              Unique identifier for a given User Tag.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="updatePrivateKeyTagResult" type="object" required={false}>
          updatePrivateKeyTagResult field

          <Expandable title="updatePrivateKeyTagResult details">
            <NestedParam parentKey="activity.result.updatePrivateKeyTagResult" childKey="privateKeyTagId" type="string" required={true}>
              Unique identifier for a given Private Key Tag.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createSubOrganizationResult" type="object" required={false}>
          createSubOrganizationResult field

          <Expandable title="createSubOrganizationResult details">
            <NestedParam parentKey="activity.result.createSubOrganizationResult" childKey="subOrganizationId" type="string" required={true}>
              subOrganizationId field
            </NestedParam>

            <NestedParam parentKey="activity.result.createSubOrganizationResult" childKey="rootUserIds" type="array" required={false}>
              rootUserIds field

              <Expandable title="rootUserIds details">
                <NestedParam parentKey="activity.result.createSubOrganizationResult.rootUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="updateAllowedOriginsResult" type="object" required={false}>
          updateAllowedOriginsResult field
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createPrivateKeysResultV2" type="object" required={false}>
          createPrivateKeysResultV2 field

          <Expandable title="createPrivateKeysResultV2 details">
            <NestedParam parentKey="activity.result.createPrivateKeysResultV2" childKey="privateKeys" type="array" required={true}>
              A list of Private Key IDs and addresses.

              <Expandable title="privateKeys details">
                <NestedParam parentKey="activity.result.createPrivateKeysResultV2.privateKeys" childKey="privateKeyId" type="string" required={false}>
                  privateKeyId field
                </NestedParam>

                <NestedParam parentKey="activity.result.createPrivateKeysResultV2.privateKeys" childKey="addresses" type="array" required={false}>
                  addresses field

                  <Expandable title="addresses details">
                    <NestedParam parentKey="activity.result.createPrivateKeysResultV2.privateKeys.addresses" childKey="format" type="enum" required={false}>
                      format field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>

                    <NestedParam parentKey="activity.result.createPrivateKeysResultV2.privateKeys.addresses" childKey="address" type="string" required={false}>
                      address field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="updateUserResult" type="object" required={false}>
          updateUserResult field

          <Expandable title="updateUserResult details">
            <NestedParam parentKey="activity.result.updateUserResult" childKey="userId" type="string" required={true}>
              A User ID.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="updatePolicyResult" type="object" required={false}>
          updatePolicyResult field

          <Expandable title="updatePolicyResult details">
            <NestedParam parentKey="activity.result.updatePolicyResult" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createSubOrganizationResultV3" type="object" required={false}>
          createSubOrganizationResultV3 field

          <Expandable title="createSubOrganizationResultV3 details">
            <NestedParam parentKey="activity.result.createSubOrganizationResultV3" childKey="subOrganizationId" type="string" required={true}>
              subOrganizationId field
            </NestedParam>

            <NestedParam parentKey="activity.result.createSubOrganizationResultV3" childKey="privateKeys" type="array" required={true}>
              A list of Private Key IDs and addresses.

              <Expandable title="privateKeys details">
                <NestedParam parentKey="activity.result.createSubOrganizationResultV3.privateKeys" childKey="privateKeyId" type="string" required={false}>
                  privateKeyId field
                </NestedParam>

                <NestedParam parentKey="activity.result.createSubOrganizationResultV3.privateKeys" childKey="addresses" type="array" required={false}>
                  addresses field

                  <Expandable title="addresses details">
                    <NestedParam parentKey="activity.result.createSubOrganizationResultV3.privateKeys.addresses" childKey="format" type="enum" required={false}>
                      format field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>

                    <NestedParam parentKey="activity.result.createSubOrganizationResultV3.privateKeys.addresses" childKey="address" type="string" required={false}>
                      address field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.result.createSubOrganizationResultV3" childKey="rootUserIds" type="array" required={false}>
              rootUserIds field

              <Expandable title="rootUserIds details">
                <NestedParam parentKey="activity.result.createSubOrganizationResultV3.rootUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createWalletResult" type="object" required={false}>
          createWalletResult field

          <Expandable title="createWalletResult details">
            <NestedParam parentKey="activity.result.createWalletResult" childKey="walletId" type="string" required={true}>
              Unique identifier for a Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.result.createWalletResult" childKey="addresses" type="array" required={true}>
              A list of account addresses.

              <Expandable title="addresses details">
                <NestedParam parentKey="activity.result.createWalletResult.addresses" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createWalletAccountsResult" type="object" required={false}>
          createWalletAccountsResult field

          <Expandable title="createWalletAccountsResult details">
            <NestedParam parentKey="activity.result.createWalletAccountsResult" childKey="addresses" type="array" required={true}>
              A list of derived addresses.

              <Expandable title="addresses details">
                <NestedParam parentKey="activity.result.createWalletAccountsResult.addresses" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="initUserEmailRecoveryResult" type="object" required={false}>
          initUserEmailRecoveryResult field

          <Expandable title="initUserEmailRecoveryResult details">
            <NestedParam parentKey="activity.result.initUserEmailRecoveryResult" childKey="userId" type="string" required={true}>
              Unique identifier for the user being recovered.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="recoverUserResult" type="object" required={false}>
          recoverUserResult field

          <Expandable title="recoverUserResult details">
            <NestedParam parentKey="activity.result.recoverUserResult" childKey="authenticatorId" type="array" required={true}>
              ID of the authenticator created.

              <Expandable title="authenticatorId details">
                <NestedParam parentKey="activity.result.recoverUserResult.authenticatorId" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="setOrganizationFeatureResult" type="object" required={false}>
          setOrganizationFeatureResult field

          <Expandable title="setOrganizationFeatureResult details">
            <NestedParam parentKey="activity.result.setOrganizationFeatureResult" childKey="features" type="array" required={true}>
              Resulting list of organization features.

              <Expandable title="features details">
                <NestedParam parentKey="activity.result.setOrganizationFeatureResult.features" childKey="name" type="enum" required={false}>
                  name field

                  Enum options: `FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY`, `FEATURE_NAME_WEBAUTHN_ORIGINS`, `FEATURE_NAME_EMAIL_AUTH`, `FEATURE_NAME_EMAIL_RECOVERY`, `FEATURE_NAME_WEBHOOK`, `FEATURE_NAME_SMS_AUTH`, `FEATURE_NAME_OTP_EMAIL_AUTH`
                </NestedParam>

                <NestedParam parentKey="activity.result.setOrganizationFeatureResult.features" childKey="value" type="string" required={false}>
                  value field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="removeOrganizationFeatureResult" type="object" required={false}>
          removeOrganizationFeatureResult field

          <Expandable title="removeOrganizationFeatureResult details">
            <NestedParam parentKey="activity.result.removeOrganizationFeatureResult" childKey="features" type="array" required={true}>
              Resulting list of organization features.

              <Expandable title="features details">
                <NestedParam parentKey="activity.result.removeOrganizationFeatureResult.features" childKey="name" type="enum" required={false}>
                  name field

                  Enum options: `FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY`, `FEATURE_NAME_WEBAUTHN_ORIGINS`, `FEATURE_NAME_EMAIL_AUTH`, `FEATURE_NAME_EMAIL_RECOVERY`, `FEATURE_NAME_WEBHOOK`, `FEATURE_NAME_SMS_AUTH`, `FEATURE_NAME_OTP_EMAIL_AUTH`
                </NestedParam>

                <NestedParam parentKey="activity.result.removeOrganizationFeatureResult.features" childKey="value" type="string" required={false}>
                  value field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="exportPrivateKeyResult" type="object" required={false}>
          exportPrivateKeyResult field

          <Expandable title="exportPrivateKeyResult details">
            <NestedParam parentKey="activity.result.exportPrivateKeyResult" childKey="privateKeyId" type="string" required={true}>
              Unique identifier for a given Private Key.
            </NestedParam>

            <NestedParam parentKey="activity.result.exportPrivateKeyResult" childKey="exportBundle" type="string" required={true}>
              Export bundle containing a private key encrypted to the client's target public key.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="exportWalletResult" type="object" required={false}>
          exportWalletResult field

          <Expandable title="exportWalletResult details">
            <NestedParam parentKey="activity.result.exportWalletResult" childKey="walletId" type="string" required={true}>
              Unique identifier for a given Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.result.exportWalletResult" childKey="exportBundle" type="string" required={true}>
              Export bundle containing a wallet mnemonic + optional newline passphrase encrypted by the client's target public key.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createSubOrganizationResultV4" type="object" required={false}>
          createSubOrganizationResultV4 field

          <Expandable title="createSubOrganizationResultV4 details">
            <NestedParam parentKey="activity.result.createSubOrganizationResultV4" childKey="subOrganizationId" type="string" required={true}>
              subOrganizationId field
            </NestedParam>

            <NestedParam parentKey="activity.result.createSubOrganizationResultV4" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activity.result.createSubOrganizationResultV4.wallet" childKey="walletId" type="string" required={true}>
                  walletId field
                </NestedParam>

                <NestedParam parentKey="activity.result.createSubOrganizationResultV4.wallet" childKey="addresses" type="array" required={true}>
                  A list of account addresses.

                  <Expandable title="addresses details">
                    <NestedParam parentKey="activity.result.createSubOrganizationResultV4.wallet.addresses" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.result.createSubOrganizationResultV4" childKey="rootUserIds" type="array" required={false}>
              rootUserIds field

              <Expandable title="rootUserIds details">
                <NestedParam parentKey="activity.result.createSubOrganizationResultV4.rootUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="emailAuthResult" type="object" required={false}>
          emailAuthResult field

          <Expandable title="emailAuthResult details">
            <NestedParam parentKey="activity.result.emailAuthResult" childKey="userId" type="string" required={true}>
              Unique identifier for the authenticating User.
            </NestedParam>

            <NestedParam parentKey="activity.result.emailAuthResult" childKey="apiKeyId" type="string" required={true}>
              Unique identifier for the created API key.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="exportWalletAccountResult" type="object" required={false}>
          exportWalletAccountResult field

          <Expandable title="exportWalletAccountResult details">
            <NestedParam parentKey="activity.result.exportWalletAccountResult" childKey="address" type="string" required={true}>
              Address to identify Wallet Account.
            </NestedParam>

            <NestedParam parentKey="activity.result.exportWalletAccountResult" childKey="exportBundle" type="string" required={true}>
              Export bundle containing a private key encrypted by the client's target public key.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="initImportWalletResult" type="object" required={false}>
          initImportWalletResult field

          <Expandable title="initImportWalletResult details">
            <NestedParam parentKey="activity.result.initImportWalletResult" childKey="importBundle" type="string" required={true}>
              Import bundle containing a public key and signature to use for importing client data.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="importWalletResult" type="object" required={false}>
          importWalletResult field

          <Expandable title="importWalletResult details">
            <NestedParam parentKey="activity.result.importWalletResult" childKey="walletId" type="string" required={true}>
              Unique identifier for a Wallet.
            </NestedParam>

            <NestedParam parentKey="activity.result.importWalletResult" childKey="addresses" type="array" required={true}>
              A list of account addresses.

              <Expandable title="addresses details">
                <NestedParam parentKey="activity.result.importWalletResult.addresses" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="initImportPrivateKeyResult" type="object" required={false}>
          initImportPrivateKeyResult field

          <Expandable title="initImportPrivateKeyResult details">
            <NestedParam parentKey="activity.result.initImportPrivateKeyResult" childKey="importBundle" type="string" required={true}>
              Import bundle containing a public key and signature to use for importing client data.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="importPrivateKeyResult" type="object" required={false}>
          importPrivateKeyResult field

          <Expandable title="importPrivateKeyResult details">
            <NestedParam parentKey="activity.result.importPrivateKeyResult" childKey="privateKeyId" type="string" required={true}>
              Unique identifier for a Private Key.
            </NestedParam>

            <NestedParam parentKey="activity.result.importPrivateKeyResult" childKey="addresses" type="array" required={true}>
              A list of addresses.

              <Expandable title="addresses details">
                <NestedParam parentKey="activity.result.importPrivateKeyResult.addresses" childKey="format" type="enum" required={false}>
                  format field

                  Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                </NestedParam>

                <NestedParam parentKey="activity.result.importPrivateKeyResult.addresses" childKey="address" type="string" required={false}>
                  address field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createPoliciesResult" type="object" required={false}>
          createPoliciesResult field

          <Expandable title="createPoliciesResult details">
            <NestedParam parentKey="activity.result.createPoliciesResult" childKey="policyIds" type="array" required={true}>
              A list of unique identifiers for the created policies.

              <Expandable title="policyIds details">
                <NestedParam parentKey="activity.result.createPoliciesResult.policyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="signRawPayloadsResult" type="object" required={false}>
          signRawPayloadsResult field

          <Expandable title="signRawPayloadsResult details">
            <NestedParam parentKey="activity.result.signRawPayloadsResult" childKey="signatures" type="array" required={false}>
              signatures field

              <Expandable title="signatures details">
                <NestedParam parentKey="activity.result.signRawPayloadsResult.signatures" childKey="r" type="string" required={true}>
                  Component of an ECSDA signature.
                </NestedParam>

                <NestedParam parentKey="activity.result.signRawPayloadsResult.signatures" childKey="s" type="string" required={true}>
                  Component of an ECSDA signature.
                </NestedParam>

                <NestedParam parentKey="activity.result.signRawPayloadsResult.signatures" childKey="v" type="string" required={true}>
                  Component of an ECSDA signature.
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createReadOnlySessionResult" type="object" required={false}>
          createReadOnlySessionResult field

          <Expandable title="createReadOnlySessionResult details">
            <NestedParam parentKey="activity.result.createReadOnlySessionResult" childKey="organizationId" type="string" required={true}>
              Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadOnlySessionResult" childKey="organizationName" type="string" required={true}>
              Human-readable name for an Organization.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadOnlySessionResult" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadOnlySessionResult" childKey="username" type="string" required={true}>
              Human-readable name for a User.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadOnlySessionResult" childKey="session" type="string" required={true}>
              String representing a read only session
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadOnlySessionResult" childKey="sessionExpiry" type="string" required={true}>
              UTC timestamp in seconds representing the expiry time for the read only session.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createOauthProvidersResult" type="object" required={false}>
          createOauthProvidersResult field

          <Expandable title="createOauthProvidersResult details">
            <NestedParam parentKey="activity.result.createOauthProvidersResult" childKey="providerIds" type="array" required={true}>
              A list of unique identifiers for Oauth Providers

              <Expandable title="providerIds details">
                <NestedParam parentKey="activity.result.createOauthProvidersResult.providerIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="deleteOauthProvidersResult" type="object" required={false}>
          deleteOauthProvidersResult field

          <Expandable title="deleteOauthProvidersResult details">
            <NestedParam parentKey="activity.result.deleteOauthProvidersResult" childKey="providerIds" type="array" required={true}>
              A list of unique identifiers for Oauth Providers

              <Expandable title="providerIds details">
                <NestedParam parentKey="activity.result.deleteOauthProvidersResult.providerIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createSubOrganizationResultV5" type="object" required={false}>
          createSubOrganizationResultV5 field

          <Expandable title="createSubOrganizationResultV5 details">
            <NestedParam parentKey="activity.result.createSubOrganizationResultV5" childKey="subOrganizationId" type="string" required={true}>
              subOrganizationId field
            </NestedParam>

            <NestedParam parentKey="activity.result.createSubOrganizationResultV5" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activity.result.createSubOrganizationResultV5.wallet" childKey="walletId" type="string" required={true}>
                  walletId field
                </NestedParam>

                <NestedParam parentKey="activity.result.createSubOrganizationResultV5.wallet" childKey="addresses" type="array" required={true}>
                  A list of account addresses.

                  <Expandable title="addresses details">
                    <NestedParam parentKey="activity.result.createSubOrganizationResultV5.wallet.addresses" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.result.createSubOrganizationResultV5" childKey="rootUserIds" type="array" required={false}>
              rootUserIds field

              <Expandable title="rootUserIds details">
                <NestedParam parentKey="activity.result.createSubOrganizationResultV5.rootUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="oauthResult" type="object" required={false}>
          oauthResult field

          <Expandable title="oauthResult details">
            <NestedParam parentKey="activity.result.oauthResult" childKey="userId" type="string" required={true}>
              Unique identifier for the authenticating User.
            </NestedParam>

            <NestedParam parentKey="activity.result.oauthResult" childKey="apiKeyId" type="string" required={true}>
              Unique identifier for the created API key.
            </NestedParam>

            <NestedParam parentKey="activity.result.oauthResult" childKey="credentialBundle" type="string" required={true}>
              HPKE encrypted credential bundle
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createReadWriteSessionResult" type="object" required={false}>
          createReadWriteSessionResult field

          <Expandable title="createReadWriteSessionResult details">
            <NestedParam parentKey="activity.result.createReadWriteSessionResult" childKey="organizationId" type="string" required={true}>
              Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadWriteSessionResult" childKey="organizationName" type="string" required={true}>
              Human-readable name for an Organization.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadWriteSessionResult" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadWriteSessionResult" childKey="username" type="string" required={true}>
              Human-readable name for a User.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadWriteSessionResult" childKey="apiKeyId" type="string" required={true}>
              Unique identifier for the created API key.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadWriteSessionResult" childKey="credentialBundle" type="string" required={true}>
              HPKE encrypted credential bundle
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createSubOrganizationResultV6" type="object" required={false}>
          createSubOrganizationResultV6 field

          <Expandable title="createSubOrganizationResultV6 details">
            <NestedParam parentKey="activity.result.createSubOrganizationResultV6" childKey="subOrganizationId" type="string" required={true}>
              subOrganizationId field
            </NestedParam>

            <NestedParam parentKey="activity.result.createSubOrganizationResultV6" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activity.result.createSubOrganizationResultV6.wallet" childKey="walletId" type="string" required={true}>
                  walletId field
                </NestedParam>

                <NestedParam parentKey="activity.result.createSubOrganizationResultV6.wallet" childKey="addresses" type="array" required={true}>
                  A list of account addresses.

                  <Expandable title="addresses details">
                    <NestedParam parentKey="activity.result.createSubOrganizationResultV6.wallet.addresses" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.result.createSubOrganizationResultV6" childKey="rootUserIds" type="array" required={false}>
              rootUserIds field

              <Expandable title="rootUserIds details">
                <NestedParam parentKey="activity.result.createSubOrganizationResultV6.rootUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="deletePrivateKeysResult" type="object" required={false}>
          deletePrivateKeysResult field

          <Expandable title="deletePrivateKeysResult details">
            <NestedParam parentKey="activity.result.deletePrivateKeysResult" childKey="privateKeyIds" type="array" required={true}>
              A list of private key unique identifiers that were removed

              <Expandable title="privateKeyIds details">
                <NestedParam parentKey="activity.result.deletePrivateKeysResult.privateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="deleteWalletsResult" type="object" required={false}>
          deleteWalletsResult field

          <Expandable title="deleteWalletsResult details">
            <NestedParam parentKey="activity.result.deleteWalletsResult" childKey="walletIds" type="array" required={true}>
              A list of wallet unique identifiers that were removed

              <Expandable title="walletIds details">
                <NestedParam parentKey="activity.result.deleteWalletsResult.walletIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createReadWriteSessionResultV2" type="object" required={false}>
          createReadWriteSessionResultV2 field

          <Expandable title="createReadWriteSessionResultV2 details">
            <NestedParam parentKey="activity.result.createReadWriteSessionResultV2" childKey="organizationId" type="string" required={true}>
              Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadWriteSessionResultV2" childKey="organizationName" type="string" required={true}>
              Human-readable name for an Organization.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadWriteSessionResultV2" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadWriteSessionResultV2" childKey="username" type="string" required={true}>
              Human-readable name for a User.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadWriteSessionResultV2" childKey="apiKeyId" type="string" required={true}>
              Unique identifier for the created API key.
            </NestedParam>

            <NestedParam parentKey="activity.result.createReadWriteSessionResultV2" childKey="credentialBundle" type="string" required={true}>
              HPKE encrypted credential bundle
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="deleteSubOrganizationResult" type="object" required={false}>
          deleteSubOrganizationResult field

          <Expandable title="deleteSubOrganizationResult details">
            <NestedParam parentKey="activity.result.deleteSubOrganizationResult" childKey="subOrganizationUuid" type="string" required={true}>
              Unique identifier of the sub organization that was removed
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="initOtpAuthResult" type="object" required={false}>
          initOtpAuthResult field

          <Expandable title="initOtpAuthResult details">
            <NestedParam parentKey="activity.result.initOtpAuthResult" childKey="otpId" type="string" required={true}>
              Unique identifier for an OTP authentication
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="otpAuthResult" type="object" required={false}>
          otpAuthResult field

          <Expandable title="otpAuthResult details">
            <NestedParam parentKey="activity.result.otpAuthResult" childKey="userId" type="string" required={true}>
              Unique identifier for the authenticating User.
            </NestedParam>

            <NestedParam parentKey="activity.result.otpAuthResult" childKey="apiKeyId" type="string" required={false}>
              Unique identifier for the created API key.
            </NestedParam>

            <NestedParam parentKey="activity.result.otpAuthResult" childKey="credentialBundle" type="string" required={false}>
              HPKE encrypted credential bundle
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createSubOrganizationResultV7" type="object" required={false}>
          createSubOrganizationResultV7 field

          <Expandable title="createSubOrganizationResultV7 details">
            <NestedParam parentKey="activity.result.createSubOrganizationResultV7" childKey="subOrganizationId" type="string" required={true}>
              subOrganizationId field
            </NestedParam>

            <NestedParam parentKey="activity.result.createSubOrganizationResultV7" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activity.result.createSubOrganizationResultV7.wallet" childKey="walletId" type="string" required={true}>
                  walletId field
                </NestedParam>

                <NestedParam parentKey="activity.result.createSubOrganizationResultV7.wallet" childKey="addresses" type="array" required={true}>
                  A list of account addresses.

                  <Expandable title="addresses details">
                    <NestedParam parentKey="activity.result.createSubOrganizationResultV7.wallet.addresses" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.result.createSubOrganizationResultV7" childKey="rootUserIds" type="array" required={false}>
              rootUserIds field

              <Expandable title="rootUserIds details">
                <NestedParam parentKey="activity.result.createSubOrganizationResultV7.rootUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="updateWalletResult" type="object" required={false}>
          updateWalletResult field

          <Expandable title="updateWalletResult details">
            <NestedParam parentKey="activity.result.updateWalletResult" childKey="walletId" type="string" required={true}>
              A Wallet ID.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="updatePolicyResultV2" type="object" required={false}>
          updatePolicyResultV2 field

          <Expandable title="updatePolicyResultV2 details">
            <NestedParam parentKey="activity.result.updatePolicyResultV2" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="initOtpAuthResultV2" type="object" required={false}>
          initOtpAuthResultV2 field

          <Expandable title="initOtpAuthResultV2 details">
            <NestedParam parentKey="activity.result.initOtpAuthResultV2" childKey="otpId" type="string" required={true}>
              Unique identifier for an OTP authentication
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="initOtpResult" type="object" required={false}>
          initOtpResult field

          <Expandable title="initOtpResult details">
            <NestedParam parentKey="activity.result.initOtpResult" childKey="otpId" type="string" required={true}>
              Unique identifier for an OTP authentication
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="verifyOtpResult" type="object" required={false}>
          verifyOtpResult field

          <Expandable title="verifyOtpResult details">
            <NestedParam parentKey="activity.result.verifyOtpResult" childKey="verificationToken" type="string" required={true}>
              Signed JWT containing a unique id, expiry, verification type, contact. Verification status of a user is updated when the token is consumed (in OTP\_LOGIN requests)
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="otpLoginResult" type="object" required={false}>
          otpLoginResult field

          <Expandable title="otpLoginResult details">
            <NestedParam parentKey="activity.result.otpLoginResult" childKey="session" type="string" required={true}>
              Signed JWT containing an expiry, public key, session type, user id, and organization id
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="stampLoginResult" type="object" required={false}>
          stampLoginResult field

          <Expandable title="stampLoginResult details">
            <NestedParam parentKey="activity.result.stampLoginResult" childKey="session" type="string" required={true}>
              Signed JWT containing an expiry, public key, session type, user id, and organization id
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="oauthLoginResult" type="object" required={false}>
          oauthLoginResult field

          <Expandable title="oauthLoginResult details">
            <NestedParam parentKey="activity.result.oauthLoginResult" childKey="session" type="string" required={true}>
              Signed JWT containing an expiry, public key, session type, user id, and organization id
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="updateUserNameResult" type="object" required={false}>
          updateUserNameResult field

          <Expandable title="updateUserNameResult details">
            <NestedParam parentKey="activity.result.updateUserNameResult" childKey="userId" type="string" required={true}>
              Unique identifier of the User whose name was updated.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="updateUserEmailResult" type="object" required={false}>
          updateUserEmailResult field

          <Expandable title="updateUserEmailResult details">
            <NestedParam parentKey="activity.result.updateUserEmailResult" childKey="userId" type="string" required={true}>
              Unique identifier of the User whose email was updated.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="updateUserPhoneNumberResult" type="object" required={false}>
          updateUserPhoneNumberResult field

          <Expandable title="updateUserPhoneNumberResult details">
            <NestedParam parentKey="activity.result.updateUserPhoneNumberResult" childKey="userId" type="string" required={true}>
              Unique identifier of the User whose phone number was updated.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="initFiatOnRampResult" type="object" required={false}>
          initFiatOnRampResult field

          <Expandable title="initFiatOnRampResult details">
            <NestedParam parentKey="activity.result.initFiatOnRampResult" childKey="onRampUrl" type="string" required={true}>
              Unique URL for a given fiat on-ramp flow.
            </NestedParam>

            <NestedParam parentKey="activity.result.initFiatOnRampResult" childKey="onRampTransactionId" type="string" required={true}>
              Unique identifier used to retrieve transaction statuses for a given fiat on-ramp flow.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="createSmartContractInterfaceResult" type="object" required={false}>
          createSmartContractInterfaceResult field

          <Expandable title="createSmartContractInterfaceResult details">
            <NestedParam parentKey="activity.result.createSmartContractInterfaceResult" childKey="smartContractInterfaceId" type="string" required={true}>
              The ID of the created Smart Contract Interface.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.result" childKey="deleteSmartContractInterfaceResult" type="object" required={false}>
          deleteSmartContractInterfaceResult field

          <Expandable title="deleteSmartContractInterfaceResult details">
            <NestedParam parentKey="activity.result.deleteSmartContractInterfaceResult" childKey="smartContractInterfaceId" type="string" required={true}>
              The ID of the deleted Smart Contract Interface.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.

      <Expandable title="votes details">
        <NestedParam parentKey="activity.votes" childKey="id" type="string" required={true}>
          Unique identifier for a given Vote object.
        </NestedParam>

        <NestedParam parentKey="activity.votes" childKey="userId" type="string" required={true}>
          Unique identifier for a given User.
        </NestedParam>

        <NestedParam parentKey="activity.votes" childKey="user" type="object" required={true}>
          user field

          <Expandable title="user details">
            <NestedParam parentKey="activity.votes.user" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activity.votes.user" childKey="userName" type="string" required={true}>
              Human-readable name for a User.
            </NestedParam>

            <NestedParam parentKey="activity.votes.user" childKey="userEmail" type="string" required={false}>
              The user's email address.
            </NestedParam>

            <NestedParam parentKey="activity.votes.user" childKey="userPhoneNumber" type="string" required={false}>
              The user's phone number in E.164 format e.g. +13214567890
            </NestedParam>

            <NestedParam parentKey="activity.votes.user" childKey="authenticators" type="array" required={true}>
              A list of Authenticator parameters.

              <Expandable title="authenticators details">
                <NestedParam parentKey="activity.votes.user.authenticators" childKey="transports" type="array" required={true}>
                  Types of transports that may be used by an Authenticator (e.g., USB, NFC, BLE).

                  <Expandable title="transports details">
                    <NestedParam parentKey="activity.votes.user.authenticators.transports" childKey="item" type="enum" required={true}>
                      item field

                      Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.authenticators" childKey="attestationType" type="string" required={true}>
                  attestationType field
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.authenticators" childKey="aaguid" type="string" required={true}>
                  Identifier indicating the type of the Security Key.
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.authenticators" childKey="credentialId" type="string" required={true}>
                  Unique identifier for a WebAuthn credential.
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.authenticators" childKey="model" type="string" required={true}>
                  The type of Authenticator device.
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.authenticators" childKey="credential" type="object" required={true}>
                  credential field

                  <Expandable title="credential details">
                    <NestedParam parentKey="activity.votes.user.authenticators.credential" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activity.votes.user.authenticators.credential" childKey="type" type="enum" required={true}>
                      type field

                      Enum options: `CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR`, `CREDENTIAL_TYPE_API_KEY_P256`, `CREDENTIAL_TYPE_RECOVER_USER_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_SECP256K1`, `CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_ED25519`, `CREDENTIAL_TYPE_OTP_AUTH_KEY_P256`, `CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256`, `CREDENTIAL_TYPE_OAUTH_KEY_P256`, `CREDENTIAL_TYPE_LOGIN`
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.authenticators" childKey="authenticatorId" type="string" required={true}>
                  Unique identifier for a given Authenticator.
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.authenticators" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.authenticators" childKey="createdAt" type="object" required={true}>
                  createdAt field

                  <Expandable title="createdAt details">
                    <NestedParam parentKey="activity.votes.user.authenticators.createdAt" childKey="seconds" type="string" required={true}>
                      seconds field
                    </NestedParam>

                    <NestedParam parentKey="activity.votes.user.authenticators.createdAt" childKey="nanos" type="string" required={true}>
                      nanos field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.authenticators" childKey="updatedAt" type="object" required={true}>
                  updatedAt field

                  <Expandable title="updatedAt details">
                    <NestedParam parentKey="activity.votes.user.authenticators.updatedAt" childKey="seconds" type="string" required={true}>
                      seconds field
                    </NestedParam>

                    <NestedParam parentKey="activity.votes.user.authenticators.updatedAt" childKey="nanos" type="string" required={true}>
                      nanos field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.votes.user" childKey="apiKeys" type="array" required={true}>
              A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

              <Expandable title="apiKeys details">
                <NestedParam parentKey="activity.votes.user.apiKeys" childKey="credential" type="object" required={true}>
                  credential field

                  <Expandable title="credential details">
                    <NestedParam parentKey="activity.votes.user.apiKeys.credential" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activity.votes.user.apiKeys.credential" childKey="type" type="enum" required={true}>
                      type field

                      Enum options: `CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR`, `CREDENTIAL_TYPE_API_KEY_P256`, `CREDENTIAL_TYPE_RECOVER_USER_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_SECP256K1`, `CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_ED25519`, `CREDENTIAL_TYPE_OTP_AUTH_KEY_P256`, `CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256`, `CREDENTIAL_TYPE_OAUTH_KEY_P256`, `CREDENTIAL_TYPE_LOGIN`
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.apiKeys" childKey="apiKeyId" type="string" required={true}>
                  Unique identifier for a given API Key.
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.apiKeys" childKey="apiKeyName" type="string" required={true}>
                  Human-readable name for an API Key.
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.apiKeys" childKey="createdAt" type="object" required={true}>
                  createdAt field

                  <Expandable title="createdAt details">
                    <NestedParam parentKey="activity.votes.user.apiKeys.createdAt" childKey="seconds" type="string" required={true}>
                      seconds field
                    </NestedParam>

                    <NestedParam parentKey="activity.votes.user.apiKeys.createdAt" childKey="nanos" type="string" required={true}>
                      nanos field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.apiKeys" childKey="updatedAt" type="object" required={true}>
                  updatedAt field

                  <Expandable title="updatedAt details">
                    <NestedParam parentKey="activity.votes.user.apiKeys.updatedAt" childKey="seconds" type="string" required={true}>
                      seconds field
                    </NestedParam>

                    <NestedParam parentKey="activity.votes.user.apiKeys.updatedAt" childKey="nanos" type="string" required={true}>
                      nanos field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                  Optional window (in seconds) indicating how long the API Key should last.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.votes.user" childKey="userTags" type="array" required={true}>
              A list of User Tag IDs.

              <Expandable title="userTags details">
                <NestedParam parentKey="activity.votes.user.userTags" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.votes.user" childKey="oauthProviders" type="array" required={true}>
              A list of Oauth Providers.

              <Expandable title="oauthProviders details">
                <NestedParam parentKey="activity.votes.user.oauthProviders" childKey="providerId" type="string" required={true}>
                  Unique identifier for an OAuth Provider
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.oauthProviders" childKey="providerName" type="string" required={true}>
                  Human-readable name to identify a Provider.
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.oauthProviders" childKey="issuer" type="string" required={true}>
                  The issuer of the token, typically a URL indicating the authentication server, e.g [https://accounts.google.com](https://accounts.google.com)
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.oauthProviders" childKey="audience" type="string" required={true}>
                  Expected audience ('aud' attribute of the signed token) which represents the app ID
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.oauthProviders" childKey="subject" type="string" required={true}>
                  Expected subject ('sub' attribute of the signed token) which represents the user ID
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.oauthProviders" childKey="createdAt" type="object" required={true}>
                  createdAt field

                  <Expandable title="createdAt details">
                    <NestedParam parentKey="activity.votes.user.oauthProviders.createdAt" childKey="seconds" type="string" required={true}>
                      seconds field
                    </NestedParam>

                    <NestedParam parentKey="activity.votes.user.oauthProviders.createdAt" childKey="nanos" type="string" required={true}>
                      nanos field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.oauthProviders" childKey="updatedAt" type="object" required={true}>
                  updatedAt field

                  <Expandable title="updatedAt details">
                    <NestedParam parentKey="activity.votes.user.oauthProviders.updatedAt" childKey="seconds" type="string" required={true}>
                      seconds field
                    </NestedParam>

                    <NestedParam parentKey="activity.votes.user.oauthProviders.updatedAt" childKey="nanos" type="string" required={true}>
                      nanos field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.votes.user" childKey="createdAt" type="object" required={true}>
              createdAt field

              <Expandable title="createdAt details">
                <NestedParam parentKey="activity.votes.user.createdAt" childKey="seconds" type="string" required={true}>
                  seconds field
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.createdAt" childKey="nanos" type="string" required={true}>
                  nanos field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activity.votes.user" childKey="updatedAt" type="object" required={true}>
              updatedAt field

              <Expandable title="updatedAt details">
                <NestedParam parentKey="activity.votes.user.updatedAt" childKey="seconds" type="string" required={true}>
                  seconds field
                </NestedParam>

                <NestedParam parentKey="activity.votes.user.updatedAt" childKey="nanos" type="string" required={true}>
                  nanos field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activity.votes" childKey="activityId" type="string" required={true}>
          Unique identifier for a given Activity object.
        </NestedParam>

        <NestedParam parentKey="activity.votes" childKey="selection" type="enum" required={true}>
          selection field

          Enum options: `VOTE_SELECTION_APPROVED`, `VOTE_SELECTION_REJECTED`
        </NestedParam>

        <NestedParam parentKey="activity.votes" childKey="message" type="string" required={true}>
          The raw message being signed within a Vote.
        </NestedParam>

        <NestedParam parentKey="activity.votes" childKey="publicKey" type="string" required={true}>
          The public component of a cryptographic key pair used to sign messages and transactions.
        </NestedParam>

        <NestedParam parentKey="activity.votes" childKey="signature" type="string" required={true}>
          The signature applied to a particular vote.
        </NestedParam>

        <NestedParam parentKey="activity.votes" childKey="scheme" type="string" required={true}>
          Method used to produce a signature.
        </NestedParam>

        <NestedParam parentKey="activity.votes" childKey="createdAt" type="object" required={true}>
          createdAt field

          <Expandable title="createdAt details">
            <NestedParam parentKey="activity.votes.createdAt" childKey="seconds" type="string" required={true}>
              seconds field
            </NestedParam>

            <NestedParam parentKey="activity.votes.createdAt" childKey="nanos" type="string" required={true}>
              nanos field
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canApprove" type="boolean" required={true}>
      canApprove field
    </NestedParam>

    <NestedParam parentKey="activity" childKey="canReject" type="boolean" required={true}>
      canReject field
    </NestedParam>

    <NestedParam parentKey="activity" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="activity.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="activity.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="activity.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="activity.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activity" childKey="failure" type="object" required={false}>
      failure field

      <Expandable title="failure details">
        <NestedParam parentKey="activity.failure" childKey="code" type="number" required={false}>
          code field
        </NestedParam>

        <NestedParam parentKey="activity.failure" childKey="message" type="string" required={false}>
          message field
        </NestedParam>

        <NestedParam parentKey="activity.failure" childKey="details" type="array" required={false}>
          details field

          <Expandable title="details details">
            <NestedParam parentKey="activity.failure.details" childKey="@type" type="string" required={false}>
              @type field
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/get_activity \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>",
      "activityId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().getActivity({
    organizationId: "<string> (Unique identifier for a given organization.)",
    activityId: "<string> (Unique identifier for a given activity object.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activity": {
      "id": "<string>",
      "organizationId": "<string>",
      "status": "<ACTIVITY_STATUS_CREATED>",
      "type": "<ACTIVITY_TYPE_CREATE_API_KEYS>",
      "intent": {
        "createOrganizationIntent": {
          "organizationName": "<string>",
          "rootEmail": "<string>",
          "rootAuthenticator": {
            "authenticatorName": "<string>",
            "userId": "<string>",
            "attestation": {
              "id": "<string>",
              "type": "<public-key>",
              "rawId": "<string>",
              "authenticatorAttachment": "<cross-platform>",
              "response": {
                "clientDataJson": "<string>",
                "attestationObject": "<string>",
                "transports": [
                  "<AUTHENTICATOR_TRANSPORT_BLE>"
                ],
                "authenticatorAttachment": "<cross-platform>"
              },
              "clientExtensionResults": {
                "appid": "<boolean>",
                "appidExclude": "<boolean>",
                "credProps": {
                  "rk": "<boolean>"
                }
              }
            },
            "challenge": "<string>"
          },
          "rootUserId": "<string>"
        }
      },
      "result": {
        "createOrganizationResult": {
          "organizationId": "<string>"
        },
        "createAuthenticatorsResult": {
          "authenticatorIds": [
            "<string>"
          ]
        },
        "createUsersResult": {
          "userIds": [
            "<string>"
          ]
        },
        "createPrivateKeysResult": {
          "privateKeyIds": [
            "<string>"
          ]
        },
        "createInvitationsResult": {
          "invitationIds": [
            "<string>"
          ]
        },
        "acceptInvitationResult": {
          "invitationId": "<string>",
          "userId": "<string>"
        },
        "signRawPayloadResult": {
          "r": "<string>",
          "s": "<string>",
          "v": "<string>"
        },
        "createPolicyResult": {
          "policyId": "<string>"
        },
        "disablePrivateKeyResult": {
          "privateKeyId": "<string>"
        },
        "deleteUsersResult": {
          "userIds": [
            "<string>"
          ]
        },
        "deleteAuthenticatorsResult": {
          "authenticatorIds": [
            "<string>"
          ]
        },
        "deleteInvitationResult": {
          "invitationId": "<string>"
        },
        "deleteOrganizationResult": {
          "organizationId": "<string>"
        },
        "deletePolicyResult": {
          "policyId": "<string>"
        },
        "createUserTagResult": {
          "userTagId": "<string>",
          "userIds": [
            "<string>"
          ]
        },
        "deleteUserTagsResult": {
          "userTagIds": [
            "<string>"
          ],
          "userIds": [
            "<string>"
          ]
        },
        "signTransactionResult": {
          "signedTransaction": "<string>"
        },
        "deleteApiKeysResult": {
          "apiKeyIds": [
            "<string>"
          ]
        },
        "createApiKeysResult": {
          "apiKeyIds": [
            "<string>"
          ]
        },
        "createPrivateKeyTagResult": {
          "privateKeyTagId": "<string>",
          "privateKeyIds": [
            "<string>"
          ]
        },
        "deletePrivateKeyTagsResult": {
          "privateKeyTagIds": [
            "<string>"
          ],
          "privateKeyIds": [
            "<string>"
          ]
        },
        "setPaymentMethodResult": {
          "lastFour": "<string>",
          "cardHolderName": "<string>",
          "cardHolderEmail": "<string>"
        },
        "activateBillingTierResult": {
          "productId": "<string>"
        },
        "deletePaymentMethodResult": {
          "paymentMethodId": "<string>"
        },
        "createApiOnlyUsersResult": {
          "userIds": [
            "<string>"
          ]
        },
        "updateRootQuorumResult": "<object>",
        "updateUserTagResult": {
          "userTagId": "<string>"
        },
        "updatePrivateKeyTagResult": {
          "privateKeyTagId": "<string>"
        },
        "createSubOrganizationResult": {
          "subOrganizationId": "<string>",
          "rootUserIds": [
            "<string>"
          ]
        },
        "updateAllowedOriginsResult": "<object>",
        "createPrivateKeysResultV2": {
          "privateKeys": [
            {
              "privateKeyId": "<string>",
              "addresses": [
                {
                  "format": "<ADDRESS_FORMAT_UNCOMPRESSED>",
                  "address": "<string>"
                }
              ]
            }
          ]
        },
        "updateUserResult": {
          "userId": "<string>"
        },
        "updatePolicyResult": {
          "policyId": "<string>"
        },
        "createSubOrganizationResultV3": {
          "subOrganizationId": "<string>",
          "privateKeys": [
            {
              "privateKeyId": "<string>",
              "addresses": [
                {
                  "format": "<ADDRESS_FORMAT_UNCOMPRESSED>",
                  "address": "<string>"
                }
              ]
            }
          ],
          "rootUserIds": [
            "<string>"
          ]
        },
        "createWalletResult": {
          "walletId": "<string>",
          "addresses": [
            "<string>"
          ]
        },
        "createWalletAccountsResult": {
          "addresses": [
            "<string>"
          ]
        },
        "initUserEmailRecoveryResult": {
          "userId": "<string>"
        },
        "recoverUserResult": {
          "authenticatorId": [
            "<string>"
          ]
        },
        "setOrganizationFeatureResult": {
          "features": [
            {
              "name": "<FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY>",
              "value": "<string>"
            }
          ]
        },
        "removeOrganizationFeatureResult": {
          "features": [
            {
              "name": "<FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY>",
              "value": "<string>"
            }
          ]
        },
        "exportPrivateKeyResult": {
          "privateKeyId": "<string>",
          "exportBundle": "<string>"
        },
        "exportWalletResult": {
          "walletId": "<string>",
          "exportBundle": "<string>"
        },
        "createSubOrganizationResultV4": {
          "subOrganizationId": "<string>",
          "wallet": {
            "walletId": "<string>",
            "addresses": [
              "<string>"
            ]
          },
          "rootUserIds": [
            "<string>"
          ]
        },
        "emailAuthResult": {
          "userId": "<string>",
          "apiKeyId": "<string>"
        },
        "exportWalletAccountResult": {
          "address": "<string>",
          "exportBundle": "<string>"
        },
        "initImportWalletResult": {
          "importBundle": "<string>"
        },
        "importWalletResult": {
          "walletId": "<string>",
          "addresses": [
            "<string>"
          ]
        },
        "initImportPrivateKeyResult": {
          "importBundle": "<string>"
        },
        "importPrivateKeyResult": {
          "privateKeyId": "<string>",
          "addresses": [
            {
              "format": "<ADDRESS_FORMAT_UNCOMPRESSED>",
              "address": "<string>"
            }
          ]
        },
        "createPoliciesResult": {
          "policyIds": [
            "<string>"
          ]
        },
        "signRawPayloadsResult": {
          "signatures": [
            {
              "r": "<string>",
              "s": "<string>",
              "v": "<string>"
            }
          ]
        },
        "createReadOnlySessionResult": {
          "organizationId": "<string>",
          "organizationName": "<string>",
          "userId": "<string>",
          "username": "<string>",
          "session": "<string>",
          "sessionExpiry": "<string>"
        },
        "createOauthProvidersResult": {
          "providerIds": [
            "<string>"
          ]
        },
        "deleteOauthProvidersResult": {
          "providerIds": [
            "<string>"
          ]
        },
        "createSubOrganizationResultV5": {
          "subOrganizationId": "<string>",
          "wallet": {
            "walletId": "<string>",
            "addresses": [
              "<string>"
            ]
          },
          "rootUserIds": [
            "<string>"
          ]
        },
        "oauthResult": {
          "userId": "<string>",
          "apiKeyId": "<string>",
          "credentialBundle": "<string>"
        },
        "createReadWriteSessionResult": {
          "organizationId": "<string>",
          "organizationName": "<string>",
          "userId": "<string>",
          "username": "<string>",
          "apiKeyId": "<string>",
          "credentialBundle": "<string>"
        },
        "createSubOrganizationResultV6": {
          "subOrganizationId": "<string>",
          "wallet": {
            "walletId": "<string>",
            "addresses": [
              "<string>"
            ]
          },
          "rootUserIds": [
            "<string>"
          ]
        },
        "deletePrivateKeysResult": {
          "privateKeyIds": [
            "<string>"
          ]
        },
        "deleteWalletsResult": {
          "walletIds": [
            "<string>"
          ]
        },
        "createReadWriteSessionResultV2": {
          "organizationId": "<string>",
          "organizationName": "<string>",
          "userId": "<string>",
          "username": "<string>",
          "apiKeyId": "<string>",
          "credentialBundle": "<string>"
        },
        "deleteSubOrganizationResult": {
          "subOrganizationUuid": "<string>"
        },
        "initOtpAuthResult": {
          "otpId": "<string>"
        },
        "otpAuthResult": {
          "userId": "<string>",
          "apiKeyId": "<string>",
          "credentialBundle": "<string>"
        },
        "createSubOrganizationResultV7": {
          "subOrganizationId": "<string>",
          "wallet": {
            "walletId": "<string>",
            "addresses": [
              "<string>"
            ]
          },
          "rootUserIds": [
            "<string>"
          ]
        },
        "updateWalletResult": {
          "walletId": "<string>"
        },
        "updatePolicyResultV2": {
          "policyId": "<string>"
        },
        "initOtpAuthResultV2": {
          "otpId": "<string>"
        },
        "initOtpResult": {
          "otpId": "<string>"
        },
        "verifyOtpResult": {
          "verificationToken": "<string>"
        },
        "otpLoginResult": {
          "session": "<string>"
        },
        "stampLoginResult": {
          "session": "<string>"
        },
        "oauthLoginResult": {
          "session": "<string>"
        },
        "updateUserNameResult": {
          "userId": "<string>"
        },
        "updateUserEmailResult": {
          "userId": "<string>"
        },
        "updateUserPhoneNumberResult": {
          "userId": "<string>"
        },
        "initFiatOnRampResult": {
          "onRampUrl": "<string>",
          "onRampTransactionId": "<string>"
        },
        "createSmartContractInterfaceResult": {
          "smartContractInterfaceId": "<string>"
        },
        "deleteSmartContractInterfaceResult": {
          "smartContractInterfaceId": "<string>"
        }
      },
      "votes": [
        {
          "id": "<string>",
          "userId": "<string>",
          "user": {
            "userId": "<string>",
            "userName": "<string>",
            "userEmail": "<string>",
            "userPhoneNumber": "<string>",
            "authenticators": [
              {
                "transports": [
                  "<AUTHENTICATOR_TRANSPORT_BLE>"
                ],
                "attestationType": "<string>",
                "aaguid": "<string>",
                "credentialId": "<string>",
                "model": "<string>",
                "credential": {
                  "publicKey": "<string>",
                  "type": "<CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR>"
                },
                "authenticatorId": "<string>",
                "authenticatorName": "<string>",
                "createdAt": {
                  "seconds": "<string>",
                  "nanos": "<string>"
                },
                "updatedAt": {
                  "seconds": "<string>",
                  "nanos": "<string>"
                }
              }
            ],
            "apiKeys": [
              {
                "credential": {
                  "publicKey": "<string>",
                  "type": "<CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR>"
                },
                "apiKeyId": "<string>",
                "apiKeyName": "<string>",
                "createdAt": {
                  "seconds": "<string>",
                  "nanos": "<string>"
                },
                "updatedAt": {
                  "seconds": "<string>",
                  "nanos": "<string>"
                },
                "expirationSeconds": "<string>"
              }
            ],
            "userTags": [
              "<string>"
            ],
            "oauthProviders": [
              {
                "providerId": "<string>",
                "providerName": "<string>",
                "issuer": "<string>",
                "audience": "<string>",
                "subject": "<string>",
                "createdAt": {
                  "seconds": "<string>",
                  "nanos": "<string>"
                },
                "updatedAt": {
                  "seconds": "<string>",
                  "nanos": "<string>"
                }
              }
            ],
            "createdAt": {
              "seconds": "<string>",
              "nanos": "<string>"
            },
            "updatedAt": {
              "seconds": "<string>",
              "nanos": "<string>"
            }
          },
          "activityId": "<string>",
          "selection": "<VOTE_SELECTION_APPROVED>",
          "message": "<string>",
          "publicKey": "<string>",
          "signature": "<string>",
          "scheme": "<string>",
          "createdAt": {
            "seconds": "<string>",
            "nanos": "<string>"
          }
        }
      ],
      "fingerprint": "<string>",
      "canApprove": "<boolean>",
      "canReject": "<boolean>",
      "createdAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      },
      "updatedAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      },
      "failure": {
        "code": "<number>",
        "message": "<string>",
        "details": [
          {
            "@type": "<string>"
          }
        ]
      }
    }
  }
  ```
</ResponseExample>


# Get API key
Source: https://docs.turnkey.com/api-reference/queries/get-api-key

Get details about an API key.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="get_api_key" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<ParamField body="apiKeyId" type="string" required={true}>
  Unique identifier for a given API key.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="apiKey" type="object" required={true}>
  apiKey field

  <Expandable title="apiKey details">
    <NestedParam parentKey="apiKey" childKey="credential" type="object" required={true}>
      credential field

      <Expandable title="credential details">
        <NestedParam parentKey="apiKey.credential" childKey="publicKey" type="string" required={true}>
          The public component of a cryptographic key pair used to sign messages and transactions.
        </NestedParam>

        <NestedParam parentKey="apiKey.credential" childKey="type" type="enum" required={true}>
          type field

          Enum options: `CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR`, `CREDENTIAL_TYPE_API_KEY_P256`, `CREDENTIAL_TYPE_RECOVER_USER_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_SECP256K1`, `CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_ED25519`, `CREDENTIAL_TYPE_OTP_AUTH_KEY_P256`, `CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256`, `CREDENTIAL_TYPE_OAUTH_KEY_P256`, `CREDENTIAL_TYPE_LOGIN`
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="apiKey" childKey="apiKeyId" type="string" required={true}>
      Unique identifier for a given API Key.
    </NestedParam>

    <NestedParam parentKey="apiKey" childKey="apiKeyName" type="string" required={true}>
      Human-readable name for an API Key.
    </NestedParam>

    <NestedParam parentKey="apiKey" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="apiKey.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="apiKey.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="apiKey" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="apiKey.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="apiKey.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="apiKey" childKey="expirationSeconds" type="string" required={false}>
      Optional window (in seconds) indicating how long the API Key should last.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/get_api_key \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>",
      "apiKeyId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().getApiKey({
    organizationId: "<string> (Unique identifier for a given organization.)",
    apiKeyId: "<string> (Unique identifier for a given API key.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "apiKey": {
      "credential": {
        "publicKey": "<string>",
        "type": "<CREDENTIAL_TYPE_API_KEY_P256>"
      },
      "apiKeyId": "<string>",
      "apiKeyName": "<string>",
      "createdAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      },
      "updatedAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      },
      "expirationSeconds": "<string>"
    }
  }
  ```
</ResponseExample>


# Get API keys
Source: https://docs.turnkey.com/api-reference/queries/get-api-keys

Get details about API keys for a user.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="get_api_keys" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<ParamField body="userId" type="string" required={false}>
  Unique identifier for a given user.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="apiKeys" type="array" required={true}>
  A list of API keys.

  <Expandable title="apiKeys details">
    <NestedParam parentKey="apiKeys" childKey="credential" type="object" required={true}>
      credential field

      <Expandable title="credential details">
        <NestedParam parentKey="apiKeys.credential" childKey="publicKey" type="string" required={true}>
          The public component of a cryptographic key pair used to sign messages and transactions.
        </NestedParam>

        <NestedParam parentKey="apiKeys.credential" childKey="type" type="enum" required={true}>
          type field

          Enum options: `CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR`, `CREDENTIAL_TYPE_API_KEY_P256`, `CREDENTIAL_TYPE_RECOVER_USER_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_SECP256K1`, `CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_ED25519`, `CREDENTIAL_TYPE_OTP_AUTH_KEY_P256`, `CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256`, `CREDENTIAL_TYPE_OAUTH_KEY_P256`, `CREDENTIAL_TYPE_LOGIN`
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="apiKeys" childKey="apiKeyId" type="string" required={true}>
      Unique identifier for a given API Key.
    </NestedParam>

    <NestedParam parentKey="apiKeys" childKey="apiKeyName" type="string" required={true}>
      Human-readable name for an API Key.
    </NestedParam>

    <NestedParam parentKey="apiKeys" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="apiKeys.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="apiKeys.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="apiKeys" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="apiKeys.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="apiKeys.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="apiKeys" childKey="expirationSeconds" type="string" required={false}>
      Optional window (in seconds) indicating how long the API Key should last.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/get_api_keys \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>",
      "userId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().getApiKeys({
    organizationId: "<string> (Unique identifier for a given organization.)",
    userId: "<string> (Unique identifier for a given user.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "apiKeys": [
      {
        "credential": {
          "publicKey": "<string>",
          "type": "<CREDENTIAL_TYPE_API_KEY_P256>"
        },
        "apiKeyId": "<string>",
        "apiKeyName": "<string>",
        "createdAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "updatedAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "expirationSeconds": "<string>"
      }
    ]
  }
  ```
</ResponseExample>


# Get authenticator
Source: https://docs.turnkey.com/api-reference/queries/get-authenticator

Get details about an authenticator.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="get_authenticator" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<ParamField body="authenticatorId" type="string" required={true}>
  Unique identifier for a given authenticator.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="authenticator" type="object" required={true}>
  authenticator field

  <Expandable title="authenticator details">
    <NestedParam parentKey="authenticator" childKey="transports" type="array" required={true}>
      Types of transports that may be used by an Authenticator (e.g., USB, NFC, BLE).

      <Expandable title="transports details">
        <NestedParam parentKey="authenticator.transports" childKey="item" type="enum" required={true}>
          item field

          Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="authenticator" childKey="attestationType" type="string" required={true}>
      attestationType field
    </NestedParam>

    <NestedParam parentKey="authenticator" childKey="aaguid" type="string" required={true}>
      Identifier indicating the type of the Security Key.
    </NestedParam>

    <NestedParam parentKey="authenticator" childKey="credentialId" type="string" required={true}>
      Unique identifier for a WebAuthn credential.
    </NestedParam>

    <NestedParam parentKey="authenticator" childKey="model" type="string" required={true}>
      The type of Authenticator device.
    </NestedParam>

    <NestedParam parentKey="authenticator" childKey="credential" type="object" required={true}>
      credential field

      <Expandable title="credential details">
        <NestedParam parentKey="authenticator.credential" childKey="publicKey" type="string" required={true}>
          The public component of a cryptographic key pair used to sign messages and transactions.
        </NestedParam>

        <NestedParam parentKey="authenticator.credential" childKey="type" type="enum" required={true}>
          type field

          Enum options: `CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR`, `CREDENTIAL_TYPE_API_KEY_P256`, `CREDENTIAL_TYPE_RECOVER_USER_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_SECP256K1`, `CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_ED25519`, `CREDENTIAL_TYPE_OTP_AUTH_KEY_P256`, `CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256`, `CREDENTIAL_TYPE_OAUTH_KEY_P256`, `CREDENTIAL_TYPE_LOGIN`
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="authenticator" childKey="authenticatorId" type="string" required={true}>
      Unique identifier for a given Authenticator.
    </NestedParam>

    <NestedParam parentKey="authenticator" childKey="authenticatorName" type="string" required={true}>
      Human-readable name for an Authenticator.
    </NestedParam>

    <NestedParam parentKey="authenticator" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="authenticator.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="authenticator.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="authenticator" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="authenticator.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="authenticator.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/get_authenticator \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>",
      "authenticatorId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().getAuthenticator({
    organizationId: "<string> (Unique identifier for a given organization.)",
    authenticatorId: "<string> (Unique identifier for a given authenticator.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "authenticator": {
      "transports": [
        "<AUTHENTICATOR_TRANSPORT_BLE>"
      ],
      "attestationType": "<string>",
      "aaguid": "<string>",
      "credentialId": "<string>",
      "model": "<string>",
      "credential": {
        "publicKey": "<string>",
        "type": "<CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR>"
      },
      "authenticatorId": "<string>",
      "authenticatorName": "<string>",
      "createdAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      },
      "updatedAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      }
    }
  }
  ```
</ResponseExample>


# Get authenticators
Source: https://docs.turnkey.com/api-reference/queries/get-authenticators

Get details about authenticators for a user.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="get_authenticators" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<ParamField body="userId" type="string" required={true}>
  Unique identifier for a given user.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="authenticators" type="array" required={true}>
  A list of authenticators.

  <Expandable title="authenticators details">
    <NestedParam parentKey="authenticators" childKey="transports" type="array" required={true}>
      Types of transports that may be used by an Authenticator (e.g., USB, NFC, BLE).

      <Expandable title="transports details">
        <NestedParam parentKey="authenticators.transports" childKey="item" type="enum" required={true}>
          item field

          Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="authenticators" childKey="attestationType" type="string" required={true}>
      attestationType field
    </NestedParam>

    <NestedParam parentKey="authenticators" childKey="aaguid" type="string" required={true}>
      Identifier indicating the type of the Security Key.
    </NestedParam>

    <NestedParam parentKey="authenticators" childKey="credentialId" type="string" required={true}>
      Unique identifier for a WebAuthn credential.
    </NestedParam>

    <NestedParam parentKey="authenticators" childKey="model" type="string" required={true}>
      The type of Authenticator device.
    </NestedParam>

    <NestedParam parentKey="authenticators" childKey="credential" type="object" required={true}>
      credential field

      <Expandable title="credential details">
        <NestedParam parentKey="authenticators.credential" childKey="publicKey" type="string" required={true}>
          The public component of a cryptographic key pair used to sign messages and transactions.
        </NestedParam>

        <NestedParam parentKey="authenticators.credential" childKey="type" type="enum" required={true}>
          type field

          Enum options: `CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR`, `CREDENTIAL_TYPE_API_KEY_P256`, `CREDENTIAL_TYPE_RECOVER_USER_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_SECP256K1`, `CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_ED25519`, `CREDENTIAL_TYPE_OTP_AUTH_KEY_P256`, `CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256`, `CREDENTIAL_TYPE_OAUTH_KEY_P256`, `CREDENTIAL_TYPE_LOGIN`
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="authenticators" childKey="authenticatorId" type="string" required={true}>
      Unique identifier for a given Authenticator.
    </NestedParam>

    <NestedParam parentKey="authenticators" childKey="authenticatorName" type="string" required={true}>
      Human-readable name for an Authenticator.
    </NestedParam>

    <NestedParam parentKey="authenticators" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="authenticators.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="authenticators.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="authenticators" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="authenticators.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="authenticators.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/get_authenticators \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>",
      "userId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().getAuthenticators({
    organizationId: "<string> (Unique identifier for a given organization.)",
    userId: "<string> (Unique identifier for a given user.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "authenticators": [
      {
        "transports": [
          "<AUTHENTICATOR_TRANSPORT_BLE>"
        ],
        "attestationType": "<string>",
        "aaguid": "<string>",
        "credentialId": "<string>",
        "model": "<string>",
        "credential": {
          "publicKey": "<string>",
          "type": "<CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR>"
        },
        "authenticatorId": "<string>",
        "authenticatorName": "<string>",
        "createdAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "updatedAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        }
      }
    ]
  }
  ```
</ResponseExample>


# Get configs
Source: https://docs.turnkey.com/api-reference/queries/get-configs

Get quorum settings and features for an organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="get_organization_configs" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="configs" type="object" required={true}>
  configs field

  <Expandable title="configs details">
    <NestedParam parentKey="configs" childKey="features" type="array" required={false}>
      features field

      <Expandable title="features details">
        <NestedParam parentKey="configs.features" childKey="name" type="enum" required={false}>
          name field

          Enum options: `FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY`, `FEATURE_NAME_WEBAUTHN_ORIGINS`, `FEATURE_NAME_EMAIL_AUTH`, `FEATURE_NAME_EMAIL_RECOVERY`, `FEATURE_NAME_WEBHOOK`, `FEATURE_NAME_SMS_AUTH`, `FEATURE_NAME_OTP_EMAIL_AUTH`
        </NestedParam>

        <NestedParam parentKey="configs.features" childKey="value" type="string" required={false}>
          value field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="configs" childKey="quorum" type="object" required={false}>
      quorum field

      <Expandable title="quorum details">
        <NestedParam parentKey="configs.quorum" childKey="threshold" type="number" required={true}>
          Count of unique approvals required to meet quorum.
        </NestedParam>

        <NestedParam parentKey="configs.quorum" childKey="userIds" type="array" required={true}>
          Unique identifiers of quorum set members.

          <Expandable title="userIds details">
            <NestedParam parentKey="configs.quorum.userIds" childKey="item" type="string" required={true}>
              item field
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/get_organization_configs \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().getOrganizationConfigs({
    organizationId: "<string> (Unique identifier for a given organization.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "configs": {
      "features": [
        {
          "name": "<FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY>",
          "value": "<string>"
        }
      ],
      "quorum": {
        "threshold": "<number>",
        "userIds": [
          "<string>"
        ]
      }
    }
  }
  ```
</ResponseExample>


# Get Oauth providers
Source: https://docs.turnkey.com/api-reference/queries/get-oauth-providers

Get details about Oauth providers for a user.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="get_oauth_providers" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<ParamField body="userId" type="string" required={false}>
  Unique identifier for a given user.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="oauthProviders" type="array" required={true}>
  A list of Oauth providers.

  <Expandable title="oauthProviders details">
    <NestedParam parentKey="oauthProviders" childKey="providerId" type="string" required={true}>
      Unique identifier for an OAuth Provider
    </NestedParam>

    <NestedParam parentKey="oauthProviders" childKey="providerName" type="string" required={true}>
      Human-readable name to identify a Provider.
    </NestedParam>

    <NestedParam parentKey="oauthProviders" childKey="issuer" type="string" required={true}>
      The issuer of the token, typically a URL indicating the authentication server, e.g [https://accounts.google.com](https://accounts.google.com)
    </NestedParam>

    <NestedParam parentKey="oauthProviders" childKey="audience" type="string" required={true}>
      Expected audience ('aud' attribute of the signed token) which represents the app ID
    </NestedParam>

    <NestedParam parentKey="oauthProviders" childKey="subject" type="string" required={true}>
      Expected subject ('sub' attribute of the signed token) which represents the user ID
    </NestedParam>

    <NestedParam parentKey="oauthProviders" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="oauthProviders.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="oauthProviders.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="oauthProviders" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="oauthProviders.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="oauthProviders.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/get_oauth_providers \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>",
      "userId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().getOauthProviders({
    organizationId: "<string> (Unique identifier for a given organization.)",
    userId: "<string> (Unique identifier for a given user.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "oauthProviders": [
      {
        "providerId": "<string>",
        "providerName": "<string>",
        "issuer": "<string>",
        "audience": "<string>",
        "subject": "<string>",
        "createdAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "updatedAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        }
      }
    ]
  }
  ```
</ResponseExample>


# Get policy
Source: https://docs.turnkey.com/api-reference/queries/get-policy

Get details about a policy.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="get_policy" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<ParamField body="policyId" type="string" required={true}>
  Unique identifier for a given policy.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="policy" type="object" required={true}>
  policy field

  <Expandable title="policy details">
    <NestedParam parentKey="policy" childKey="policyId" type="string" required={true}>
      Unique identifier for a given Policy.
    </NestedParam>

    <NestedParam parentKey="policy" childKey="policyName" type="string" required={true}>
      Human-readable name for a Policy.
    </NestedParam>

    <NestedParam parentKey="policy" childKey="effect" type="enum" required={true}>
      effect field

      Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
    </NestedParam>

    <NestedParam parentKey="policy" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="policy.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="policy.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="policy" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="policy.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="policy.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="policy" childKey="notes" type="string" required={true}>
      Human-readable notes added by a User to describe a particular policy.
    </NestedParam>

    <NestedParam parentKey="policy" childKey="consensus" type="string" required={true}>
      A consensus expression that evalutes to true or false.
    </NestedParam>

    <NestedParam parentKey="policy" childKey="condition" type="string" required={true}>
      A condition expression that evalutes to true or false.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/get_policy \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>",
      "policyId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().getPolicy({
    organizationId: "<string> (Unique identifier for a given organization.)",
    policyId: "<string> (Unique identifier for a given policy.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "policy": {
      "policyId": "<string>",
      "policyName": "<string>",
      "effect": "<EFFECT_ALLOW>",
      "createdAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      },
      "updatedAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      },
      "notes": "<string>",
      "consensus": "<string>",
      "condition": "<string>"
    }
  }
  ```
</ResponseExample>


# Get policy evaluations
Source: https://docs.turnkey.com/api-reference/queries/get-policy-evaluations

Get the policy evaluations for an activity.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="get_policy_evaluations" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<ParamField body="activityId" type="string" required={true}>
  Unique identifier for a given activity.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="policyEvaluations" type="array" required={true}>
  policyEvaluations field

  <Expandable title="policyEvaluations details">
    <NestedParam parentKey="policyEvaluations" childKey="id" type="string" required={true}>
      Unique identifier for a given policy evaluation.
    </NestedParam>

    <NestedParam parentKey="policyEvaluations" childKey="activityId" type="string" required={true}>
      Unique identifier for a given Activity.
    </NestedParam>

    <NestedParam parentKey="policyEvaluations" childKey="organizationId" type="string" required={true}>
      Unique identifier for the Organization the Activity belongs to.
    </NestedParam>

    <NestedParam parentKey="policyEvaluations" childKey="voteId" type="string" required={true}>
      Unique identifier for the Vote associated with this policy evaluation.
    </NestedParam>

    <NestedParam parentKey="policyEvaluations" childKey="policyEvaluations" type="array" required={true}>
      Detailed evaluation result for each Policy that was run.

      <Expandable title="policyEvaluations details">
        <NestedParam parentKey="policyEvaluations.policyEvaluations" childKey="policyId" type="string" required={false}>
          policyId field
        </NestedParam>

        <NestedParam parentKey="policyEvaluations.policyEvaluations" childKey="outcome" type="enum" required={false}>
          outcome field

          Enum options: `OUTCOME_ALLOW`, `OUTCOME_DENY_EXPLICIT`, `OUTCOME_DENY_IMPLICIT`, `OUTCOME_REQUIRES_CONSENSUS`, `OUTCOME_REJECTED`, `OUTCOME_ERROR`
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="policyEvaluations" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="policyEvaluations.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="policyEvaluations.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/get_policy_evaluations \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>",
      "activityId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().getPolicyEvaluations({
    organizationId: "<string> (Unique identifier for a given organization.)",
    activityId: "<string> (Unique identifier for a given activity.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "policyEvaluations": [
      {
        "id": "<string>",
        "activityId": "<string>",
        "organizationId": "<string>",
        "voteId": "<string>",
        "policyEvaluations": [
          {
            "policyId": "<string>",
            "outcome": "<OUTCOME_ALLOW>"
          }
        ],
        "createdAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        }
      }
    ]
  }
  ```
</ResponseExample>


# Get private key
Source: https://docs.turnkey.com/api-reference/queries/get-private-key

Get details about a private key.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="get_private_key" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<ParamField body="privateKeyId" type="string" required={true}>
  Unique identifier for a given private key.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="privateKey" type="object" required={true}>
  privateKey field

  <Expandable title="privateKey details">
    <NestedParam parentKey="privateKey" childKey="privateKeyId" type="string" required={true}>
      Unique identifier for a given Private Key.
    </NestedParam>

    <NestedParam parentKey="privateKey" childKey="publicKey" type="string" required={true}>
      The public component of a cryptographic key pair used to sign messages and transactions.
    </NestedParam>

    <NestedParam parentKey="privateKey" childKey="privateKeyName" type="string" required={true}>
      Human-readable name for a Private Key.
    </NestedParam>

    <NestedParam parentKey="privateKey" childKey="curve" type="enum" required={true}>
      curve field

      Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
    </NestedParam>

    <NestedParam parentKey="privateKey" childKey="addresses" type="array" required={true}>
      Derived cryptocurrency addresses for a given Private Key.

      <Expandable title="addresses details">
        <NestedParam parentKey="privateKey.addresses" childKey="format" type="enum" required={false}>
          format field

          Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
        </NestedParam>

        <NestedParam parentKey="privateKey.addresses" childKey="address" type="string" required={false}>
          address field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="privateKey" childKey="privateKeyTags" type="array" required={true}>
      A list of Private Key Tag IDs.

      <Expandable title="privateKeyTags details">
        <NestedParam parentKey="privateKey.privateKeyTags" childKey="item" type="string" required={true}>
          item field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="privateKey" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="privateKey.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="privateKey.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="privateKey" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="privateKey.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="privateKey.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="privateKey" childKey="exported" type="boolean" required={true}>
      True when a given Private Key is exported, false otherwise.
    </NestedParam>

    <NestedParam parentKey="privateKey" childKey="imported" type="boolean" required={true}>
      True when a given Private Key is imported, false otherwise.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/get_private_key \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>",
      "privateKeyId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().getPrivateKey({
    organizationId: "<string> (Unique identifier for a given organization.)",
    privateKeyId: "<string> (Unique identifier for a given private key.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "privateKey": {
      "privateKeyId": "<string>",
      "publicKey": "<string>",
      "privateKeyName": "<string>",
      "curve": "<CURVE_SECP256K1>",
      "addresses": [
        {
          "format": "<ADDRESS_FORMAT_UNCOMPRESSED>",
          "address": "<string>"
        }
      ],
      "privateKeyTags": [
        "<string>"
      ],
      "createdAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      },
      "updatedAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      },
      "exported": "<boolean>",
      "imported": "<boolean>"
    }
  }
  ```
</ResponseExample>


# Get smart contract interface
Source: https://docs.turnkey.com/api-reference/queries/get-smart-contract-interface

Get details about a smart contract interface.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="get_smart_contract_interface" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<ParamField body="smartContractInterfaceId" type="string" required={true}>
  Unique identifier for a given smart contract interface.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="smartContractInterface" type="object" required={true}>
  smartContractInterface field

  <Expandable title="smartContractInterface details">
    <NestedParam parentKey="smartContractInterface" childKey="organizationId" type="string" required={true}>
      The Organization the Smart Contract Interface belongs to.
    </NestedParam>

    <NestedParam parentKey="smartContractInterface" childKey="smartContractInterfaceId" type="string" required={true}>
      Unique identifier for a given Smart Contract Interface (ABI or IDL).
    </NestedParam>

    <NestedParam parentKey="smartContractInterface" childKey="smartContractAddress" type="string" required={true}>
      The address corresponding to the Smart Contract or Program.
    </NestedParam>

    <NestedParam parentKey="smartContractInterface" childKey="smartContractInterface" type="string" required={true}>
      The JSON corresponding to the Smart Contract Interface (ABI or IDL).
    </NestedParam>

    <NestedParam parentKey="smartContractInterface" childKey="type" type="string" required={true}>
      The type corresponding to the Smart Contract Interface (either ETHEREUM or SOLANA).
    </NestedParam>

    <NestedParam parentKey="smartContractInterface" childKey="label" type="string" required={true}>
      The label corresponding to the Smart Contract Interface (either ETHEREUM or SOLANA).
    </NestedParam>

    <NestedParam parentKey="smartContractInterface" childKey="notes" type="string" required={true}>
      The notes corresponding to the Smart Contract Interface (either ETHEREUM or SOLANA).
    </NestedParam>

    <NestedParam parentKey="smartContractInterface" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="smartContractInterface.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="smartContractInterface.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="smartContractInterface" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="smartContractInterface.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="smartContractInterface.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/get_smart_contract_interface \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>",
      "smartContractInterfaceId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().getSmartContractInterface({
    organizationId: "<string> (Unique identifier for a given organization.)",
    smartContractInterfaceId: "<string> (Unique identifier for a given smart contract interface.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "smartContractInterface": {
      "organizationId": "<string>",
      "smartContractInterfaceId": "<string>",
      "smartContractAddress": "<string>",
      "smartContractInterface": "<string>",
      "type": "<string>",
      "label": "<string>",
      "notes": "<string>",
      "createdAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      },
      "updatedAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      }
    }
  }
  ```
</ResponseExample>


# Get sub-organizations
Source: https://docs.turnkey.com/api-reference/queries/get-sub-organizations

Get all suborg IDs associated given a parent org ID and an optional filter.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="list_suborgs" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for the parent organization. This is used to find sub-organizations within it.
</ParamField>

<ParamField body="filterType" type="string" required={false}>
  Specifies the type of filter to apply, i.e 'CREDENTIAL\_ID', 'NAME', 'USERNAME', 'EMAIL', 'PHONE\_NUMBER', 'OIDC\_TOKEN', 'WALLET\_ACCOUNT\_ADDRESS' or 'PUBLIC\_KEY'
</ParamField>

<ParamField body="filterValue" type="string" required={false}>
  The value of the filter to apply for the specified type. For example, a specific email or name string.
</ParamField>

<ParamField body="paginationOptions" type="object" required={false} path="paginationOptions">
  <p>paginationOptions field</p>

  <Expandable title="details">
    <NestedParam parentKey="paginationOptions" childKey="limit" type="string" required={false} default="">
      A limit of the number of object to be returned, between 1 and 100. Defaults to 10.
    </NestedParam>

    <NestedParam parentKey="paginationOptions" childKey="before" type="string" required={false} default="">
      A pagination cursor. This is an object ID that enables you to fetch all objects before this ID.
    </NestedParam>

    <NestedParam parentKey="paginationOptions" childKey="after" type="string" required={false} default="">
      A pagination cursor. This is an object ID that enables you to fetch all objects after this ID.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="organizationIds" type="array" required={true}>
  List of unique identifiers for the matching sub-organizations.

  <Expandable title="organizationIds details">
    <NestedParam parentKey="organizationIds" childKey="item" type="string" required={true}>
      item field
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/list_suborgs \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>",
      "filterType": "<string>",
      "filterValue": "<string>",
      "paginationOptions": {
          "limit": "<string>",
          "before": "<string>",
          "after": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().listSuborgs({
    organizationId: "<string> (Unique identifier for the parent organization. This is used to find sub-organizations within it.)",
    filterType: "<string> (Specifies the type of filter to apply, i.e 'CREDENTIAL_ID', 'NAME', 'USERNAME', 'EMAIL', 'PHONE_NUMBER', 'OIDC_TOKEN', 'WALLET_ACCOUNT_ADDRESS' or 'PUBLIC_KEY')",
    filterValue: "<string> (The value of the filter to apply for the specified type. For example, a specific email or name string.)",
    paginationOptions: { // paginationOptions field,
      limit: "<string> (A limit of the number of object to be returned, between 1 and 100. Defaults to 10.)",
      before: "<string> (A pagination cursor. This is an object ID that enables you to fetch all objects before this ID.)",
      after: "<string> (A pagination cursor. This is an object ID that enables you to fetch all objects after this ID.)",
    }
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "organizationIds": [
      "<string>"
    ]
  }
  ```
</ResponseExample>


# Get user
Source: https://docs.turnkey.com/api-reference/queries/get-user

Get details about a user.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="get_user" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<ParamField body="userId" type="string" required={true}>
  Unique identifier for a given user.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="user" type="object" required={true}>
  user field

  <Expandable title="user details">
    <NestedParam parentKey="user" childKey="userId" type="string" required={true}>
      Unique identifier for a given User.
    </NestedParam>

    <NestedParam parentKey="user" childKey="userName" type="string" required={true}>
      Human-readable name for a User.
    </NestedParam>

    <NestedParam parentKey="user" childKey="userEmail" type="string" required={false}>
      The user's email address.
    </NestedParam>

    <NestedParam parentKey="user" childKey="userPhoneNumber" type="string" required={false}>
      The user's phone number in E.164 format e.g. +13214567890
    </NestedParam>

    <NestedParam parentKey="user" childKey="authenticators" type="array" required={true}>
      A list of Authenticator parameters.

      <Expandable title="authenticators details">
        <NestedParam parentKey="user.authenticators" childKey="transports" type="array" required={true}>
          Types of transports that may be used by an Authenticator (e.g., USB, NFC, BLE).

          <Expandable title="transports details">
            <NestedParam parentKey="user.authenticators.transports" childKey="item" type="enum" required={true}>
              item field

              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="user.authenticators" childKey="attestationType" type="string" required={true}>
          attestationType field
        </NestedParam>

        <NestedParam parentKey="user.authenticators" childKey="aaguid" type="string" required={true}>
          Identifier indicating the type of the Security Key.
        </NestedParam>

        <NestedParam parentKey="user.authenticators" childKey="credentialId" type="string" required={true}>
          Unique identifier for a WebAuthn credential.
        </NestedParam>

        <NestedParam parentKey="user.authenticators" childKey="model" type="string" required={true}>
          The type of Authenticator device.
        </NestedParam>

        <NestedParam parentKey="user.authenticators" childKey="credential" type="object" required={true}>
          credential field

          <Expandable title="credential details">
            <NestedParam parentKey="user.authenticators.credential" childKey="publicKey" type="string" required={true}>
              The public component of a cryptographic key pair used to sign messages and transactions.
            </NestedParam>

            <NestedParam parentKey="user.authenticators.credential" childKey="type" type="enum" required={true}>
              type field

              Enum options: `CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR`, `CREDENTIAL_TYPE_API_KEY_P256`, `CREDENTIAL_TYPE_RECOVER_USER_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_SECP256K1`, `CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_ED25519`, `CREDENTIAL_TYPE_OTP_AUTH_KEY_P256`, `CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256`, `CREDENTIAL_TYPE_OAUTH_KEY_P256`, `CREDENTIAL_TYPE_LOGIN`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="user.authenticators" childKey="authenticatorId" type="string" required={true}>
          Unique identifier for a given Authenticator.
        </NestedParam>

        <NestedParam parentKey="user.authenticators" childKey="authenticatorName" type="string" required={true}>
          Human-readable name for an Authenticator.
        </NestedParam>

        <NestedParam parentKey="user.authenticators" childKey="createdAt" type="object" required={true}>
          createdAt field

          <Expandable title="createdAt details">
            <NestedParam parentKey="user.authenticators.createdAt" childKey="seconds" type="string" required={true}>
              seconds field
            </NestedParam>

            <NestedParam parentKey="user.authenticators.createdAt" childKey="nanos" type="string" required={true}>
              nanos field
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="user.authenticators" childKey="updatedAt" type="object" required={true}>
          updatedAt field

          <Expandable title="updatedAt details">
            <NestedParam parentKey="user.authenticators.updatedAt" childKey="seconds" type="string" required={true}>
              seconds field
            </NestedParam>

            <NestedParam parentKey="user.authenticators.updatedAt" childKey="nanos" type="string" required={true}>
              nanos field
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="user" childKey="apiKeys" type="array" required={true}>
      A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

      <Expandable title="apiKeys details">
        <NestedParam parentKey="user.apiKeys" childKey="credential" type="object" required={true}>
          credential field

          <Expandable title="credential details">
            <NestedParam parentKey="user.apiKeys.credential" childKey="publicKey" type="string" required={true}>
              The public component of a cryptographic key pair used to sign messages and transactions.
            </NestedParam>

            <NestedParam parentKey="user.apiKeys.credential" childKey="type" type="enum" required={true}>
              type field

              Enum options: `CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR`, `CREDENTIAL_TYPE_API_KEY_P256`, `CREDENTIAL_TYPE_RECOVER_USER_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_SECP256K1`, `CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_ED25519`, `CREDENTIAL_TYPE_OTP_AUTH_KEY_P256`, `CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256`, `CREDENTIAL_TYPE_OAUTH_KEY_P256`, `CREDENTIAL_TYPE_LOGIN`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="user.apiKeys" childKey="apiKeyId" type="string" required={true}>
          Unique identifier for a given API Key.
        </NestedParam>

        <NestedParam parentKey="user.apiKeys" childKey="apiKeyName" type="string" required={true}>
          Human-readable name for an API Key.
        </NestedParam>

        <NestedParam parentKey="user.apiKeys" childKey="createdAt" type="object" required={true}>
          createdAt field

          <Expandable title="createdAt details">
            <NestedParam parentKey="user.apiKeys.createdAt" childKey="seconds" type="string" required={true}>
              seconds field
            </NestedParam>

            <NestedParam parentKey="user.apiKeys.createdAt" childKey="nanos" type="string" required={true}>
              nanos field
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="user.apiKeys" childKey="updatedAt" type="object" required={true}>
          updatedAt field

          <Expandable title="updatedAt details">
            <NestedParam parentKey="user.apiKeys.updatedAt" childKey="seconds" type="string" required={true}>
              seconds field
            </NestedParam>

            <NestedParam parentKey="user.apiKeys.updatedAt" childKey="nanos" type="string" required={true}>
              nanos field
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="user.apiKeys" childKey="expirationSeconds" type="string" required={false}>
          Optional window (in seconds) indicating how long the API Key should last.
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="user" childKey="userTags" type="array" required={true}>
      A list of User Tag IDs.

      <Expandable title="userTags details">
        <NestedParam parentKey="user.userTags" childKey="item" type="string" required={true}>
          item field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="user" childKey="oauthProviders" type="array" required={true}>
      A list of Oauth Providers.

      <Expandable title="oauthProviders details">
        <NestedParam parentKey="user.oauthProviders" childKey="providerId" type="string" required={true}>
          Unique identifier for an OAuth Provider
        </NestedParam>

        <NestedParam parentKey="user.oauthProviders" childKey="providerName" type="string" required={true}>
          Human-readable name to identify a Provider.
        </NestedParam>

        <NestedParam parentKey="user.oauthProviders" childKey="issuer" type="string" required={true}>
          The issuer of the token, typically a URL indicating the authentication server, e.g [https://accounts.google.com](https://accounts.google.com)
        </NestedParam>

        <NestedParam parentKey="user.oauthProviders" childKey="audience" type="string" required={true}>
          Expected audience ('aud' attribute of the signed token) which represents the app ID
        </NestedParam>

        <NestedParam parentKey="user.oauthProviders" childKey="subject" type="string" required={true}>
          Expected subject ('sub' attribute of the signed token) which represents the user ID
        </NestedParam>

        <NestedParam parentKey="user.oauthProviders" childKey="createdAt" type="object" required={true}>
          createdAt field

          <Expandable title="createdAt details">
            <NestedParam parentKey="user.oauthProviders.createdAt" childKey="seconds" type="string" required={true}>
              seconds field
            </NestedParam>

            <NestedParam parentKey="user.oauthProviders.createdAt" childKey="nanos" type="string" required={true}>
              nanos field
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="user.oauthProviders" childKey="updatedAt" type="object" required={true}>
          updatedAt field

          <Expandable title="updatedAt details">
            <NestedParam parentKey="user.oauthProviders.updatedAt" childKey="seconds" type="string" required={true}>
              seconds field
            </NestedParam>

            <NestedParam parentKey="user.oauthProviders.updatedAt" childKey="nanos" type="string" required={true}>
              nanos field
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="user" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="user.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="user.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="user" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="user.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="user.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/get_user \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>",
      "userId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().getUser({
    organizationId: "<string> (Unique identifier for a given organization.)",
    userId: "<string> (Unique identifier for a given user.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "user": {
      "userId": "<string>",
      "userName": "<string>",
      "userEmail": "<string>",
      "userPhoneNumber": "<string>",
      "authenticators": [
        {
          "transports": [
            "<AUTHENTICATOR_TRANSPORT_BLE>"
          ],
          "attestationType": "<string>",
          "aaguid": "<string>",
          "credentialId": "<string>",
          "model": "<string>",
          "credential": {
            "publicKey": "<string>",
            "type": "<CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR>"
          },
          "authenticatorId": "<string>",
          "authenticatorName": "<string>",
          "createdAt": {
            "seconds": "<string>",
            "nanos": "<string>"
          },
          "updatedAt": {
            "seconds": "<string>",
            "nanos": "<string>"
          }
        }
      ],
      "apiKeys": [
        {
          "credential": {
            "publicKey": "<string>",
            "type": "<CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR>"
          },
          "apiKeyId": "<string>",
          "apiKeyName": "<string>",
          "createdAt": {
            "seconds": "<string>",
            "nanos": "<string>"
          },
          "updatedAt": {
            "seconds": "<string>",
            "nanos": "<string>"
          },
          "expirationSeconds": "<string>"
        }
      ],
      "userTags": [
        "<string>"
      ],
      "oauthProviders": [
        {
          "providerId": "<string>",
          "providerName": "<string>",
          "issuer": "<string>",
          "audience": "<string>",
          "subject": "<string>",
          "createdAt": {
            "seconds": "<string>",
            "nanos": "<string>"
          },
          "updatedAt": {
            "seconds": "<string>",
            "nanos": "<string>"
          }
        }
      ],
      "createdAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      },
      "updatedAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      }
    }
  }
  ```
</ResponseExample>


# Get verified sub-organizations
Source: https://docs.turnkey.com/api-reference/queries/get-verified-sub-organizations

Get all email or phone verified suborg IDs associated given a parent org ID.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="list_verified_suborgs" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for the parent organization. This is used to find sub-organizations within it.
</ParamField>

<ParamField body="filterType" type="string" required={false}>
  Specifies the type of filter to apply, i.e 'EMAIL', 'PHONE\_NUMBER'.
</ParamField>

<ParamField body="filterValue" type="string" required={false}>
  The value of the filter to apply for the specified type. For example, a specific email or phone number string.
</ParamField>

<ParamField body="paginationOptions" type="object" required={false} path="paginationOptions">
  <p>paginationOptions field</p>

  <Expandable title="details">
    <NestedParam parentKey="paginationOptions" childKey="limit" type="string" required={false} default="">
      A limit of the number of object to be returned, between 1 and 100. Defaults to 10.
    </NestedParam>

    <NestedParam parentKey="paginationOptions" childKey="before" type="string" required={false} default="">
      A pagination cursor. This is an object ID that enables you to fetch all objects before this ID.
    </NestedParam>

    <NestedParam parentKey="paginationOptions" childKey="after" type="string" required={false} default="">
      A pagination cursor. This is an object ID that enables you to fetch all objects after this ID.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="organizationIds" type="array" required={true}>
  List of unique identifiers for the matching sub-organizations.

  <Expandable title="organizationIds details">
    <NestedParam parentKey="organizationIds" childKey="item" type="string" required={true}>
      item field
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/list_verified_suborgs \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>",
      "filterType": "<string>",
      "filterValue": "<string>",
      "paginationOptions": {
          "limit": "<string>",
          "before": "<string>",
          "after": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().listVerifiedSuborgs({
    organizationId: "<string> (Unique identifier for the parent organization. This is used to find sub-organizations within it.)",
    filterType: "<string> (Specifies the type of filter to apply, i.e 'EMAIL', 'PHONE_NUMBER'.)",
    filterValue: "<string> (The value of the filter to apply for the specified type. For example, a specific email or phone number string.)",
    paginationOptions: { // paginationOptions field,
      limit: "<string> (A limit of the number of object to be returned, between 1 and 100. Defaults to 10.)",
      before: "<string> (A pagination cursor. This is an object ID that enables you to fetch all objects before this ID.)",
      after: "<string> (A pagination cursor. This is an object ID that enables you to fetch all objects after this ID.)",
    }
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "organizationIds": [
      "<string>"
    ]
  }
  ```
</ResponseExample>


# Get wallet
Source: https://docs.turnkey.com/api-reference/queries/get-wallet

Get details about a wallet.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="get_wallet" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<ParamField body="walletId" type="string" required={true}>
  Unique identifier for a given wallet.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="wallet" type="object" required={true}>
  wallet field

  <Expandable title="wallet details">
    <NestedParam parentKey="wallet" childKey="walletId" type="string" required={true}>
      Unique identifier for a given Wallet.
    </NestedParam>

    <NestedParam parentKey="wallet" childKey="walletName" type="string" required={true}>
      Human-readable name for a Wallet.
    </NestedParam>

    <NestedParam parentKey="wallet" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="wallet.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="wallet.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="wallet" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="wallet.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="wallet.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="wallet" childKey="exported" type="boolean" required={true}>
      True when a given Wallet is exported, false otherwise.
    </NestedParam>

    <NestedParam parentKey="wallet" childKey="imported" type="boolean" required={true}>
      True when a given Wallet is imported, false otherwise.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/get_wallet \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>",
      "walletId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().getWallet({
    organizationId: "<string> (Unique identifier for a given organization.)",
    walletId: "<string> (Unique identifier for a given wallet.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "wallet": {
      "walletId": "<string>",
      "walletName": "<string>",
      "createdAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      },
      "updatedAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      },
      "exported": "<boolean>",
      "imported": "<boolean>"
    }
  }
  ```
</ResponseExample>


# Get wallet account
Source: https://docs.turnkey.com/api-reference/queries/get-wallet-account

Get a single wallet account.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="get_wallet_account" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<ParamField body="walletId" type="string" required={true}>
  Unique identifier for a given wallet.
</ParamField>

<ParamField body="address" type="string" required={false}>
  Address corresponding to a wallet account.
</ParamField>

<ParamField body="path" type="string" required={false}>
  Path corresponding to a wallet account.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="account" type="object" required={true}>
  account field

  <Expandable title="account details">
    <NestedParam parentKey="account" childKey="walletAccountId" type="string" required={true}>
      Unique identifier for a given Wallet Account.
    </NestedParam>

    <NestedParam parentKey="account" childKey="organizationId" type="string" required={true}>
      The Organization the Account belongs to.
    </NestedParam>

    <NestedParam parentKey="account" childKey="walletId" type="string" required={true}>
      The Wallet the Account was derived from.
    </NestedParam>

    <NestedParam parentKey="account" childKey="curve" type="enum" required={true}>
      curve field

      Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
    </NestedParam>

    <NestedParam parentKey="account" childKey="pathFormat" type="enum" required={true}>
      pathFormat field

      Enum options: `PATH_FORMAT_BIP32`
    </NestedParam>

    <NestedParam parentKey="account" childKey="path" type="string" required={true}>
      Path used to generate the Account.
    </NestedParam>

    <NestedParam parentKey="account" childKey="addressFormat" type="enum" required={true}>
      addressFormat field

      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
    </NestedParam>

    <NestedParam parentKey="account" childKey="address" type="string" required={true}>
      Address generated using the Wallet seed and Account parameters.
    </NestedParam>

    <NestedParam parentKey="account" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="account.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="account.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="account" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="account.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="account.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="account" childKey="publicKey" type="string" required={false}>
      The public component of this wallet account's underlying cryptographic key pair.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/get_wallet_account \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>",
      "walletId": "<string>",
      "address": "<string>",
      "path": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().getWalletAccount({
    organizationId: "<string> (Unique identifier for a given organization.)",
    walletId: "<string> (Unique identifier for a given wallet.)",
    address: "<string> (Address corresponding to a wallet account.)",
    path: "<string> (Path corresponding to a wallet account.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "account": {
      "walletAccountId": "<string>",
      "organizationId": "<string>",
      "walletId": "<string>",
      "curve": "<CURVE_SECP256K1>",
      "pathFormat": "<PATH_FORMAT_BIP32>",
      "path": "<string>",
      "addressFormat": "<ADDRESS_FORMAT_UNCOMPRESSED>",
      "address": "<string>",
      "createdAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      },
      "updatedAt": {
        "seconds": "<string>",
        "nanos": "<string>"
      },
      "publicKey": "<string>"
    }
  }
  ```
</ResponseExample>


# List activities
Source: https://docs.turnkey.com/api-reference/queries/list-activities

List all activities within an organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="list_activities" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<ParamField body="filterByStatus" type="enum<string[]>" required={false}>
  Enum options: `ACTIVITY_STATUS_CREATED`, `ACTIVITY_STATUS_PENDING`, `ACTIVITY_STATUS_COMPLETED`, `ACTIVITY_STATUS_FAILED`, `ACTIVITY_STATUS_CONSENSUS_NEEDED`, `ACTIVITY_STATUS_REJECTED`
</ParamField>

<ParamField body="paginationOptions" type="object" required={false} path="paginationOptions">
  <p>paginationOptions field</p>

  <Expandable title="details">
    <NestedParam parentKey="paginationOptions" childKey="limit" type="string" required={false} default="">
      A limit of the number of object to be returned, between 1 and 100. Defaults to 10.
    </NestedParam>

    <NestedParam parentKey="paginationOptions" childKey="before" type="string" required={false} default="">
      A pagination cursor. This is an object ID that enables you to fetch all objects before this ID.
    </NestedParam>

    <NestedParam parentKey="paginationOptions" childKey="after" type="string" required={false} default="">
      A pagination cursor. This is an object ID that enables you to fetch all objects after this ID.
    </NestedParam>
  </Expandable>
</ParamField>

<ParamField body="filterByType" type="enum<string[]>" required={false}>
  Enum options: `ACTIVITY_TYPE_CREATE_API_KEYS`, `ACTIVITY_TYPE_CREATE_USERS`, `ACTIVITY_TYPE_CREATE_PRIVATE_KEYS`, `ACTIVITY_TYPE_SIGN_RAW_PAYLOAD`, `ACTIVITY_TYPE_CREATE_INVITATIONS`, `ACTIVITY_TYPE_ACCEPT_INVITATION`, `ACTIVITY_TYPE_CREATE_POLICY`, `ACTIVITY_TYPE_DISABLE_PRIVATE_KEY`, `ACTIVITY_TYPE_DELETE_USERS`, `ACTIVITY_TYPE_DELETE_API_KEYS`, `ACTIVITY_TYPE_DELETE_INVITATION`, `ACTIVITY_TYPE_DELETE_ORGANIZATION`, `ACTIVITY_TYPE_DELETE_POLICY`, `ACTIVITY_TYPE_CREATE_USER_TAG`, `ACTIVITY_TYPE_DELETE_USER_TAGS`, `ACTIVITY_TYPE_CREATE_ORGANIZATION`, `ACTIVITY_TYPE_SIGN_TRANSACTION`, `ACTIVITY_TYPE_APPROVE_ACTIVITY`, `ACTIVITY_TYPE_REJECT_ACTIVITY`, `ACTIVITY_TYPE_DELETE_AUTHENTICATORS`, `ACTIVITY_TYPE_CREATE_AUTHENTICATORS`, `ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG`, `ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS`, `ACTIVITY_TYPE_SET_PAYMENT_METHOD`, `ACTIVITY_TYPE_ACTIVATE_BILLING_TIER`, `ACTIVITY_TYPE_DELETE_PAYMENT_METHOD`, `ACTIVITY_TYPE_CREATE_POLICY_V2`, `ACTIVITY_TYPE_CREATE_POLICY_V3`, `ACTIVITY_TYPE_CREATE_API_ONLY_USERS`, `ACTIVITY_TYPE_UPDATE_ROOT_QUORUM`, `ACTIVITY_TYPE_UPDATE_USER_TAG`, `ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG`, `ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2`, `ACTIVITY_TYPE_CREATE_ORGANIZATION_V2`, `ACTIVITY_TYPE_CREATE_USERS_V2`, `ACTIVITY_TYPE_ACCEPT_INVITATION_V2`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2`, `ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS`, `ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2`, `ACTIVITY_TYPE_UPDATE_USER`, `ACTIVITY_TYPE_UPDATE_POLICY`, `ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3`, `ACTIVITY_TYPE_CREATE_WALLET`, `ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS`, `ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY`, `ACTIVITY_TYPE_RECOVER_USER`, `ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE`, `ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE`, `ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2`, `ACTIVITY_TYPE_SIGN_TRANSACTION_V2`, `ACTIVITY_TYPE_EXPORT_PRIVATE_KEY`, `ACTIVITY_TYPE_EXPORT_WALLET`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4`, `ACTIVITY_TYPE_EMAIL_AUTH`, `ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT`, `ACTIVITY_TYPE_INIT_IMPORT_WALLET`, `ACTIVITY_TYPE_IMPORT_WALLET`, `ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY`, `ACTIVITY_TYPE_IMPORT_PRIVATE_KEY`, `ACTIVITY_TYPE_CREATE_POLICIES`, `ACTIVITY_TYPE_SIGN_RAW_PAYLOADS`, `ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION`, `ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS`, `ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5`, `ACTIVITY_TYPE_OAUTH`, `ACTIVITY_TYPE_CREATE_API_KEYS_V2`, `ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION`, `ACTIVITY_TYPE_EMAIL_AUTH_V2`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6`, `ACTIVITY_TYPE_DELETE_PRIVATE_KEYS`, `ACTIVITY_TYPE_DELETE_WALLETS`, `ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2`, `ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION`, `ACTIVITY_TYPE_INIT_OTP_AUTH`, `ACTIVITY_TYPE_OTP_AUTH`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7`, `ACTIVITY_TYPE_UPDATE_WALLET`, `ACTIVITY_TYPE_UPDATE_POLICY_V2`, `ACTIVITY_TYPE_CREATE_USERS_V3`, `ACTIVITY_TYPE_INIT_OTP_AUTH_V2`, `ACTIVITY_TYPE_INIT_OTP`, `ACTIVITY_TYPE_VERIFY_OTP`, `ACTIVITY_TYPE_OTP_LOGIN`, `ACTIVITY_TYPE_STAMP_LOGIN`, `ACTIVITY_TYPE_OAUTH_LOGIN`, `ACTIVITY_TYPE_UPDATE_USER_NAME`, `ACTIVITY_TYPE_UPDATE_USER_EMAIL`, `ACTIVITY_TYPE_UPDATE_USER_PHONE_NUMBER`, `ACTIVITY_TYPE_INIT_FIAT_ON_RAMP`, `ACTIVITY_TYPE_CREATE_SMART_CONTRACT_INTERFACE`, `ACTIVITY_TYPE_DELETE_SMART_CONTRACT_INTERFACE`
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="activities" type="array" required={true}>
  A list of activities.

  <Expandable title="activities details">
    <NestedParam parentKey="activities" childKey="id" type="string" required={true}>
      Unique identifier for a given Activity object.
    </NestedParam>

    <NestedParam parentKey="activities" childKey="organizationId" type="string" required={true}>
      Unique identifier for a given Organization.
    </NestedParam>

    <NestedParam parentKey="activities" childKey="status" type="enum" required={true}>
      status field

      Enum options: `ACTIVITY_STATUS_CREATED`, `ACTIVITY_STATUS_PENDING`, `ACTIVITY_STATUS_COMPLETED`, `ACTIVITY_STATUS_FAILED`, `ACTIVITY_STATUS_CONSENSUS_NEEDED`, `ACTIVITY_STATUS_REJECTED`
    </NestedParam>

    <NestedParam parentKey="activities" childKey="type" type="enum" required={true}>
      type field

      Enum options: `ACTIVITY_TYPE_CREATE_API_KEYS`, `ACTIVITY_TYPE_CREATE_USERS`, `ACTIVITY_TYPE_CREATE_PRIVATE_KEYS`, `ACTIVITY_TYPE_SIGN_RAW_PAYLOAD`, `ACTIVITY_TYPE_CREATE_INVITATIONS`, `ACTIVITY_TYPE_ACCEPT_INVITATION`, `ACTIVITY_TYPE_CREATE_POLICY`, `ACTIVITY_TYPE_DISABLE_PRIVATE_KEY`, `ACTIVITY_TYPE_DELETE_USERS`, `ACTIVITY_TYPE_DELETE_API_KEYS`, `ACTIVITY_TYPE_DELETE_INVITATION`, `ACTIVITY_TYPE_DELETE_ORGANIZATION`, `ACTIVITY_TYPE_DELETE_POLICY`, `ACTIVITY_TYPE_CREATE_USER_TAG`, `ACTIVITY_TYPE_DELETE_USER_TAGS`, `ACTIVITY_TYPE_CREATE_ORGANIZATION`, `ACTIVITY_TYPE_SIGN_TRANSACTION`, `ACTIVITY_TYPE_APPROVE_ACTIVITY`, `ACTIVITY_TYPE_REJECT_ACTIVITY`, `ACTIVITY_TYPE_DELETE_AUTHENTICATORS`, `ACTIVITY_TYPE_CREATE_AUTHENTICATORS`, `ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG`, `ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS`, `ACTIVITY_TYPE_SET_PAYMENT_METHOD`, `ACTIVITY_TYPE_ACTIVATE_BILLING_TIER`, `ACTIVITY_TYPE_DELETE_PAYMENT_METHOD`, `ACTIVITY_TYPE_CREATE_POLICY_V2`, `ACTIVITY_TYPE_CREATE_POLICY_V3`, `ACTIVITY_TYPE_CREATE_API_ONLY_USERS`, `ACTIVITY_TYPE_UPDATE_ROOT_QUORUM`, `ACTIVITY_TYPE_UPDATE_USER_TAG`, `ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG`, `ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2`, `ACTIVITY_TYPE_CREATE_ORGANIZATION_V2`, `ACTIVITY_TYPE_CREATE_USERS_V2`, `ACTIVITY_TYPE_ACCEPT_INVITATION_V2`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2`, `ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS`, `ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2`, `ACTIVITY_TYPE_UPDATE_USER`, `ACTIVITY_TYPE_UPDATE_POLICY`, `ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3`, `ACTIVITY_TYPE_CREATE_WALLET`, `ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS`, `ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY`, `ACTIVITY_TYPE_RECOVER_USER`, `ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE`, `ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE`, `ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2`, `ACTIVITY_TYPE_SIGN_TRANSACTION_V2`, `ACTIVITY_TYPE_EXPORT_PRIVATE_KEY`, `ACTIVITY_TYPE_EXPORT_WALLET`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4`, `ACTIVITY_TYPE_EMAIL_AUTH`, `ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT`, `ACTIVITY_TYPE_INIT_IMPORT_WALLET`, `ACTIVITY_TYPE_IMPORT_WALLET`, `ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY`, `ACTIVITY_TYPE_IMPORT_PRIVATE_KEY`, `ACTIVITY_TYPE_CREATE_POLICIES`, `ACTIVITY_TYPE_SIGN_RAW_PAYLOADS`, `ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION`, `ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS`, `ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5`, `ACTIVITY_TYPE_OAUTH`, `ACTIVITY_TYPE_CREATE_API_KEYS_V2`, `ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION`, `ACTIVITY_TYPE_EMAIL_AUTH_V2`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6`, `ACTIVITY_TYPE_DELETE_PRIVATE_KEYS`, `ACTIVITY_TYPE_DELETE_WALLETS`, `ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2`, `ACTIVITY_TYPE_DELETE_SUB_ORGANIZATION`, `ACTIVITY_TYPE_INIT_OTP_AUTH`, `ACTIVITY_TYPE_OTP_AUTH`, `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7`, `ACTIVITY_TYPE_UPDATE_WALLET`, `ACTIVITY_TYPE_UPDATE_POLICY_V2`, `ACTIVITY_TYPE_CREATE_USERS_V3`, `ACTIVITY_TYPE_INIT_OTP_AUTH_V2`, `ACTIVITY_TYPE_INIT_OTP`, `ACTIVITY_TYPE_VERIFY_OTP`, `ACTIVITY_TYPE_OTP_LOGIN`, `ACTIVITY_TYPE_STAMP_LOGIN`, `ACTIVITY_TYPE_OAUTH_LOGIN`, `ACTIVITY_TYPE_UPDATE_USER_NAME`, `ACTIVITY_TYPE_UPDATE_USER_EMAIL`, `ACTIVITY_TYPE_UPDATE_USER_PHONE_NUMBER`, `ACTIVITY_TYPE_INIT_FIAT_ON_RAMP`, `ACTIVITY_TYPE_CREATE_SMART_CONTRACT_INTERFACE`, `ACTIVITY_TYPE_DELETE_SMART_CONTRACT_INTERFACE`
    </NestedParam>

    <NestedParam parentKey="activities" childKey="intent" type="object" required={true}>
      intent field

      <Expandable title="intent details">
        <NestedParam parentKey="activities.intent" childKey="createOrganizationIntent" type="object" required={false}>
          createOrganizationIntent field

          <Expandable title="createOrganizationIntent details">
            <NestedParam parentKey="activities.intent.createOrganizationIntent" childKey="organizationName" type="string" required={true}>
              Human-readable name for an Organization.
            </NestedParam>

            <NestedParam parentKey="activities.intent.createOrganizationIntent" childKey="rootEmail" type="string" required={true}>
              The root user's email address.
            </NestedParam>

            <NestedParam parentKey="activities.intent.createOrganizationIntent" childKey="rootAuthenticator" type="object" required={true}>
              rootAuthenticator field

              <Expandable title="rootAuthenticator details">
                <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator" childKey="userId" type="string" required={true}>
                  Unique identifier for a given User.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator.attestation" childKey="id" type="string" required={true}>
                      id field
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator.attestation" childKey="type" type="enum" required={true}>
                      type field

                      Enum options: `public-key`
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator.attestation" childKey="rawId" type="string" required={true}>
                      rawId field
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator.attestation" childKey="authenticatorAttachment" type="enum" required={false}>
                      authenticatorAttachment field

                      Enum options: `cross-platform`, `platform`
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator.attestation" childKey="response" type="object" required={true}>
                      response field

                      <Expandable title="response details">
                        <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator.attestation.response" childKey="clientDataJson" type="string" required={true}>
                          clientDataJson field
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator.attestation.response" childKey="attestationObject" type="string" required={true}>
                          attestationObject field
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator.attestation.response" childKey="transports" type="array" required={false}>
                          transports field

                          <Expandable title="transports details">
                            <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator.attestation.response.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator.attestation.response" childKey="authenticatorAttachment" type="enum" required={false}>
                          authenticatorAttachment field

                          Enum options: `cross-platform`, `platform`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator.attestation" childKey="clientExtensionResults" type="object" required={true}>
                      clientExtensionResults field

                      <Expandable title="clientExtensionResults details">
                        <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator.attestation.clientExtensionResults" childKey="appid" type="boolean" required={false}>
                          appid field
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator.attestation.clientExtensionResults" childKey="appidExclude" type="boolean" required={false}>
                          appidExclude field
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator.attestation.clientExtensionResults" childKey="credProps" type="object" required={false}>
                          credProps field

                          <Expandable title="credProps details">
                            <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator.attestation.clientExtensionResults.credProps" childKey="rk" type="boolean" required={true}>
                              rk field
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createOrganizationIntent.rootAuthenticator" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createOrganizationIntent" childKey="rootUserId" type="string" required={false}>
              Unique identifier for the root user object.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createAuthenticatorsIntent" type="object" required={false}>
          createAuthenticatorsIntent field

          <Expandable title="createAuthenticatorsIntent details">
            <NestedParam parentKey="activities.intent.createAuthenticatorsIntent" childKey="authenticators" type="array" required={true}>
              A list of Authenticators.

              <Expandable title="authenticators details">
                <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators" childKey="userId" type="string" required={true}>
                  Unique identifier for a given User.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators.attestation" childKey="id" type="string" required={true}>
                      id field
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators.attestation" childKey="type" type="enum" required={true}>
                      type field

                      Enum options: `public-key`
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators.attestation" childKey="rawId" type="string" required={true}>
                      rawId field
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators.attestation" childKey="authenticatorAttachment" type="enum" required={false}>
                      authenticatorAttachment field

                      Enum options: `cross-platform`, `platform`
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators.attestation" childKey="response" type="object" required={true}>
                      response field

                      <Expandable title="response details">
                        <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators.attestation.response" childKey="clientDataJson" type="string" required={true}>
                          clientDataJson field
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators.attestation.response" childKey="attestationObject" type="string" required={true}>
                          attestationObject field
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators.attestation.response" childKey="transports" type="array" required={false}>
                          transports field

                          <Expandable title="transports details">
                            <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators.attestation.response.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators.attestation.response" childKey="authenticatorAttachment" type="enum" required={false}>
                          authenticatorAttachment field

                          Enum options: `cross-platform`, `platform`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators.attestation" childKey="clientExtensionResults" type="object" required={true}>
                      clientExtensionResults field

                      <Expandable title="clientExtensionResults details">
                        <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators.attestation.clientExtensionResults" childKey="appid" type="boolean" required={false}>
                          appid field
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators.attestation.clientExtensionResults" childKey="appidExclude" type="boolean" required={false}>
                          appidExclude field
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators.attestation.clientExtensionResults" childKey="credProps" type="object" required={false}>
                          credProps field

                          <Expandable title="credProps details">
                            <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators.attestation.clientExtensionResults.credProps" childKey="rk" type="boolean" required={true}>
                              rk field
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createAuthenticatorsIntent.authenticators" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createAuthenticatorsIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createUsersIntent" type="object" required={false}>
          createUsersIntent field

          <Expandable title="createUsersIntent details">
            <NestedParam parentKey="activities.intent.createUsersIntent" childKey="users" type="array" required={true}>
              A list of Users.

              <Expandable title="users details">
                <NestedParam parentKey="activities.intent.createUsersIntent.users" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createUsersIntent.users" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createUsersIntent.users" childKey="accessType" type="enum" required={true}>
                  accessType field

                  Enum options: `ACCESS_TYPE_WEB`, `ACCESS_TYPE_API`, `ACCESS_TYPE_ALL`
                </NestedParam>

                <NestedParam parentKey="activities.intent.createUsersIntent.users" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activities.intent.createUsersIntent.users.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createUsersIntent.users.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createUsersIntent.users.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createUsersIntent.users" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators" childKey="userId" type="string" required={true}>
                      Unique identifier for a given User.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators.attestation" childKey="id" type="string" required={true}>
                          id field
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators.attestation" childKey="type" type="enum" required={true}>
                          type field

                          Enum options: `public-key`
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators.attestation" childKey="rawId" type="string" required={true}>
                          rawId field
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators.attestation" childKey="authenticatorAttachment" type="enum" required={false}>
                          authenticatorAttachment field

                          Enum options: `cross-platform`, `platform`
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators.attestation" childKey="response" type="object" required={true}>
                          response field

                          <Expandable title="response details">
                            <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators.attestation.response" childKey="clientDataJson" type="string" required={true}>
                              clientDataJson field
                            </NestedParam>

                            <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators.attestation.response" childKey="attestationObject" type="string" required={true}>
                              attestationObject field
                            </NestedParam>

                            <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators.attestation.response" childKey="transports" type="array" required={false}>
                              transports field

                              <Expandable title="transports details">
                                <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators.attestation.response.transports" childKey="item" type="enum" required={true}>
                                  item field

                                  Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                                </NestedParam>
                              </Expandable>
                            </NestedParam>

                            <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators.attestation.response" childKey="authenticatorAttachment" type="enum" required={false}>
                              authenticatorAttachment field

                              Enum options: `cross-platform`, `platform`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators.attestation" childKey="clientExtensionResults" type="object" required={true}>
                          clientExtensionResults field

                          <Expandable title="clientExtensionResults details">
                            <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators.attestation.clientExtensionResults" childKey="appid" type="boolean" required={false}>
                              appid field
                            </NestedParam>

                            <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators.attestation.clientExtensionResults" childKey="appidExclude" type="boolean" required={false}>
                              appidExclude field
                            </NestedParam>

                            <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators.attestation.clientExtensionResults" childKey="credProps" type="object" required={false}>
                              credProps field

                              <Expandable title="credProps details">
                                <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators.attestation.clientExtensionResults.credProps" childKey="rk" type="boolean" required={true}>
                                  rk field
                                </NestedParam>
                              </Expandable>
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createUsersIntent.users.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createUsersIntent.users" childKey="userTags" type="array" required={true}>
                  A list of User Tag IDs. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="userTags details">
                    <NestedParam parentKey="activities.intent.createUsersIntent.users.userTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createPrivateKeysIntent" type="object" required={false}>
          createPrivateKeysIntent field

          <Expandable title="createPrivateKeysIntent details">
            <NestedParam parentKey="activities.intent.createPrivateKeysIntent" childKey="privateKeys" type="array" required={true}>
              A list of Private Keys.

              <Expandable title="privateKeys details">
                <NestedParam parentKey="activities.intent.createPrivateKeysIntent.privateKeys" childKey="privateKeyName" type="string" required={true}>
                  Human-readable name for a Private Key.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createPrivateKeysIntent.privateKeys" childKey="curve" type="enum" required={true}>
                  curve field

                  Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activities.intent.createPrivateKeysIntent.privateKeys" childKey="privateKeyTags" type="array" required={true}>
                  A list of Private Key Tag IDs. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="privateKeyTags details">
                    <NestedParam parentKey="activities.intent.createPrivateKeysIntent.privateKeys.privateKeyTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createPrivateKeysIntent.privateKeys" childKey="addressFormats" type="array" required={true}>
                  Cryptocurrency-specific formats for a derived address (e.g., Ethereum).

                  <Expandable title="addressFormats details">
                    <NestedParam parentKey="activities.intent.createPrivateKeysIntent.privateKeys.addressFormats" childKey="item" type="enum" required={true}>
                      item field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="signRawPayloadIntent" type="object" required={false}>
          signRawPayloadIntent field

          <Expandable title="signRawPayloadIntent details">
            <NestedParam parentKey="activities.intent.signRawPayloadIntent" childKey="privateKeyId" type="string" required={true}>
              Unique identifier for a given Private Key.
            </NestedParam>

            <NestedParam parentKey="activities.intent.signRawPayloadIntent" childKey="payload" type="string" required={true}>
              Raw unsigned payload to be signed.
            </NestedParam>

            <NestedParam parentKey="activities.intent.signRawPayloadIntent" childKey="encoding" type="enum" required={true}>
              encoding field

              Enum options: `PAYLOAD_ENCODING_HEXADECIMAL`, `PAYLOAD_ENCODING_TEXT_UTF8`, `PAYLOAD_ENCODING_EIP712`
            </NestedParam>

            <NestedParam parentKey="activities.intent.signRawPayloadIntent" childKey="hashFunction" type="enum" required={true}>
              hashFunction field

              Enum options: `HASH_FUNCTION_NO_OP`, `HASH_FUNCTION_SHA256`, `HASH_FUNCTION_KECCAK256`, `HASH_FUNCTION_NOT_APPLICABLE`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createInvitationsIntent" type="object" required={false}>
          createInvitationsIntent field

          <Expandable title="createInvitationsIntent details">
            <NestedParam parentKey="activities.intent.createInvitationsIntent" childKey="invitations" type="array" required={true}>
              A list of Invitations.

              <Expandable title="invitations details">
                <NestedParam parentKey="activities.intent.createInvitationsIntent.invitations" childKey="receiverUserName" type="string" required={true}>
                  The name of the intended Invitation recipient.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createInvitationsIntent.invitations" childKey="receiverUserEmail" type="string" required={true}>
                  The email address of the intended Invitation recipient.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createInvitationsIntent.invitations" childKey="receiverUserTags" type="array" required={true}>
                  A list of tags assigned to the Invitation recipient. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="receiverUserTags details">
                    <NestedParam parentKey="activities.intent.createInvitationsIntent.invitations.receiverUserTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createInvitationsIntent.invitations" childKey="accessType" type="enum" required={true}>
                  accessType field

                  Enum options: `ACCESS_TYPE_WEB`, `ACCESS_TYPE_API`, `ACCESS_TYPE_ALL`
                </NestedParam>

                <NestedParam parentKey="activities.intent.createInvitationsIntent.invitations" childKey="senderUserId" type="string" required={true}>
                  Unique identifier for the Sender of an Invitation.
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="acceptInvitationIntent" type="object" required={false}>
          acceptInvitationIntent field

          <Expandable title="acceptInvitationIntent details">
            <NestedParam parentKey="activities.intent.acceptInvitationIntent" childKey="invitationId" type="string" required={true}>
              Unique identifier for a given Invitation object.
            </NestedParam>

            <NestedParam parentKey="activities.intent.acceptInvitationIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activities.intent.acceptInvitationIntent" childKey="authenticator" type="object" required={true}>
              authenticator field

              <Expandable title="authenticator details">
                <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator" childKey="userId" type="string" required={true}>
                  Unique identifier for a given User.
                </NestedParam>

                <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator.attestation" childKey="id" type="string" required={true}>
                      id field
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator.attestation" childKey="type" type="enum" required={true}>
                      type field

                      Enum options: `public-key`
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator.attestation" childKey="rawId" type="string" required={true}>
                      rawId field
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator.attestation" childKey="authenticatorAttachment" type="enum" required={false}>
                      authenticatorAttachment field

                      Enum options: `cross-platform`, `platform`
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator.attestation" childKey="response" type="object" required={true}>
                      response field

                      <Expandable title="response details">
                        <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator.attestation.response" childKey="clientDataJson" type="string" required={true}>
                          clientDataJson field
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator.attestation.response" childKey="attestationObject" type="string" required={true}>
                          attestationObject field
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator.attestation.response" childKey="transports" type="array" required={false}>
                          transports field

                          <Expandable title="transports details">
                            <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator.attestation.response.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator.attestation.response" childKey="authenticatorAttachment" type="enum" required={false}>
                          authenticatorAttachment field

                          Enum options: `cross-platform`, `platform`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator.attestation" childKey="clientExtensionResults" type="object" required={true}>
                      clientExtensionResults field

                      <Expandable title="clientExtensionResults details">
                        <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator.attestation.clientExtensionResults" childKey="appid" type="boolean" required={false}>
                          appid field
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator.attestation.clientExtensionResults" childKey="appidExclude" type="boolean" required={false}>
                          appidExclude field
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator.attestation.clientExtensionResults" childKey="credProps" type="object" required={false}>
                          credProps field

                          <Expandable title="credProps details">
                            <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator.attestation.clientExtensionResults.credProps" childKey="rk" type="boolean" required={true}>
                              rk field
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.acceptInvitationIntent.authenticator" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createPolicyIntent" type="object" required={false}>
          createPolicyIntent field

          <Expandable title="createPolicyIntent details">
            <NestedParam parentKey="activities.intent.createPolicyIntent" childKey="policyName" type="string" required={true}>
              Human-readable name for a Policy.
            </NestedParam>

            <NestedParam parentKey="activities.intent.createPolicyIntent" childKey="selectors" type="array" required={true}>
              A list of simple functions each including a subject, target and boolean. See Policy Engine Language section for additional details.

              <Expandable title="selectors details">
                <NestedParam parentKey="activities.intent.createPolicyIntent.selectors" childKey="subject" type="string" required={false}>
                  subject field
                </NestedParam>

                <NestedParam parentKey="activities.intent.createPolicyIntent.selectors" childKey="operator" type="enum" required={false}>
                  operator field

                  Enum options: `OPERATOR_EQUAL`, `OPERATOR_MORE_THAN`, `OPERATOR_MORE_THAN_OR_EQUAL`, `OPERATOR_LESS_THAN`, `OPERATOR_LESS_THAN_OR_EQUAL`, `OPERATOR_CONTAINS`, `OPERATOR_NOT_EQUAL`, `OPERATOR_IN`, `OPERATOR_NOT_IN`, `OPERATOR_CONTAINS_ONE`, `OPERATOR_CONTAINS_ALL`
                </NestedParam>

                <NestedParam parentKey="activities.intent.createPolicyIntent.selectors" childKey="target" type="string" required={false}>
                  target field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createPolicyIntent" childKey="effect" type="enum" required={true}>
              effect field

              Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
            </NestedParam>

            <NestedParam parentKey="activities.intent.createPolicyIntent" childKey="notes" type="string" required={false}>
              notes field
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="disablePrivateKeyIntent" type="object" required={false}>
          disablePrivateKeyIntent field

          <Expandable title="disablePrivateKeyIntent details">
            <NestedParam parentKey="activities.intent.disablePrivateKeyIntent" childKey="privateKeyId" type="string" required={true}>
              Unique identifier for a given Private Key.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="deleteUsersIntent" type="object" required={false}>
          deleteUsersIntent field

          <Expandable title="deleteUsersIntent details">
            <NestedParam parentKey="activities.intent.deleteUsersIntent" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activities.intent.deleteUsersIntent.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="deleteAuthenticatorsIntent" type="object" required={false}>
          deleteAuthenticatorsIntent field

          <Expandable title="deleteAuthenticatorsIntent details">
            <NestedParam parentKey="activities.intent.deleteAuthenticatorsIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activities.intent.deleteAuthenticatorsIntent" childKey="authenticatorIds" type="array" required={true}>
              A list of Authenticator IDs.

              <Expandable title="authenticatorIds details">
                <NestedParam parentKey="activities.intent.deleteAuthenticatorsIntent.authenticatorIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="deleteInvitationIntent" type="object" required={false}>
          deleteInvitationIntent field

          <Expandable title="deleteInvitationIntent details">
            <NestedParam parentKey="activities.intent.deleteInvitationIntent" childKey="invitationId" type="string" required={true}>
              Unique identifier for a given Invitation object.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="deleteOrganizationIntent" type="object" required={false}>
          deleteOrganizationIntent field

          <Expandable title="deleteOrganizationIntent details">
            <NestedParam parentKey="activities.intent.deleteOrganizationIntent" childKey="organizationId" type="string" required={true}>
              Unique identifier for a given Organization.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="deletePolicyIntent" type="object" required={false}>
          deletePolicyIntent field

          <Expandable title="deletePolicyIntent details">
            <NestedParam parentKey="activities.intent.deletePolicyIntent" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createUserTagIntent" type="object" required={false}>
          createUserTagIntent field

          <Expandable title="createUserTagIntent details">
            <NestedParam parentKey="activities.intent.createUserTagIntent" childKey="userTagName" type="string" required={true}>
              Human-readable name for a User Tag.
            </NestedParam>

            <NestedParam parentKey="activities.intent.createUserTagIntent" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activities.intent.createUserTagIntent.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="deleteUserTagsIntent" type="object" required={false}>
          deleteUserTagsIntent field

          <Expandable title="deleteUserTagsIntent details">
            <NestedParam parentKey="activities.intent.deleteUserTagsIntent" childKey="userTagIds" type="array" required={true}>
              A list of User Tag IDs.

              <Expandable title="userTagIds details">
                <NestedParam parentKey="activities.intent.deleteUserTagsIntent.userTagIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="signTransactionIntent" type="object" required={false}>
          signTransactionIntent field

          <Expandable title="signTransactionIntent details">
            <NestedParam parentKey="activities.intent.signTransactionIntent" childKey="privateKeyId" type="string" required={true}>
              Unique identifier for a given Private Key.
            </NestedParam>

            <NestedParam parentKey="activities.intent.signTransactionIntent" childKey="unsignedTransaction" type="string" required={true}>
              Raw unsigned transaction to be signed by a particular Private Key.
            </NestedParam>

            <NestedParam parentKey="activities.intent.signTransactionIntent" childKey="type" type="enum" required={true}>
              type field

              Enum options: `TRANSACTION_TYPE_ETHEREUM`, `TRANSACTION_TYPE_SOLANA`, `TRANSACTION_TYPE_TRON`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createApiKeysIntent" type="object" required={false}>
          createApiKeysIntent field

          <Expandable title="createApiKeysIntent details">
            <NestedParam parentKey="activities.intent.createApiKeysIntent" childKey="apiKeys" type="array" required={true}>
              A list of API Keys.

              <Expandable title="apiKeys details">
                <NestedParam parentKey="activities.intent.createApiKeysIntent.apiKeys" childKey="apiKeyName" type="string" required={true}>
                  Human-readable name for an API Key.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createApiKeysIntent.apiKeys" childKey="publicKey" type="string" required={true}>
                  The public component of a cryptographic key pair used to sign messages and transactions.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createApiKeysIntent.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                  Optional window (in seconds) indicating how long the API Key should last.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createApiKeysIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="deleteApiKeysIntent" type="object" required={false}>
          deleteApiKeysIntent field

          <Expandable title="deleteApiKeysIntent details">
            <NestedParam parentKey="activities.intent.deleteApiKeysIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activities.intent.deleteApiKeysIntent" childKey="apiKeyIds" type="array" required={true}>
              A list of API Key IDs.

              <Expandable title="apiKeyIds details">
                <NestedParam parentKey="activities.intent.deleteApiKeysIntent.apiKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="approveActivityIntent" type="object" required={false}>
          approveActivityIntent field

          <Expandable title="approveActivityIntent details">
            <NestedParam parentKey="activities.intent.approveActivityIntent" childKey="fingerprint" type="string" required={true}>
              An artifact verifying a User's action.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="rejectActivityIntent" type="object" required={false}>
          rejectActivityIntent field

          <Expandable title="rejectActivityIntent details">
            <NestedParam parentKey="activities.intent.rejectActivityIntent" childKey="fingerprint" type="string" required={true}>
              An artifact verifying a User's action.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createPrivateKeyTagIntent" type="object" required={false}>
          createPrivateKeyTagIntent field

          <Expandable title="createPrivateKeyTagIntent details">
            <NestedParam parentKey="activities.intent.createPrivateKeyTagIntent" childKey="privateKeyTagName" type="string" required={true}>
              Human-readable name for a Private Key Tag.
            </NestedParam>

            <NestedParam parentKey="activities.intent.createPrivateKeyTagIntent" childKey="privateKeyIds" type="array" required={true}>
              A list of Private Key IDs.

              <Expandable title="privateKeyIds details">
                <NestedParam parentKey="activities.intent.createPrivateKeyTagIntent.privateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="deletePrivateKeyTagsIntent" type="object" required={false}>
          deletePrivateKeyTagsIntent field

          <Expandable title="deletePrivateKeyTagsIntent details">
            <NestedParam parentKey="activities.intent.deletePrivateKeyTagsIntent" childKey="privateKeyTagIds" type="array" required={true}>
              A list of Private Key Tag IDs.

              <Expandable title="privateKeyTagIds details">
                <NestedParam parentKey="activities.intent.deletePrivateKeyTagsIntent.privateKeyTagIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createPolicyIntentV2" type="object" required={false}>
          createPolicyIntentV2 field

          <Expandable title="createPolicyIntentV2 details">
            <NestedParam parentKey="activities.intent.createPolicyIntentV2" childKey="policyName" type="string" required={true}>
              Human-readable name for a Policy.
            </NestedParam>

            <NestedParam parentKey="activities.intent.createPolicyIntentV2" childKey="selectors" type="array" required={true}>
              A list of simple functions each including a subject, target and boolean. See Policy Engine Language section for additional details.

              <Expandable title="selectors details">
                <NestedParam parentKey="activities.intent.createPolicyIntentV2.selectors" childKey="subject" type="string" required={false}>
                  subject field
                </NestedParam>

                <NestedParam parentKey="activities.intent.createPolicyIntentV2.selectors" childKey="operator" type="enum" required={false}>
                  operator field

                  Enum options: `OPERATOR_EQUAL`, `OPERATOR_MORE_THAN`, `OPERATOR_MORE_THAN_OR_EQUAL`, `OPERATOR_LESS_THAN`, `OPERATOR_LESS_THAN_OR_EQUAL`, `OPERATOR_CONTAINS`, `OPERATOR_NOT_EQUAL`, `OPERATOR_IN`, `OPERATOR_NOT_IN`, `OPERATOR_CONTAINS_ONE`, `OPERATOR_CONTAINS_ALL`
                </NestedParam>

                <NestedParam parentKey="activities.intent.createPolicyIntentV2.selectors" childKey="targets" type="array" required={false}>
                  targets field

                  <Expandable title="targets details">
                    <NestedParam parentKey="activities.intent.createPolicyIntentV2.selectors.targets" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createPolicyIntentV2" childKey="effect" type="enum" required={true}>
              effect field

              Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
            </NestedParam>

            <NestedParam parentKey="activities.intent.createPolicyIntentV2" childKey="notes" type="string" required={false}>
              notes field
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="setPaymentMethodIntent" type="object" required={false}>
          setPaymentMethodIntent field

          <Expandable title="setPaymentMethodIntent details">
            <NestedParam parentKey="activities.intent.setPaymentMethodIntent" childKey="number" type="string" required={true}>
              The account number of the customer's credit card.
            </NestedParam>

            <NestedParam parentKey="activities.intent.setPaymentMethodIntent" childKey="cvv" type="string" required={true}>
              The verification digits of the customer's credit card.
            </NestedParam>

            <NestedParam parentKey="activities.intent.setPaymentMethodIntent" childKey="expiryMonth" type="string" required={true}>
              The month that the credit card expires.
            </NestedParam>

            <NestedParam parentKey="activities.intent.setPaymentMethodIntent" childKey="expiryYear" type="string" required={true}>
              The year that the credit card expires.
            </NestedParam>

            <NestedParam parentKey="activities.intent.setPaymentMethodIntent" childKey="cardHolderEmail" type="string" required={true}>
              The email that will receive invoices for the credit card.
            </NestedParam>

            <NestedParam parentKey="activities.intent.setPaymentMethodIntent" childKey="cardHolderName" type="string" required={true}>
              The name associated with the credit card.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="activateBillingTierIntent" type="object" required={false}>
          activateBillingTierIntent field

          <Expandable title="activateBillingTierIntent details">
            <NestedParam parentKey="activities.intent.activateBillingTierIntent" childKey="productId" type="string" required={true}>
              The product that the customer wants to subscribe to.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="deletePaymentMethodIntent" type="object" required={false}>
          deletePaymentMethodIntent field

          <Expandable title="deletePaymentMethodIntent details">
            <NestedParam parentKey="activities.intent.deletePaymentMethodIntent" childKey="paymentMethodId" type="string" required={true}>
              The payment method that the customer wants to remove.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createPolicyIntentV3" type="object" required={false}>
          createPolicyIntentV3 field

          <Expandable title="createPolicyIntentV3 details">
            <NestedParam parentKey="activities.intent.createPolicyIntentV3" childKey="policyName" type="string" required={true}>
              Human-readable name for a Policy.
            </NestedParam>

            <NestedParam parentKey="activities.intent.createPolicyIntentV3" childKey="effect" type="enum" required={true}>
              effect field

              Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
            </NestedParam>

            <NestedParam parentKey="activities.intent.createPolicyIntentV3" childKey="condition" type="string" required={false}>
              The condition expression that triggers the Effect
            </NestedParam>

            <NestedParam parentKey="activities.intent.createPolicyIntentV3" childKey="consensus" type="string" required={false}>
              The consensus expression that triggers the Effect
            </NestedParam>

            <NestedParam parentKey="activities.intent.createPolicyIntentV3" childKey="notes" type="string" required={false}>
              notes field
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createApiOnlyUsersIntent" type="object" required={false}>
          createApiOnlyUsersIntent field

          <Expandable title="createApiOnlyUsersIntent details">
            <NestedParam parentKey="activities.intent.createApiOnlyUsersIntent" childKey="apiOnlyUsers" type="array" required={true}>
              A list of API-only Users to create.

              <Expandable title="apiOnlyUsers details">
                <NestedParam parentKey="activities.intent.createApiOnlyUsersIntent.apiOnlyUsers" childKey="userName" type="string" required={true}>
                  The name of the new API-only User.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createApiOnlyUsersIntent.apiOnlyUsers" childKey="userEmail" type="string" required={false}>
                  The email address for this API-only User (optional).
                </NestedParam>

                <NestedParam parentKey="activities.intent.createApiOnlyUsersIntent.apiOnlyUsers" childKey="userTags" type="array" required={true}>
                  A list of tags assigned to the new API-only User. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="userTags details">
                    <NestedParam parentKey="activities.intent.createApiOnlyUsersIntent.apiOnlyUsers.userTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createApiOnlyUsersIntent.apiOnlyUsers" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activities.intent.createApiOnlyUsersIntent.apiOnlyUsers.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createApiOnlyUsersIntent.apiOnlyUsers.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createApiOnlyUsersIntent.apiOnlyUsers.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="updateRootQuorumIntent" type="object" required={false}>
          updateRootQuorumIntent field

          <Expandable title="updateRootQuorumIntent details">
            <NestedParam parentKey="activities.intent.updateRootQuorumIntent" childKey="threshold" type="number" required={true}>
              The threshold of unique approvals to reach quorum.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updateRootQuorumIntent" childKey="userIds" type="array" required={true}>
              The unique identifiers of users who comprise the quorum set.

              <Expandable title="userIds details">
                <NestedParam parentKey="activities.intent.updateRootQuorumIntent.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="updateUserTagIntent" type="object" required={false}>
          updateUserTagIntent field

          <Expandable title="updateUserTagIntent details">
            <NestedParam parentKey="activities.intent.updateUserTagIntent" childKey="userTagId" type="string" required={true}>
              Unique identifier for a given User Tag.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updateUserTagIntent" childKey="newUserTagName" type="string" required={false}>
              The new, human-readable name for the tag with the given ID.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updateUserTagIntent" childKey="addUserIds" type="array" required={true}>
              A list of User IDs to add this tag to.

              <Expandable title="addUserIds details">
                <NestedParam parentKey="activities.intent.updateUserTagIntent.addUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.updateUserTagIntent" childKey="removeUserIds" type="array" required={true}>
              A list of User IDs to remove this tag from.

              <Expandable title="removeUserIds details">
                <NestedParam parentKey="activities.intent.updateUserTagIntent.removeUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="updatePrivateKeyTagIntent" type="object" required={false}>
          updatePrivateKeyTagIntent field

          <Expandable title="updatePrivateKeyTagIntent details">
            <NestedParam parentKey="activities.intent.updatePrivateKeyTagIntent" childKey="privateKeyTagId" type="string" required={true}>
              Unique identifier for a given Private Key Tag.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updatePrivateKeyTagIntent" childKey="newPrivateKeyTagName" type="string" required={false}>
              The new, human-readable name for the tag with the given ID.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updatePrivateKeyTagIntent" childKey="addPrivateKeyIds" type="array" required={true}>
              A list of Private Keys IDs to add this tag to.

              <Expandable title="addPrivateKeyIds details">
                <NestedParam parentKey="activities.intent.updatePrivateKeyTagIntent.addPrivateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.updatePrivateKeyTagIntent" childKey="removePrivateKeyIds" type="array" required={true}>
              A list of Private Key IDs to remove this tag from.

              <Expandable title="removePrivateKeyIds details">
                <NestedParam parentKey="activities.intent.updatePrivateKeyTagIntent.removePrivateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createAuthenticatorsIntentV2" type="object" required={false}>
          createAuthenticatorsIntentV2 field

          <Expandable title="createAuthenticatorsIntentV2 details">
            <NestedParam parentKey="activities.intent.createAuthenticatorsIntentV2" childKey="authenticators" type="array" required={true}>
              A list of Authenticators.

              <Expandable title="authenticators details">
                <NestedParam parentKey="activities.intent.createAuthenticatorsIntentV2.authenticators" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createAuthenticatorsIntentV2.authenticators" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createAuthenticatorsIntentV2.authenticators" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activities.intent.createAuthenticatorsIntentV2.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                      The cbor encoded then base64 url encoded id of the credential.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createAuthenticatorsIntentV2.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                      A base64 url encoded payload containing metadata about the signing context and the challenge.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createAuthenticatorsIntentV2.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                      A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createAuthenticatorsIntentV2.authenticators.attestation" childKey="transports" type="array" required={true}>
                      The type of authenticator transports.

                      <Expandable title="transports details">
                        <NestedParam parentKey="activities.intent.createAuthenticatorsIntentV2.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                          item field

                          Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createAuthenticatorsIntentV2" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="acceptInvitationIntentV2" type="object" required={false}>
          acceptInvitationIntentV2 field

          <Expandable title="acceptInvitationIntentV2 details">
            <NestedParam parentKey="activities.intent.acceptInvitationIntentV2" childKey="invitationId" type="string" required={true}>
              Unique identifier for a given Invitation object.
            </NestedParam>

            <NestedParam parentKey="activities.intent.acceptInvitationIntentV2" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activities.intent.acceptInvitationIntentV2" childKey="authenticator" type="object" required={true}>
              authenticator field

              <Expandable title="authenticator details">
                <NestedParam parentKey="activities.intent.acceptInvitationIntentV2.authenticator" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activities.intent.acceptInvitationIntentV2.authenticator" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>

                <NestedParam parentKey="activities.intent.acceptInvitationIntentV2.authenticator" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activities.intent.acceptInvitationIntentV2.authenticator.attestation" childKey="credentialId" type="string" required={true}>
                      The cbor encoded then base64 url encoded id of the credential.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.acceptInvitationIntentV2.authenticator.attestation" childKey="clientDataJson" type="string" required={true}>
                      A base64 url encoded payload containing metadata about the signing context and the challenge.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.acceptInvitationIntentV2.authenticator.attestation" childKey="attestationObject" type="string" required={true}>
                      A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.acceptInvitationIntentV2.authenticator.attestation" childKey="transports" type="array" required={true}>
                      The type of authenticator transports.

                      <Expandable title="transports details">
                        <NestedParam parentKey="activities.intent.acceptInvitationIntentV2.authenticator.attestation.transports" childKey="item" type="enum" required={true}>
                          item field

                          Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createOrganizationIntentV2" type="object" required={false}>
          createOrganizationIntentV2 field

          <Expandable title="createOrganizationIntentV2 details">
            <NestedParam parentKey="activities.intent.createOrganizationIntentV2" childKey="organizationName" type="string" required={true}>
              Human-readable name for an Organization.
            </NestedParam>

            <NestedParam parentKey="activities.intent.createOrganizationIntentV2" childKey="rootEmail" type="string" required={true}>
              The root user's email address.
            </NestedParam>

            <NestedParam parentKey="activities.intent.createOrganizationIntentV2" childKey="rootAuthenticator" type="object" required={true}>
              rootAuthenticator field

              <Expandable title="rootAuthenticator details">
                <NestedParam parentKey="activities.intent.createOrganizationIntentV2.rootAuthenticator" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createOrganizationIntentV2.rootAuthenticator" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createOrganizationIntentV2.rootAuthenticator" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activities.intent.createOrganizationIntentV2.rootAuthenticator.attestation" childKey="credentialId" type="string" required={true}>
                      The cbor encoded then base64 url encoded id of the credential.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createOrganizationIntentV2.rootAuthenticator.attestation" childKey="clientDataJson" type="string" required={true}>
                      A base64 url encoded payload containing metadata about the signing context and the challenge.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createOrganizationIntentV2.rootAuthenticator.attestation" childKey="attestationObject" type="string" required={true}>
                      A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createOrganizationIntentV2.rootAuthenticator.attestation" childKey="transports" type="array" required={true}>
                      The type of authenticator transports.

                      <Expandable title="transports details">
                        <NestedParam parentKey="activities.intent.createOrganizationIntentV2.rootAuthenticator.attestation.transports" childKey="item" type="enum" required={true}>
                          item field

                          Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createOrganizationIntentV2" childKey="rootUserId" type="string" required={false}>
              Unique identifier for the root user object.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createUsersIntentV2" type="object" required={false}>
          createUsersIntentV2 field

          <Expandable title="createUsersIntentV2 details">
            <NestedParam parentKey="activities.intent.createUsersIntentV2" childKey="users" type="array" required={true}>
              A list of Users.

              <Expandable title="users details">
                <NestedParam parentKey="activities.intent.createUsersIntentV2.users" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createUsersIntentV2.users" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createUsersIntentV2.users" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activities.intent.createUsersIntentV2.users.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createUsersIntentV2.users.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createUsersIntentV2.users.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createUsersIntentV2.users" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activities.intent.createUsersIntentV2.users.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createUsersIntentV2.users.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createUsersIntentV2.users.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activities.intent.createUsersIntentV2.users.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createUsersIntentV2.users.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createUsersIntentV2.users.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createUsersIntentV2.users.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activities.intent.createUsersIntentV2.users.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createUsersIntentV2.users" childKey="userTags" type="array" required={true}>
                  A list of User Tag IDs. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="userTags details">
                    <NestedParam parentKey="activities.intent.createUsersIntentV2.users.userTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createSubOrganizationIntent" type="object" required={false}>
          createSubOrganizationIntent field

          <Expandable title="createSubOrganizationIntent details">
            <NestedParam parentKey="activities.intent.createSubOrganizationIntent" childKey="name" type="string" required={true}>
              Name for this sub-organization
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntent" childKey="rootAuthenticator" type="object" required={true}>
              rootAuthenticator field

              <Expandable title="rootAuthenticator details">
                <NestedParam parentKey="activities.intent.createSubOrganizationIntent.rootAuthenticator" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntent.rootAuthenticator" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntent.rootAuthenticator" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntent.rootAuthenticator.attestation" childKey="credentialId" type="string" required={true}>
                      The cbor encoded then base64 url encoded id of the credential.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntent.rootAuthenticator.attestation" childKey="clientDataJson" type="string" required={true}>
                      A base64 url encoded payload containing metadata about the signing context and the challenge.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntent.rootAuthenticator.attestation" childKey="attestationObject" type="string" required={true}>
                      A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntent.rootAuthenticator.attestation" childKey="transports" type="array" required={true}>
                      The type of authenticator transports.

                      <Expandable title="transports details">
                        <NestedParam parentKey="activities.intent.createSubOrganizationIntent.rootAuthenticator.attestation.transports" childKey="item" type="enum" required={true}>
                          item field

                          Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createSubOrganizationIntentV2" type="object" required={false}>
          createSubOrganizationIntentV2 field

          <Expandable title="createSubOrganizationIntentV2 details">
            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2" childKey="subOrganizationName" type="string" required={true}>
              Name for this sub-organization
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2" childKey="rootUsers" type="array" required={true}>
              Root users to create within this sub-organization

              <Expandable title="rootUsers details">
                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2.rootUsers" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2.rootUsers" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2.rootUsers" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2.rootUsers.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2.rootUsers.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2.rootUsers.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2.rootUsers" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2.rootUsers.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2.rootUsers.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2.rootUsers.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2.rootUsers.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2.rootUsers.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2.rootUsers.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2.rootUsers.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2.rootUsers.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV2" childKey="rootQuorumThreshold" type="number" required={true}>
              The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="updateAllowedOriginsIntent" type="object" required={false}>
          updateAllowedOriginsIntent field

          <Expandable title="updateAllowedOriginsIntent details">
            <NestedParam parentKey="activities.intent.updateAllowedOriginsIntent" childKey="allowedOrigins" type="array" required={true}>
              Additional origins requests are allowed from besides Turnkey origins

              <Expandable title="allowedOrigins details">
                <NestedParam parentKey="activities.intent.updateAllowedOriginsIntent.allowedOrigins" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createPrivateKeysIntentV2" type="object" required={false}>
          createPrivateKeysIntentV2 field

          <Expandable title="createPrivateKeysIntentV2 details">
            <NestedParam parentKey="activities.intent.createPrivateKeysIntentV2" childKey="privateKeys" type="array" required={true}>
              A list of Private Keys.

              <Expandable title="privateKeys details">
                <NestedParam parentKey="activities.intent.createPrivateKeysIntentV2.privateKeys" childKey="privateKeyName" type="string" required={true}>
                  Human-readable name for a Private Key.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createPrivateKeysIntentV2.privateKeys" childKey="curve" type="enum" required={true}>
                  curve field

                  Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activities.intent.createPrivateKeysIntentV2.privateKeys" childKey="privateKeyTags" type="array" required={true}>
                  A list of Private Key Tag IDs. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="privateKeyTags details">
                    <NestedParam parentKey="activities.intent.createPrivateKeysIntentV2.privateKeys.privateKeyTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createPrivateKeysIntentV2.privateKeys" childKey="addressFormats" type="array" required={true}>
                  Cryptocurrency-specific formats for a derived address (e.g., Ethereum).

                  <Expandable title="addressFormats details">
                    <NestedParam parentKey="activities.intent.createPrivateKeysIntentV2.privateKeys.addressFormats" childKey="item" type="enum" required={true}>
                      item field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="updateUserIntent" type="object" required={false}>
          updateUserIntent field

          <Expandable title="updateUserIntent details">
            <NestedParam parentKey="activities.intent.updateUserIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updateUserIntent" childKey="userName" type="string" required={false}>
              Human-readable name for a User.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updateUserIntent" childKey="userEmail" type="string" required={false}>
              The user's email address.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updateUserIntent" childKey="userTagIds" type="array" required={false}>
              An updated list of User Tags to apply to this User. This field, if not needed, should be an empty array in your request body.

              <Expandable title="userTagIds details">
                <NestedParam parentKey="activities.intent.updateUserIntent.userTagIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.updateUserIntent" childKey="userPhoneNumber" type="string" required={false}>
              The user's phone number in E.164 format e.g. +13214567890
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="updatePolicyIntent" type="object" required={false}>
          updatePolicyIntent field

          <Expandable title="updatePolicyIntent details">
            <NestedParam parentKey="activities.intent.updatePolicyIntent" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updatePolicyIntent" childKey="policyName" type="string" required={false}>
              Human-readable name for a Policy.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updatePolicyIntent" childKey="policyEffect" type="enum" required={false}>
              policyEffect field

              Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
            </NestedParam>

            <NestedParam parentKey="activities.intent.updatePolicyIntent" childKey="policyCondition" type="string" required={false}>
              The condition expression that triggers the Effect (optional).
            </NestedParam>

            <NestedParam parentKey="activities.intent.updatePolicyIntent" childKey="policyConsensus" type="string" required={false}>
              The consensus expression that triggers the Effect (optional).
            </NestedParam>

            <NestedParam parentKey="activities.intent.updatePolicyIntent" childKey="policyNotes" type="string" required={false}>
              Accompanying notes for a Policy (optional).
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="setPaymentMethodIntentV2" type="object" required={false}>
          setPaymentMethodIntentV2 field

          <Expandable title="setPaymentMethodIntentV2 details">
            <NestedParam parentKey="activities.intent.setPaymentMethodIntentV2" childKey="paymentMethodId" type="string" required={true}>
              The id of the payment method that was created clientside.
            </NestedParam>

            <NestedParam parentKey="activities.intent.setPaymentMethodIntentV2" childKey="cardHolderEmail" type="string" required={true}>
              The email that will receive invoices for the credit card.
            </NestedParam>

            <NestedParam parentKey="activities.intent.setPaymentMethodIntentV2" childKey="cardHolderName" type="string" required={true}>
              The name associated with the credit card.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createSubOrganizationIntentV3" type="object" required={false}>
          createSubOrganizationIntentV3 field

          <Expandable title="createSubOrganizationIntentV3 details">
            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3" childKey="subOrganizationName" type="string" required={true}>
              Name for this sub-organization
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3" childKey="rootUsers" type="array" required={true}>
              Root users to create within this sub-organization

              <Expandable title="rootUsers details">
                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.rootUsers" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.rootUsers" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.rootUsers" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.rootUsers.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.rootUsers.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.rootUsers.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.rootUsers" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.rootUsers.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.rootUsers.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.rootUsers.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.rootUsers.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.rootUsers.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.rootUsers.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.rootUsers.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.rootUsers.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3" childKey="rootQuorumThreshold" type="number" required={true}>
              The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3" childKey="privateKeys" type="array" required={true}>
              A list of Private Keys.

              <Expandable title="privateKeys details">
                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.privateKeys" childKey="privateKeyName" type="string" required={true}>
                  Human-readable name for a Private Key.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.privateKeys" childKey="curve" type="enum" required={true}>
                  curve field

                  Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.privateKeys" childKey="privateKeyTags" type="array" required={true}>
                  A list of Private Key Tag IDs. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="privateKeyTags details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.privateKeys.privateKeyTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.privateKeys" childKey="addressFormats" type="array" required={true}>
                  Cryptocurrency-specific formats for a derived address (e.g., Ethereum).

                  <Expandable title="addressFormats details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV3.privateKeys.addressFormats" childKey="item" type="enum" required={true}>
                      item field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createWalletIntent" type="object" required={false}>
          createWalletIntent field

          <Expandable title="createWalletIntent details">
            <NestedParam parentKey="activities.intent.createWalletIntent" childKey="walletName" type="string" required={true}>
              Human-readable name for a Wallet.
            </NestedParam>

            <NestedParam parentKey="activities.intent.createWalletIntent" childKey="accounts" type="array" required={true}>
              A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.

              <Expandable title="accounts details">
                <NestedParam parentKey="activities.intent.createWalletIntent.accounts" childKey="curve" type="enum" required={true}>
                  curve field

                  Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activities.intent.createWalletIntent.accounts" childKey="pathFormat" type="enum" required={true}>
                  pathFormat field

                  Enum options: `PATH_FORMAT_BIP32`
                </NestedParam>

                <NestedParam parentKey="activities.intent.createWalletIntent.accounts" childKey="path" type="string" required={true}>
                  Path used to generate a wallet Account.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createWalletIntent.accounts" childKey="addressFormat" type="enum" required={true}>
                  addressFormat field

                  Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createWalletIntent" childKey="mnemonicLength" type="number" required={false}>
              Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createWalletAccountsIntent" type="object" required={false}>
          createWalletAccountsIntent field

          <Expandable title="createWalletAccountsIntent details">
            <NestedParam parentKey="activities.intent.createWalletAccountsIntent" childKey="walletId" type="string" required={true}>
              Unique identifier for a given Wallet.
            </NestedParam>

            <NestedParam parentKey="activities.intent.createWalletAccountsIntent" childKey="accounts" type="array" required={true}>
              A list of wallet Accounts.

              <Expandable title="accounts details">
                <NestedParam parentKey="activities.intent.createWalletAccountsIntent.accounts" childKey="curve" type="enum" required={true}>
                  curve field

                  Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activities.intent.createWalletAccountsIntent.accounts" childKey="pathFormat" type="enum" required={true}>
                  pathFormat field

                  Enum options: `PATH_FORMAT_BIP32`
                </NestedParam>

                <NestedParam parentKey="activities.intent.createWalletAccountsIntent.accounts" childKey="path" type="string" required={true}>
                  Path used to generate a wallet Account.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createWalletAccountsIntent.accounts" childKey="addressFormat" type="enum" required={true}>
                  addressFormat field

                  Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="initUserEmailRecoveryIntent" type="object" required={false}>
          initUserEmailRecoveryIntent field

          <Expandable title="initUserEmailRecoveryIntent details">
            <NestedParam parentKey="activities.intent.initUserEmailRecoveryIntent" childKey="email" type="string" required={true}>
              Email of the user starting recovery
            </NestedParam>

            <NestedParam parentKey="activities.intent.initUserEmailRecoveryIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the recovery bundle will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activities.intent.initUserEmailRecoveryIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the recovery credential is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activities.intent.initUserEmailRecoveryIntent" childKey="emailCustomization" type="object" required={false}>
              emailCustomization field

              <Expandable title="emailCustomization details">
                <NestedParam parentKey="activities.intent.initUserEmailRecoveryIntent.emailCustomization" childKey="appName" type="string" required={false}>
                  The name of the application.
                </NestedParam>

                <NestedParam parentKey="activities.intent.initUserEmailRecoveryIntent.emailCustomization" childKey="logoUrl" type="string" required={false}>
                  A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
                </NestedParam>

                <NestedParam parentKey="activities.intent.initUserEmailRecoveryIntent.emailCustomization" childKey="magicLinkTemplate" type="string" required={false}>
                  A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
                </NestedParam>

                <NestedParam parentKey="activities.intent.initUserEmailRecoveryIntent.emailCustomization" childKey="templateVariables" type="string" required={false}>
                  JSON object containing key/value pairs to be used with custom templates.
                </NestedParam>

                <NestedParam parentKey="activities.intent.initUserEmailRecoveryIntent.emailCustomization" childKey="templateId" type="string" required={false}>
                  Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="recoverUserIntent" type="object" required={false}>
          recoverUserIntent field

          <Expandable title="recoverUserIntent details">
            <NestedParam parentKey="activities.intent.recoverUserIntent" childKey="authenticator" type="object" required={true}>
              authenticator field

              <Expandable title="authenticator details">
                <NestedParam parentKey="activities.intent.recoverUserIntent.authenticator" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activities.intent.recoverUserIntent.authenticator" childKey="challenge" type="string" required={true}>
                  Challenge presented for authentication purposes.
                </NestedParam>

                <NestedParam parentKey="activities.intent.recoverUserIntent.authenticator" childKey="attestation" type="object" required={true}>
                  attestation field

                  <Expandable title="attestation details">
                    <NestedParam parentKey="activities.intent.recoverUserIntent.authenticator.attestation" childKey="credentialId" type="string" required={true}>
                      The cbor encoded then base64 url encoded id of the credential.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.recoverUserIntent.authenticator.attestation" childKey="clientDataJson" type="string" required={true}>
                      A base64 url encoded payload containing metadata about the signing context and the challenge.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.recoverUserIntent.authenticator.attestation" childKey="attestationObject" type="string" required={true}>
                      A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.recoverUserIntent.authenticator.attestation" childKey="transports" type="array" required={true}>
                      The type of authenticator transports.

                      <Expandable title="transports details">
                        <NestedParam parentKey="activities.intent.recoverUserIntent.authenticator.attestation.transports" childKey="item" type="enum" required={true}>
                          item field

                          Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.recoverUserIntent" childKey="userId" type="string" required={true}>
              Unique identifier for the user performing recovery.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="setOrganizationFeatureIntent" type="object" required={false}>
          setOrganizationFeatureIntent field

          <Expandable title="setOrganizationFeatureIntent details">
            <NestedParam parentKey="activities.intent.setOrganizationFeatureIntent" childKey="name" type="enum" required={true}>
              name field

              Enum options: `FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY`, `FEATURE_NAME_WEBAUTHN_ORIGINS`, `FEATURE_NAME_EMAIL_AUTH`, `FEATURE_NAME_EMAIL_RECOVERY`, `FEATURE_NAME_WEBHOOK`, `FEATURE_NAME_SMS_AUTH`, `FEATURE_NAME_OTP_EMAIL_AUTH`
            </NestedParam>

            <NestedParam parentKey="activities.intent.setOrganizationFeatureIntent" childKey="value" type="string" required={true}>
              Optional value for the feature. Will override existing values if feature is already set.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="removeOrganizationFeatureIntent" type="object" required={false}>
          removeOrganizationFeatureIntent field

          <Expandable title="removeOrganizationFeatureIntent details">
            <NestedParam parentKey="activities.intent.removeOrganizationFeatureIntent" childKey="name" type="enum" required={true}>
              name field

              Enum options: `FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY`, `FEATURE_NAME_WEBAUTHN_ORIGINS`, `FEATURE_NAME_EMAIL_AUTH`, `FEATURE_NAME_EMAIL_RECOVERY`, `FEATURE_NAME_WEBHOOK`, `FEATURE_NAME_SMS_AUTH`, `FEATURE_NAME_OTP_EMAIL_AUTH`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="signRawPayloadIntentV2" type="object" required={false}>
          signRawPayloadIntentV2 field

          <Expandable title="signRawPayloadIntentV2 details">
            <NestedParam parentKey="activities.intent.signRawPayloadIntentV2" childKey="signWith" type="string" required={true}>
              A Wallet account address, Private Key address, or Private Key identifier.
            </NestedParam>

            <NestedParam parentKey="activities.intent.signRawPayloadIntentV2" childKey="payload" type="string" required={true}>
              Raw unsigned payload to be signed.
            </NestedParam>

            <NestedParam parentKey="activities.intent.signRawPayloadIntentV2" childKey="encoding" type="enum" required={true}>
              encoding field

              Enum options: `PAYLOAD_ENCODING_HEXADECIMAL`, `PAYLOAD_ENCODING_TEXT_UTF8`, `PAYLOAD_ENCODING_EIP712`
            </NestedParam>

            <NestedParam parentKey="activities.intent.signRawPayloadIntentV2" childKey="hashFunction" type="enum" required={true}>
              hashFunction field

              Enum options: `HASH_FUNCTION_NO_OP`, `HASH_FUNCTION_SHA256`, `HASH_FUNCTION_KECCAK256`, `HASH_FUNCTION_NOT_APPLICABLE`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="signTransactionIntentV2" type="object" required={false}>
          signTransactionIntentV2 field

          <Expandable title="signTransactionIntentV2 details">
            <NestedParam parentKey="activities.intent.signTransactionIntentV2" childKey="signWith" type="string" required={true}>
              A Wallet account address, Private Key address, or Private Key identifier.
            </NestedParam>

            <NestedParam parentKey="activities.intent.signTransactionIntentV2" childKey="unsignedTransaction" type="string" required={true}>
              Raw unsigned transaction to be signed
            </NestedParam>

            <NestedParam parentKey="activities.intent.signTransactionIntentV2" childKey="type" type="enum" required={true}>
              type field

              Enum options: `TRANSACTION_TYPE_ETHEREUM`, `TRANSACTION_TYPE_SOLANA`, `TRANSACTION_TYPE_TRON`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="exportPrivateKeyIntent" type="object" required={false}>
          exportPrivateKeyIntent field

          <Expandable title="exportPrivateKeyIntent details">
            <NestedParam parentKey="activities.intent.exportPrivateKeyIntent" childKey="privateKeyId" type="string" required={true}>
              Unique identifier for a given Private Key.
            </NestedParam>

            <NestedParam parentKey="activities.intent.exportPrivateKeyIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the export bundle will be encrypted.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="exportWalletIntent" type="object" required={false}>
          exportWalletIntent field

          <Expandable title="exportWalletIntent details">
            <NestedParam parentKey="activities.intent.exportWalletIntent" childKey="walletId" type="string" required={true}>
              Unique identifier for a given Wallet.
            </NestedParam>

            <NestedParam parentKey="activities.intent.exportWalletIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the export bundle will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activities.intent.exportWalletIntent" childKey="language" type="enum" required={false}>
              language field

              Enum options: `MNEMONIC_LANGUAGE_ENGLISH`, `MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE`, `MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE`, `MNEMONIC_LANGUAGE_CZECH`, `MNEMONIC_LANGUAGE_FRENCH`, `MNEMONIC_LANGUAGE_ITALIAN`, `MNEMONIC_LANGUAGE_JAPANESE`, `MNEMONIC_LANGUAGE_KOREAN`, `MNEMONIC_LANGUAGE_SPANISH`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createSubOrganizationIntentV4" type="object" required={false}>
          createSubOrganizationIntentV4 field

          <Expandable title="createSubOrganizationIntentV4 details">
            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4" childKey="subOrganizationName" type="string" required={true}>
              Name for this sub-organization
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4" childKey="rootUsers" type="array" required={true}>
              Root users to create within this sub-organization

              <Expandable title="rootUsers details">
                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.rootUsers" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.rootUsers" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.rootUsers" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.rootUsers.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.rootUsers.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.rootUsers.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.rootUsers" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.rootUsers.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.rootUsers.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.rootUsers.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.rootUsers.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.rootUsers.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.rootUsers.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.rootUsers.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.rootUsers.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4" childKey="rootQuorumThreshold" type="number" required={true}>
              The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.wallet" childKey="walletName" type="string" required={true}>
                  Human-readable name for a Wallet.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.wallet" childKey="accounts" type="array" required={true}>
                  A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="accounts details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.wallet.accounts" childKey="curve" type="enum" required={true}>
                      curve field

                      Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.wallet.accounts" childKey="pathFormat" type="enum" required={true}>
                      pathFormat field

                      Enum options: `PATH_FORMAT_BIP32`
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.wallet.accounts" childKey="path" type="string" required={true}>
                      Path used to generate a wallet Account.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.wallet.accounts" childKey="addressFormat" type="enum" required={true}>
                      addressFormat field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4.wallet" childKey="mnemonicLength" type="number" required={false}>
                  Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4" childKey="disableEmailRecovery" type="boolean" required={false}>
              Disable email recovery for the sub-organization
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV4" childKey="disableEmailAuth" type="boolean" required={false}>
              Disable email auth for the sub-organization
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="emailAuthIntent" type="object" required={false}>
          emailAuthIntent field

          <Expandable title="emailAuthIntent details">
            <NestedParam parentKey="activities.intent.emailAuthIntent" childKey="email" type="string" required={true}>
              Email of the authenticating user.
            </NestedParam>

            <NestedParam parentKey="activities.intent.emailAuthIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the email auth bundle (credentials) will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activities.intent.emailAuthIntent" childKey="apiKeyName" type="string" required={false}>
              Optional human-readable name for an API Key. If none provided, default to Email Auth - \<Timestamp>
            </NestedParam>

            <NestedParam parentKey="activities.intent.emailAuthIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activities.intent.emailAuthIntent" childKey="emailCustomization" type="object" required={false}>
              emailCustomization field

              <Expandable title="emailCustomization details">
                <NestedParam parentKey="activities.intent.emailAuthIntent.emailCustomization" childKey="appName" type="string" required={false}>
                  The name of the application.
                </NestedParam>

                <NestedParam parentKey="activities.intent.emailAuthIntent.emailCustomization" childKey="logoUrl" type="string" required={false}>
                  A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
                </NestedParam>

                <NestedParam parentKey="activities.intent.emailAuthIntent.emailCustomization" childKey="magicLinkTemplate" type="string" required={false}>
                  A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
                </NestedParam>

                <NestedParam parentKey="activities.intent.emailAuthIntent.emailCustomization" childKey="templateVariables" type="string" required={false}>
                  JSON object containing key/value pairs to be used with custom templates.
                </NestedParam>

                <NestedParam parentKey="activities.intent.emailAuthIntent.emailCustomization" childKey="templateId" type="string" required={false}>
                  Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.emailAuthIntent" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated Email Auth API keys
            </NestedParam>

            <NestedParam parentKey="activities.intent.emailAuthIntent" childKey="sendFromEmailAddress" type="string" required={false}>
              Optional custom email address from which to send the email
            </NestedParam>

            <NestedParam parentKey="activities.intent.emailAuthIntent" childKey="sendFromEmailSenderName" type="string" required={false}>
              Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
            </NestedParam>

            <NestedParam parentKey="activities.intent.emailAuthIntent" childKey="replyToEmailAddress" type="string" required={false}>
              Optional custom email address to use as reply-to
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="exportWalletAccountIntent" type="object" required={false}>
          exportWalletAccountIntent field

          <Expandable title="exportWalletAccountIntent details">
            <NestedParam parentKey="activities.intent.exportWalletAccountIntent" childKey="address" type="string" required={true}>
              Address to identify Wallet Account.
            </NestedParam>

            <NestedParam parentKey="activities.intent.exportWalletAccountIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the export bundle will be encrypted.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="initImportWalletIntent" type="object" required={false}>
          initImportWalletIntent field

          <Expandable title="initImportWalletIntent details">
            <NestedParam parentKey="activities.intent.initImportWalletIntent" childKey="userId" type="string" required={true}>
              The ID of the User importing a Wallet.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="importWalletIntent" type="object" required={false}>
          importWalletIntent field

          <Expandable title="importWalletIntent details">
            <NestedParam parentKey="activities.intent.importWalletIntent" childKey="userId" type="string" required={true}>
              The ID of the User importing a Wallet.
            </NestedParam>

            <NestedParam parentKey="activities.intent.importWalletIntent" childKey="walletName" type="string" required={true}>
              Human-readable name for a Wallet.
            </NestedParam>

            <NestedParam parentKey="activities.intent.importWalletIntent" childKey="encryptedBundle" type="string" required={true}>
              Bundle containing a wallet mnemonic encrypted to the enclave's target public key.
            </NestedParam>

            <NestedParam parentKey="activities.intent.importWalletIntent" childKey="accounts" type="array" required={true}>
              A list of wallet Accounts.

              <Expandable title="accounts details">
                <NestedParam parentKey="activities.intent.importWalletIntent.accounts" childKey="curve" type="enum" required={true}>
                  curve field

                  Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activities.intent.importWalletIntent.accounts" childKey="pathFormat" type="enum" required={true}>
                  pathFormat field

                  Enum options: `PATH_FORMAT_BIP32`
                </NestedParam>

                <NestedParam parentKey="activities.intent.importWalletIntent.accounts" childKey="path" type="string" required={true}>
                  Path used to generate a wallet Account.
                </NestedParam>

                <NestedParam parentKey="activities.intent.importWalletIntent.accounts" childKey="addressFormat" type="enum" required={true}>
                  addressFormat field

                  Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="initImportPrivateKeyIntent" type="object" required={false}>
          initImportPrivateKeyIntent field

          <Expandable title="initImportPrivateKeyIntent details">
            <NestedParam parentKey="activities.intent.initImportPrivateKeyIntent" childKey="userId" type="string" required={true}>
              The ID of the User importing a Private Key.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="importPrivateKeyIntent" type="object" required={false}>
          importPrivateKeyIntent field

          <Expandable title="importPrivateKeyIntent details">
            <NestedParam parentKey="activities.intent.importPrivateKeyIntent" childKey="userId" type="string" required={true}>
              The ID of the User importing a Private Key.
            </NestedParam>

            <NestedParam parentKey="activities.intent.importPrivateKeyIntent" childKey="privateKeyName" type="string" required={true}>
              Human-readable name for a Private Key.
            </NestedParam>

            <NestedParam parentKey="activities.intent.importPrivateKeyIntent" childKey="encryptedBundle" type="string" required={true}>
              Bundle containing a raw private key encrypted to the enclave's target public key.
            </NestedParam>

            <NestedParam parentKey="activities.intent.importPrivateKeyIntent" childKey="curve" type="enum" required={true}>
              curve field

              Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
            </NestedParam>

            <NestedParam parentKey="activities.intent.importPrivateKeyIntent" childKey="addressFormats" type="array" required={true}>
              Cryptocurrency-specific formats for a derived address (e.g., Ethereum).

              <Expandable title="addressFormats details">
                <NestedParam parentKey="activities.intent.importPrivateKeyIntent.addressFormats" childKey="item" type="enum" required={true}>
                  item field

                  Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createPoliciesIntent" type="object" required={false}>
          createPoliciesIntent field

          <Expandable title="createPoliciesIntent details">
            <NestedParam parentKey="activities.intent.createPoliciesIntent" childKey="policies" type="array" required={true}>
              An array of policy intents to be created.

              <Expandable title="policies details">
                <NestedParam parentKey="activities.intent.createPoliciesIntent.policies" childKey="policyName" type="string" required={true}>
                  Human-readable name for a Policy.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createPoliciesIntent.policies" childKey="effect" type="enum" required={true}>
                  effect field

                  Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
                </NestedParam>

                <NestedParam parentKey="activities.intent.createPoliciesIntent.policies" childKey="condition" type="string" required={false}>
                  The condition expression that triggers the Effect
                </NestedParam>

                <NestedParam parentKey="activities.intent.createPoliciesIntent.policies" childKey="consensus" type="string" required={false}>
                  The consensus expression that triggers the Effect
                </NestedParam>

                <NestedParam parentKey="activities.intent.createPoliciesIntent.policies" childKey="notes" type="string" required={false}>
                  notes field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="signRawPayloadsIntent" type="object" required={false}>
          signRawPayloadsIntent field

          <Expandable title="signRawPayloadsIntent details">
            <NestedParam parentKey="activities.intent.signRawPayloadsIntent" childKey="signWith" type="string" required={true}>
              A Wallet account address, Private Key address, or Private Key identifier.
            </NestedParam>

            <NestedParam parentKey="activities.intent.signRawPayloadsIntent" childKey="payloads" type="array" required={true}>
              An array of raw unsigned payloads to be signed.

              <Expandable title="payloads details">
                <NestedParam parentKey="activities.intent.signRawPayloadsIntent.payloads" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.signRawPayloadsIntent" childKey="encoding" type="enum" required={true}>
              encoding field

              Enum options: `PAYLOAD_ENCODING_HEXADECIMAL`, `PAYLOAD_ENCODING_TEXT_UTF8`, `PAYLOAD_ENCODING_EIP712`
            </NestedParam>

            <NestedParam parentKey="activities.intent.signRawPayloadsIntent" childKey="hashFunction" type="enum" required={true}>
              hashFunction field

              Enum options: `HASH_FUNCTION_NO_OP`, `HASH_FUNCTION_SHA256`, `HASH_FUNCTION_KECCAK256`, `HASH_FUNCTION_NOT_APPLICABLE`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createReadOnlySessionIntent" type="object" required={false}>
          createReadOnlySessionIntent field
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createOauthProvidersIntent" type="object" required={false}>
          createOauthProvidersIntent field

          <Expandable title="createOauthProvidersIntent details">
            <NestedParam parentKey="activities.intent.createOauthProvidersIntent" childKey="userId" type="string" required={true}>
              The ID of the User to add an Oauth provider to
            </NestedParam>

            <NestedParam parentKey="activities.intent.createOauthProvidersIntent" childKey="oauthProviders" type="array" required={true}>
              A list of Oauth providers.

              <Expandable title="oauthProviders details">
                <NestedParam parentKey="activities.intent.createOauthProvidersIntent.oauthProviders" childKey="providerName" type="string" required={true}>
                  Human-readable name to identify a Provider.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createOauthProvidersIntent.oauthProviders" childKey="oidcToken" type="string" required={true}>
                  Base64 encoded OIDC token
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="deleteOauthProvidersIntent" type="object" required={false}>
          deleteOauthProvidersIntent field

          <Expandable title="deleteOauthProvidersIntent details">
            <NestedParam parentKey="activities.intent.deleteOauthProvidersIntent" childKey="userId" type="string" required={true}>
              The ID of the User to remove an Oauth provider from
            </NestedParam>

            <NestedParam parentKey="activities.intent.deleteOauthProvidersIntent" childKey="providerIds" type="array" required={true}>
              Unique identifier for a given Provider.

              <Expandable title="providerIds details">
                <NestedParam parentKey="activities.intent.deleteOauthProvidersIntent.providerIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createSubOrganizationIntentV5" type="object" required={false}>
          createSubOrganizationIntentV5 field

          <Expandable title="createSubOrganizationIntentV5 details">
            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5" childKey="subOrganizationName" type="string" required={true}>
              Name for this sub-organization
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5" childKey="rootUsers" type="array" required={true}>
              Root users to create within this sub-organization

              <Expandable title="rootUsers details">
                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers" childKey="oauthProviders" type="array" required={true}>
                  A list of Oauth providers. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="oauthProviders details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers.oauthProviders" childKey="providerName" type="string" required={true}>
                      Human-readable name to identify a Provider.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.rootUsers.oauthProviders" childKey="oidcToken" type="string" required={true}>
                      Base64 encoded OIDC token
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5" childKey="rootQuorumThreshold" type="number" required={true}>
              The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.wallet" childKey="walletName" type="string" required={true}>
                  Human-readable name for a Wallet.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.wallet" childKey="accounts" type="array" required={true}>
                  A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="accounts details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.wallet.accounts" childKey="curve" type="enum" required={true}>
                      curve field

                      Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.wallet.accounts" childKey="pathFormat" type="enum" required={true}>
                      pathFormat field

                      Enum options: `PATH_FORMAT_BIP32`
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.wallet.accounts" childKey="path" type="string" required={true}>
                      Path used to generate a wallet Account.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.wallet.accounts" childKey="addressFormat" type="enum" required={true}>
                      addressFormat field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5.wallet" childKey="mnemonicLength" type="number" required={false}>
                  Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5" childKey="disableEmailRecovery" type="boolean" required={false}>
              Disable email recovery for the sub-organization
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV5" childKey="disableEmailAuth" type="boolean" required={false}>
              Disable email auth for the sub-organization
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="oauthIntent" type="object" required={false}>
          oauthIntent field

          <Expandable title="oauthIntent details">
            <NestedParam parentKey="activities.intent.oauthIntent" childKey="oidcToken" type="string" required={true}>
              Base64 encoded OIDC token
            </NestedParam>

            <NestedParam parentKey="activities.intent.oauthIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the oauth bundle (credentials) will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activities.intent.oauthIntent" childKey="apiKeyName" type="string" required={false}>
              Optional human-readable name for an API Key. If none provided, default to Oauth - \<Timestamp>
            </NestedParam>

            <NestedParam parentKey="activities.intent.oauthIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activities.intent.oauthIntent" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated Oauth API keys
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createApiKeysIntentV2" type="object" required={false}>
          createApiKeysIntentV2 field

          <Expandable title="createApiKeysIntentV2 details">
            <NestedParam parentKey="activities.intent.createApiKeysIntentV2" childKey="apiKeys" type="array" required={true}>
              A list of API Keys.

              <Expandable title="apiKeys details">
                <NestedParam parentKey="activities.intent.createApiKeysIntentV2.apiKeys" childKey="apiKeyName" type="string" required={true}>
                  Human-readable name for an API Key.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createApiKeysIntentV2.apiKeys" childKey="publicKey" type="string" required={true}>
                  The public component of a cryptographic key pair used to sign messages and transactions.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createApiKeysIntentV2.apiKeys" childKey="curveType" type="enum" required={true}>
                  curveType field

                  Enum options: `API_KEY_CURVE_P256`, `API_KEY_CURVE_SECP256K1`, `API_KEY_CURVE_ED25519`
                </NestedParam>

                <NestedParam parentKey="activities.intent.createApiKeysIntentV2.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                  Optional window (in seconds) indicating how long the API Key should last.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createApiKeysIntentV2" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createReadWriteSessionIntent" type="object" required={false}>
          createReadWriteSessionIntent field

          <Expandable title="createReadWriteSessionIntent details">
            <NestedParam parentKey="activities.intent.createReadWriteSessionIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the read write session bundle (credentials) will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activities.intent.createReadWriteSessionIntent" childKey="email" type="string" required={true}>
              Email of the user to create a read write session for
            </NestedParam>

            <NestedParam parentKey="activities.intent.createReadWriteSessionIntent" childKey="apiKeyName" type="string" required={false}>
              Optional human-readable name for an API Key. If none provided, default to Read Write Session - \<Timestamp>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createReadWriteSessionIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="emailAuthIntentV2" type="object" required={false}>
          emailAuthIntentV2 field

          <Expandable title="emailAuthIntentV2 details">
            <NestedParam parentKey="activities.intent.emailAuthIntentV2" childKey="email" type="string" required={true}>
              Email of the authenticating user.
            </NestedParam>

            <NestedParam parentKey="activities.intent.emailAuthIntentV2" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the email auth bundle (credentials) will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activities.intent.emailAuthIntentV2" childKey="apiKeyName" type="string" required={false}>
              Optional human-readable name for an API Key. If none provided, default to Email Auth - \<Timestamp>
            </NestedParam>

            <NestedParam parentKey="activities.intent.emailAuthIntentV2" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activities.intent.emailAuthIntentV2" childKey="emailCustomization" type="object" required={false}>
              emailCustomization field

              <Expandable title="emailCustomization details">
                <NestedParam parentKey="activities.intent.emailAuthIntentV2.emailCustomization" childKey="appName" type="string" required={false}>
                  The name of the application.
                </NestedParam>

                <NestedParam parentKey="activities.intent.emailAuthIntentV2.emailCustomization" childKey="logoUrl" type="string" required={false}>
                  A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
                </NestedParam>

                <NestedParam parentKey="activities.intent.emailAuthIntentV2.emailCustomization" childKey="magicLinkTemplate" type="string" required={false}>
                  A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
                </NestedParam>

                <NestedParam parentKey="activities.intent.emailAuthIntentV2.emailCustomization" childKey="templateVariables" type="string" required={false}>
                  JSON object containing key/value pairs to be used with custom templates.
                </NestedParam>

                <NestedParam parentKey="activities.intent.emailAuthIntentV2.emailCustomization" childKey="templateId" type="string" required={false}>
                  Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.emailAuthIntentV2" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated Email Auth API keys
            </NestedParam>

            <NestedParam parentKey="activities.intent.emailAuthIntentV2" childKey="sendFromEmailAddress" type="string" required={false}>
              Optional custom email address from which to send the email
            </NestedParam>

            <NestedParam parentKey="activities.intent.emailAuthIntentV2" childKey="sendFromEmailSenderName" type="string" required={false}>
              Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
            </NestedParam>

            <NestedParam parentKey="activities.intent.emailAuthIntentV2" childKey="replyToEmailAddress" type="string" required={false}>
              Optional custom email address to use as reply-to
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createSubOrganizationIntentV6" type="object" required={false}>
          createSubOrganizationIntentV6 field

          <Expandable title="createSubOrganizationIntentV6 details">
            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6" childKey="subOrganizationName" type="string" required={true}>
              Name for this sub-organization
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6" childKey="rootUsers" type="array" required={true}>
              Root users to create within this sub-organization

              <Expandable title="rootUsers details">
                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers.apiKeys" childKey="curveType" type="enum" required={true}>
                      curveType field

                      Enum options: `API_KEY_CURVE_P256`, `API_KEY_CURVE_SECP256K1`, `API_KEY_CURVE_ED25519`
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers" childKey="oauthProviders" type="array" required={true}>
                  A list of Oauth providers. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="oauthProviders details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers.oauthProviders" childKey="providerName" type="string" required={true}>
                      Human-readable name to identify a Provider.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.rootUsers.oauthProviders" childKey="oidcToken" type="string" required={true}>
                      Base64 encoded OIDC token
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6" childKey="rootQuorumThreshold" type="number" required={true}>
              The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.wallet" childKey="walletName" type="string" required={true}>
                  Human-readable name for a Wallet.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.wallet" childKey="accounts" type="array" required={true}>
                  A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="accounts details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.wallet.accounts" childKey="curve" type="enum" required={true}>
                      curve field

                      Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.wallet.accounts" childKey="pathFormat" type="enum" required={true}>
                      pathFormat field

                      Enum options: `PATH_FORMAT_BIP32`
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.wallet.accounts" childKey="path" type="string" required={true}>
                      Path used to generate a wallet Account.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.wallet.accounts" childKey="addressFormat" type="enum" required={true}>
                      addressFormat field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6.wallet" childKey="mnemonicLength" type="number" required={false}>
                  Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6" childKey="disableEmailRecovery" type="boolean" required={false}>
              Disable email recovery for the sub-organization
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV6" childKey="disableEmailAuth" type="boolean" required={false}>
              Disable email auth for the sub-organization
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="deletePrivateKeysIntent" type="object" required={false}>
          deletePrivateKeysIntent field

          <Expandable title="deletePrivateKeysIntent details">
            <NestedParam parentKey="activities.intent.deletePrivateKeysIntent" childKey="privateKeyIds" type="array" required={true}>
              List of unique identifiers for private keys within an organization

              <Expandable title="privateKeyIds details">
                <NestedParam parentKey="activities.intent.deletePrivateKeysIntent.privateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.deletePrivateKeysIntent" childKey="deleteWithoutExport" type="boolean" required={false}>
              Optional parameter for deleting the private keys, even if any have not been previously exported. If they have been exported, this field is ignored.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="deleteWalletsIntent" type="object" required={false}>
          deleteWalletsIntent field

          <Expandable title="deleteWalletsIntent details">
            <NestedParam parentKey="activities.intent.deleteWalletsIntent" childKey="walletIds" type="array" required={true}>
              List of unique identifiers for wallets within an organization

              <Expandable title="walletIds details">
                <NestedParam parentKey="activities.intent.deleteWalletsIntent.walletIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.deleteWalletsIntent" childKey="deleteWithoutExport" type="boolean" required={false}>
              Optional parameter for deleting the wallets, even if any have not been previously exported. If they have been exported, this field is ignored.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createReadWriteSessionIntentV2" type="object" required={false}>
          createReadWriteSessionIntentV2 field

          <Expandable title="createReadWriteSessionIntentV2 details">
            <NestedParam parentKey="activities.intent.createReadWriteSessionIntentV2" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the read write session bundle (credentials) will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activities.intent.createReadWriteSessionIntentV2" childKey="userId" type="string" required={false}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activities.intent.createReadWriteSessionIntentV2" childKey="apiKeyName" type="string" required={false}>
              Optional human-readable name for an API Key. If none provided, default to Read Write Session - \<Timestamp>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createReadWriteSessionIntentV2" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activities.intent.createReadWriteSessionIntentV2" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated ReadWriteSession API keys
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="deleteSubOrganizationIntent" type="object" required={false}>
          deleteSubOrganizationIntent field

          <Expandable title="deleteSubOrganizationIntent details">
            <NestedParam parentKey="activities.intent.deleteSubOrganizationIntent" childKey="deleteWithoutExport" type="boolean" required={false}>
              Sub-organization deletion, by default, requires associated wallets and private keys to be exported for security reasons. Set this boolean to true to force sub-organization deletion even if some wallets or private keys within it have not been exported yet. Default: false.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="initOtpAuthIntent" type="object" required={false}>
          initOtpAuthIntent field

          <Expandable title="initOtpAuthIntent details">
            <NestedParam parentKey="activities.intent.initOtpAuthIntent" childKey="otpType" type="string" required={true}>
              Enum to specifiy whether to send OTP via SMS or email
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpAuthIntent" childKey="contact" type="string" required={true}>
              Email or phone number to send the OTP code to
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpAuthIntent" childKey="emailCustomization" type="object" required={false}>
              emailCustomization field

              <Expandable title="emailCustomization details">
                <NestedParam parentKey="activities.intent.initOtpAuthIntent.emailCustomization" childKey="appName" type="string" required={false}>
                  The name of the application.
                </NestedParam>

                <NestedParam parentKey="activities.intent.initOtpAuthIntent.emailCustomization" childKey="logoUrl" type="string" required={false}>
                  A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
                </NestedParam>

                <NestedParam parentKey="activities.intent.initOtpAuthIntent.emailCustomization" childKey="magicLinkTemplate" type="string" required={false}>
                  A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
                </NestedParam>

                <NestedParam parentKey="activities.intent.initOtpAuthIntent.emailCustomization" childKey="templateVariables" type="string" required={false}>
                  JSON object containing key/value pairs to be used with custom templates.
                </NestedParam>

                <NestedParam parentKey="activities.intent.initOtpAuthIntent.emailCustomization" childKey="templateId" type="string" required={false}>
                  Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpAuthIntent" childKey="smsCustomization" type="object" required={false}>
              smsCustomization field

              <Expandable title="smsCustomization details">
                <NestedParam parentKey="activities.intent.initOtpAuthIntent.smsCustomization" childKey="template" type="string" required={false}>
                  Template containing references to .OtpCode i.e Your OTP is \{\{.OtpCode}}
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpAuthIntent" childKey="userIdentifier" type="string" required={false}>
              Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpAuthIntent" childKey="sendFromEmailAddress" type="string" required={false}>
              Optional custom email address from which to send the OTP email
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpAuthIntent" childKey="sendFromEmailSenderName" type="string" required={false}>
              Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpAuthIntent" childKey="replyToEmailAddress" type="string" required={false}>
              Optional custom email address to use as reply-to
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="otpAuthIntent" type="object" required={false}>
          otpAuthIntent field

          <Expandable title="otpAuthIntent details">
            <NestedParam parentKey="activities.intent.otpAuthIntent" childKey="otpId" type="string" required={true}>
              ID representing the result of an init OTP activity.
            </NestedParam>

            <NestedParam parentKey="activities.intent.otpAuthIntent" childKey="otpCode" type="string" required={true}>
              OTP sent out to a user's contact (email or SMS)
            </NestedParam>

            <NestedParam parentKey="activities.intent.otpAuthIntent" childKey="targetPublicKey" type="string" required={true}>
              Client-side public key generated by the user, to which the OTP bundle (credentials) will be encrypted.
            </NestedParam>

            <NestedParam parentKey="activities.intent.otpAuthIntent" childKey="apiKeyName" type="string" required={false}>
              Optional human-readable name for an API Key. If none provided, default to OTP Auth - \<Timestamp>
            </NestedParam>

            <NestedParam parentKey="activities.intent.otpAuthIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the API key is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activities.intent.otpAuthIntent" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated OTP Auth API keys
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createSubOrganizationIntentV7" type="object" required={false}>
          createSubOrganizationIntentV7 field

          <Expandable title="createSubOrganizationIntentV7 details">
            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7" childKey="subOrganizationName" type="string" required={true}>
              Name for this sub-organization
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7" childKey="rootUsers" type="array" required={true}>
              Root users to create within this sub-organization

              <Expandable title="rootUsers details">
                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers" childKey="userPhoneNumber" type="string" required={false}>
                  The user's phone number in E.164 format e.g. +13214567890
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers.apiKeys" childKey="curveType" type="enum" required={true}>
                      curveType field

                      Enum options: `API_KEY_CURVE_P256`, `API_KEY_CURVE_SECP256K1`, `API_KEY_CURVE_ED25519`
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers" childKey="oauthProviders" type="array" required={true}>
                  A list of Oauth providers. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="oauthProviders details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers.oauthProviders" childKey="providerName" type="string" required={true}>
                      Human-readable name to identify a Provider.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.rootUsers.oauthProviders" childKey="oidcToken" type="string" required={true}>
                      Base64 encoded OIDC token
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7" childKey="rootQuorumThreshold" type="number" required={true}>
              The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.wallet" childKey="walletName" type="string" required={true}>
                  Human-readable name for a Wallet.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.wallet" childKey="accounts" type="array" required={true}>
                  A list of wallet Accounts. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="accounts details">
                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.wallet.accounts" childKey="curve" type="enum" required={true}>
                      curve field

                      Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.wallet.accounts" childKey="pathFormat" type="enum" required={true}>
                      pathFormat field

                      Enum options: `PATH_FORMAT_BIP32`
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.wallet.accounts" childKey="path" type="string" required={true}>
                      Path used to generate a wallet Account.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.wallet.accounts" childKey="addressFormat" type="enum" required={true}>
                      addressFormat field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7.wallet" childKey="mnemonicLength" type="number" required={false}>
                  Length of mnemonic to generate the Wallet seed. Defaults to 12. Accepted values: 12, 15, 18, 21, 24.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7" childKey="disableEmailRecovery" type="boolean" required={false}>
              Disable email recovery for the sub-organization
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7" childKey="disableEmailAuth" type="boolean" required={false}>
              Disable email auth for the sub-organization
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7" childKey="disableSmsAuth" type="boolean" required={false}>
              Disable OTP SMS auth for the sub-organization
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSubOrganizationIntentV7" childKey="disableOtpEmailAuth" type="boolean" required={false}>
              Disable OTP email auth for the sub-organization
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="updateWalletIntent" type="object" required={false}>
          updateWalletIntent field

          <Expandable title="updateWalletIntent details">
            <NestedParam parentKey="activities.intent.updateWalletIntent" childKey="walletId" type="string" required={true}>
              Unique identifier for a given Wallet.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updateWalletIntent" childKey="walletName" type="string" required={false}>
              Human-readable name for a Wallet.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="updatePolicyIntentV2" type="object" required={false}>
          updatePolicyIntentV2 field

          <Expandable title="updatePolicyIntentV2 details">
            <NestedParam parentKey="activities.intent.updatePolicyIntentV2" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updatePolicyIntentV2" childKey="policyName" type="string" required={false}>
              Human-readable name for a Policy.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updatePolicyIntentV2" childKey="policyEffect" type="enum" required={false}>
              policyEffect field

              Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
            </NestedParam>

            <NestedParam parentKey="activities.intent.updatePolicyIntentV2" childKey="policyCondition" type="string" required={false}>
              The condition expression that triggers the Effect (optional).
            </NestedParam>

            <NestedParam parentKey="activities.intent.updatePolicyIntentV2" childKey="policyConsensus" type="string" required={false}>
              The consensus expression that triggers the Effect (optional).
            </NestedParam>

            <NestedParam parentKey="activities.intent.updatePolicyIntentV2" childKey="policyNotes" type="string" required={false}>
              Accompanying notes for a Policy (optional).
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createUsersIntentV3" type="object" required={false}>
          createUsersIntentV3 field

          <Expandable title="createUsersIntentV3 details">
            <NestedParam parentKey="activities.intent.createUsersIntentV3" childKey="users" type="array" required={true}>
              A list of Users.

              <Expandable title="users details">
                <NestedParam parentKey="activities.intent.createUsersIntentV3.users" childKey="userName" type="string" required={true}>
                  Human-readable name for a User.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createUsersIntentV3.users" childKey="userEmail" type="string" required={false}>
                  The user's email address.
                </NestedParam>

                <NestedParam parentKey="activities.intent.createUsersIntentV3.users" childKey="userPhoneNumber" type="string" required={false}>
                  The user's phone number in E.164 format e.g. +13214567890
                </NestedParam>

                <NestedParam parentKey="activities.intent.createUsersIntentV3.users" childKey="apiKeys" type="array" required={true}>
                  A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="apiKeys details">
                    <NestedParam parentKey="activities.intent.createUsersIntentV3.users.apiKeys" childKey="apiKeyName" type="string" required={true}>
                      Human-readable name for an API Key.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createUsersIntentV3.users.apiKeys" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createUsersIntentV3.users.apiKeys" childKey="curveType" type="enum" required={true}>
                      curveType field

                      Enum options: `API_KEY_CURVE_P256`, `API_KEY_CURVE_SECP256K1`, `API_KEY_CURVE_ED25519`
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createUsersIntentV3.users.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                      Optional window (in seconds) indicating how long the API Key should last.
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createUsersIntentV3.users" childKey="authenticators" type="array" required={true}>
                  A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="authenticators details">
                    <NestedParam parentKey="activities.intent.createUsersIntentV3.users.authenticators" childKey="authenticatorName" type="string" required={true}>
                      Human-readable name for an Authenticator.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createUsersIntentV3.users.authenticators" childKey="challenge" type="string" required={true}>
                      Challenge presented for authentication purposes.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createUsersIntentV3.users.authenticators" childKey="attestation" type="object" required={true}>
                      attestation field

                      <Expandable title="attestation details">
                        <NestedParam parentKey="activities.intent.createUsersIntentV3.users.authenticators.attestation" childKey="credentialId" type="string" required={true}>
                          The cbor encoded then base64 url encoded id of the credential.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createUsersIntentV3.users.authenticators.attestation" childKey="clientDataJson" type="string" required={true}>
                          A base64 url encoded payload containing metadata about the signing context and the challenge.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createUsersIntentV3.users.authenticators.attestation" childKey="attestationObject" type="string" required={true}>
                          A base64 url encoded payload containing authenticator data and any attestation the webauthn provider chooses.
                        </NestedParam>

                        <NestedParam parentKey="activities.intent.createUsersIntentV3.users.authenticators.attestation" childKey="transports" type="array" required={true}>
                          The type of authenticator transports.

                          <Expandable title="transports details">
                            <NestedParam parentKey="activities.intent.createUsersIntentV3.users.authenticators.attestation.transports" childKey="item" type="enum" required={true}>
                              item field

                              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                            </NestedParam>
                          </Expandable>
                        </NestedParam>
                      </Expandable>
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createUsersIntentV3.users" childKey="oauthProviders" type="array" required={true}>
                  A list of Oauth providers. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="oauthProviders details">
                    <NestedParam parentKey="activities.intent.createUsersIntentV3.users.oauthProviders" childKey="providerName" type="string" required={true}>
                      Human-readable name to identify a Provider.
                    </NestedParam>

                    <NestedParam parentKey="activities.intent.createUsersIntentV3.users.oauthProviders" childKey="oidcToken" type="string" required={true}>
                      Base64 encoded OIDC token
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.intent.createUsersIntentV3.users" childKey="userTags" type="array" required={true}>
                  A list of User Tag IDs. This field, if not needed, should be an empty array in your request body.

                  <Expandable title="userTags details">
                    <NestedParam parentKey="activities.intent.createUsersIntentV3.users.userTags" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="initOtpAuthIntentV2" type="object" required={false}>
          initOtpAuthIntentV2 field

          <Expandable title="initOtpAuthIntentV2 details">
            <NestedParam parentKey="activities.intent.initOtpAuthIntentV2" childKey="otpType" type="string" required={true}>
              Enum to specifiy whether to send OTP via SMS or email
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpAuthIntentV2" childKey="contact" type="string" required={true}>
              Email or phone number to send the OTP code to
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpAuthIntentV2" childKey="otpLength" type="number" required={false}>
              Optional length of the OTP code. Default = 9
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpAuthIntentV2" childKey="emailCustomization" type="object" required={false}>
              emailCustomization field

              <Expandable title="emailCustomization details">
                <NestedParam parentKey="activities.intent.initOtpAuthIntentV2.emailCustomization" childKey="appName" type="string" required={false}>
                  The name of the application.
                </NestedParam>

                <NestedParam parentKey="activities.intent.initOtpAuthIntentV2.emailCustomization" childKey="logoUrl" type="string" required={false}>
                  A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
                </NestedParam>

                <NestedParam parentKey="activities.intent.initOtpAuthIntentV2.emailCustomization" childKey="magicLinkTemplate" type="string" required={false}>
                  A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
                </NestedParam>

                <NestedParam parentKey="activities.intent.initOtpAuthIntentV2.emailCustomization" childKey="templateVariables" type="string" required={false}>
                  JSON object containing key/value pairs to be used with custom templates.
                </NestedParam>

                <NestedParam parentKey="activities.intent.initOtpAuthIntentV2.emailCustomization" childKey="templateId" type="string" required={false}>
                  Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpAuthIntentV2" childKey="smsCustomization" type="object" required={false}>
              smsCustomization field

              <Expandable title="smsCustomization details">
                <NestedParam parentKey="activities.intent.initOtpAuthIntentV2.smsCustomization" childKey="template" type="string" required={false}>
                  Template containing references to .OtpCode i.e Your OTP is \{\{.OtpCode}}
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpAuthIntentV2" childKey="userIdentifier" type="string" required={false}>
              Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpAuthIntentV2" childKey="sendFromEmailAddress" type="string" required={false}>
              Optional custom email address from which to send the OTP email
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpAuthIntentV2" childKey="alphanumeric" type="boolean" required={false}>
              Optional flag to specify if the OTP code should be alphanumeric (Crockford’s Base32). Default = true
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpAuthIntentV2" childKey="sendFromEmailSenderName" type="string" required={false}>
              Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpAuthIntentV2" childKey="replyToEmailAddress" type="string" required={false}>
              Optional custom email address to use as reply-to
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="initOtpIntent" type="object" required={false}>
          initOtpIntent field

          <Expandable title="initOtpIntent details">
            <NestedParam parentKey="activities.intent.initOtpIntent" childKey="otpType" type="string" required={true}>
              Whether to send OTP via SMS or email. Possible values: OTP\_TYPE\_SMS, OTP\_TYPE\_EMAIL
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpIntent" childKey="contact" type="string" required={true}>
              Email or phone number to send the OTP code to
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpIntent" childKey="otpLength" type="number" required={false}>
              Optional length of the OTP code. Default = 9
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpIntent" childKey="emailCustomization" type="object" required={false}>
              emailCustomization field

              <Expandable title="emailCustomization details">
                <NestedParam parentKey="activities.intent.initOtpIntent.emailCustomization" childKey="appName" type="string" required={false}>
                  The name of the application.
                </NestedParam>

                <NestedParam parentKey="activities.intent.initOtpIntent.emailCustomization" childKey="logoUrl" type="string" required={false}>
                  A URL pointing to a logo in PNG format. Note this logo will be resized to fit into 340px x 124px.
                </NestedParam>

                <NestedParam parentKey="activities.intent.initOtpIntent.emailCustomization" childKey="magicLinkTemplate" type="string" required={false}>
                  A template for the URL to be used in a magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`.
                </NestedParam>

                <NestedParam parentKey="activities.intent.initOtpIntent.emailCustomization" childKey="templateVariables" type="string" required={false}>
                  JSON object containing key/value pairs to be used with custom templates.
                </NestedParam>

                <NestedParam parentKey="activities.intent.initOtpIntent.emailCustomization" childKey="templateId" type="string" required={false}>
                  Unique identifier for a given Email Template. If not specified, the default is the most recent Email Template.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpIntent" childKey="smsCustomization" type="object" required={false}>
              smsCustomization field

              <Expandable title="smsCustomization details">
                <NestedParam parentKey="activities.intent.initOtpIntent.smsCustomization" childKey="template" type="string" required={false}>
                  Template containing references to .OtpCode i.e Your OTP is \{\{.OtpCode}}
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpIntent" childKey="userIdentifier" type="string" required={false}>
              Optional client-generated user identifier to enable per-user rate limiting for SMS auth. We recommend using a hash of the client-side IP address.
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpIntent" childKey="sendFromEmailAddress" type="string" required={false}>
              Optional custom email address from which to send the OTP email
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpIntent" childKey="alphanumeric" type="boolean" required={false}>
              Optional flag to specify if the OTP code should be alphanumeric (Crockford’s Base32). Default = true
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpIntent" childKey="sendFromEmailSenderName" type="string" required={false}>
              Optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the OTP is valid for. If not provided, a default of 5 minutes will be used. Maximum value is 600 seconds (10 minutes)
            </NestedParam>

            <NestedParam parentKey="activities.intent.initOtpIntent" childKey="replyToEmailAddress" type="string" required={false}>
              Optional custom email address to use as reply-to
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="verifyOtpIntent" type="object" required={false}>
          verifyOtpIntent field

          <Expandable title="verifyOtpIntent details">
            <NestedParam parentKey="activities.intent.verifyOtpIntent" childKey="otpId" type="string" required={true}>
              ID representing the result of an init OTP activity.
            </NestedParam>

            <NestedParam parentKey="activities.intent.verifyOtpIntent" childKey="otpCode" type="string" required={true}>
              OTP sent out to a user's contact (email or SMS)
            </NestedParam>

            <NestedParam parentKey="activities.intent.verifyOtpIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the verification token is valid for. If not provided, a default of 1 hour will be used. Maximum value is 86400 seconds (24 hours)
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="otpLoginIntent" type="object" required={false}>
          otpLoginIntent field

          <Expandable title="otpLoginIntent details">
            <NestedParam parentKey="activities.intent.otpLoginIntent" childKey="verificationToken" type="string" required={true}>
              Signed JWT containing a unique id, expiry, verification type, contact
            </NestedParam>

            <NestedParam parentKey="activities.intent.otpLoginIntent" childKey="publicKey" type="string" required={true}>
              Client-side public key generated by the user, which will be conditionally added to org data based on the validity of the verification token
            </NestedParam>

            <NestedParam parentKey="activities.intent.otpLoginIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activities.intent.otpLoginIntent" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated Login API keys
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="stampLoginIntent" type="object" required={false}>
          stampLoginIntent field

          <Expandable title="stampLoginIntent details">
            <NestedParam parentKey="activities.intent.stampLoginIntent" childKey="publicKey" type="string" required={true}>
              Client-side public key generated by the user, which will be conditionally added to org data based on the passkey stamp associated with this request
            </NestedParam>

            <NestedParam parentKey="activities.intent.stampLoginIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activities.intent.stampLoginIntent" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated Login API keys
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="oauthLoginIntent" type="object" required={false}>
          oauthLoginIntent field

          <Expandable title="oauthLoginIntent details">
            <NestedParam parentKey="activities.intent.oauthLoginIntent" childKey="oidcToken" type="string" required={true}>
              Base64 encoded OIDC token
            </NestedParam>

            <NestedParam parentKey="activities.intent.oauthLoginIntent" childKey="publicKey" type="string" required={true}>
              Client-side public key generated by the user, which will be conditionally added to org data based on the validity of the oidc token associated with this request
            </NestedParam>

            <NestedParam parentKey="activities.intent.oauthLoginIntent" childKey="expirationSeconds" type="string" required={false}>
              Expiration window (in seconds) indicating how long the Session is valid for. If not provided, a default of 15 minutes will be used.
            </NestedParam>

            <NestedParam parentKey="activities.intent.oauthLoginIntent" childKey="invalidateExisting" type="boolean" required={false}>
              Invalidate all other previously generated Login API keys
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="updateUserNameIntent" type="object" required={false}>
          updateUserNameIntent field

          <Expandable title="updateUserNameIntent details">
            <NestedParam parentKey="activities.intent.updateUserNameIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updateUserNameIntent" childKey="userName" type="string" required={true}>
              Human-readable name for a User.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="updateUserEmailIntent" type="object" required={false}>
          updateUserEmailIntent field

          <Expandable title="updateUserEmailIntent details">
            <NestedParam parentKey="activities.intent.updateUserEmailIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updateUserEmailIntent" childKey="userEmail" type="string" required={true}>
              The user's email address. Setting this to an empty string will remove the user's email.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updateUserEmailIntent" childKey="verificationToken" type="string" required={false}>
              Signed JWT containing a unique id, expiry, verification type, contact
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="updateUserPhoneNumberIntent" type="object" required={false}>
          updateUserPhoneNumberIntent field

          <Expandable title="updateUserPhoneNumberIntent details">
            <NestedParam parentKey="activities.intent.updateUserPhoneNumberIntent" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updateUserPhoneNumberIntent" childKey="userPhoneNumber" type="string" required={true}>
              The user's phone number in E.164 format e.g. +13214567890. Setting this to an empty string will remove the user's phone number.
            </NestedParam>

            <NestedParam parentKey="activities.intent.updateUserPhoneNumberIntent" childKey="verificationToken" type="string" required={false}>
              Signed JWT containing a unique id, expiry, verification type, contact
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="initFiatOnRampIntent" type="object" required={false}>
          initFiatOnRampIntent field

          <Expandable title="initFiatOnRampIntent details">
            <NestedParam parentKey="activities.intent.initFiatOnRampIntent" childKey="onrampProvider" type="enum" required={true}>
              onrampProvider field

              Enum options: `FIAT_ON_RAMP_PROVIDER_COINBASE`, `FIAT_ON_RAMP_PROVIDER_MOONPAY`
            </NestedParam>

            <NestedParam parentKey="activities.intent.initFiatOnRampIntent" childKey="walletAddress" type="string" required={true}>
              Destination wallet address for the buy transaction.
            </NestedParam>

            <NestedParam parentKey="activities.intent.initFiatOnRampIntent" childKey="network" type="enum" required={true}>
              network field

              Enum options: `FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BITCOIN`, `FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_ETHEREUM`, `FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_SOLANA`, `FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BASE`
            </NestedParam>

            <NestedParam parentKey="activities.intent.initFiatOnRampIntent" childKey="cryptoCurrencyCode" type="enum" required={true}>
              cryptoCurrencyCode field

              Enum options: `FIAT_ON_RAMP_CRYPTO_CURRENCY_BTC`, `FIAT_ON_RAMP_CRYPTO_CURRENCY_ETH`, `FIAT_ON_RAMP_CRYPTO_CURRENCY_SOL`, `FIAT_ON_RAMP_CRYPTO_CURRENCY_USDC`
            </NestedParam>

            <NestedParam parentKey="activities.intent.initFiatOnRampIntent" childKey="fiatCurrencyCode" type="enum" required={false}>
              fiatCurrencyCode field

              Enum options: `FIAT_ON_RAMP_CURRENCY_AUD`, `FIAT_ON_RAMP_CURRENCY_BGN`, `FIAT_ON_RAMP_CURRENCY_BRL`, `FIAT_ON_RAMP_CURRENCY_CAD`, `FIAT_ON_RAMP_CURRENCY_CHF`, `FIAT_ON_RAMP_CURRENCY_COP`, `FIAT_ON_RAMP_CURRENCY_CZK`, `FIAT_ON_RAMP_CURRENCY_DKK`, `FIAT_ON_RAMP_CURRENCY_DOP`, `FIAT_ON_RAMP_CURRENCY_EGP`, `FIAT_ON_RAMP_CURRENCY_EUR`, `FIAT_ON_RAMP_CURRENCY_GBP`, `FIAT_ON_RAMP_CURRENCY_HKD`, `FIAT_ON_RAMP_CURRENCY_IDR`, `FIAT_ON_RAMP_CURRENCY_ILS`, `FIAT_ON_RAMP_CURRENCY_JOD`, `FIAT_ON_RAMP_CURRENCY_KES`, `FIAT_ON_RAMP_CURRENCY_KWD`, `FIAT_ON_RAMP_CURRENCY_LKR`, `FIAT_ON_RAMP_CURRENCY_MXN`, `FIAT_ON_RAMP_CURRENCY_NGN`, `FIAT_ON_RAMP_CURRENCY_NOK`, `FIAT_ON_RAMP_CURRENCY_NZD`, `FIAT_ON_RAMP_CURRENCY_OMR`, `FIAT_ON_RAMP_CURRENCY_PEN`, `FIAT_ON_RAMP_CURRENCY_PLN`, `FIAT_ON_RAMP_CURRENCY_RON`, `FIAT_ON_RAMP_CURRENCY_SEK`, `FIAT_ON_RAMP_CURRENCY_THB`, `FIAT_ON_RAMP_CURRENCY_TRY`, `FIAT_ON_RAMP_CURRENCY_TWD`, `FIAT_ON_RAMP_CURRENCY_USD`, `FIAT_ON_RAMP_CURRENCY_VND`, `FIAT_ON_RAMP_CURRENCY_ZAR`
            </NestedParam>

            <NestedParam parentKey="activities.intent.initFiatOnRampIntent" childKey="fiatCurrencyAmount" type="string" required={false}>
              Specifies a preset fiat amount for the transaction, e.g., '100'. Must be greater than '20'. If not provided, the user will be prompted to enter an amount.
            </NestedParam>

            <NestedParam parentKey="activities.intent.initFiatOnRampIntent" childKey="paymentMethod" type="enum" required={false}>
              paymentMethod field

              Enum options: `FIAT_ON_RAMP_PAYMENT_METHOD_CREDIT_DEBIT_CARD`, `FIAT_ON_RAMP_PAYMENT_METHOD_APPLE_PAY`, `FIAT_ON_RAMP_PAYMENT_METHOD_GBP_BANK_TRANSFER`, `FIAT_ON_RAMP_PAYMENT_METHOD_GBP_OPEN_BANKING_PAYMENT`, `FIAT_ON_RAMP_PAYMENT_METHOD_GOOGLE_PAY`, `FIAT_ON_RAMP_PAYMENT_METHOD_SEPA_BANK_TRANSFER`, `FIAT_ON_RAMP_PAYMENT_METHOD_PIX_INSTANT_PAYMENT`, `FIAT_ON_RAMP_PAYMENT_METHOD_PAYPAL`, `FIAT_ON_RAMP_PAYMENT_METHOD_VENMO`, `FIAT_ON_RAMP_PAYMENT_METHOD_MOONPAY_BALANCE`, `FIAT_ON_RAMP_PAYMENT_METHOD_CRYPTO_ACCOUNT`, `FIAT_ON_RAMP_PAYMENT_METHOD_FIAT_WALLET`, `FIAT_ON_RAMP_PAYMENT_METHOD_ACH_BANK_ACCOUNT`
            </NestedParam>

            <NestedParam parentKey="activities.intent.initFiatOnRampIntent" childKey="countryCode" type="string" required={false}>
              ISO 3166-1 two-digit country code for Coinbase representing the purchasing user’s country of residence, e.g., US, GB.
            </NestedParam>

            <NestedParam parentKey="activities.intent.initFiatOnRampIntent" childKey="countrySubdivisionCode" type="string" required={false}>
              ISO 3166-2 two-digit country subdivision code for Coinbase representing the purchasing user’s subdivision of residence within their country, e.g. NY. Required if country\_code=US.
            </NestedParam>

            <NestedParam parentKey="activities.intent.initFiatOnRampIntent" childKey="sandboxMode" type="boolean" required={false}>
              Optional flag to indicate whether to use the sandbox mode to simulate transactions for the on-ramp provider. Default is false.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="createSmartContractInterfaceIntent" type="object" required={false}>
          createSmartContractInterfaceIntent field

          <Expandable title="createSmartContractInterfaceIntent details">
            <NestedParam parentKey="activities.intent.createSmartContractInterfaceIntent" childKey="smartContractAddress" type="string" required={true}>
              Corresponding contract address or program ID
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSmartContractInterfaceIntent" childKey="smartContractInterface" type="string" required={true}>
              ABI/IDL as a JSON string
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSmartContractInterfaceIntent" childKey="type" type="enum" required={true}>
              type field

              Enum options: `SMART_CONTRACT_INTERFACE_TYPE_ETHEREUM`, `SMART_CONTRACT_INTERFACE_TYPE_SOLANA`
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSmartContractInterfaceIntent" childKey="label" type="string" required={true}>
              Human-readable name for a Smart Contract Interface.
            </NestedParam>

            <NestedParam parentKey="activities.intent.createSmartContractInterfaceIntent" childKey="notes" type="string" required={false}>
              Notes for a Smart Contract Interface.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.intent" childKey="deleteSmartContractInterfaceIntent" type="object" required={false}>
          deleteSmartContractInterfaceIntent field

          <Expandable title="deleteSmartContractInterfaceIntent details">
            <NestedParam parentKey="activities.intent.deleteSmartContractInterfaceIntent" childKey="smartContractInterfaceId" type="string" required={true}>
              The ID of a Smart Contract Interface intended for deletion.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activities" childKey="result" type="object" required={true}>
      result field

      <Expandable title="result details">
        <NestedParam parentKey="activities.result" childKey="createOrganizationResult" type="object" required={false}>
          createOrganizationResult field

          <Expandable title="createOrganizationResult details">
            <NestedParam parentKey="activities.result.createOrganizationResult" childKey="organizationId" type="string" required={true}>
              Unique identifier for a given Organization.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createAuthenticatorsResult" type="object" required={false}>
          createAuthenticatorsResult field

          <Expandable title="createAuthenticatorsResult details">
            <NestedParam parentKey="activities.result.createAuthenticatorsResult" childKey="authenticatorIds" type="array" required={true}>
              A list of Authenticator IDs.

              <Expandable title="authenticatorIds details">
                <NestedParam parentKey="activities.result.createAuthenticatorsResult.authenticatorIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createUsersResult" type="object" required={false}>
          createUsersResult field

          <Expandable title="createUsersResult details">
            <NestedParam parentKey="activities.result.createUsersResult" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activities.result.createUsersResult.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createPrivateKeysResult" type="object" required={false}>
          createPrivateKeysResult field

          <Expandable title="createPrivateKeysResult details">
            <NestedParam parentKey="activities.result.createPrivateKeysResult" childKey="privateKeyIds" type="array" required={true}>
              A list of Private Key IDs.

              <Expandable title="privateKeyIds details">
                <NestedParam parentKey="activities.result.createPrivateKeysResult.privateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createInvitationsResult" type="object" required={false}>
          createInvitationsResult field

          <Expandable title="createInvitationsResult details">
            <NestedParam parentKey="activities.result.createInvitationsResult" childKey="invitationIds" type="array" required={true}>
              A list of Invitation IDs

              <Expandable title="invitationIds details">
                <NestedParam parentKey="activities.result.createInvitationsResult.invitationIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="acceptInvitationResult" type="object" required={false}>
          acceptInvitationResult field

          <Expandable title="acceptInvitationResult details">
            <NestedParam parentKey="activities.result.acceptInvitationResult" childKey="invitationId" type="string" required={true}>
              Unique identifier for a given Invitation.
            </NestedParam>

            <NestedParam parentKey="activities.result.acceptInvitationResult" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="signRawPayloadResult" type="object" required={false}>
          signRawPayloadResult field

          <Expandable title="signRawPayloadResult details">
            <NestedParam parentKey="activities.result.signRawPayloadResult" childKey="r" type="string" required={true}>
              Component of an ECSDA signature.
            </NestedParam>

            <NestedParam parentKey="activities.result.signRawPayloadResult" childKey="s" type="string" required={true}>
              Component of an ECSDA signature.
            </NestedParam>

            <NestedParam parentKey="activities.result.signRawPayloadResult" childKey="v" type="string" required={true}>
              Component of an ECSDA signature.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createPolicyResult" type="object" required={false}>
          createPolicyResult field

          <Expandable title="createPolicyResult details">
            <NestedParam parentKey="activities.result.createPolicyResult" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="disablePrivateKeyResult" type="object" required={false}>
          disablePrivateKeyResult field

          <Expandable title="disablePrivateKeyResult details">
            <NestedParam parentKey="activities.result.disablePrivateKeyResult" childKey="privateKeyId" type="string" required={true}>
              Unique identifier for a given Private Key.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="deleteUsersResult" type="object" required={false}>
          deleteUsersResult field

          <Expandable title="deleteUsersResult details">
            <NestedParam parentKey="activities.result.deleteUsersResult" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activities.result.deleteUsersResult.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="deleteAuthenticatorsResult" type="object" required={false}>
          deleteAuthenticatorsResult field

          <Expandable title="deleteAuthenticatorsResult details">
            <NestedParam parentKey="activities.result.deleteAuthenticatorsResult" childKey="authenticatorIds" type="array" required={true}>
              Unique identifier for a given Authenticator.

              <Expandable title="authenticatorIds details">
                <NestedParam parentKey="activities.result.deleteAuthenticatorsResult.authenticatorIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="deleteInvitationResult" type="object" required={false}>
          deleteInvitationResult field

          <Expandable title="deleteInvitationResult details">
            <NestedParam parentKey="activities.result.deleteInvitationResult" childKey="invitationId" type="string" required={true}>
              Unique identifier for a given Invitation.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="deleteOrganizationResult" type="object" required={false}>
          deleteOrganizationResult field

          <Expandable title="deleteOrganizationResult details">
            <NestedParam parentKey="activities.result.deleteOrganizationResult" childKey="organizationId" type="string" required={true}>
              Unique identifier for a given Organization.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="deletePolicyResult" type="object" required={false}>
          deletePolicyResult field

          <Expandable title="deletePolicyResult details">
            <NestedParam parentKey="activities.result.deletePolicyResult" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createUserTagResult" type="object" required={false}>
          createUserTagResult field

          <Expandable title="createUserTagResult details">
            <NestedParam parentKey="activities.result.createUserTagResult" childKey="userTagId" type="string" required={true}>
              Unique identifier for a given User Tag.
            </NestedParam>

            <NestedParam parentKey="activities.result.createUserTagResult" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activities.result.createUserTagResult.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="deleteUserTagsResult" type="object" required={false}>
          deleteUserTagsResult field

          <Expandable title="deleteUserTagsResult details">
            <NestedParam parentKey="activities.result.deleteUserTagsResult" childKey="userTagIds" type="array" required={true}>
              A list of User Tag IDs.

              <Expandable title="userTagIds details">
                <NestedParam parentKey="activities.result.deleteUserTagsResult.userTagIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.result.deleteUserTagsResult" childKey="userIds" type="array" required={true}>
              A list of User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activities.result.deleteUserTagsResult.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="signTransactionResult" type="object" required={false}>
          signTransactionResult field

          <Expandable title="signTransactionResult details">
            <NestedParam parentKey="activities.result.signTransactionResult" childKey="signedTransaction" type="string" required={true}>
              signedTransaction field
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="deleteApiKeysResult" type="object" required={false}>
          deleteApiKeysResult field

          <Expandable title="deleteApiKeysResult details">
            <NestedParam parentKey="activities.result.deleteApiKeysResult" childKey="apiKeyIds" type="array" required={true}>
              A list of API Key IDs.

              <Expandable title="apiKeyIds details">
                <NestedParam parentKey="activities.result.deleteApiKeysResult.apiKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createApiKeysResult" type="object" required={false}>
          createApiKeysResult field

          <Expandable title="createApiKeysResult details">
            <NestedParam parentKey="activities.result.createApiKeysResult" childKey="apiKeyIds" type="array" required={true}>
              A list of API Key IDs.

              <Expandable title="apiKeyIds details">
                <NestedParam parentKey="activities.result.createApiKeysResult.apiKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createPrivateKeyTagResult" type="object" required={false}>
          createPrivateKeyTagResult field

          <Expandable title="createPrivateKeyTagResult details">
            <NestedParam parentKey="activities.result.createPrivateKeyTagResult" childKey="privateKeyTagId" type="string" required={true}>
              Unique identifier for a given Private Key Tag.
            </NestedParam>

            <NestedParam parentKey="activities.result.createPrivateKeyTagResult" childKey="privateKeyIds" type="array" required={true}>
              A list of Private Key IDs.

              <Expandable title="privateKeyIds details">
                <NestedParam parentKey="activities.result.createPrivateKeyTagResult.privateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="deletePrivateKeyTagsResult" type="object" required={false}>
          deletePrivateKeyTagsResult field

          <Expandable title="deletePrivateKeyTagsResult details">
            <NestedParam parentKey="activities.result.deletePrivateKeyTagsResult" childKey="privateKeyTagIds" type="array" required={true}>
              A list of Private Key Tag IDs.

              <Expandable title="privateKeyTagIds details">
                <NestedParam parentKey="activities.result.deletePrivateKeyTagsResult.privateKeyTagIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.result.deletePrivateKeyTagsResult" childKey="privateKeyIds" type="array" required={true}>
              A list of Private Key IDs.

              <Expandable title="privateKeyIds details">
                <NestedParam parentKey="activities.result.deletePrivateKeyTagsResult.privateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="setPaymentMethodResult" type="object" required={false}>
          setPaymentMethodResult field

          <Expandable title="setPaymentMethodResult details">
            <NestedParam parentKey="activities.result.setPaymentMethodResult" childKey="lastFour" type="string" required={true}>
              The last four digits of the credit card added.
            </NestedParam>

            <NestedParam parentKey="activities.result.setPaymentMethodResult" childKey="cardHolderName" type="string" required={true}>
              The name associated with the payment method.
            </NestedParam>

            <NestedParam parentKey="activities.result.setPaymentMethodResult" childKey="cardHolderEmail" type="string" required={true}>
              The email address associated with the payment method.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="activateBillingTierResult" type="object" required={false}>
          activateBillingTierResult field

          <Expandable title="activateBillingTierResult details">
            <NestedParam parentKey="activities.result.activateBillingTierResult" childKey="productId" type="string" required={true}>
              The id of the product being subscribed to.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="deletePaymentMethodResult" type="object" required={false}>
          deletePaymentMethodResult field

          <Expandable title="deletePaymentMethodResult details">
            <NestedParam parentKey="activities.result.deletePaymentMethodResult" childKey="paymentMethodId" type="string" required={true}>
              The payment method that was removed.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createApiOnlyUsersResult" type="object" required={false}>
          createApiOnlyUsersResult field

          <Expandable title="createApiOnlyUsersResult details">
            <NestedParam parentKey="activities.result.createApiOnlyUsersResult" childKey="userIds" type="array" required={true}>
              A list of API-only User IDs.

              <Expandable title="userIds details">
                <NestedParam parentKey="activities.result.createApiOnlyUsersResult.userIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="updateRootQuorumResult" type="object" required={false}>
          updateRootQuorumResult field
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="updateUserTagResult" type="object" required={false}>
          updateUserTagResult field

          <Expandable title="updateUserTagResult details">
            <NestedParam parentKey="activities.result.updateUserTagResult" childKey="userTagId" type="string" required={true}>
              Unique identifier for a given User Tag.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="updatePrivateKeyTagResult" type="object" required={false}>
          updatePrivateKeyTagResult field

          <Expandable title="updatePrivateKeyTagResult details">
            <NestedParam parentKey="activities.result.updatePrivateKeyTagResult" childKey="privateKeyTagId" type="string" required={true}>
              Unique identifier for a given Private Key Tag.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createSubOrganizationResult" type="object" required={false}>
          createSubOrganizationResult field

          <Expandable title="createSubOrganizationResult details">
            <NestedParam parentKey="activities.result.createSubOrganizationResult" childKey="subOrganizationId" type="string" required={true}>
              subOrganizationId field
            </NestedParam>

            <NestedParam parentKey="activities.result.createSubOrganizationResult" childKey="rootUserIds" type="array" required={false}>
              rootUserIds field

              <Expandable title="rootUserIds details">
                <NestedParam parentKey="activities.result.createSubOrganizationResult.rootUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="updateAllowedOriginsResult" type="object" required={false}>
          updateAllowedOriginsResult field
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createPrivateKeysResultV2" type="object" required={false}>
          createPrivateKeysResultV2 field

          <Expandable title="createPrivateKeysResultV2 details">
            <NestedParam parentKey="activities.result.createPrivateKeysResultV2" childKey="privateKeys" type="array" required={true}>
              A list of Private Key IDs and addresses.

              <Expandable title="privateKeys details">
                <NestedParam parentKey="activities.result.createPrivateKeysResultV2.privateKeys" childKey="privateKeyId" type="string" required={false}>
                  privateKeyId field
                </NestedParam>

                <NestedParam parentKey="activities.result.createPrivateKeysResultV2.privateKeys" childKey="addresses" type="array" required={false}>
                  addresses field

                  <Expandable title="addresses details">
                    <NestedParam parentKey="activities.result.createPrivateKeysResultV2.privateKeys.addresses" childKey="format" type="enum" required={false}>
                      format field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>

                    <NestedParam parentKey="activities.result.createPrivateKeysResultV2.privateKeys.addresses" childKey="address" type="string" required={false}>
                      address field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="updateUserResult" type="object" required={false}>
          updateUserResult field

          <Expandable title="updateUserResult details">
            <NestedParam parentKey="activities.result.updateUserResult" childKey="userId" type="string" required={true}>
              A User ID.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="updatePolicyResult" type="object" required={false}>
          updatePolicyResult field

          <Expandable title="updatePolicyResult details">
            <NestedParam parentKey="activities.result.updatePolicyResult" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createSubOrganizationResultV3" type="object" required={false}>
          createSubOrganizationResultV3 field

          <Expandable title="createSubOrganizationResultV3 details">
            <NestedParam parentKey="activities.result.createSubOrganizationResultV3" childKey="subOrganizationId" type="string" required={true}>
              subOrganizationId field
            </NestedParam>

            <NestedParam parentKey="activities.result.createSubOrganizationResultV3" childKey="privateKeys" type="array" required={true}>
              A list of Private Key IDs and addresses.

              <Expandable title="privateKeys details">
                <NestedParam parentKey="activities.result.createSubOrganizationResultV3.privateKeys" childKey="privateKeyId" type="string" required={false}>
                  privateKeyId field
                </NestedParam>

                <NestedParam parentKey="activities.result.createSubOrganizationResultV3.privateKeys" childKey="addresses" type="array" required={false}>
                  addresses field

                  <Expandable title="addresses details">
                    <NestedParam parentKey="activities.result.createSubOrganizationResultV3.privateKeys.addresses" childKey="format" type="enum" required={false}>
                      format field

                      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                    </NestedParam>

                    <NestedParam parentKey="activities.result.createSubOrganizationResultV3.privateKeys.addresses" childKey="address" type="string" required={false}>
                      address field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.result.createSubOrganizationResultV3" childKey="rootUserIds" type="array" required={false}>
              rootUserIds field

              <Expandable title="rootUserIds details">
                <NestedParam parentKey="activities.result.createSubOrganizationResultV3.rootUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createWalletResult" type="object" required={false}>
          createWalletResult field

          <Expandable title="createWalletResult details">
            <NestedParam parentKey="activities.result.createWalletResult" childKey="walletId" type="string" required={true}>
              Unique identifier for a Wallet.
            </NestedParam>

            <NestedParam parentKey="activities.result.createWalletResult" childKey="addresses" type="array" required={true}>
              A list of account addresses.

              <Expandable title="addresses details">
                <NestedParam parentKey="activities.result.createWalletResult.addresses" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createWalletAccountsResult" type="object" required={false}>
          createWalletAccountsResult field

          <Expandable title="createWalletAccountsResult details">
            <NestedParam parentKey="activities.result.createWalletAccountsResult" childKey="addresses" type="array" required={true}>
              A list of derived addresses.

              <Expandable title="addresses details">
                <NestedParam parentKey="activities.result.createWalletAccountsResult.addresses" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="initUserEmailRecoveryResult" type="object" required={false}>
          initUserEmailRecoveryResult field

          <Expandable title="initUserEmailRecoveryResult details">
            <NestedParam parentKey="activities.result.initUserEmailRecoveryResult" childKey="userId" type="string" required={true}>
              Unique identifier for the user being recovered.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="recoverUserResult" type="object" required={false}>
          recoverUserResult field

          <Expandable title="recoverUserResult details">
            <NestedParam parentKey="activities.result.recoverUserResult" childKey="authenticatorId" type="array" required={true}>
              ID of the authenticator created.

              <Expandable title="authenticatorId details">
                <NestedParam parentKey="activities.result.recoverUserResult.authenticatorId" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="setOrganizationFeatureResult" type="object" required={false}>
          setOrganizationFeatureResult field

          <Expandable title="setOrganizationFeatureResult details">
            <NestedParam parentKey="activities.result.setOrganizationFeatureResult" childKey="features" type="array" required={true}>
              Resulting list of organization features.

              <Expandable title="features details">
                <NestedParam parentKey="activities.result.setOrganizationFeatureResult.features" childKey="name" type="enum" required={false}>
                  name field

                  Enum options: `FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY`, `FEATURE_NAME_WEBAUTHN_ORIGINS`, `FEATURE_NAME_EMAIL_AUTH`, `FEATURE_NAME_EMAIL_RECOVERY`, `FEATURE_NAME_WEBHOOK`, `FEATURE_NAME_SMS_AUTH`, `FEATURE_NAME_OTP_EMAIL_AUTH`
                </NestedParam>

                <NestedParam parentKey="activities.result.setOrganizationFeatureResult.features" childKey="value" type="string" required={false}>
                  value field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="removeOrganizationFeatureResult" type="object" required={false}>
          removeOrganizationFeatureResult field

          <Expandable title="removeOrganizationFeatureResult details">
            <NestedParam parentKey="activities.result.removeOrganizationFeatureResult" childKey="features" type="array" required={true}>
              Resulting list of organization features.

              <Expandable title="features details">
                <NestedParam parentKey="activities.result.removeOrganizationFeatureResult.features" childKey="name" type="enum" required={false}>
                  name field

                  Enum options: `FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY`, `FEATURE_NAME_WEBAUTHN_ORIGINS`, `FEATURE_NAME_EMAIL_AUTH`, `FEATURE_NAME_EMAIL_RECOVERY`, `FEATURE_NAME_WEBHOOK`, `FEATURE_NAME_SMS_AUTH`, `FEATURE_NAME_OTP_EMAIL_AUTH`
                </NestedParam>

                <NestedParam parentKey="activities.result.removeOrganizationFeatureResult.features" childKey="value" type="string" required={false}>
                  value field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="exportPrivateKeyResult" type="object" required={false}>
          exportPrivateKeyResult field

          <Expandable title="exportPrivateKeyResult details">
            <NestedParam parentKey="activities.result.exportPrivateKeyResult" childKey="privateKeyId" type="string" required={true}>
              Unique identifier for a given Private Key.
            </NestedParam>

            <NestedParam parentKey="activities.result.exportPrivateKeyResult" childKey="exportBundle" type="string" required={true}>
              Export bundle containing a private key encrypted to the client's target public key.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="exportWalletResult" type="object" required={false}>
          exportWalletResult field

          <Expandable title="exportWalletResult details">
            <NestedParam parentKey="activities.result.exportWalletResult" childKey="walletId" type="string" required={true}>
              Unique identifier for a given Wallet.
            </NestedParam>

            <NestedParam parentKey="activities.result.exportWalletResult" childKey="exportBundle" type="string" required={true}>
              Export bundle containing a wallet mnemonic + optional newline passphrase encrypted by the client's target public key.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createSubOrganizationResultV4" type="object" required={false}>
          createSubOrganizationResultV4 field

          <Expandable title="createSubOrganizationResultV4 details">
            <NestedParam parentKey="activities.result.createSubOrganizationResultV4" childKey="subOrganizationId" type="string" required={true}>
              subOrganizationId field
            </NestedParam>

            <NestedParam parentKey="activities.result.createSubOrganizationResultV4" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activities.result.createSubOrganizationResultV4.wallet" childKey="walletId" type="string" required={true}>
                  walletId field
                </NestedParam>

                <NestedParam parentKey="activities.result.createSubOrganizationResultV4.wallet" childKey="addresses" type="array" required={true}>
                  A list of account addresses.

                  <Expandable title="addresses details">
                    <NestedParam parentKey="activities.result.createSubOrganizationResultV4.wallet.addresses" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.result.createSubOrganizationResultV4" childKey="rootUserIds" type="array" required={false}>
              rootUserIds field

              <Expandable title="rootUserIds details">
                <NestedParam parentKey="activities.result.createSubOrganizationResultV4.rootUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="emailAuthResult" type="object" required={false}>
          emailAuthResult field

          <Expandable title="emailAuthResult details">
            <NestedParam parentKey="activities.result.emailAuthResult" childKey="userId" type="string" required={true}>
              Unique identifier for the authenticating User.
            </NestedParam>

            <NestedParam parentKey="activities.result.emailAuthResult" childKey="apiKeyId" type="string" required={true}>
              Unique identifier for the created API key.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="exportWalletAccountResult" type="object" required={false}>
          exportWalletAccountResult field

          <Expandable title="exportWalletAccountResult details">
            <NestedParam parentKey="activities.result.exportWalletAccountResult" childKey="address" type="string" required={true}>
              Address to identify Wallet Account.
            </NestedParam>

            <NestedParam parentKey="activities.result.exportWalletAccountResult" childKey="exportBundle" type="string" required={true}>
              Export bundle containing a private key encrypted by the client's target public key.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="initImportWalletResult" type="object" required={false}>
          initImportWalletResult field

          <Expandable title="initImportWalletResult details">
            <NestedParam parentKey="activities.result.initImportWalletResult" childKey="importBundle" type="string" required={true}>
              Import bundle containing a public key and signature to use for importing client data.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="importWalletResult" type="object" required={false}>
          importWalletResult field

          <Expandable title="importWalletResult details">
            <NestedParam parentKey="activities.result.importWalletResult" childKey="walletId" type="string" required={true}>
              Unique identifier for a Wallet.
            </NestedParam>

            <NestedParam parentKey="activities.result.importWalletResult" childKey="addresses" type="array" required={true}>
              A list of account addresses.

              <Expandable title="addresses details">
                <NestedParam parentKey="activities.result.importWalletResult.addresses" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="initImportPrivateKeyResult" type="object" required={false}>
          initImportPrivateKeyResult field

          <Expandable title="initImportPrivateKeyResult details">
            <NestedParam parentKey="activities.result.initImportPrivateKeyResult" childKey="importBundle" type="string" required={true}>
              Import bundle containing a public key and signature to use for importing client data.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="importPrivateKeyResult" type="object" required={false}>
          importPrivateKeyResult field

          <Expandable title="importPrivateKeyResult details">
            <NestedParam parentKey="activities.result.importPrivateKeyResult" childKey="privateKeyId" type="string" required={true}>
              Unique identifier for a Private Key.
            </NestedParam>

            <NestedParam parentKey="activities.result.importPrivateKeyResult" childKey="addresses" type="array" required={true}>
              A list of addresses.

              <Expandable title="addresses details">
                <NestedParam parentKey="activities.result.importPrivateKeyResult.addresses" childKey="format" type="enum" required={false}>
                  format field

                  Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
                </NestedParam>

                <NestedParam parentKey="activities.result.importPrivateKeyResult.addresses" childKey="address" type="string" required={false}>
                  address field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createPoliciesResult" type="object" required={false}>
          createPoliciesResult field

          <Expandable title="createPoliciesResult details">
            <NestedParam parentKey="activities.result.createPoliciesResult" childKey="policyIds" type="array" required={true}>
              A list of unique identifiers for the created policies.

              <Expandable title="policyIds details">
                <NestedParam parentKey="activities.result.createPoliciesResult.policyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="signRawPayloadsResult" type="object" required={false}>
          signRawPayloadsResult field

          <Expandable title="signRawPayloadsResult details">
            <NestedParam parentKey="activities.result.signRawPayloadsResult" childKey="signatures" type="array" required={false}>
              signatures field

              <Expandable title="signatures details">
                <NestedParam parentKey="activities.result.signRawPayloadsResult.signatures" childKey="r" type="string" required={true}>
                  Component of an ECSDA signature.
                </NestedParam>

                <NestedParam parentKey="activities.result.signRawPayloadsResult.signatures" childKey="s" type="string" required={true}>
                  Component of an ECSDA signature.
                </NestedParam>

                <NestedParam parentKey="activities.result.signRawPayloadsResult.signatures" childKey="v" type="string" required={true}>
                  Component of an ECSDA signature.
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createReadOnlySessionResult" type="object" required={false}>
          createReadOnlySessionResult field

          <Expandable title="createReadOnlySessionResult details">
            <NestedParam parentKey="activities.result.createReadOnlySessionResult" childKey="organizationId" type="string" required={true}>
              Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons.
            </NestedParam>

            <NestedParam parentKey="activities.result.createReadOnlySessionResult" childKey="organizationName" type="string" required={true}>
              Human-readable name for an Organization.
            </NestedParam>

            <NestedParam parentKey="activities.result.createReadOnlySessionResult" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activities.result.createReadOnlySessionResult" childKey="username" type="string" required={true}>
              Human-readable name for a User.
            </NestedParam>

            <NestedParam parentKey="activities.result.createReadOnlySessionResult" childKey="session" type="string" required={true}>
              String representing a read only session
            </NestedParam>

            <NestedParam parentKey="activities.result.createReadOnlySessionResult" childKey="sessionExpiry" type="string" required={true}>
              UTC timestamp in seconds representing the expiry time for the read only session.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createOauthProvidersResult" type="object" required={false}>
          createOauthProvidersResult field

          <Expandable title="createOauthProvidersResult details">
            <NestedParam parentKey="activities.result.createOauthProvidersResult" childKey="providerIds" type="array" required={true}>
              A list of unique identifiers for Oauth Providers

              <Expandable title="providerIds details">
                <NestedParam parentKey="activities.result.createOauthProvidersResult.providerIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="deleteOauthProvidersResult" type="object" required={false}>
          deleteOauthProvidersResult field

          <Expandable title="deleteOauthProvidersResult details">
            <NestedParam parentKey="activities.result.deleteOauthProvidersResult" childKey="providerIds" type="array" required={true}>
              A list of unique identifiers for Oauth Providers

              <Expandable title="providerIds details">
                <NestedParam parentKey="activities.result.deleteOauthProvidersResult.providerIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createSubOrganizationResultV5" type="object" required={false}>
          createSubOrganizationResultV5 field

          <Expandable title="createSubOrganizationResultV5 details">
            <NestedParam parentKey="activities.result.createSubOrganizationResultV5" childKey="subOrganizationId" type="string" required={true}>
              subOrganizationId field
            </NestedParam>

            <NestedParam parentKey="activities.result.createSubOrganizationResultV5" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activities.result.createSubOrganizationResultV5.wallet" childKey="walletId" type="string" required={true}>
                  walletId field
                </NestedParam>

                <NestedParam parentKey="activities.result.createSubOrganizationResultV5.wallet" childKey="addresses" type="array" required={true}>
                  A list of account addresses.

                  <Expandable title="addresses details">
                    <NestedParam parentKey="activities.result.createSubOrganizationResultV5.wallet.addresses" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.result.createSubOrganizationResultV5" childKey="rootUserIds" type="array" required={false}>
              rootUserIds field

              <Expandable title="rootUserIds details">
                <NestedParam parentKey="activities.result.createSubOrganizationResultV5.rootUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="oauthResult" type="object" required={false}>
          oauthResult field

          <Expandable title="oauthResult details">
            <NestedParam parentKey="activities.result.oauthResult" childKey="userId" type="string" required={true}>
              Unique identifier for the authenticating User.
            </NestedParam>

            <NestedParam parentKey="activities.result.oauthResult" childKey="apiKeyId" type="string" required={true}>
              Unique identifier for the created API key.
            </NestedParam>

            <NestedParam parentKey="activities.result.oauthResult" childKey="credentialBundle" type="string" required={true}>
              HPKE encrypted credential bundle
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createReadWriteSessionResult" type="object" required={false}>
          createReadWriteSessionResult field

          <Expandable title="createReadWriteSessionResult details">
            <NestedParam parentKey="activities.result.createReadWriteSessionResult" childKey="organizationId" type="string" required={true}>
              Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons.
            </NestedParam>

            <NestedParam parentKey="activities.result.createReadWriteSessionResult" childKey="organizationName" type="string" required={true}>
              Human-readable name for an Organization.
            </NestedParam>

            <NestedParam parentKey="activities.result.createReadWriteSessionResult" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activities.result.createReadWriteSessionResult" childKey="username" type="string" required={true}>
              Human-readable name for a User.
            </NestedParam>

            <NestedParam parentKey="activities.result.createReadWriteSessionResult" childKey="apiKeyId" type="string" required={true}>
              Unique identifier for the created API key.
            </NestedParam>

            <NestedParam parentKey="activities.result.createReadWriteSessionResult" childKey="credentialBundle" type="string" required={true}>
              HPKE encrypted credential bundle
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createSubOrganizationResultV6" type="object" required={false}>
          createSubOrganizationResultV6 field

          <Expandable title="createSubOrganizationResultV6 details">
            <NestedParam parentKey="activities.result.createSubOrganizationResultV6" childKey="subOrganizationId" type="string" required={true}>
              subOrganizationId field
            </NestedParam>

            <NestedParam parentKey="activities.result.createSubOrganizationResultV6" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activities.result.createSubOrganizationResultV6.wallet" childKey="walletId" type="string" required={true}>
                  walletId field
                </NestedParam>

                <NestedParam parentKey="activities.result.createSubOrganizationResultV6.wallet" childKey="addresses" type="array" required={true}>
                  A list of account addresses.

                  <Expandable title="addresses details">
                    <NestedParam parentKey="activities.result.createSubOrganizationResultV6.wallet.addresses" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.result.createSubOrganizationResultV6" childKey="rootUserIds" type="array" required={false}>
              rootUserIds field

              <Expandable title="rootUserIds details">
                <NestedParam parentKey="activities.result.createSubOrganizationResultV6.rootUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="deletePrivateKeysResult" type="object" required={false}>
          deletePrivateKeysResult field

          <Expandable title="deletePrivateKeysResult details">
            <NestedParam parentKey="activities.result.deletePrivateKeysResult" childKey="privateKeyIds" type="array" required={true}>
              A list of private key unique identifiers that were removed

              <Expandable title="privateKeyIds details">
                <NestedParam parentKey="activities.result.deletePrivateKeysResult.privateKeyIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="deleteWalletsResult" type="object" required={false}>
          deleteWalletsResult field

          <Expandable title="deleteWalletsResult details">
            <NestedParam parentKey="activities.result.deleteWalletsResult" childKey="walletIds" type="array" required={true}>
              A list of wallet unique identifiers that were removed

              <Expandable title="walletIds details">
                <NestedParam parentKey="activities.result.deleteWalletsResult.walletIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createReadWriteSessionResultV2" type="object" required={false}>
          createReadWriteSessionResultV2 field

          <Expandable title="createReadWriteSessionResultV2 details">
            <NestedParam parentKey="activities.result.createReadWriteSessionResultV2" childKey="organizationId" type="string" required={true}>
              Unique identifier for a given Organization. If the request is being made by a user and their Sub-Organization ID is unknown, this can be the Parent Organization ID. However, using the Sub-Organization ID is preferred due to performance reasons.
            </NestedParam>

            <NestedParam parentKey="activities.result.createReadWriteSessionResultV2" childKey="organizationName" type="string" required={true}>
              Human-readable name for an Organization.
            </NestedParam>

            <NestedParam parentKey="activities.result.createReadWriteSessionResultV2" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activities.result.createReadWriteSessionResultV2" childKey="username" type="string" required={true}>
              Human-readable name for a User.
            </NestedParam>

            <NestedParam parentKey="activities.result.createReadWriteSessionResultV2" childKey="apiKeyId" type="string" required={true}>
              Unique identifier for the created API key.
            </NestedParam>

            <NestedParam parentKey="activities.result.createReadWriteSessionResultV2" childKey="credentialBundle" type="string" required={true}>
              HPKE encrypted credential bundle
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="deleteSubOrganizationResult" type="object" required={false}>
          deleteSubOrganizationResult field

          <Expandable title="deleteSubOrganizationResult details">
            <NestedParam parentKey="activities.result.deleteSubOrganizationResult" childKey="subOrganizationUuid" type="string" required={true}>
              Unique identifier of the sub organization that was removed
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="initOtpAuthResult" type="object" required={false}>
          initOtpAuthResult field

          <Expandable title="initOtpAuthResult details">
            <NestedParam parentKey="activities.result.initOtpAuthResult" childKey="otpId" type="string" required={true}>
              Unique identifier for an OTP authentication
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="otpAuthResult" type="object" required={false}>
          otpAuthResult field

          <Expandable title="otpAuthResult details">
            <NestedParam parentKey="activities.result.otpAuthResult" childKey="userId" type="string" required={true}>
              Unique identifier for the authenticating User.
            </NestedParam>

            <NestedParam parentKey="activities.result.otpAuthResult" childKey="apiKeyId" type="string" required={false}>
              Unique identifier for the created API key.
            </NestedParam>

            <NestedParam parentKey="activities.result.otpAuthResult" childKey="credentialBundle" type="string" required={false}>
              HPKE encrypted credential bundle
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createSubOrganizationResultV7" type="object" required={false}>
          createSubOrganizationResultV7 field

          <Expandable title="createSubOrganizationResultV7 details">
            <NestedParam parentKey="activities.result.createSubOrganizationResultV7" childKey="subOrganizationId" type="string" required={true}>
              subOrganizationId field
            </NestedParam>

            <NestedParam parentKey="activities.result.createSubOrganizationResultV7" childKey="wallet" type="object" required={false}>
              wallet field

              <Expandable title="wallet details">
                <NestedParam parentKey="activities.result.createSubOrganizationResultV7.wallet" childKey="walletId" type="string" required={true}>
                  walletId field
                </NestedParam>

                <NestedParam parentKey="activities.result.createSubOrganizationResultV7.wallet" childKey="addresses" type="array" required={true}>
                  A list of account addresses.

                  <Expandable title="addresses details">
                    <NestedParam parentKey="activities.result.createSubOrganizationResultV7.wallet.addresses" childKey="item" type="string" required={true}>
                      item field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.result.createSubOrganizationResultV7" childKey="rootUserIds" type="array" required={false}>
              rootUserIds field

              <Expandable title="rootUserIds details">
                <NestedParam parentKey="activities.result.createSubOrganizationResultV7.rootUserIds" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="updateWalletResult" type="object" required={false}>
          updateWalletResult field

          <Expandable title="updateWalletResult details">
            <NestedParam parentKey="activities.result.updateWalletResult" childKey="walletId" type="string" required={true}>
              A Wallet ID.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="updatePolicyResultV2" type="object" required={false}>
          updatePolicyResultV2 field

          <Expandable title="updatePolicyResultV2 details">
            <NestedParam parentKey="activities.result.updatePolicyResultV2" childKey="policyId" type="string" required={true}>
              Unique identifier for a given Policy.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="initOtpAuthResultV2" type="object" required={false}>
          initOtpAuthResultV2 field

          <Expandable title="initOtpAuthResultV2 details">
            <NestedParam parentKey="activities.result.initOtpAuthResultV2" childKey="otpId" type="string" required={true}>
              Unique identifier for an OTP authentication
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="initOtpResult" type="object" required={false}>
          initOtpResult field

          <Expandable title="initOtpResult details">
            <NestedParam parentKey="activities.result.initOtpResult" childKey="otpId" type="string" required={true}>
              Unique identifier for an OTP authentication
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="verifyOtpResult" type="object" required={false}>
          verifyOtpResult field

          <Expandable title="verifyOtpResult details">
            <NestedParam parentKey="activities.result.verifyOtpResult" childKey="verificationToken" type="string" required={true}>
              Signed JWT containing a unique id, expiry, verification type, contact. Verification status of a user is updated when the token is consumed (in OTP\_LOGIN requests)
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="otpLoginResult" type="object" required={false}>
          otpLoginResult field

          <Expandable title="otpLoginResult details">
            <NestedParam parentKey="activities.result.otpLoginResult" childKey="session" type="string" required={true}>
              Signed JWT containing an expiry, public key, session type, user id, and organization id
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="stampLoginResult" type="object" required={false}>
          stampLoginResult field

          <Expandable title="stampLoginResult details">
            <NestedParam parentKey="activities.result.stampLoginResult" childKey="session" type="string" required={true}>
              Signed JWT containing an expiry, public key, session type, user id, and organization id
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="oauthLoginResult" type="object" required={false}>
          oauthLoginResult field

          <Expandable title="oauthLoginResult details">
            <NestedParam parentKey="activities.result.oauthLoginResult" childKey="session" type="string" required={true}>
              Signed JWT containing an expiry, public key, session type, user id, and organization id
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="updateUserNameResult" type="object" required={false}>
          updateUserNameResult field

          <Expandable title="updateUserNameResult details">
            <NestedParam parentKey="activities.result.updateUserNameResult" childKey="userId" type="string" required={true}>
              Unique identifier of the User whose name was updated.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="updateUserEmailResult" type="object" required={false}>
          updateUserEmailResult field

          <Expandable title="updateUserEmailResult details">
            <NestedParam parentKey="activities.result.updateUserEmailResult" childKey="userId" type="string" required={true}>
              Unique identifier of the User whose email was updated.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="updateUserPhoneNumberResult" type="object" required={false}>
          updateUserPhoneNumberResult field

          <Expandable title="updateUserPhoneNumberResult details">
            <NestedParam parentKey="activities.result.updateUserPhoneNumberResult" childKey="userId" type="string" required={true}>
              Unique identifier of the User whose phone number was updated.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="initFiatOnRampResult" type="object" required={false}>
          initFiatOnRampResult field

          <Expandable title="initFiatOnRampResult details">
            <NestedParam parentKey="activities.result.initFiatOnRampResult" childKey="onRampUrl" type="string" required={true}>
              Unique URL for a given fiat on-ramp flow.
            </NestedParam>

            <NestedParam parentKey="activities.result.initFiatOnRampResult" childKey="onRampTransactionId" type="string" required={true}>
              Unique identifier used to retrieve transaction statuses for a given fiat on-ramp flow.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="createSmartContractInterfaceResult" type="object" required={false}>
          createSmartContractInterfaceResult field

          <Expandable title="createSmartContractInterfaceResult details">
            <NestedParam parentKey="activities.result.createSmartContractInterfaceResult" childKey="smartContractInterfaceId" type="string" required={true}>
              The ID of the created Smart Contract Interface.
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.result" childKey="deleteSmartContractInterfaceResult" type="object" required={false}>
          deleteSmartContractInterfaceResult field

          <Expandable title="deleteSmartContractInterfaceResult details">
            <NestedParam parentKey="activities.result.deleteSmartContractInterfaceResult" childKey="smartContractInterfaceId" type="string" required={true}>
              The ID of the deleted Smart Contract Interface.
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activities" childKey="votes" type="array" required={true}>
      A list of objects representing a particular User's approval or rejection of a Consensus request, including all relevant metadata.

      <Expandable title="votes details">
        <NestedParam parentKey="activities.votes" childKey="id" type="string" required={true}>
          Unique identifier for a given Vote object.
        </NestedParam>

        <NestedParam parentKey="activities.votes" childKey="userId" type="string" required={true}>
          Unique identifier for a given User.
        </NestedParam>

        <NestedParam parentKey="activities.votes" childKey="user" type="object" required={true}>
          user field

          <Expandable title="user details">
            <NestedParam parentKey="activities.votes.user" childKey="userId" type="string" required={true}>
              Unique identifier for a given User.
            </NestedParam>

            <NestedParam parentKey="activities.votes.user" childKey="userName" type="string" required={true}>
              Human-readable name for a User.
            </NestedParam>

            <NestedParam parentKey="activities.votes.user" childKey="userEmail" type="string" required={false}>
              The user's email address.
            </NestedParam>

            <NestedParam parentKey="activities.votes.user" childKey="userPhoneNumber" type="string" required={false}>
              The user's phone number in E.164 format e.g. +13214567890
            </NestedParam>

            <NestedParam parentKey="activities.votes.user" childKey="authenticators" type="array" required={true}>
              A list of Authenticator parameters.

              <Expandable title="authenticators details">
                <NestedParam parentKey="activities.votes.user.authenticators" childKey="transports" type="array" required={true}>
                  Types of transports that may be used by an Authenticator (e.g., USB, NFC, BLE).

                  <Expandable title="transports details">
                    <NestedParam parentKey="activities.votes.user.authenticators.transports" childKey="item" type="enum" required={true}>
                      item field

                      Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.authenticators" childKey="attestationType" type="string" required={true}>
                  attestationType field
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.authenticators" childKey="aaguid" type="string" required={true}>
                  Identifier indicating the type of the Security Key.
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.authenticators" childKey="credentialId" type="string" required={true}>
                  Unique identifier for a WebAuthn credential.
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.authenticators" childKey="model" type="string" required={true}>
                  The type of Authenticator device.
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.authenticators" childKey="credential" type="object" required={true}>
                  credential field

                  <Expandable title="credential details">
                    <NestedParam parentKey="activities.votes.user.authenticators.credential" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activities.votes.user.authenticators.credential" childKey="type" type="enum" required={true}>
                      type field

                      Enum options: `CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR`, `CREDENTIAL_TYPE_API_KEY_P256`, `CREDENTIAL_TYPE_RECOVER_USER_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_SECP256K1`, `CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_ED25519`, `CREDENTIAL_TYPE_OTP_AUTH_KEY_P256`, `CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256`, `CREDENTIAL_TYPE_OAUTH_KEY_P256`, `CREDENTIAL_TYPE_LOGIN`
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.authenticators" childKey="authenticatorId" type="string" required={true}>
                  Unique identifier for a given Authenticator.
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.authenticators" childKey="authenticatorName" type="string" required={true}>
                  Human-readable name for an Authenticator.
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.authenticators" childKey="createdAt" type="object" required={true}>
                  createdAt field

                  <Expandable title="createdAt details">
                    <NestedParam parentKey="activities.votes.user.authenticators.createdAt" childKey="seconds" type="string" required={true}>
                      seconds field
                    </NestedParam>

                    <NestedParam parentKey="activities.votes.user.authenticators.createdAt" childKey="nanos" type="string" required={true}>
                      nanos field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.authenticators" childKey="updatedAt" type="object" required={true}>
                  updatedAt field

                  <Expandable title="updatedAt details">
                    <NestedParam parentKey="activities.votes.user.authenticators.updatedAt" childKey="seconds" type="string" required={true}>
                      seconds field
                    </NestedParam>

                    <NestedParam parentKey="activities.votes.user.authenticators.updatedAt" childKey="nanos" type="string" required={true}>
                      nanos field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.votes.user" childKey="apiKeys" type="array" required={true}>
              A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

              <Expandable title="apiKeys details">
                <NestedParam parentKey="activities.votes.user.apiKeys" childKey="credential" type="object" required={true}>
                  credential field

                  <Expandable title="credential details">
                    <NestedParam parentKey="activities.votes.user.apiKeys.credential" childKey="publicKey" type="string" required={true}>
                      The public component of a cryptographic key pair used to sign messages and transactions.
                    </NestedParam>

                    <NestedParam parentKey="activities.votes.user.apiKeys.credential" childKey="type" type="enum" required={true}>
                      type field

                      Enum options: `CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR`, `CREDENTIAL_TYPE_API_KEY_P256`, `CREDENTIAL_TYPE_RECOVER_USER_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_SECP256K1`, `CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_ED25519`, `CREDENTIAL_TYPE_OTP_AUTH_KEY_P256`, `CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256`, `CREDENTIAL_TYPE_OAUTH_KEY_P256`, `CREDENTIAL_TYPE_LOGIN`
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.apiKeys" childKey="apiKeyId" type="string" required={true}>
                  Unique identifier for a given API Key.
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.apiKeys" childKey="apiKeyName" type="string" required={true}>
                  Human-readable name for an API Key.
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.apiKeys" childKey="createdAt" type="object" required={true}>
                  createdAt field

                  <Expandable title="createdAt details">
                    <NestedParam parentKey="activities.votes.user.apiKeys.createdAt" childKey="seconds" type="string" required={true}>
                      seconds field
                    </NestedParam>

                    <NestedParam parentKey="activities.votes.user.apiKeys.createdAt" childKey="nanos" type="string" required={true}>
                      nanos field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.apiKeys" childKey="updatedAt" type="object" required={true}>
                  updatedAt field

                  <Expandable title="updatedAt details">
                    <NestedParam parentKey="activities.votes.user.apiKeys.updatedAt" childKey="seconds" type="string" required={true}>
                      seconds field
                    </NestedParam>

                    <NestedParam parentKey="activities.votes.user.apiKeys.updatedAt" childKey="nanos" type="string" required={true}>
                      nanos field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.apiKeys" childKey="expirationSeconds" type="string" required={false}>
                  Optional window (in seconds) indicating how long the API Key should last.
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.votes.user" childKey="userTags" type="array" required={true}>
              A list of User Tag IDs.

              <Expandable title="userTags details">
                <NestedParam parentKey="activities.votes.user.userTags" childKey="item" type="string" required={true}>
                  item field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.votes.user" childKey="oauthProviders" type="array" required={true}>
              A list of Oauth Providers.

              <Expandable title="oauthProviders details">
                <NestedParam parentKey="activities.votes.user.oauthProviders" childKey="providerId" type="string" required={true}>
                  Unique identifier for an OAuth Provider
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.oauthProviders" childKey="providerName" type="string" required={true}>
                  Human-readable name to identify a Provider.
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.oauthProviders" childKey="issuer" type="string" required={true}>
                  The issuer of the token, typically a URL indicating the authentication server, e.g [https://accounts.google.com](https://accounts.google.com)
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.oauthProviders" childKey="audience" type="string" required={true}>
                  Expected audience ('aud' attribute of the signed token) which represents the app ID
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.oauthProviders" childKey="subject" type="string" required={true}>
                  Expected subject ('sub' attribute of the signed token) which represents the user ID
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.oauthProviders" childKey="createdAt" type="object" required={true}>
                  createdAt field

                  <Expandable title="createdAt details">
                    <NestedParam parentKey="activities.votes.user.oauthProviders.createdAt" childKey="seconds" type="string" required={true}>
                      seconds field
                    </NestedParam>

                    <NestedParam parentKey="activities.votes.user.oauthProviders.createdAt" childKey="nanos" type="string" required={true}>
                      nanos field
                    </NestedParam>
                  </Expandable>
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.oauthProviders" childKey="updatedAt" type="object" required={true}>
                  updatedAt field

                  <Expandable title="updatedAt details">
                    <NestedParam parentKey="activities.votes.user.oauthProviders.updatedAt" childKey="seconds" type="string" required={true}>
                      seconds field
                    </NestedParam>

                    <NestedParam parentKey="activities.votes.user.oauthProviders.updatedAt" childKey="nanos" type="string" required={true}>
                      nanos field
                    </NestedParam>
                  </Expandable>
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.votes.user" childKey="createdAt" type="object" required={true}>
              createdAt field

              <Expandable title="createdAt details">
                <NestedParam parentKey="activities.votes.user.createdAt" childKey="seconds" type="string" required={true}>
                  seconds field
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.createdAt" childKey="nanos" type="string" required={true}>
                  nanos field
                </NestedParam>
              </Expandable>
            </NestedParam>

            <NestedParam parentKey="activities.votes.user" childKey="updatedAt" type="object" required={true}>
              updatedAt field

              <Expandable title="updatedAt details">
                <NestedParam parentKey="activities.votes.user.updatedAt" childKey="seconds" type="string" required={true}>
                  seconds field
                </NestedParam>

                <NestedParam parentKey="activities.votes.user.updatedAt" childKey="nanos" type="string" required={true}>
                  nanos field
                </NestedParam>
              </Expandable>
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="activities.votes" childKey="activityId" type="string" required={true}>
          Unique identifier for a given Activity object.
        </NestedParam>

        <NestedParam parentKey="activities.votes" childKey="selection" type="enum" required={true}>
          selection field

          Enum options: `VOTE_SELECTION_APPROVED`, `VOTE_SELECTION_REJECTED`
        </NestedParam>

        <NestedParam parentKey="activities.votes" childKey="message" type="string" required={true}>
          The raw message being signed within a Vote.
        </NestedParam>

        <NestedParam parentKey="activities.votes" childKey="publicKey" type="string" required={true}>
          The public component of a cryptographic key pair used to sign messages and transactions.
        </NestedParam>

        <NestedParam parentKey="activities.votes" childKey="signature" type="string" required={true}>
          The signature applied to a particular vote.
        </NestedParam>

        <NestedParam parentKey="activities.votes" childKey="scheme" type="string" required={true}>
          Method used to produce a signature.
        </NestedParam>

        <NestedParam parentKey="activities.votes" childKey="createdAt" type="object" required={true}>
          createdAt field

          <Expandable title="createdAt details">
            <NestedParam parentKey="activities.votes.createdAt" childKey="seconds" type="string" required={true}>
              seconds field
            </NestedParam>

            <NestedParam parentKey="activities.votes.createdAt" childKey="nanos" type="string" required={true}>
              nanos field
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activities" childKey="fingerprint" type="string" required={true}>
      An artifact verifying a User's action.
    </NestedParam>

    <NestedParam parentKey="activities" childKey="canApprove" type="boolean" required={true}>
      canApprove field
    </NestedParam>

    <NestedParam parentKey="activities" childKey="canReject" type="boolean" required={true}>
      canReject field
    </NestedParam>

    <NestedParam parentKey="activities" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="activities.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="activities.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activities" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="activities.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="activities.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="activities" childKey="failure" type="object" required={false}>
      failure field

      <Expandable title="failure details">
        <NestedParam parentKey="activities.failure" childKey="code" type="number" required={false}>
          code field
        </NestedParam>

        <NestedParam parentKey="activities.failure" childKey="message" type="string" required={false}>
          message field
        </NestedParam>

        <NestedParam parentKey="activities.failure" childKey="details" type="array" required={false}>
          details field

          <Expandable title="details details">
            <NestedParam parentKey="activities.failure.details" childKey="@type" type="string" required={false}>
              @type field
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/list_activities \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>",
      "filterByStatus": [
          "<ACTIVITY_STATUS_CREATED>"
      ],
      "paginationOptions": {
          "limit": "<string>",
          "before": "<string>",
          "after": "<string>"
      },
      "filterByType": [
          "<ACTIVITY_TYPE_CREATE_API_KEYS>"
      ]
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().listActivities({
    organizationId: "<string> (Unique identifier for a given organization.)",
    filterByStatus: "<ACTIVITY_STATUS_CREATED>" // Array of activity statuses filtering which activities will be listed in the response.,
    paginationOptions: { // paginationOptions field,
      limit: "<string> (A limit of the number of object to be returned, between 1 and 100. Defaults to 10.)",
      before: "<string> (A pagination cursor. This is an object ID that enables you to fetch all objects before this ID.)",
      after: "<string> (A pagination cursor. This is an object ID that enables you to fetch all objects after this ID.)",
    },
    filterByType: "<ACTIVITY_TYPE_CREATE_API_KEYS>" // Array of activity types filtering which activities will be listed in the response.
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "activities": [
      {
        "id": "<string>",
        "organizationId": "<string>",
        "status": "<ACTIVITY_STATUS_CREATED>",
        "type": "<ACTIVITY_TYPE_CREATE_API_KEYS>",
        "intent": {
          "createOrganizationIntent": {
            "organizationName": "<string>",
            "rootEmail": "<string>",
            "rootAuthenticator": {
              "authenticatorName": "<string>",
              "userId": "<string>",
              "attestation": {
                "id": "<string>",
                "type": "<public-key>",
                "rawId": "<string>",
                "authenticatorAttachment": "<cross-platform>",
                "response": {
                  "clientDataJson": "<string>",
                  "attestationObject": "<string>",
                  "transports": [
                    "<AUTHENTICATOR_TRANSPORT_BLE>"
                  ],
                  "authenticatorAttachment": "<cross-platform>"
                },
                "clientExtensionResults": {
                  "appid": "<boolean>",
                  "appidExclude": "<boolean>",
                  "credProps": {
                    "rk": "<boolean>"
                  }
                }
              },
              "challenge": "<string>"
            },
            "rootUserId": "<string>"
          },
          "createAuthenticatorsIntent": {
            "authenticators": [
              {
                "authenticatorName": "<string>",
                "userId": "<string>",
                "attestation": {
                  "id": "<string>",
                  "type": "<public-key>",
                  "rawId": "<string>",
                  "authenticatorAttachment": "<cross-platform>",
                  "response": {
                    "clientDataJson": "<string>",
                    "attestationObject": "<string>",
                    "transports": [
                      "<AUTHENTICATOR_TRANSPORT_BLE>"
                    ],
                    "authenticatorAttachment": "<cross-platform>"
                  },
                  "clientExtensionResults": {
                    "appid": "<boolean>",
                    "appidExclude": "<boolean>",
                    "credProps": {
                      "rk": "<boolean>"
                    }
                  }
                },
                "challenge": "<string>"
              }
            ],
            "userId": "<string>"
          },
          "createUsersIntent": {
            "users": [
              {
                "userName": "<string>",
                "userEmail": "<string>",
                "accessType": "<ACCESS_TYPE_WEB>",
                "apiKeys": [
                  {
                    "apiKeyName": "<string>",
                    "publicKey": "<string>",
                    "expirationSeconds": "<string>"
                  }
                ],
                "authenticators": [
                  {
                    "authenticatorName": "<string>",
                    "userId": "<string>",
                    "attestation": {
                      "id": "<string>",
                      "type": "<public-key>",
                      "rawId": "<string>",
                      "authenticatorAttachment": "<cross-platform>",
                      "response": {
                        "clientDataJson": "<string>",
                        "attestationObject": "<string>",
                        "transports": [
                          "<AUTHENTICATOR_TRANSPORT_BLE>"
                        ],
                        "authenticatorAttachment": "<cross-platform>"
                      },
                      "clientExtensionResults": {
                        "appid": "<boolean>",
                        "appidExclude": "<boolean>",
                        "credProps": {
                          "rk": "<boolean>"
                        }
                      }
                    },
                    "challenge": "<string>"
                  }
                ],
                "userTags": [
                  "<string>"
                ]
              }
            ]
          },
          "createPrivateKeysIntent": {
            "privateKeys": [
              {
                "privateKeyName": "<string>",
                "curve": "<CURVE_SECP256K1>",
                "privateKeyTags": [
                  "<string>"
                ],
                "addressFormats": [
                  "<ADDRESS_FORMAT_UNCOMPRESSED>"
                ]
              }
            ]
          },
          "signRawPayloadIntent": {
            "privateKeyId": "<string>",
            "payload": "<string>",
            "encoding": "<PAYLOAD_ENCODING_HEXADECIMAL>",
            "hashFunction": "<HASH_FUNCTION_NO_OP>"
          },
          "createInvitationsIntent": {
            "invitations": [
              {
                "receiverUserName": "<string>",
                "receiverUserEmail": "<string>",
                "receiverUserTags": [
                  "<string>"
                ],
                "accessType": "<ACCESS_TYPE_WEB>",
                "senderUserId": "<string>"
              }
            ]
          },
          "acceptInvitationIntent": {
            "invitationId": "<string>",
            "userId": "<string>",
            "authenticator": {
              "authenticatorName": "<string>",
              "userId": "<string>",
              "attestation": {
                "id": "<string>",
                "type": "<public-key>",
                "rawId": "<string>",
                "authenticatorAttachment": "<cross-platform>",
                "response": {
                  "clientDataJson": "<string>",
                  "attestationObject": "<string>",
                  "transports": [
                    "<AUTHENTICATOR_TRANSPORT_BLE>"
                  ],
                  "authenticatorAttachment": "<cross-platform>"
                },
                "clientExtensionResults": {
                  "appid": "<boolean>",
                  "appidExclude": "<boolean>",
                  "credProps": {
                    "rk": "<boolean>"
                  }
                }
              },
              "challenge": "<string>"
            }
          },
          "createPolicyIntent": {
            "policyName": "<string>",
            "selectors": [
              {
                "subject": "<string>",
                "operator": "<OPERATOR_EQUAL>",
                "target": "<string>"
              }
            ],
            "effect": "<EFFECT_ALLOW>",
            "notes": "<string>"
          },
          "disablePrivateKeyIntent": {
            "privateKeyId": "<string>"
          },
          "deleteUsersIntent": {
            "userIds": [
              "<string>"
            ]
          },
          "deleteAuthenticatorsIntent": {
            "userId": "<string>",
            "authenticatorIds": [
              "<string>"
            ]
          },
          "deleteInvitationIntent": {
            "invitationId": "<string>"
          },
          "deleteOrganizationIntent": {
            "organizationId": "<string>"
          },
          "deletePolicyIntent": {
            "policyId": "<string>"
          },
          "createUserTagIntent": {
            "userTagName": "<string>",
            "userIds": [
              "<string>"
            ]
          },
          "deleteUserTagsIntent": {
            "userTagIds": [
              "<string>"
            ]
          },
          "signTransactionIntent": {
            "privateKeyId": "<string>",
            "unsignedTransaction": "<string>",
            "type": "<TRANSACTION_TYPE_ETHEREUM>"
          },
          "createApiKeysIntent": {
            "apiKeys": [
              {
                "apiKeyName": "<string>",
                "publicKey": "<string>",
                "expirationSeconds": "<string>"
              }
            ],
            "userId": "<string>"
          },
          "deleteApiKeysIntent": {
            "userId": "<string>",
            "apiKeyIds": [
              "<string>"
            ]
          },
          "approveActivityIntent": {
            "fingerprint": "<string>"
          },
          "rejectActivityIntent": {
            "fingerprint": "<string>"
          },
          "createPrivateKeyTagIntent": {
            "privateKeyTagName": "<string>",
            "privateKeyIds": [
              "<string>"
            ]
          },
          "deletePrivateKeyTagsIntent": {
            "privateKeyTagIds": [
              "<string>"
            ]
          },
          "createPolicyIntentV2": {
            "policyName": "<string>",
            "selectors": [
              {
                "subject": "<string>",
                "operator": "<OPERATOR_EQUAL>",
                "targets": [
                  "<string>"
                ]
              }
            ],
            "effect": "<EFFECT_ALLOW>",
            "notes": "<string>"
          },
          "setPaymentMethodIntent": {
            "number": "<string>",
            "cvv": "<string>",
            "expiryMonth": "<string>",
            "expiryYear": "<string>",
            "cardHolderEmail": "<string>",
            "cardHolderName": "<string>"
          },
          "activateBillingTierIntent": {
            "productId": "<string>"
          },
          "deletePaymentMethodIntent": {
            "paymentMethodId": "<string>"
          },
          "createPolicyIntentV3": {
            "policyName": "<string>",
            "effect": "<EFFECT_ALLOW>",
            "condition": "<string>",
            "consensus": "<string>",
            "notes": "<string>"
          },
          "createApiOnlyUsersIntent": {
            "apiOnlyUsers": [
              {
                "userName": "<string>",
                "userEmail": "<string>",
                "userTags": [
                  "<string>"
                ],
                "apiKeys": [
                  {
                    "apiKeyName": "<string>",
                    "publicKey": "<string>",
                    "expirationSeconds": "<string>"
                  }
                ]
              }
            ]
          },
          "updateRootQuorumIntent": {
            "threshold": "<number>",
            "userIds": [
              "<string>"
            ]
          },
          "updateUserTagIntent": {
            "userTagId": "<string>",
            "newUserTagName": "<string>",
            "addUserIds": [
              "<string>"
            ],
            "removeUserIds": [
              "<string>"
            ]
          },
          "updatePrivateKeyTagIntent": {
            "privateKeyTagId": "<string>",
            "newPrivateKeyTagName": "<string>",
            "addPrivateKeyIds": [
              "<string>"
            ],
            "removePrivateKeyIds": [
              "<string>"
            ]
          },
          "createAuthenticatorsIntentV2": {
            "authenticators": [
              {
                "authenticatorName": "<string>",
                "challenge": "<string>",
                "attestation": {
                  "credentialId": "<string>",
                  "clientDataJson": "<string>",
                  "attestationObject": "<string>",
                  "transports": [
                    "<AUTHENTICATOR_TRANSPORT_BLE>"
                  ]
                }
              }
            ],
            "userId": "<string>"
          },
          "acceptInvitationIntentV2": {
            "invitationId": "<string>",
            "userId": "<string>",
            "authenticator": {
              "authenticatorName": "<string>",
              "challenge": "<string>",
              "attestation": {
                "credentialId": "<string>",
                "clientDataJson": "<string>",
                "attestationObject": "<string>",
                "transports": [
                  "<AUTHENTICATOR_TRANSPORT_BLE>"
                ]
              }
            }
          },
          "createOrganizationIntentV2": {
            "organizationName": "<string>",
            "rootEmail": "<string>",
            "rootAuthenticator": {
              "authenticatorName": "<string>",
              "challenge": "<string>",
              "attestation": {
                "credentialId": "<string>",
                "clientDataJson": "<string>",
                "attestationObject": "<string>",
                "transports": [
                  "<AUTHENTICATOR_TRANSPORT_BLE>"
                ]
              }
            },
            "rootUserId": "<string>"
          },
          "createUsersIntentV2": {
            "users": [
              {
                "userName": "<string>",
                "userEmail": "<string>",
                "apiKeys": [
                  {
                    "apiKeyName": "<string>",
                    "publicKey": "<string>",
                    "expirationSeconds": "<string>"
                  }
                ],
                "authenticators": [
                  {
                    "authenticatorName": "<string>",
                    "challenge": "<string>",
                    "attestation": {
                      "credentialId": "<string>",
                      "clientDataJson": "<string>",
                      "attestationObject": "<string>",
                      "transports": [
                        "<AUTHENTICATOR_TRANSPORT_BLE>"
                      ]
                    }
                  }
                ],
                "userTags": [
                  "<string>"
                ]
              }
            ]
          },
          "createSubOrganizationIntent": {
            "name": "<string>",
            "rootAuthenticator": {
              "authenticatorName": "<string>",
              "challenge": "<string>",
              "attestation": {
                "credentialId": "<string>",
                "clientDataJson": "<string>",
                "attestationObject": "<string>",
                "transports": [
                  "<AUTHENTICATOR_TRANSPORT_BLE>"
                ]
              }
            }
          },
          "createSubOrganizationIntentV2": {
            "subOrganizationName": "<string>",
            "rootUsers": [
              {
                "userName": "<string>",
                "userEmail": "<string>",
                "apiKeys": [
                  {
                    "apiKeyName": "<string>",
                    "publicKey": "<string>",
                    "expirationSeconds": "<string>"
                  }
                ],
                "authenticators": [
                  {
                    "authenticatorName": "<string>",
                    "challenge": "<string>",
                    "attestation": {
                      "credentialId": "<string>",
                      "clientDataJson": "<string>",
                      "attestationObject": "<string>",
                      "transports": [
                        "<AUTHENTICATOR_TRANSPORT_BLE>"
                      ]
                    }
                  }
                ]
              }
            ],
            "rootQuorumThreshold": "<number>"
          },
          "updateAllowedOriginsIntent": {
            "allowedOrigins": [
              "<string>"
            ]
          },
          "createPrivateKeysIntentV2": {
            "privateKeys": [
              {
                "privateKeyName": "<string>",
                "curve": "<CURVE_SECP256K1>",
                "privateKeyTags": [
                  "<string>"
                ],
                "addressFormats": [
                  "<ADDRESS_FORMAT_UNCOMPRESSED>"
                ]
              }
            ]
          },
          "updateUserIntent": {
            "userId": "<string>",
            "userName": "<string>",
            "userEmail": "<string>",
            "userTagIds": [
              "<string>"
            ],
            "userPhoneNumber": "<string>"
          },
          "updatePolicyIntent": {
            "policyId": "<string>",
            "policyName": "<string>",
            "policyEffect": "<EFFECT_ALLOW>",
            "policyCondition": "<string>",
            "policyConsensus": "<string>",
            "policyNotes": "<string>"
          },
          "setPaymentMethodIntentV2": {
            "paymentMethodId": "<string>",
            "cardHolderEmail": "<string>",
            "cardHolderName": "<string>"
          },
          "createSubOrganizationIntentV3": {
            "subOrganizationName": "<string>",
            "rootUsers": [
              {
                "userName": "<string>",
                "userEmail": "<string>",
                "apiKeys": [
                  {
                    "apiKeyName": "<string>",
                    "publicKey": "<string>",
                    "expirationSeconds": "<string>"
                  }
                ],
                "authenticators": [
                  {
                    "authenticatorName": "<string>",
                    "challenge": "<string>",
                    "attestation": {
                      "credentialId": "<string>",
                      "clientDataJson": "<string>",
                      "attestationObject": "<string>",
                      "transports": [
                        "<AUTHENTICATOR_TRANSPORT_BLE>"
                      ]
                    }
                  }
                ]
              }
            ],
            "rootQuorumThreshold": "<number>",
            "privateKeys": [
              {
                "privateKeyName": "<string>",
                "curve": "<CURVE_SECP256K1>",
                "privateKeyTags": [
                  "<string>"
                ],
                "addressFormats": [
                  "<ADDRESS_FORMAT_UNCOMPRESSED>"
                ]
              }
            ]
          },
          "createWalletIntent": {
            "walletName": "<string>",
            "accounts": [
              {
                "curve": "<CURVE_SECP256K1>",
                "pathFormat": "<PATH_FORMAT_BIP32>",
                "path": "<string>",
                "addressFormat": "<ADDRESS_FORMAT_UNCOMPRESSED>"
              }
            ],
            "mnemonicLength": "<number>"
          },
          "createWalletAccountsIntent": {
            "walletId": "<string>",
            "accounts": [
              {
                "curve": "<CURVE_SECP256K1>",
                "pathFormat": "<PATH_FORMAT_BIP32>",
                "path": "<string>",
                "addressFormat": "<ADDRESS_FORMAT_UNCOMPRESSED>"
              }
            ]
          },
          "initUserEmailRecoveryIntent": {
            "email": "<string>",
            "targetPublicKey": "<string>",
            "expirationSeconds": "<string>",
            "emailCustomization": {
              "appName": "<string>",
              "logoUrl": "<string>",
              "magicLinkTemplate": "<string>",
              "templateVariables": "<string>",
              "templateId": "<string>"
            }
          },
          "recoverUserIntent": {
            "authenticator": {
              "authenticatorName": "<string>",
              "challenge": "<string>",
              "attestation": {
                "credentialId": "<string>",
                "clientDataJson": "<string>",
                "attestationObject": "<string>",
                "transports": [
                  "<AUTHENTICATOR_TRANSPORT_BLE>"
                ]
              }
            },
            "userId": "<string>"
          },
          "setOrganizationFeatureIntent": {
            "name": "<FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY>",
            "value": "<string>"
          },
          "removeOrganizationFeatureIntent": {
            "name": "<FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY>"
          },
          "signRawPayloadIntentV2": {
            "signWith": "<string>",
            "payload": "<string>",
            "encoding": "<PAYLOAD_ENCODING_HEXADECIMAL>",
            "hashFunction": "<HASH_FUNCTION_NO_OP>"
          },
          "signTransactionIntentV2": {
            "signWith": "<string>",
            "unsignedTransaction": "<string>",
            "type": "<TRANSACTION_TYPE_ETHEREUM>"
          },
          "exportPrivateKeyIntent": {
            "privateKeyId": "<string>",
            "targetPublicKey": "<string>"
          },
          "exportWalletIntent": {
            "walletId": "<string>",
            "targetPublicKey": "<string>",
            "language": "<MNEMONIC_LANGUAGE_ENGLISH>"
          },
          "createSubOrganizationIntentV4": {
            "subOrganizationName": "<string>",
            "rootUsers": [
              {
                "userName": "<string>",
                "userEmail": "<string>",
                "apiKeys": [
                  {
                    "apiKeyName": "<string>",
                    "publicKey": "<string>",
                    "expirationSeconds": "<string>"
                  }
                ],
                "authenticators": [
                  {
                    "authenticatorName": "<string>",
                    "challenge": "<string>",
                    "attestation": {
                      "credentialId": "<string>",
                      "clientDataJson": "<string>",
                      "attestationObject": "<string>",
                      "transports": [
                        "<AUTHENTICATOR_TRANSPORT_BLE>"
                      ]
                    }
                  }
                ]
              }
            ],
            "rootQuorumThreshold": "<number>",
            "wallet": {
              "walletName": "<string>",
              "accounts": [
                {
                  "curve": "<CURVE_SECP256K1>",
                  "pathFormat": "<PATH_FORMAT_BIP32>",
                  "path": "<string>",
                  "addressFormat": "<ADDRESS_FORMAT_UNCOMPRESSED>"
                }
              ],
              "mnemonicLength": "<number>"
            },
            "disableEmailRecovery": "<boolean>",
            "disableEmailAuth": "<boolean>"
          },
          "emailAuthIntent": {
            "email": "<string>",
            "targetPublicKey": "<string>",
            "apiKeyName": "<string>",
            "expirationSeconds": "<string>",
            "emailCustomization": {
              "appName": "<string>",
              "logoUrl": "<string>",
              "magicLinkTemplate": "<string>",
              "templateVariables": "<string>",
              "templateId": "<string>"
            },
            "invalidateExisting": "<boolean>",
            "sendFromEmailAddress": "<string>",
            "sendFromEmailSenderName": "<string>",
            "replyToEmailAddress": "<string>"
          },
          "exportWalletAccountIntent": {
            "address": "<string>",
            "targetPublicKey": "<string>"
          },
          "initImportWalletIntent": {
            "userId": "<string>"
          },
          "importWalletIntent": {
            "userId": "<string>",
            "walletName": "<string>",
            "encryptedBundle": "<string>",
            "accounts": [
              {
                "curve": "<CURVE_SECP256K1>",
                "pathFormat": "<PATH_FORMAT_BIP32>",
                "path": "<string>",
                "addressFormat": "<ADDRESS_FORMAT_UNCOMPRESSED>"
              }
            ]
          },
          "initImportPrivateKeyIntent": {
            "userId": "<string>"
          },
          "importPrivateKeyIntent": {
            "userId": "<string>",
            "privateKeyName": "<string>",
            "encryptedBundle": "<string>",
            "curve": "<CURVE_SECP256K1>",
            "addressFormats": [
              "<ADDRESS_FORMAT_UNCOMPRESSED>"
            ]
          },
          "createPoliciesIntent": {
            "policies": [
              {
                "policyName": "<string>",
                "effect": "<EFFECT_ALLOW>",
                "condition": "<string>",
                "consensus": "<string>",
                "notes": "<string>"
              }
            ]
          },
          "signRawPayloadsIntent": {
            "signWith": "<string>",
            "payloads": [
              "<string>"
            ],
            "encoding": "<PAYLOAD_ENCODING_HEXADECIMAL>",
            "hashFunction": "<HASH_FUNCTION_NO_OP>"
          },
          "createReadOnlySessionIntent": "<object>",
          "createOauthProvidersIntent": {
            "userId": "<string>",
            "oauthProviders": [
              {
                "providerName": "<string>",
                "oidcToken": "<string>"
              }
            ]
          },
          "deleteOauthProvidersIntent": {
            "userId": "<string>",
            "providerIds": [
              "<string>"
            ]
          },
          "createSubOrganizationIntentV5": {
            "subOrganizationName": "<string>",
            "rootUsers": [
              {
                "userName": "<string>",
                "userEmail": "<string>",
                "apiKeys": [
                  {
                    "apiKeyName": "<string>",
                    "publicKey": "<string>",
                    "expirationSeconds": "<string>"
                  }
                ],
                "authenticators": [
                  {
                    "authenticatorName": "<string>",
                    "challenge": "<string>",
                    "attestation": {
                      "credentialId": "<string>",
                      "clientDataJson": "<string>",
                      "attestationObject": "<string>",
                      "transports": [
                        "<AUTHENTICATOR_TRANSPORT_BLE>"
                      ]
                    }
                  }
                ],
                "oauthProviders": [
                  {
                    "providerName": "<string>",
                    "oidcToken": "<string>"
                  }
                ]
              }
            ],
            "rootQuorumThreshold": "<number>",
            "wallet": {
              "walletName": "<string>",
              "accounts": [
                {
                  "curve": "<CURVE_SECP256K1>",
                  "pathFormat": "<PATH_FORMAT_BIP32>",
                  "path": "<string>",
                  "addressFormat": "<ADDRESS_FORMAT_UNCOMPRESSED>"
                }
              ],
              "mnemonicLength": "<number>"
            },
            "disableEmailRecovery": "<boolean>",
            "disableEmailAuth": "<boolean>"
          },
          "oauthIntent": {
            "oidcToken": "<string>",
            "targetPublicKey": "<string>",
            "apiKeyName": "<string>",
            "expirationSeconds": "<string>",
            "invalidateExisting": "<boolean>"
          },
          "createApiKeysIntentV2": {
            "apiKeys": [
              {
                "apiKeyName": "<string>",
                "publicKey": "<string>",
                "curveType": "<API_KEY_CURVE_P256>",
                "expirationSeconds": "<string>"
              }
            ],
            "userId": "<string>"
          },
          "createReadWriteSessionIntent": {
            "targetPublicKey": "<string>",
            "email": "<string>",
            "apiKeyName": "<string>",
            "expirationSeconds": "<string>"
          },
          "emailAuthIntentV2": {
            "email": "<string>",
            "targetPublicKey": "<string>",
            "apiKeyName": "<string>",
            "expirationSeconds": "<string>",
            "emailCustomization": {
              "appName": "<string>",
              "logoUrl": "<string>",
              "magicLinkTemplate": "<string>",
              "templateVariables": "<string>",
              "templateId": "<string>"
            },
            "invalidateExisting": "<boolean>",
            "sendFromEmailAddress": "<string>",
            "sendFromEmailSenderName": "<string>",
            "replyToEmailAddress": "<string>"
          },
          "createSubOrganizationIntentV6": {
            "subOrganizationName": "<string>",
            "rootUsers": [
              {
                "userName": "<string>",
                "userEmail": "<string>",
                "apiKeys": [
                  {
                    "apiKeyName": "<string>",
                    "publicKey": "<string>",
                    "curveType": "<API_KEY_CURVE_P256>",
                    "expirationSeconds": "<string>"
                  }
                ],
                "authenticators": [
                  {
                    "authenticatorName": "<string>",
                    "challenge": "<string>",
                    "attestation": {
                      "credentialId": "<string>",
                      "clientDataJson": "<string>",
                      "attestationObject": "<string>",
                      "transports": [
                        "<AUTHENTICATOR_TRANSPORT_BLE>"
                      ]
                    }
                  }
                ],
                "oauthProviders": [
                  {
                    "providerName": "<string>",
                    "oidcToken": "<string>"
                  }
                ]
              }
            ],
            "rootQuorumThreshold": "<number>",
            "wallet": {
              "walletName": "<string>",
              "accounts": [
                {
                  "curve": "<CURVE_SECP256K1>",
                  "pathFormat": "<PATH_FORMAT_BIP32>",
                  "path": "<string>",
                  "addressFormat": "<ADDRESS_FORMAT_UNCOMPRESSED>"
                }
              ],
              "mnemonicLength": "<number>"
            },
            "disableEmailRecovery": "<boolean>",
            "disableEmailAuth": "<boolean>"
          },
          "deletePrivateKeysIntent": {
            "privateKeyIds": [
              "<string>"
            ],
            "deleteWithoutExport": "<boolean>"
          },
          "deleteWalletsIntent": {
            "walletIds": [
              "<string>"
            ],
            "deleteWithoutExport": "<boolean>"
          },
          "createReadWriteSessionIntentV2": {
            "targetPublicKey": "<string>",
            "userId": "<string>",
            "apiKeyName": "<string>",
            "expirationSeconds": "<string>",
            "invalidateExisting": "<boolean>"
          },
          "deleteSubOrganizationIntent": {
            "deleteWithoutExport": "<boolean>"
          },
          "initOtpAuthIntent": {
            "otpType": "<string>",
            "contact": "<string>",
            "emailCustomization": {
              "appName": "<string>",
              "logoUrl": "<string>",
              "magicLinkTemplate": "<string>",
              "templateVariables": "<string>",
              "templateId": "<string>"
            },
            "smsCustomization": {
              "template": "<string>"
            },
            "userIdentifier": "<string>",
            "sendFromEmailAddress": "<string>",
            "sendFromEmailSenderName": "<string>",
            "replyToEmailAddress": "<string>"
          },
          "otpAuthIntent": {
            "otpId": "<string>",
            "otpCode": "<string>",
            "targetPublicKey": "<string>",
            "apiKeyName": "<string>",
            "expirationSeconds": "<string>",
            "invalidateExisting": "<boolean>"
          },
          "createSubOrganizationIntentV7": {
            "subOrganizationName": "<string>",
            "rootUsers": [
              {
                "userName": "<string>",
                "userEmail": "<string>",
                "userPhoneNumber": "<string>",
                "apiKeys": [
                  {
                    "apiKeyName": "<string>",
                    "publicKey": "<string>",
                    "curveType": "<API_KEY_CURVE_P256>",
                    "expirationSeconds": "<string>"
                  }
                ],
                "authenticators": [
                  {
                    "authenticatorName": "<string>",
                    "challenge": "<string>",
                    "attestation": {
                      "credentialId": "<string>",
                      "clientDataJson": "<string>",
                      "attestationObject": "<string>",
                      "transports": [
                        "<AUTHENTICATOR_TRANSPORT_BLE>"
                      ]
                    }
                  }
                ],
                "oauthProviders": [
                  {
                    "providerName": "<string>",
                    "oidcToken": "<string>"
                  }
                ]
              }
            ],
            "rootQuorumThreshold": "<number>",
            "wallet": {
              "walletName": "<string>",
              "accounts": [
                {
                  "curve": "<CURVE_SECP256K1>",
                  "pathFormat": "<PATH_FORMAT_BIP32>",
                  "path": "<string>",
                  "addressFormat": "<ADDRESS_FORMAT_UNCOMPRESSED>"
                }
              ],
              "mnemonicLength": "<number>"
            },
            "disableEmailRecovery": "<boolean>",
            "disableEmailAuth": "<boolean>",
            "disableSmsAuth": "<boolean>",
            "disableOtpEmailAuth": "<boolean>"
          },
          "updateWalletIntent": {
            "walletId": "<string>",
            "walletName": "<string>"
          },
          "updatePolicyIntentV2": {
            "policyId": "<string>",
            "policyName": "<string>",
            "policyEffect": "<EFFECT_ALLOW>",
            "policyCondition": "<string>",
            "policyConsensus": "<string>",
            "policyNotes": "<string>"
          },
          "createUsersIntentV3": {
            "users": [
              {
                "userName": "<string>",
                "userEmail": "<string>",
                "userPhoneNumber": "<string>",
                "apiKeys": [
                  {
                    "apiKeyName": "<string>",
                    "publicKey": "<string>",
                    "curveType": "<API_KEY_CURVE_P256>",
                    "expirationSeconds": "<string>"
                  }
                ],
                "authenticators": [
                  {
                    "authenticatorName": "<string>",
                    "challenge": "<string>",
                    "attestation": {
                      "credentialId": "<string>",
                      "clientDataJson": "<string>",
                      "attestationObject": "<string>",
                      "transports": [
                        "<AUTHENTICATOR_TRANSPORT_BLE>"
                      ]
                    }
                  }
                ],
                "oauthProviders": [
                  {
                    "providerName": "<string>",
                    "oidcToken": "<string>"
                  }
                ],
                "userTags": [
                  "<string>"
                ]
              }
            ]
          },
          "initOtpAuthIntentV2": {
            "otpType": "<string>",
            "contact": "<string>",
            "otpLength": "<number>",
            "emailCustomization": {
              "appName": "<string>",
              "logoUrl": "<string>",
              "magicLinkTemplate": "<string>",
              "templateVariables": "<string>",
              "templateId": "<string>"
            },
            "smsCustomization": {
              "template": "<string>"
            },
            "userIdentifier": "<string>",
            "sendFromEmailAddress": "<string>",
            "alphanumeric": "<boolean>",
            "sendFromEmailSenderName": "<string>",
            "replyToEmailAddress": "<string>"
          },
          "initOtpIntent": {
            "otpType": "<string>",
            "contact": "<string>",
            "otpLength": "<number>",
            "emailCustomization": {
              "appName": "<string>",
              "logoUrl": "<string>",
              "magicLinkTemplate": "<string>",
              "templateVariables": "<string>",
              "templateId": "<string>"
            },
            "smsCustomization": {
              "template": "<string>"
            },
            "userIdentifier": "<string>",
            "sendFromEmailAddress": "<string>",
            "alphanumeric": "<boolean>",
            "sendFromEmailSenderName": "<string>",
            "expirationSeconds": "<string>",
            "replyToEmailAddress": "<string>"
          },
          "verifyOtpIntent": {
            "otpId": "<string>",
            "otpCode": "<string>",
            "expirationSeconds": "<string>"
          },
          "otpLoginIntent": {
            "verificationToken": "<string>",
            "publicKey": "<string>",
            "expirationSeconds": "<string>",
            "invalidateExisting": "<boolean>"
          },
          "stampLoginIntent": {
            "publicKey": "<string>",
            "expirationSeconds": "<string>",
            "invalidateExisting": "<boolean>"
          },
          "oauthLoginIntent": {
            "oidcToken": "<string>",
            "publicKey": "<string>",
            "expirationSeconds": "<string>",
            "invalidateExisting": "<boolean>"
          },
          "updateUserNameIntent": {
            "userId": "<string>",
            "userName": "<string>"
          },
          "updateUserEmailIntent": {
            "userId": "<string>",
            "userEmail": "<string>",
            "verificationToken": "<string>"
          },
          "updateUserPhoneNumberIntent": {
            "userId": "<string>",
            "userPhoneNumber": "<string>",
            "verificationToken": "<string>"
          },
          "initFiatOnRampIntent": {
            "onrampProvider": "<FIAT_ON_RAMP_PROVIDER_COINBASE>",
            "walletAddress": "<string>",
            "network": "<FIAT_ON_RAMP_BLOCKCHAIN_NETWORK_BITCOIN>",
            "cryptoCurrencyCode": "<FIAT_ON_RAMP_CRYPTO_CURRENCY_BTC>",
            "fiatCurrencyCode": "<FIAT_ON_RAMP_CURRENCY_AUD>",
            "fiatCurrencyAmount": "<string>",
            "paymentMethod": "<FIAT_ON_RAMP_PAYMENT_METHOD_CREDIT_DEBIT_CARD>",
            "countryCode": "<string>",
            "countrySubdivisionCode": "<string>",
            "sandboxMode": "<boolean>"
          },
          "createSmartContractInterfaceIntent": {
            "smartContractAddress": "<string>",
            "smartContractInterface": "<string>",
            "type": "<SMART_CONTRACT_INTERFACE_TYPE_ETHEREUM>",
            "label": "<string>",
            "notes": "<string>"
          },
          "deleteSmartContractInterfaceIntent": {
            "smartContractInterfaceId": "<string>"
          }
        },
        "result": {
          "createOrganizationResult": {
            "organizationId": "<string>"
          },
          "createAuthenticatorsResult": {
            "authenticatorIds": [
              "<string>"
            ]
          },
          "createUsersResult": {
            "userIds": [
              "<string>"
            ]
          },
          "createPrivateKeysResult": {
            "privateKeyIds": [
              "<string>"
            ]
          },
          "createInvitationsResult": {
            "invitationIds": [
              "<string>"
            ]
          },
          "acceptInvitationResult": {
            "invitationId": "<string>",
            "userId": "<string>"
          },
          "signRawPayloadResult": {
            "r": "<string>",
            "s": "<string>",
            "v": "<string>"
          },
          "createPolicyResult": {
            "policyId": "<string>"
          },
          "disablePrivateKeyResult": {
            "privateKeyId": "<string>"
          },
          "deleteUsersResult": {
            "userIds": [
              "<string>"
            ]
          },
          "deleteAuthenticatorsResult": {
            "authenticatorIds": [
              "<string>"
            ]
          },
          "deleteInvitationResult": {
            "invitationId": "<string>"
          },
          "deleteOrganizationResult": {
            "organizationId": "<string>"
          },
          "deletePolicyResult": {
            "policyId": "<string>"
          },
          "createUserTagResult": {
            "userTagId": "<string>",
            "userIds": [
              "<string>"
            ]
          },
          "deleteUserTagsResult": {
            "userTagIds": [
              "<string>"
            ],
            "userIds": [
              "<string>"
            ]
          },
          "signTransactionResult": {
            "signedTransaction": "<string>"
          },
          "deleteApiKeysResult": {
            "apiKeyIds": [
              "<string>"
            ]
          },
          "createApiKeysResult": {
            "apiKeyIds": [
              "<string>"
            ]
          },
          "createPrivateKeyTagResult": {
            "privateKeyTagId": "<string>",
            "privateKeyIds": [
              "<string>"
            ]
          },
          "deletePrivateKeyTagsResult": {
            "privateKeyTagIds": [
              "<string>"
            ],
            "privateKeyIds": [
              "<string>"
            ]
          },
          "setPaymentMethodResult": {
            "lastFour": "<string>",
            "cardHolderName": "<string>",
            "cardHolderEmail": "<string>"
          },
          "activateBillingTierResult": {
            "productId": "<string>"
          },
          "deletePaymentMethodResult": {
            "paymentMethodId": "<string>"
          },
          "createApiOnlyUsersResult": {
            "userIds": [
              "<string>"
            ]
          },
          "updateRootQuorumResult": "<object>",
          "updateUserTagResult": {
            "userTagId": "<string>"
          },
          "updatePrivateKeyTagResult": {
            "privateKeyTagId": "<string>"
          },
          "createSubOrganizationResult": {
            "subOrganizationId": "<string>",
            "rootUserIds": [
              "<string>"
            ]
          },
          "updateAllowedOriginsResult": "<object>",
          "createPrivateKeysResultV2": {
            "privateKeys": [
              {
                "privateKeyId": "<string>",
                "addresses": [
                  {
                    "format": "<ADDRESS_FORMAT_UNCOMPRESSED>",
                    "address": "<string>"
                  }
                ]
              }
            ]
          },
          "updateUserResult": {
            "userId": "<string>"
          },
          "updatePolicyResult": {
            "policyId": "<string>"
          },
          "createSubOrganizationResultV3": {
            "subOrganizationId": "<string>",
            "privateKeys": [
              {
                "privateKeyId": "<string>",
                "addresses": [
                  {
                    "format": "<ADDRESS_FORMAT_UNCOMPRESSED>",
                    "address": "<string>"
                  }
                ]
              }
            ],
            "rootUserIds": [
              "<string>"
            ]
          },
          "createWalletResult": {
            "walletId": "<string>",
            "addresses": [
              "<string>"
            ]
          },
          "createWalletAccountsResult": {
            "addresses": [
              "<string>"
            ]
          },
          "initUserEmailRecoveryResult": {
            "userId": "<string>"
          },
          "recoverUserResult": {
            "authenticatorId": [
              "<string>"
            ]
          },
          "setOrganizationFeatureResult": {
            "features": [
              {
                "name": "<FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY>",
                "value": "<string>"
              }
            ]
          },
          "removeOrganizationFeatureResult": {
            "features": [
              {
                "name": "<FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY>",
                "value": "<string>"
              }
            ]
          },
          "exportPrivateKeyResult": {
            "privateKeyId": "<string>",
            "exportBundle": "<string>"
          },
          "exportWalletResult": {
            "walletId": "<string>",
            "exportBundle": "<string>"
          },
          "createSubOrganizationResultV4": {
            "subOrganizationId": "<string>",
            "wallet": {
              "walletId": "<string>",
              "addresses": [
                "<string>"
              ]
            },
            "rootUserIds": [
              "<string>"
            ]
          },
          "emailAuthResult": {
            "userId": "<string>",
            "apiKeyId": "<string>"
          },
          "exportWalletAccountResult": {
            "address": "<string>",
            "exportBundle": "<string>"
          },
          "initImportWalletResult": {
            "importBundle": "<string>"
          },
          "importWalletResult": {
            "walletId": "<string>",
            "addresses": [
              "<string>"
            ]
          },
          "initImportPrivateKeyResult": {
            "importBundle": "<string>"
          },
          "importPrivateKeyResult": {
            "privateKeyId": "<string>",
            "addresses": [
              {
                "format": "<ADDRESS_FORMAT_UNCOMPRESSED>",
                "address": "<string>"
              }
            ]
          },
          "createPoliciesResult": {
            "policyIds": [
              "<string>"
            ]
          },
          "signRawPayloadsResult": {
            "signatures": [
              {
                "r": "<string>",
                "s": "<string>",
                "v": "<string>"
              }
            ]
          },
          "createReadOnlySessionResult": {
            "organizationId": "<string>",
            "organizationName": "<string>",
            "userId": "<string>",
            "username": "<string>",
            "session": "<string>",
            "sessionExpiry": "<string>"
          },
          "createOauthProvidersResult": {
            "providerIds": [
              "<string>"
            ]
          },
          "deleteOauthProvidersResult": {
            "providerIds": [
              "<string>"
            ]
          },
          "createSubOrganizationResultV5": {
            "subOrganizationId": "<string>",
            "wallet": {
              "walletId": "<string>",
              "addresses": [
                "<string>"
              ]
            },
            "rootUserIds": [
              "<string>"
            ]
          },
          "oauthResult": {
            "userId": "<string>",
            "apiKeyId": "<string>",
            "credentialBundle": "<string>"
          },
          "createReadWriteSessionResult": {
            "organizationId": "<string>",
            "organizationName": "<string>",
            "userId": "<string>",
            "username": "<string>",
            "apiKeyId": "<string>",
            "credentialBundle": "<string>"
          },
          "createSubOrganizationResultV6": {
            "subOrganizationId": "<string>",
            "wallet": {
              "walletId": "<string>",
              "addresses": [
                "<string>"
              ]
            },
            "rootUserIds": [
              "<string>"
            ]
          },
          "deletePrivateKeysResult": {
            "privateKeyIds": [
              "<string>"
            ]
          },
          "deleteWalletsResult": {
            "walletIds": [
              "<string>"
            ]
          },
          "createReadWriteSessionResultV2": {
            "organizationId": "<string>",
            "organizationName": "<string>",
            "userId": "<string>",
            "username": "<string>",
            "apiKeyId": "<string>",
            "credentialBundle": "<string>"
          },
          "deleteSubOrganizationResult": {
            "subOrganizationUuid": "<string>"
          },
          "initOtpAuthResult": {
            "otpId": "<string>"
          },
          "otpAuthResult": {
            "userId": "<string>",
            "apiKeyId": "<string>",
            "credentialBundle": "<string>"
          },
          "createSubOrganizationResultV7": {
            "subOrganizationId": "<string>",
            "wallet": {
              "walletId": "<string>",
              "addresses": [
                "<string>"
              ]
            },
            "rootUserIds": [
              "<string>"
            ]
          },
          "updateWalletResult": {
            "walletId": "<string>"
          },
          "updatePolicyResultV2": {
            "policyId": "<string>"
          },
          "initOtpAuthResultV2": {
            "otpId": "<string>"
          },
          "initOtpResult": {
            "otpId": "<string>"
          },
          "verifyOtpResult": {
            "verificationToken": "<string>"
          },
          "otpLoginResult": {
            "session": "<string>"
          },
          "stampLoginResult": {
            "session": "<string>"
          },
          "oauthLoginResult": {
            "session": "<string>"
          },
          "updateUserNameResult": {
            "userId": "<string>"
          },
          "updateUserEmailResult": {
            "userId": "<string>"
          },
          "updateUserPhoneNumberResult": {
            "userId": "<string>"
          },
          "initFiatOnRampResult": {
            "onRampUrl": "<string>",
            "onRampTransactionId": "<string>"
          },
          "createSmartContractInterfaceResult": {
            "smartContractInterfaceId": "<string>"
          },
          "deleteSmartContractInterfaceResult": {
            "smartContractInterfaceId": "<string>"
          }
        },
        "votes": [
          {
            "id": "<string>",
            "userId": "<string>",
            "user": {
              "userId": "<string>",
              "userName": "<string>",
              "userEmail": "<string>",
              "userPhoneNumber": "<string>",
              "authenticators": [
                {
                  "transports": [
                    "<AUTHENTICATOR_TRANSPORT_BLE>"
                  ],
                  "attestationType": "<string>",
                  "aaguid": "<string>",
                  "credentialId": "<string>",
                  "model": "<string>",
                  "credential": {
                    "publicKey": "<string>",
                    "type": "<CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR>"
                  },
                  "authenticatorId": "<string>",
                  "authenticatorName": "<string>",
                  "createdAt": {
                    "seconds": "<string>",
                    "nanos": "<string>"
                  },
                  "updatedAt": {
                    "seconds": "<string>",
                    "nanos": "<string>"
                  }
                }
              ],
              "apiKeys": [
                {
                  "credential": {
                    "publicKey": "<string>",
                    "type": "<CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR>"
                  },
                  "apiKeyId": "<string>",
                  "apiKeyName": "<string>",
                  "createdAt": {
                    "seconds": "<string>",
                    "nanos": "<string>"
                  },
                  "updatedAt": {
                    "seconds": "<string>",
                    "nanos": "<string>"
                  },
                  "expirationSeconds": "<string>"
                }
              ],
              "userTags": [
                "<string>"
              ],
              "oauthProviders": [
                {
                  "providerId": "<string>",
                  "providerName": "<string>",
                  "issuer": "<string>",
                  "audience": "<string>",
                  "subject": "<string>",
                  "createdAt": {
                    "seconds": "<string>",
                    "nanos": "<string>"
                  },
                  "updatedAt": {
                    "seconds": "<string>",
                    "nanos": "<string>"
                  }
                }
              ],
              "createdAt": {
                "seconds": "<string>",
                "nanos": "<string>"
              },
              "updatedAt": {
                "seconds": "<string>",
                "nanos": "<string>"
              }
            },
            "activityId": "<string>",
            "selection": "<VOTE_SELECTION_APPROVED>",
            "message": "<string>",
            "publicKey": "<string>",
            "signature": "<string>",
            "scheme": "<string>",
            "createdAt": {
              "seconds": "<string>",
              "nanos": "<string>"
            }
          }
        ],
        "fingerprint": "<string>",
        "canApprove": "<boolean>",
        "canReject": "<boolean>",
        "createdAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "updatedAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "failure": {
          "code": "<number>",
          "message": "<string>",
          "details": [
            {
              "@type": "<string>"
            }
          ]
        }
      }
    ]
  }
  ```
</ResponseExample>


# List policies
Source: https://docs.turnkey.com/api-reference/queries/list-policies

List all policies within an organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="list_policies" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="policies" type="array" required={true}>
  A list of policies.

  <Expandable title="policies details">
    <NestedParam parentKey="policies" childKey="policyId" type="string" required={true}>
      Unique identifier for a given Policy.
    </NestedParam>

    <NestedParam parentKey="policies" childKey="policyName" type="string" required={true}>
      Human-readable name for a Policy.
    </NestedParam>

    <NestedParam parentKey="policies" childKey="effect" type="enum" required={true}>
      effect field

      Enum options: `EFFECT_ALLOW`, `EFFECT_DENY`
    </NestedParam>

    <NestedParam parentKey="policies" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="policies.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="policies.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="policies" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="policies.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="policies.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="policies" childKey="notes" type="string" required={true}>
      Human-readable notes added by a User to describe a particular policy.
    </NestedParam>

    <NestedParam parentKey="policies" childKey="consensus" type="string" required={true}>
      A consensus expression that evalutes to true or false.
    </NestedParam>

    <NestedParam parentKey="policies" childKey="condition" type="string" required={true}>
      A condition expression that evalutes to true or false.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/list_policies \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().listPolicies({
    organizationId: "<string> (Unique identifier for a given organization.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "policies": [
      {
        "policyId": "<string>",
        "policyName": "<string>",
        "effect": "<EFFECT_ALLOW>",
        "createdAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "updatedAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "notes": "<string>",
        "consensus": "<string>",
        "condition": "<string>"
      }
    ]
  }
  ```
</ResponseExample>


# List private key tags
Source: https://docs.turnkey.com/api-reference/queries/list-private-key-tags

List all private key tags within an organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="list_private_key_tags" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="privateKeyTags" type="array" required={true}>
  A list of private key tags.

  <Expandable title="privateKeyTags details">
    <NestedParam parentKey="privateKeyTags" childKey="tagId" type="string" required={true}>
      Unique identifier for a given Tag.
    </NestedParam>

    <NestedParam parentKey="privateKeyTags" childKey="tagName" type="string" required={true}>
      Human-readable name for a Tag.
    </NestedParam>

    <NestedParam parentKey="privateKeyTags" childKey="tagType" type="enum" required={true}>
      tagType field

      Enum options: `TAG_TYPE_USER`, `TAG_TYPE_PRIVATE_KEY`
    </NestedParam>

    <NestedParam parentKey="privateKeyTags" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="privateKeyTags.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="privateKeyTags.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="privateKeyTags" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="privateKeyTags.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="privateKeyTags.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/list_private_key_tags \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().listPrivateKeyTags({
    organizationId: "<string> (Unique identifier for a given organization.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "privateKeyTags": [
      {
        "tagId": "<string>",
        "tagName": "<string>",
        "tagType": "<TAG_TYPE_USER>",
        "createdAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "updatedAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        }
      }
    ]
  }
  ```
</ResponseExample>


# List private keys
Source: https://docs.turnkey.com/api-reference/queries/list-private-keys

List all private keys within an organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="list_private_keys" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="privateKeys" type="array" required={true}>
  A list of private keys.

  <Expandable title="privateKeys details">
    <NestedParam parentKey="privateKeys" childKey="privateKeyId" type="string" required={true}>
      Unique identifier for a given Private Key.
    </NestedParam>

    <NestedParam parentKey="privateKeys" childKey="publicKey" type="string" required={true}>
      The public component of a cryptographic key pair used to sign messages and transactions.
    </NestedParam>

    <NestedParam parentKey="privateKeys" childKey="privateKeyName" type="string" required={true}>
      Human-readable name for a Private Key.
    </NestedParam>

    <NestedParam parentKey="privateKeys" childKey="curve" type="enum" required={true}>
      curve field

      Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
    </NestedParam>

    <NestedParam parentKey="privateKeys" childKey="addresses" type="array" required={true}>
      Derived cryptocurrency addresses for a given Private Key.

      <Expandable title="addresses details">
        <NestedParam parentKey="privateKeys.addresses" childKey="format" type="enum" required={false}>
          format field

          Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
        </NestedParam>

        <NestedParam parentKey="privateKeys.addresses" childKey="address" type="string" required={false}>
          address field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="privateKeys" childKey="privateKeyTags" type="array" required={true}>
      A list of Private Key Tag IDs.

      <Expandable title="privateKeyTags details">
        <NestedParam parentKey="privateKeys.privateKeyTags" childKey="item" type="string" required={true}>
          item field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="privateKeys" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="privateKeys.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="privateKeys.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="privateKeys" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="privateKeys.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="privateKeys.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="privateKeys" childKey="exported" type="boolean" required={true}>
      True when a given Private Key is exported, false otherwise.
    </NestedParam>

    <NestedParam parentKey="privateKeys" childKey="imported" type="boolean" required={true}>
      True when a given Private Key is imported, false otherwise.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/list_private_keys \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().listPrivateKeys({
    organizationId: "<string> (Unique identifier for a given organization.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "privateKeys": [
      {
        "privateKeyId": "<string>",
        "publicKey": "<string>",
        "privateKeyName": "<string>",
        "curve": "<CURVE_SECP256K1>",
        "addresses": [
          {
            "format": "<ADDRESS_FORMAT_UNCOMPRESSED>",
            "address": "<string>"
          }
        ],
        "privateKeyTags": [
          "<string>"
        ],
        "createdAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "updatedAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "exported": "<boolean>",
        "imported": "<boolean>"
      }
    ]
  }
  ```
</ResponseExample>


# List smart contract interfaces
Source: https://docs.turnkey.com/api-reference/queries/list-smart-contract-interfaces

List all smart contract interfaces within an organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="list_smart_contract_interfaces" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="smartContractInterfaces" type="array" required={true}>
  A list of smart contract interfaces.

  <Expandable title="smartContractInterfaces details">
    <NestedParam parentKey="smartContractInterfaces" childKey="organizationId" type="string" required={true}>
      The Organization the Smart Contract Interface belongs to.
    </NestedParam>

    <NestedParam parentKey="smartContractInterfaces" childKey="smartContractInterfaceId" type="string" required={true}>
      Unique identifier for a given Smart Contract Interface (ABI or IDL).
    </NestedParam>

    <NestedParam parentKey="smartContractInterfaces" childKey="smartContractAddress" type="string" required={true}>
      The address corresponding to the Smart Contract or Program.
    </NestedParam>

    <NestedParam parentKey="smartContractInterfaces" childKey="smartContractInterface" type="string" required={true}>
      The JSON corresponding to the Smart Contract Interface (ABI or IDL).
    </NestedParam>

    <NestedParam parentKey="smartContractInterfaces" childKey="type" type="string" required={true}>
      The type corresponding to the Smart Contract Interface (either ETHEREUM or SOLANA).
    </NestedParam>

    <NestedParam parentKey="smartContractInterfaces" childKey="label" type="string" required={true}>
      The label corresponding to the Smart Contract Interface (either ETHEREUM or SOLANA).
    </NestedParam>

    <NestedParam parentKey="smartContractInterfaces" childKey="notes" type="string" required={true}>
      The notes corresponding to the Smart Contract Interface (either ETHEREUM or SOLANA).
    </NestedParam>

    <NestedParam parentKey="smartContractInterfaces" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="smartContractInterfaces.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="smartContractInterfaces.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="smartContractInterfaces" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="smartContractInterfaces.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="smartContractInterfaces.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/list_smart_contract_interfaces \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().listSmartContractInterfaces({
    organizationId: "<string> (Unique identifier for a given organization.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "smartContractInterfaces": [
      {
        "organizationId": "<string>",
        "smartContractInterfaceId": "<string>",
        "smartContractAddress": "<string>",
        "smartContractInterface": "<string>",
        "type": "<string>",
        "label": "<string>",
        "notes": "<string>",
        "createdAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "updatedAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        }
      }
    ]
  }
  ```
</ResponseExample>


# List user tags
Source: https://docs.turnkey.com/api-reference/queries/list-user-tags

List all user tags within an organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="list_user_tags" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="userTags" type="array" required={true}>
  A list of user tags.

  <Expandable title="userTags details">
    <NestedParam parentKey="userTags" childKey="tagId" type="string" required={true}>
      Unique identifier for a given Tag.
    </NestedParam>

    <NestedParam parentKey="userTags" childKey="tagName" type="string" required={true}>
      Human-readable name for a Tag.
    </NestedParam>

    <NestedParam parentKey="userTags" childKey="tagType" type="enum" required={true}>
      tagType field

      Enum options: `TAG_TYPE_USER`, `TAG_TYPE_PRIVATE_KEY`
    </NestedParam>

    <NestedParam parentKey="userTags" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="userTags.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="userTags.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="userTags" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="userTags.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="userTags.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/list_user_tags \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().listUserTags({
    organizationId: "<string> (Unique identifier for a given organization.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "userTags": [
      {
        "tagId": "<string>",
        "tagName": "<string>",
        "tagType": "<TAG_TYPE_USER>",
        "createdAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "updatedAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        }
      }
    ]
  }
  ```
</ResponseExample>


# List users
Source: https://docs.turnkey.com/api-reference/queries/list-users

List all users within an organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="list_users" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="users" type="array" required={true}>
  A list of users.

  <Expandable title="users details">
    <NestedParam parentKey="users" childKey="userId" type="string" required={true}>
      Unique identifier for a given User.
    </NestedParam>

    <NestedParam parentKey="users" childKey="userName" type="string" required={true}>
      Human-readable name for a User.
    </NestedParam>

    <NestedParam parentKey="users" childKey="userEmail" type="string" required={false}>
      The user's email address.
    </NestedParam>

    <NestedParam parentKey="users" childKey="userPhoneNumber" type="string" required={false}>
      The user's phone number in E.164 format e.g. +13214567890
    </NestedParam>

    <NestedParam parentKey="users" childKey="authenticators" type="array" required={true}>
      A list of Authenticator parameters.

      <Expandable title="authenticators details">
        <NestedParam parentKey="users.authenticators" childKey="transports" type="array" required={true}>
          Types of transports that may be used by an Authenticator (e.g., USB, NFC, BLE).

          <Expandable title="transports details">
            <NestedParam parentKey="users.authenticators.transports" childKey="item" type="enum" required={true}>
              item field

              Enum options: `AUTHENTICATOR_TRANSPORT_BLE`, `AUTHENTICATOR_TRANSPORT_INTERNAL`, `AUTHENTICATOR_TRANSPORT_NFC`, `AUTHENTICATOR_TRANSPORT_USB`, `AUTHENTICATOR_TRANSPORT_HYBRID`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="users.authenticators" childKey="attestationType" type="string" required={true}>
          attestationType field
        </NestedParam>

        <NestedParam parentKey="users.authenticators" childKey="aaguid" type="string" required={true}>
          Identifier indicating the type of the Security Key.
        </NestedParam>

        <NestedParam parentKey="users.authenticators" childKey="credentialId" type="string" required={true}>
          Unique identifier for a WebAuthn credential.
        </NestedParam>

        <NestedParam parentKey="users.authenticators" childKey="model" type="string" required={true}>
          The type of Authenticator device.
        </NestedParam>

        <NestedParam parentKey="users.authenticators" childKey="credential" type="object" required={true}>
          credential field

          <Expandable title="credential details">
            <NestedParam parentKey="users.authenticators.credential" childKey="publicKey" type="string" required={true}>
              The public component of a cryptographic key pair used to sign messages and transactions.
            </NestedParam>

            <NestedParam parentKey="users.authenticators.credential" childKey="type" type="enum" required={true}>
              type field

              Enum options: `CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR`, `CREDENTIAL_TYPE_API_KEY_P256`, `CREDENTIAL_TYPE_RECOVER_USER_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_SECP256K1`, `CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_ED25519`, `CREDENTIAL_TYPE_OTP_AUTH_KEY_P256`, `CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256`, `CREDENTIAL_TYPE_OAUTH_KEY_P256`, `CREDENTIAL_TYPE_LOGIN`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="users.authenticators" childKey="authenticatorId" type="string" required={true}>
          Unique identifier for a given Authenticator.
        </NestedParam>

        <NestedParam parentKey="users.authenticators" childKey="authenticatorName" type="string" required={true}>
          Human-readable name for an Authenticator.
        </NestedParam>

        <NestedParam parentKey="users.authenticators" childKey="createdAt" type="object" required={true}>
          createdAt field

          <Expandable title="createdAt details">
            <NestedParam parentKey="users.authenticators.createdAt" childKey="seconds" type="string" required={true}>
              seconds field
            </NestedParam>

            <NestedParam parentKey="users.authenticators.createdAt" childKey="nanos" type="string" required={true}>
              nanos field
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="users.authenticators" childKey="updatedAt" type="object" required={true}>
          updatedAt field

          <Expandable title="updatedAt details">
            <NestedParam parentKey="users.authenticators.updatedAt" childKey="seconds" type="string" required={true}>
              seconds field
            </NestedParam>

            <NestedParam parentKey="users.authenticators.updatedAt" childKey="nanos" type="string" required={true}>
              nanos field
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="users" childKey="apiKeys" type="array" required={true}>
      A list of API Key parameters. This field, if not needed, should be an empty array in your request body.

      <Expandable title="apiKeys details">
        <NestedParam parentKey="users.apiKeys" childKey="credential" type="object" required={true}>
          credential field

          <Expandable title="credential details">
            <NestedParam parentKey="users.apiKeys.credential" childKey="publicKey" type="string" required={true}>
              The public component of a cryptographic key pair used to sign messages and transactions.
            </NestedParam>

            <NestedParam parentKey="users.apiKeys.credential" childKey="type" type="enum" required={true}>
              type field

              Enum options: `CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR`, `CREDENTIAL_TYPE_API_KEY_P256`, `CREDENTIAL_TYPE_RECOVER_USER_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_SECP256K1`, `CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256`, `CREDENTIAL_TYPE_API_KEY_ED25519`, `CREDENTIAL_TYPE_OTP_AUTH_KEY_P256`, `CREDENTIAL_TYPE_READ_WRITE_SESSION_KEY_P256`, `CREDENTIAL_TYPE_OAUTH_KEY_P256`, `CREDENTIAL_TYPE_LOGIN`
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="users.apiKeys" childKey="apiKeyId" type="string" required={true}>
          Unique identifier for a given API Key.
        </NestedParam>

        <NestedParam parentKey="users.apiKeys" childKey="apiKeyName" type="string" required={true}>
          Human-readable name for an API Key.
        </NestedParam>

        <NestedParam parentKey="users.apiKeys" childKey="createdAt" type="object" required={true}>
          createdAt field

          <Expandable title="createdAt details">
            <NestedParam parentKey="users.apiKeys.createdAt" childKey="seconds" type="string" required={true}>
              seconds field
            </NestedParam>

            <NestedParam parentKey="users.apiKeys.createdAt" childKey="nanos" type="string" required={true}>
              nanos field
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="users.apiKeys" childKey="updatedAt" type="object" required={true}>
          updatedAt field

          <Expandable title="updatedAt details">
            <NestedParam parentKey="users.apiKeys.updatedAt" childKey="seconds" type="string" required={true}>
              seconds field
            </NestedParam>

            <NestedParam parentKey="users.apiKeys.updatedAt" childKey="nanos" type="string" required={true}>
              nanos field
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="users.apiKeys" childKey="expirationSeconds" type="string" required={false}>
          Optional window (in seconds) indicating how long the API Key should last.
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="users" childKey="userTags" type="array" required={true}>
      A list of User Tag IDs.

      <Expandable title="userTags details">
        <NestedParam parentKey="users.userTags" childKey="item" type="string" required={true}>
          item field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="users" childKey="oauthProviders" type="array" required={true}>
      A list of Oauth Providers.

      <Expandable title="oauthProviders details">
        <NestedParam parentKey="users.oauthProviders" childKey="providerId" type="string" required={true}>
          Unique identifier for an OAuth Provider
        </NestedParam>

        <NestedParam parentKey="users.oauthProviders" childKey="providerName" type="string" required={true}>
          Human-readable name to identify a Provider.
        </NestedParam>

        <NestedParam parentKey="users.oauthProviders" childKey="issuer" type="string" required={true}>
          The issuer of the token, typically a URL indicating the authentication server, e.g [https://accounts.google.com](https://accounts.google.com)
        </NestedParam>

        <NestedParam parentKey="users.oauthProviders" childKey="audience" type="string" required={true}>
          Expected audience ('aud' attribute of the signed token) which represents the app ID
        </NestedParam>

        <NestedParam parentKey="users.oauthProviders" childKey="subject" type="string" required={true}>
          Expected subject ('sub' attribute of the signed token) which represents the user ID
        </NestedParam>

        <NestedParam parentKey="users.oauthProviders" childKey="createdAt" type="object" required={true}>
          createdAt field

          <Expandable title="createdAt details">
            <NestedParam parentKey="users.oauthProviders.createdAt" childKey="seconds" type="string" required={true}>
              seconds field
            </NestedParam>

            <NestedParam parentKey="users.oauthProviders.createdAt" childKey="nanos" type="string" required={true}>
              nanos field
            </NestedParam>
          </Expandable>
        </NestedParam>

        <NestedParam parentKey="users.oauthProviders" childKey="updatedAt" type="object" required={true}>
          updatedAt field

          <Expandable title="updatedAt details">
            <NestedParam parentKey="users.oauthProviders.updatedAt" childKey="seconds" type="string" required={true}>
              seconds field
            </NestedParam>

            <NestedParam parentKey="users.oauthProviders.updatedAt" childKey="nanos" type="string" required={true}>
              nanos field
            </NestedParam>
          </Expandable>
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="users" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="users.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="users.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="users" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="users.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="users.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/list_users \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().listUsers({
    organizationId: "<string> (Unique identifier for a given organization.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "users": [
      {
        "userId": "<string>",
        "userName": "<string>",
        "userEmail": "<string>",
        "userPhoneNumber": "<string>",
        "authenticators": [
          {
            "transports": [
              "<AUTHENTICATOR_TRANSPORT_BLE>"
            ],
            "attestationType": "<string>",
            "aaguid": "<string>",
            "credentialId": "<string>",
            "model": "<string>",
            "credential": {
              "publicKey": "<string>",
              "type": "<CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR>"
            },
            "authenticatorId": "<string>",
            "authenticatorName": "<string>",
            "createdAt": {
              "seconds": "<string>",
              "nanos": "<string>"
            },
            "updatedAt": {
              "seconds": "<string>",
              "nanos": "<string>"
            }
          }
        ],
        "apiKeys": [
          {
            "credential": {
              "publicKey": "<string>",
              "type": "<CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR>"
            },
            "apiKeyId": "<string>",
            "apiKeyName": "<string>",
            "createdAt": {
              "seconds": "<string>",
              "nanos": "<string>"
            },
            "updatedAt": {
              "seconds": "<string>",
              "nanos": "<string>"
            },
            "expirationSeconds": "<string>"
          }
        ],
        "userTags": [
          "<string>"
        ],
        "oauthProviders": [
          {
            "providerId": "<string>",
            "providerName": "<string>",
            "issuer": "<string>",
            "audience": "<string>",
            "subject": "<string>",
            "createdAt": {
              "seconds": "<string>",
              "nanos": "<string>"
            },
            "updatedAt": {
              "seconds": "<string>",
              "nanos": "<string>"
            }
          }
        ],
        "createdAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "updatedAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        }
      }
    ]
  }
  ```
</ResponseExample>


# List wallets
Source: https://docs.turnkey.com/api-reference/queries/list-wallets

List all wallets within an organization.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="list_wallets" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="wallets" type="array" required={true}>
  A list of wallets.

  <Expandable title="wallets details">
    <NestedParam parentKey="wallets" childKey="walletId" type="string" required={true}>
      Unique identifier for a given Wallet.
    </NestedParam>

    <NestedParam parentKey="wallets" childKey="walletName" type="string" required={true}>
      Human-readable name for a Wallet.
    </NestedParam>

    <NestedParam parentKey="wallets" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="wallets.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="wallets.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="wallets" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="wallets.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="wallets.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="wallets" childKey="exported" type="boolean" required={true}>
      True when a given Wallet is exported, false otherwise.
    </NestedParam>

    <NestedParam parentKey="wallets" childKey="imported" type="boolean" required={true}>
      True when a given Wallet is imported, false otherwise.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/list_wallets \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().listWallets({
    organizationId: "<string> (Unique identifier for a given organization.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "wallets": [
      {
        "walletId": "<string>",
        "walletName": "<string>",
        "createdAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "updatedAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "exported": "<boolean>",
        "imported": "<boolean>"
      }
    ]
  }
  ```
</ResponseExample>


# List wallets accounts
Source: https://docs.turnkey.com/api-reference/queries/list-wallets-accounts

List all accounts within a wallet.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="list_wallet_accounts" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization.
</ParamField>

<ParamField body="walletId" type="string" required={false}>
  Unique identifier for a given wallet. If not provided, all accounts for the organization will be returned.
</ParamField>

<ParamField body="paginationOptions" type="object" required={false} path="paginationOptions">
  <p>paginationOptions field</p>

  <Expandable title="details">
    <NestedParam parentKey="paginationOptions" childKey="limit" type="string" required={false} default="">
      A limit of the number of object to be returned, between 1 and 100. Defaults to 10.
    </NestedParam>

    <NestedParam parentKey="paginationOptions" childKey="before" type="string" required={false} default="">
      A pagination cursor. This is an object ID that enables you to fetch all objects before this ID.
    </NestedParam>

    <NestedParam parentKey="paginationOptions" childKey="after" type="string" required={false} default="">
      A pagination cursor. This is an object ID that enables you to fetch all objects after this ID.
    </NestedParam>
  </Expandable>
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="accounts" type="array" required={true}>
  A list of accounts generated from a wallet that share a common seed.

  <Expandable title="accounts details">
    <NestedParam parentKey="accounts" childKey="walletAccountId" type="string" required={true}>
      Unique identifier for a given Wallet Account.
    </NestedParam>

    <NestedParam parentKey="accounts" childKey="organizationId" type="string" required={true}>
      The Organization the Account belongs to.
    </NestedParam>

    <NestedParam parentKey="accounts" childKey="walletId" type="string" required={true}>
      The Wallet the Account was derived from.
    </NestedParam>

    <NestedParam parentKey="accounts" childKey="curve" type="enum" required={true}>
      curve field

      Enum options: `CURVE_SECP256K1`, `CURVE_ED25519`
    </NestedParam>

    <NestedParam parentKey="accounts" childKey="pathFormat" type="enum" required={true}>
      pathFormat field

      Enum options: `PATH_FORMAT_BIP32`
    </NestedParam>

    <NestedParam parentKey="accounts" childKey="path" type="string" required={true}>
      Path used to generate the Account.
    </NestedParam>

    <NestedParam parentKey="accounts" childKey="addressFormat" type="enum" required={true}>
      addressFormat field

      Enum options: `ADDRESS_FORMAT_UNCOMPRESSED`, `ADDRESS_FORMAT_COMPRESSED`, `ADDRESS_FORMAT_ETHEREUM`, `ADDRESS_FORMAT_SOLANA`, `ADDRESS_FORMAT_COSMOS`, `ADDRESS_FORMAT_TRON`, `ADDRESS_FORMAT_SUI`, `ADDRESS_FORMAT_APTOS`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_MAINNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2PKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2SH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2WSH`, `ADDRESS_FORMAT_BITCOIN_SIGNET_P2TR`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2PKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2SH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WPKH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2WSH`, `ADDRESS_FORMAT_BITCOIN_REGTEST_P2TR`, `ADDRESS_FORMAT_SEI`, `ADDRESS_FORMAT_XLM`, `ADDRESS_FORMAT_DOGE_MAINNET`, `ADDRESS_FORMAT_DOGE_TESTNET`, `ADDRESS_FORMAT_TON_V3R2`, `ADDRESS_FORMAT_TON_V4R2`, `ADDRESS_FORMAT_TON_V5R1`, `ADDRESS_FORMAT_XRP`
    </NestedParam>

    <NestedParam parentKey="accounts" childKey="address" type="string" required={true}>
      Address generated using the Wallet seed and Account parameters.
    </NestedParam>

    <NestedParam parentKey="accounts" childKey="createdAt" type="object" required={true}>
      createdAt field

      <Expandable title="createdAt details">
        <NestedParam parentKey="accounts.createdAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="accounts.createdAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="accounts" childKey="updatedAt" type="object" required={true}>
      updatedAt field

      <Expandable title="updatedAt details">
        <NestedParam parentKey="accounts.updatedAt" childKey="seconds" type="string" required={true}>
          seconds field
        </NestedParam>

        <NestedParam parentKey="accounts.updatedAt" childKey="nanos" type="string" required={true}>
          nanos field
        </NestedParam>
      </Expandable>
    </NestedParam>

    <NestedParam parentKey="accounts" childKey="publicKey" type="string" required={false}>
      The public component of this wallet account's underlying cryptographic key pair.
    </NestedParam>
  </Expandable>
</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/list_wallet_accounts \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>",
      "walletId": "<string>",
      "paginationOptions": {
          "limit": "<string>",
          "before": "<string>",
          "after": "<string>"
      }
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().listWalletAccounts({
    organizationId: "<string> (Unique identifier for a given organization.)",
    walletId: "<string> (Unique identifier for a given wallet. If not provided, all accounts for the organization will be returned.)",
    paginationOptions: { // paginationOptions field,
      limit: "<string> (A limit of the number of object to be returned, between 1 and 100. Defaults to 10.)",
      before: "<string> (A pagination cursor. This is an object ID that enables you to fetch all objects before this ID.)",
      after: "<string> (A pagination cursor. This is an object ID that enables you to fetch all objects after this ID.)",
    }
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "accounts": [
      {
        "walletAccountId": "<string>",
        "organizationId": "<string>",
        "walletId": "<string>",
        "curve": "<CURVE_SECP256K1>",
        "pathFormat": "<PATH_FORMAT_BIP32>",
        "path": "<string>",
        "addressFormat": "<ADDRESS_FORMAT_UNCOMPRESSED>",
        "address": "<string>",
        "createdAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "updatedAt": {
          "seconds": "<string>",
          "nanos": "<string>"
        },
        "publicKey": "<string>"
      }
    ]
  }
  ```
</ResponseExample>


# Queries
Source: https://docs.turnkey.com/api-reference/queries/overview

Queries are read requests to Turnkey's API. They allow you to retrieve data about your organization and its resources.

# What are queries?

Queries are read-only operations that let you fetch information from Turnkey's API without modifying any resources. Query endpoints are always prefixed with `/public/v1/query`.

* **No Policy Enforcement:** Queries are not subject to the policy engine, so any authenticated user in your organization can perform them.
* **Organization-wide Access:** All users within an organization can read any data within the organization. Parent organizations can also query data for all of their sub-organizations.
* **Use Cases:** Common use cases include listing users, retrieving organization details, and fetching activity logs.


# Who am I?
Source: https://docs.turnkey.com/api-reference/queries/who-am-i

Get basic information about your current API or WebAuthN user and their organization. Affords sub-organization look ups via parent organization for WebAuthN or API key users.

export const EndpointPath = ({type, path}) => {
  return <div class="flex w-full flex-col bg-background-light dark:bg-background-dark border-standard rounded-2xl p-1.5">
      <div class="flex items-center space-x-1.5">
        <div class="relative flex-1 flex gap-2 min-w-0 rounded-xl items-center cursor-pointer p-1.5 border-standard">
          <div class="rounded-lg font-bold px-1.5 py-0.5 text-sm leading-5 bg-blue-400/20 dark:bg-blue-400/20 text-blue-700 dark:text-blue-400">
            POST
          </div>
          <div class="flex items-center space-x-2 overflow-x-auto flex-1 no-scrollbar">
            <div class="group flex items-center flex-1 gap-0.5 font-mono">
              <div class="absolute right-0 p-2 bg-background-light dark:bg-background-dark rounded-lg hidden group-hover:block">
                <svg class="w-4 h-4 bg-gray-400 dark:bg-white/30"></svg>
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                public
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                v1
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {type}
              </div>
              <div class="text-sm text-gray-400">/</div>
              <div class="text-sm font-medium text-gray-800 dark:text-white min-w-max">
                {path}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>;
};

export const NestedParam = ({parentKey, childKey, type, required, description, children}) => {
  const fullKey = `${parentKey}.${childKey}`;
  const anchorId = `body-${fullKey.replace(/\./g, '-')}`;
  return <div className="py-6 border-gray-100 dark:border-gray-800 border-b last:border-b-0">
  <div className="flex font-mono text-sm group/param-head param-head break-all relative" id={anchorId}>
    <div className="flex-1 flex content-start py-0.5 mr-5">
      <div className="flex items-center flex-wrap gap-2">
        <div className="absolute -top-1.5">
          <a href={`#${anchorId}`} className="-ml-[2.1rem] flex items-center opacity-0 border-0 group-hover/param-head:opacity-100 py-2 [.expandable-content_&]:-ml-[2.1rem]" aria-label="Navigate to header">
            <div className="w-6 h-6 text-gray-400 rounded-md flex items-center justify-center zinc-box bg-white ring-1 ring-gray-400/30 dark:ring-gray-700/25 hover:ring-gray-400/60 dark:hover:ring-white/20">
              <svg xmlns="http://www.w3.org/2000/svg" fill="gray" height="12px" viewBox="0 0 576 512">
                <path d="M0 256C0 167.6 71.6 96 160 96h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C98.1 144 48 194.1 48 256s50.1 112 112 112h72c13.3 0 24 10.7 24 24s-10.7 24-24 24H160C71.6 416 0 344.4 0 256zm576 0c0 88.4-71.6 160-160 160H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c61.9 0 112-50.1 112-112s-50.1-112-112-112H344c-13.3 0-24-10.7-24-24s10.7-24 24-24h72c88.4 0 160 71.6 160 160zM184 232H392c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z"></path>
              </svg>
            </div>
          </a>
        </div>
        <div className="font-semibold text-primary dark:text-primary-light cursor-pointer overflow-wrap-anywhere">
          <span className="text-gray-500 dark:text-gray-400">{parentKey}.</span>
          {childKey}
        </div>
        <div className="inline items-center gap-2 text-xs font-medium [&_div]:inline [&_div]:mr-2 [&_div]:leading-5">
          <div className="flex items-center px-2 py-0.5 rounded-md bg-gray-100/50 dark:bg-white/5 text-gray-600 dark:text-gray-200 font-medium break-all">
            <span>{type}</span>
          </div>
          {required && <span className="px-2 py-0.5 rounded-md bg-red-100/50 dark:bg-red-400/10 text-red-600 dark:text-red-300 font-medium whitespace-nowrap">
              required
            </span>}
        </div>
      </div>
    </div>
  </div>
  {children && <div className="mt-4">
      <div className="prose prose-sm prose-gray dark:prose-invert">
        {children}
      </div>
    </div>}
</div>;
};

export const H3Bordered = ({text}) => <h3 id={text.toLowerCase()} className="border-b pb-2.5 border-gray-100 dark:border-gray-800">
    {text}
  </h3>;

export const Authorizations = () => {
  return <div>
      <H3Bordered text="Authorizations" />

      <Tabs>
        <Tab title="API Key">
          <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp">
            <ParamField header="X-Stamp" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>

        <Tab title="WebAuthn (Passkey)">
         <div className="flex text-sm group/param-head param-head break-all relative" id="authorization-x-stamp-webauthn">
            <ParamField body="X-Stamp-WebAuthn" type="string" required={true}>
              Cryptographically signed (stamped) request to be passed in as a header. For more info, see <a href="https://docs.turnkey.com/developer-reference/api-overview/stamps">here</a>.
            </ParamField>
          </div>
        </Tab>
      </Tabs>
    </div>;
};

<EndpointPath type="query" path="whoami" />

<Authorizations />

<H3Bordered text="Body" />

<ParamField body="organizationId" type="string" required={true}>
  Unique identifier for a given organization. If the request is being made by a WebAuthN user and their sub-organization ID is unknown, this can be the parent organization ID; using the sub-organization ID when possible is preferred due to performance reasons.
</ParamField>

<H3Bordered text="Response" />

A successful response returns the following fields:

<ResponseField name="organizationId" type="string" required={true}>Unique identifier for a given organization.</ResponseField>
<ResponseField name="organizationName" type="string" required={true}>Human-readable name for an organization.</ResponseField>
<ResponseField name="userId" type="string" required={true}>Unique identifier for a given user.</ResponseField>
<ResponseField name="username" type="string" required={true}>Human-readable name for a user.</ResponseField>

<RequestExample>
  ```bash title="cURL"
  curl --request POST \
    --url https://api.turnkey.com/public/v1/query/whoami \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/json' \
    --header "X-Stamp: <string> (see Authorizations)" \
    --data '{
      "organizationId": "<string>"
  }'
  ```

  ```javascript title="JavaScript"
  import { Turnkey } from "@turnkey/sdk-server";

  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

  const response = await turnkeyClient.apiClient().whoami({
    organizationId: "<string> (Unique identifier for a given organization. If the request is being made by a WebAuthN user and their sub-organization ID is unknown, this can be the parent organization ID; using the sub-organization ID when possible is preferred due to performance reasons.)"
  });
  ```
</RequestExample>

<ResponseExample>
  ```json 200
  {
    "organizationId": "<string>",
    "organizationName": "<string>",
    "userId": "<string>",
    "username": "<string>"
  }
  ```
</ResponseExample>


# Backend Authentication
Source: https://docs.turnkey.com/authentication/backend-setup

Guide for integrating Turnkey authentication into your backend, covering session JWT creation, validation, and enforcing user access controls.

## Introduction

This guide shows you how to use Turnkey as the foundation for your own backend authentication system. You’ll learn how to issue, send, and validate session JWTs, and enforce access controls in your backend.

## Why Use Backend Authentication?

There are several benefits to enforcing authenticated requests to your backend:

1. **User data**: Store and retrieve user data associated with Turnkey sub-organizations
2. **Metrics and monitoring**: Add custom validations, rate limiting, and logging
3. **Co-signing capabilities**: Enable 2/2 signing patterns where your application is a co-signer

## JWT Authentication Flow

JSON Web Tokens (JWTs) provide a secure, stateless way to authenticate requests between your frontend and backend. Here's how to implement a JWT-based flow with Turnkey:

### Architecture Overview

```mermaid
sequenceDiagram
    participant User
    participant Frontend
    participant Backend
    participant Turnkey

    %% Login/Signup Flow
    User->>Frontend: Login/Signup Action
    Frontend->>Backend: Send auth info
    Backend->>Backend: Create and sign Turnkey request
    Backend->>Turnkey: Send signed request
    Turnkey->>Backend: Return session JWT
    Backend->>Frontend: Return session JWT
    Frontend->>Frontend: Store session JWT

    %% Subsequent Request Flow
    User->>Frontend: Action requiring Backend Authentication
    Frontend->>Backend: Send request with JWT
    Backend->>Backend: Validate JWT
    Backend->>Backend: Check user permissions
    Backend->>Frontend: Return response
    Frontend->>User: Update UI
```

### High-Level Flow

The overall pattern is similar, but may differ slightly depending on the auth method. Generally:

* The user authenticates (via passkey, OTP, etc.)
* A session is created with Turnkey, returning a session JWT
* That session JWT is used to make authenticated requests to your backend

## Getting the Session JWT

Turnkey supports multiple authentication methods, each of which results in a session JWT that proves the user's identity. This section covers the two most common flows: passkey authentication and OTP (One-Time Passcode) authentication. It explains how each method ultimately produces a session JWT that your frontend can use to make authenticated requests to your backend.

### Passkey Authentication

Turnkey supports passkey authentication, which allows users to log in using their device’s biometric system or a hardware security key. In this guide, we’ll separate login and signup flows, since most apps handle them independently and the implementation details differ slightly.

#### Signup Flow

```mermaid
sequenceDiagram
    participant User
    participant Frontend
    participant Backend
    participant Turnkey

    User->>Frontend: Begin signup (create passkey)
    Frontend->>Frontend: Create passkey and ephemeral API key
    Frontend->>Backend: Send passkey + ephemeral API public key
    Backend->>Turnkey: Create sub-org with passkey + API public key
    Turnkey->>Backend: Return subOrgId
    Backend->>Frontend: Return subOrgId
    Frontend->>Frontend: Create TurnkeyClient with ephemeral API key
    Frontend->>Turnkey: Call stampLogin() using ephemeral API key
    Turnkey->>Frontend: Return session JWT
    User->>Frontend: Action requiring Backend Authentication
    Frontend->>Backend: Send request along with session JWT
    Backend->>Backend: Validate JWT
    Backend->>Backend: Check user permissions
    Backend->>Frontend: Return response
    Frontend->>User: Update UI
```

<Steps>
  <Step title="Start the Signup Process">
    The user begins the signup flow by tapping a button like “Sign up with Passkey” on the frontend.
  </Step>

  <Step title="Generate Passkey and Temporary API Key">
    The frontend creates a passkey using WebAuthn, prompting the user for biometric or hardware authentication. At the same time, it silently generates a temporary API key in the background, which is used to stamp requests during the signup process.

    **Note:** We use a temporary API key during signup to avoid prompting the user twice for a passkey tap. Without it, we’d need to use the passkey to stamp the `stampLogin()` request later in the flow, which would trigger a second prompt right after creating the passkey. Using the API key instead allows us to create the session in the background with just a single tap.
  </Step>

  <Step title="Create a Turnkey Sub-organization">
    The frontend sends the passkey and API public key to the backend. The backend then uses the Turnkey API to create a new sub-organization and register both credentials as authenticators.
  </Step>

  <Step title="Create a Session">
    The frontend initializes a `TurnkeyClient` using the temporary API key and calls `stampLogin()`. Turnkey returns a session JWT representing the authenticated user session.
  </Step>

  <Step title="You're Now Authenticated">
    Your frontend can now make requests to your backend and attach the session JWT. The backend will validate the token on each request and verify that the user has permission to perform the requested action.
  </Step>
</Steps>

#### Login Flow

```mermaid
sequenceDiagram
    participant User
    participant Frontend
    participant Backend
    participant Turnkey

    User->>Frontend: Begin login
    Frontend->>Frontend: Call stampLogin() with passkeyStamper
    Frontend->>Frontend: Trigger WebAuthn prompt
    Frontend->>User: Request biometric/hardware authentication
    User->>Frontend: Tap to approve login
    Frontend->>Turnkey: Send signed request to Turnkey
    Turnkey->>Frontend: Return session JWT
    User->>Frontend: Action requiring Backend Authentication
    Frontend->>Backend: Send request along with session JWT
    Backend->>Backend: Validate JWT
    Backend->>Backend: Check user permissions
    Backend->>Frontend: Return response
    Frontend->>User: Update UI
```

<Steps>
  <Step title="Start the Login Process">
    The user begins the login flow by tapping a button like “Log in with Passkey” on the frontend.
  </Step>

  <Step title="Use Passkey to Authenticate">
    The frontend initializes a `TurnkeyClient` with a `passkeyStamper` and calls `stampLogin()`. This triggers a WebAuthn prompt, prompting the user to approve the login request using their passkey.
  </Step>

  <Step title="Create a Session">
    Once the user approves the request, the signed login is sent to Turnkey. Turnkey then returns a session JWT representing the authenticated user session.
  </Step>

  <Step title="You're Now Authenticated">
    Your frontend can now make requests to your backend and attach the session JWT. The backend will validate the token on each request and verify that the user has permission to perform the requested action.
  </Step>
</Steps>

### OTP Authentication

Turnkey also supports SMS and email-based One-Time Passcode (OTP) authentication, allowing users to log in by entering a code sent to their email or phone number. We’ll cover OTP login and signup together, since the flows are similar and most apps handle them in a unified way.

```mermaid
sequenceDiagram
    participant User
    participant Frontend
    participant Backend
    participant Turnkey

    User->>Frontend: Begin login (enter email/phone)
    Frontend->>Backend: Request OTP
    Backend->>Turnkey: Call initOtp()
    Turnkey->>Backend: Return otpId
    Backend->>Frontend: Return otpId
    Frontend->>User: Prompt for OTP code
    User->>Frontend: Enter OTP code
    Frontend->>Backend: Verify OTP
    Backend->>Turnkey: Call verifyOtp()
    Turnkey->>Backend: Return verification token
    Backend->>Frontend: Return verification token
    Frontend->>Frontend: Create API key
    Frontend->>Backend: Send API public key + verification token
    Backend->>Turnkey: Call getSubOrgIds() with contact info
    Turnkey->>Backend: Return existing subOrgId (if any)
    alt SubOrgId not found
        Backend->>Turnkey: Create new sub-org with contact
        Turnkey->>Backend: Return new subOrgId
    end
    Backend->>Turnkey: Call otpLogin() with subOrgId, public key, and token
    Turnkey->>Backend: Return session JWT
    Backend->>Frontend: Return session JWT
    User->>Frontend: Action requiring Backend Authentication
    Frontend->>Backend: Send request along with session JWT
    Backend->>Backend: Validate JWT
    Backend->>Backend: Check user permissions
    Backend->>Frontend: Return response
    Frontend->>User: Update UI
```

<Steps>
  <Step title="Start the Login Process">
    The user begins the login flow by entering their email or phone number on the frontend.
  </Step>

  <Step title="Request and Verify OTP">
    The frontend sends the contact info to your backend, which requests an OTP from Turnkey. Once the user receives and enters the code, your backend verifies it with Turnkey and receives a verification token.
  </Step>

  <Step title="Get or Create a Turnkey Sub-organization">
    The frontend generates an API key, then sends the API public key and verification token to the backend. The backend checks with Turnkey whether a sub-organization already exists for the contact. If not, it creates a new one.
  </Step>

  <Step title="Create a Session">
    The backend calls `otpLogin()` with the subOrgId, public key, and verification token. Turnkey returns a session JWT representing the authenticated user session, which the backend then returns to the frontend.
  </Step>

  <Step title="You're Now Authenticated">
    Your frontend can now make requests to your backend and attach the session JWT. The backend will validate the token on each request and verify that the user has permission to perform the requested action.
  </Step>
</Steps>

## Sending the JWT from the Frontend

After a user completes Turnkey authentication and a session is created (via passkey, OTP, or another supported method), your backend returns a session JWT to the frontend. This token proves the user’s identity and is the frontend’s responsibility to store and include in all future authenticated requests to your backend.

The session JWT should be attached to each request using the `Authorization` header. This allows your backend to identify the authenticated user and enforce any necessary access control based on the `user_id` or `organization_id`.

**Note:** These requests are sent to your own backend endpoints and may contain any application-specific payload, such as a form submission, a database mutation, or a business action. They are not necessarily related to Turnkey.

Here’s an example of how the frontend might send the JWT:

```typescript
const response = await fetch("/api/your-backend-endpoint", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    "Authorization": `Bearer ${sessionJwt}`,
  },
  body: JSON.stringify({ /* your request payload */ }),
});
```

This adds the following header to your HTTP request:

```http
Authorization: Bearer <session JWT>
```

## Validating the JWT in Your Backend

After a user completes Turnkey authentication and a session is created (via passkey, OTP, or another supported method), your backend returns a session JWT to the frontend. This token proves the user's identity and is the frontend’s responsibility to store and include in all future authenticated requests.

### What Does the Session JWT Contain?

Before diving into how to verify the session JWT, it’s helpful to understand what’s actually inside it. The JWT includes information that identifies the authenticated user and the organization they belong to, as well as metadata like expiration time and session type. Here’s an example of a decoded session JWT:

```typescript
  {
    "exp": <timestamp>,
    "public_key": "<compressed public key>",
    "session_type": "SESSION_TYPE_READ_WRITE",
    "user_id": "<user UUID>",
    "organization_id": "<organization UUID>"
  }
```

### Validating the JWT

To validate the session JWT:

<Steps>
  <Step title="Verify the Signature">
    Use the helper function `verifySessionJwtSignature` from [`@turnkey/crypto`](https://github.com/tkhq/sdk/blob/e10342cd111fbb9b1d168ff386b5dc263e3a5ce3/packages/crypto/src/turnkey.ts#L409-L466) to confirm that the JWT was signed by Turnkey and hasn’t been modified.

    ```typescript
      import { verifySessionJwtSignature } from "@turnkey/crypto";

      const isValid = await verifySessionJwtSignature(sessionJwt);
      if (!isValid) {
        throw new Error("Invalid JWT: failed signature verification");
      }
    ```
  </Step>

  <Step title="Decode the Session JWT">
    Before verifying expiration or enforcing access controls, you’ll need to decode the JWT payload to access fields like `user_id`, `organization_id`, and `exp`.

    Here’s an example helper you can define to decode and extract the session fields from the payload:

    ```typescript
      export function decodeSessionJwt(token: string): {
        sessionType: string;
        userId: string;
        organizationId: string;
        expiry: number;
        publicKey: string;
      } {
        const [, payload] = token.split(".");
        if (!payload) {
          throw new Error("Invalid JWT: Missing payload");
        }

        const decoded = JSON.parse(atob(payload));
        const {
          exp,
          public_key: publicKey,
          session_type: sessionType,
          user_id: userId,
          organization_id: organizationId,
        } = decoded;

        if (!exp || !publicKey || !sessionType || !userId || !organizationId) {
          throw new Error("JWT payload missing required fields");
        }

        return {
          sessionType,
          userId,
          organizationId,
          expiry: exp,
          publicKey,
        };
      }
    ```
  </Step>

  <Step title="Check the Expiration">
    Ensure that the token has not expired by validating the exp (expiration) claim.

    ```typescript
      if (decodedJwt.exp * 1000 < Date.now()) {
        throw new Error("Token has expired");
      }
    ```
  </Step>

  <Step title="Extract and Enforce Access Controls">
    Once the token is verified and decoded, use the `userId` and `organizationId` to enforce access control in your application.

    This step is application-specific and depends on how your backend maps users to organizations. For example, you might:

    * Look up the user in your database by `userId`
    * Confirm that the request targets the correct `organizationId`
    * Reject the request if the user is not linked to that organization

    This ensures that even with a valid JWT, a user can only access resources associated with their own Turnkey sub-organization.
  </Step>
</Steps>

## Advanced Topics

<Card title="Co-signing Transactions" icon="file-signature" href="../signing-automation/co-signing-transactions">
  Learn about advanced patterns like multi-signature setups requiring approvals
  from both the user and the backend.
</Card>


# Credentials
Source: https://docs.turnkey.com/authentication/credentials

An overview of credentials and how they're used with various authentication methods

## Introduction

After authenticating using frequently-used methods like [SMS OTP](/authentication/sms), [Email Authentication](/authentication/email), or [OAuth](/authentication/social-logins) (e.g., Google), users will make requests to Turnkey with a resulting API key. Each API key includes a `Credential` field specifying its type and public key. This Credential type can be used to identify how the API key was issued and which specific authentication method was used.

[Passkeys](/authentication/passkeys/introduction), known as Authenticators within the context of Turnkey, also have the same `Credential` field and are equally distinguished by the credential type.

## Obtaining an API key's credential type and public key

To obtain an API key's credential type and public key you can use the [GetAPIKey](/api-reference/queries/get-api-key) query. The API Key fields will be returned from this call and the credential `type` and `public_key` fields will be in the response. This will return an object that looks like:

```sh
{
   "apiKey": {
      "apiKeyId": "<api-key-id>",
      "apiKeyName": "<api-key-name>",
      "createdAt": {
         "nanos": "0",
         "seconds": "1752105687"
      },
      "credential": {
         "publicKey": "<api-key-public-key>",
         "type": "CREDENTIAL_TYPE_API_KEY_P256"
      },
      "updatedAt": {
         "nanos": "0",
         "seconds": "1752105687"
      }
   }
}
```

## Credential Types

The table below describes all of the different credential types and what authentication methods correspond to that credential type

| Type                                                  | Authentication Method(s)                                                                                    |
| ----------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- |
| **CREDENTIAL\_TYPE\_WEBAUTHN\_AUTHENTICATOR**         | [Passkey/Authenticator Authentication](/authentication/passkeys/introduction)                               |
| **CREDENTIAL\_TYPE\_API\_KEY\_P256**                  | [CreateAPIKeys](/api-reference/activities/create-api-keys) - curveType API\_KEY\_CURVE\_P256                |
| **CREDENTIAL\_TYPE\_RECOVER\_USER\_KEY\_P256**        | [Email Recovery](/authentication/email#recovery-flow)                                                       |
| **CREDENTIAL\_TYPE\_API\_KEY\_SECP256K1**             | Used for Ethereum and SECP256K1 chainS [Wallet Authentication](/embedded-wallets/code-examples/wallet-auth) |
| **CREDENTIAL\_TYPE\_EMAIL\_AUTH\_KEY\_P256**          | [Credential Bundle based Email Authentication](/authentication/email#credential-bundle-method)              |
| **CREDENTIAL\_TYPE\_API\_KEY\_ED25519**               | Solana and ED25519 chains [Wallet Authentication](/embedded-wallets/code-examples/wallet-auth)              |
| **CREDENTIAL\_TYPE\_OTP\_AUTH\_KEY\_P256**            | OTP based [Email](/authentication/email#otp-based-method) or [SMS](/authentication/sms) Authentication      |
| **CREDENTIAL\_TYPE\_READ\_WRITE\_SESSION\_KEY\_P256** | [CreateReadWriteSession](/api-reference/activities/create-read-write-session)                               |
| **CREDENTIAL\_TYPE\_OAUTH\_KEY\_P256**                | [Social Logins](/authentication/social-logins)                                                              |
| **CREDENTIAL\_TYPE\_LOGIN**                           | [IndexedDB Authentication](/sdks/javascript-browser#indexeddbclient); OTP, Passkey, or OAuth                |


# Email auth & recovery
Source: https://docs.turnkey.com/authentication/email

Email Authentication enables users to authenticate and recover their Turnkey accounts using email-based verification. There are two methods of email authentication:

#### One-Time Password

* Uses a 6-9 digit or bech32 alphanumeric one-time password sent via email
* Simple, and familiar user experience

#### One-Time Password Sandbox Environment

To test OTP codes in our sandbox environment you can use the following:

* `alphanumeric` must be set to `false`
* `otpLength` must be set to `6`
* Email: [user@example.com](mailto:user@example.com)
* OTP Code: `000000`

**Credential Bundle**

* Sends an encrypted API key credential directly via email
* Alternative method for specific use cases
* More secure, but requires copying the full credential to the client

Both methods provide users with an expiring API key for authentication or account recovery.

## Core mechanism

Email Authentication is built with expiring API keys as the foundation. The two delivery mechanisms are:

### OTP-based method

The authentication process happens in two steps:

<Steps>
  <Step>
    A 6-9 digit or alphanumeric OTP code is sent to the user's verified email
    address
  </Step>

  <Step>
    Upon verification of the correct code, an API key credential is generated
    and encrypted for the client
  </Step>
</Steps>

### Credential bundle method

**Note:** on web, this method is only supported with the legacy iframe-based flow, if no hard requirement to use encrypted bundles, we suggest to use the IndexedDB-based OTP flow instead.

The API key credential is encrypted and delivered directly through email to the user.
Once the credential is live on the client side (within the context of an iframe), it is readily available to stamp (authenticate) requests. See the [enclave to end-user secure channel](/security/enclave-secure-channels) for more info on how we achieve secure delivery.

## Prerequisites

Make sure you have set up your primary Turnkey organization with at least one API user that can programmatically initiate email auth and create suborganizations. Check out our [Quickstart guide](/getting-started/quickstart) if you need help getting started. To allow an API user to initiate email auth, you'll need the following policy in your main organization:

```json
{
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '<YOUR_API_USER_ID>')",
  "condition": "(activity.resource == 'AUTH' && activity.action == 'CREATE') || (activity.resource == 'ORGANIZATION' && activity.action == 'CREATE')"
}
```

For OTP Auth signup and login flows you will need a user with the following policy

```json
{
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '<YOUR_API_USER_ID>')",
  "condition": "(activity.resource == 'AUTH' && activity.action == 'CREATE') || (activity.resource == 'OTP' && activity.action == 'CREATE') || (activity.resource == 'OTP' && activity.action == 'VERIFY') || (activity.resource == 'ORGANIZATION' && activity.action == 'CREATE')"
}
```

## User experience

### OTP-based authentication flow

The flow begins with a new activity of type `ACTIVITY_TYPE_INIT_OTP` using the parent organization id with these parameters:

* `otpType`: specify `"OTP_TYPE_EMAIL"`
* `contact`: user's email address
* `emailCustomization`: optional parameters for customizing emails
* `userIdentifier`: optional parameter for rate limiting SMS OTP requests per user.
  We recommend generating this server-side based on the user's IP address or public key.
  See the [OTP Rate Limits](#otp-rate-limits) section below for more details.
* `alphanumeric`: optional parameter for making this code bech32 alphanumeric or not. default: true
* `otpLength`: optional parameter for selecting the length of the OTP. default: 9
* `expirationSeconds`: optional validity window (defaults to 5 minutes)
* `sendFromEmailAddress` : optional custom email address from which to send the OTP email
* `sendFromEmailSenderName` : optional custom sender name for use with sendFromEmailAddress; if left empty, will default to ‘Notifications’
* `replyToEmailAddress` : optional custom email address to use as reply-to

After receiving the OTP, users complete OTP verification with `ACTIVITY_TYPE_VERIFY_OTP` using the parent organization id which returns a verificationToken JWT:

* `otpId`: ID from the init activity
* `otpCode`: the 6-9 digit or alphanumeric code received via email
* `expirationSeconds`: optional validity window (defaults to 1 hour)

After receiving the verification token, users complete OTP authentication flow with with `ACTIVITY_TYPE_OTP_LOGIN` using the sub orgazanition ID associated with the contact from the first step:

* `publicKey`: public key to add to organization data associated with the signing key in IndexedDB or SecureStorage.
* `verificationToken`: JWT returned from successfull `VERIFY_OTP` activity
* `expirationSeconds`: optional validity window (defaults to 15 minutes)
* `invalidateExisting`: optional boolean to invalidate previous login sessions

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/authentication/img/auth_otp_email.png" alt="auth otp email" />
</Frame>

### OTP rate limits

In order to safeguard users, Turnkey enforces rate limits for OTP auth activities. If a `userIdentifier` parameter is provided, the following limits are enforced:

* 3 requests per 3 minutes per unique `userIdentifier`
* 3 retries max per code, after which point that code will be locked
* 3 active codes per user, each with a 5 minute TTL

### Credential bundle authentication flow

This alternative method uses `ACTIVITY_TYPE_EMAIL_AUTH` with these parameters:

* `email`: user's email address (must match their registered email)
* `targetPublicKey`: public key for credential encryption
* `apiKeyName`: optional name (defaults to `Email Auth - <Timestamp>`)
* `expirationSeconds`: optional validity window (defaults to 15 minutes)
* `emailCustomization`: optional parameters for customizing emails
* `invalidateExisting`: optional boolean to invalidate previous Email Auth API keys

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/authentication/img/auth_email.png" alt="auth email" />
</Frame>

### Recovery flow

**Note:** this is legacy flow, if starting fresh please use the above email auth methods also for recovery purposes

For account recovery scenarios, users can initiate a recovery-specific flow using the `ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY` activity type, which requires:

* `email`: the email of the user needing recovery (must match their registered email)
* `targetPublicKey`: the public key for recovery credential encryption

The recovery process consists of two phases:

1. **Initiation**: Generates a temporary recovery credential and sends it via email
2. **Finalization**: User decrypts the recovery credential and uses it to sign an `ACTIVITY_TYPE_RECOVER_USER` activity, which can add new authenticators to regain account access

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/authentication/img/auth_email.png" alt="auth email" />
</Frame>

## Email customization

We offer customization for the following:

* `appName`: the name of the application. This will be used in the email's subject, e.g. `Sign in to ${appName}`
* `logoUrl`: a link to a PNG with a max width of 340px and max height of 124px
* `magicLinkTemplate`: a template for the URL to be used in the magic link button, e.g. `https://dapp.xyz/%s`. The auth bundle will be interpolated into the `%s`

```js
// Sign and submits the EMAIL_AUTH activity
const response = await client.emailAuth({
  type: "ACTIVITY_TYPE_EMAIL_AUTH",
  timestampMs: String(Date.now()),
  organizationId: <sub-organization-id>,
  parameters: {
    email: <user-email>,
    targetPublicKey: <iframe-public-key>,
    apiKeyName: <optional-api-key-name>,
    expirationSeconds: <optional-api-key-expiration-in-seconds>,
    emailCustomization: {
      appName: <optional-your-app-name>,
      logoUrl: <optional-your-logo-png>,
      magicLinkTemplate: <optional-magic-link>
    }
  },
});
```

### Email templates

We also support custom HTML email templates for [Enterprise](https://www.turnkey.com/pricing) clients on the **Scale** tier. This allows you to inject arbitrary data from a JSON string containing key-value pairs. In this case, the `emailCustomization` variable may look like:

```js
...
emailCustomization: {
  templateId: <HTML-template-stored-in-turnkey>,
  templateVariables: "{\"username\": \"alice and bob\"}"
}
...
```

In this specific example, the value `alice and bob` can be interpolated into the email template using the key `username`. The use of such template variables is purely optional.

Here's an example of a custom HTML email containing an email auth bundle:

<Frame>
  ![dynamic email auth
  example](https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/embedded-wallets/img/email-auth-example-dynamic.png)
</Frame>

If you are interested in implementing bespoke, fully-customized email templates, please reach out to [hello@turnkey.com](mailto:hello@turnkey.com).

## Authorization

Authorization is managed through our [policy engine](/concepts/policies/overview):

### Authentication

Both OTP-based and credential bundle authentication activities:

* Can be performed by [root users](/concepts/overview#users) and users with proper policy authorization
* Require the respective feature to be enabled in the organization and sub-organization
* Can target any user in the organization or sub-organizations

Specifically:

* For OTP-based auth: `ACTIVITY_TYPE_INIT_OTP`, `ACTIVITY_TYPE_VERIFY_OTP` and `ACTIVITY_TYPE_OTP_LOGIN`
* For credential bundle auth: `ACTIVITY_TYPE_EMAIL_AUTH`

### Recovery

* `ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY`:

  * Initiates the recovery process
  * Requires proper authorization via policies
  * Can target any user in the organization or sub-organizations

* `ACTIVITY_TYPE_RECOVER_USER`:

  * Must be signed by the recovery credential received via email
  * Users can add credentials to their own user when authenticated
  * Recovery credentials expire after 15 minutes
  * Only the most recent recovery credential remains valid
  * Users can add new authenticators to regain account access when authenticated with a recovery credential

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/authentication/img/diagrams/email_auth_authorization.png" alt="email auth authorization" />
</Frame>

## Implementation in sub-organizations

Both authentication methods and recovery work seamlessly with [sub-organizations](/concepts/sub-organizations).

### Example implementations

* [OTP Auth Example](https://github.com/tkhq/sdk/tree/main/examples/otp-auth)
* [Email Auth Example](https://github.com/tkhq/sdk/tree/main/examples/email-auth)
* [Email Recovery Example](https://github.com/tkhq/sdk/tree/main/examples/email-recovery)
* [Demo Embedded Wallet](https://wallet.tx.xyz) ([code](https://github.com/tkhq/demo-embedded-wallet))

For implementation details:

<CardGroup>
  <Card title="Sub-Organization Email Auth Guide" href="/embedded-wallets/sub-organization-auth" icon="file-lines" iconType="solid" horizontal />

  <Card title="Sub-Organization Recovery Guide" href="/embedded-wallets/sub-organization-recovery" icon="file-lines" iconType="solid" horizontal />
</CardGroup>

## Implementation in organizations

For organizations accessed via dashboard:

1. Ensure the required features are enabled:

   * `FEATURE_NAME_OTP_EMAIL_AUTH` for OTP-based authentication
   * `FEATURE_NAME_EMAIL_AUTH` for credential bundle authentication
   * Recovery features if needed

2. Users initiating the request must have appropriate permissions

## Opting out

Organizations can disable email-based features if their security model requires it:

Use `ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE` to disable:

* `FEATURE_NAME_OTP_EMAIL_AUTH` for OTP-based authentication
* `FEATURE_NAME_EMAIL_AUTH` for credential bundle authentication
* `FEATURE_NAME_EMAIL_RECOVERY` for recovery

When creating sub-organizations, use:

* `disableOtpEmailAuth` parameter for OTP-based authentication
* `disableEmailAuth` parameter for credential bundle authentication
* `disableEmailRecovery` parameter for recovery

## Implementation notes

* Users are limited to:

  * 10 long-lived API keys
  * 10 expiring API keys (oldest are discarded when limit is reached)

### For top-level organizations

* Both authentication methods are disabled by default
* Must be enabled via `ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE`

### For sub-organizations

* Both authentication methods are enabled by default
* Can be disabled during creation using `CreateSubOrganizationIntentV7` activity parameters

Example of enabling OTP-based Email Auth:

```bash
turnkey request --host api.turnkey.com --path /public/v1/submit/set_organization_feature --body '{
        "timestampMs": "'"$(date +%s)"'000",
        "type": "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE",
        "organizationId": "<YOUR-ORG-ID>",
        "parameters": {
                "name": "FEATURE_NAME_OTP_EMAIL_AUTH"
        }
}' --organization <YOUR-ORG-ID>
```

Example of enabling credential bundle Email Auth:

```bash
turnkey request --host api.turnkey.com --path /public/v1/submit/set_organization_feature --body '{
        "timestampMs": "'"$(date +%s)"'000",
        "type": "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE",
        "organizationId": "<YOUR-ORG-ID>",
        "parameters": {
                "name": "FEATURE_NAME_EMAIL_AUTH"
        }
}' --organization <YOUR-ORG-ID>
```


# Overview
Source: https://docs.turnkey.com/authentication/overview

Learn about supported authentication methods for Turnkey, how to add them, and usage details.

Turnkey's wallet system supports granular controls on who can access wallets and what actions different users can perform.

To enforce these controls, Turnkey's API must verify the identity of the party requesting a wallet action, ensuring that only authorized actions are executed by the system. This process is known as **authentication**.

Turnkey supports both **API authentication** and **user authentication** for authenticating access to wallets.

## API authentication

With **API authentication**, Turnkey authenticates a request from your server directly using an **API secret**. This ensures that Turnkey only executes requests sent by your servers alone, and no other party.

In addition to the API secret, you can also configure **authorization policies** that control specific wallets, private keys, and other resources. Any requests to use or update these resources require approval according to the corresponding policy. This allows you to enforce granular controls on all Turnkey resources.

For backend implementation details, see our [Backend Setup](/authentication/backend-setup) guide.

**API Reference**: [Create API Keys](/api-reference/api-keys/create-api-keys), [Get API Keys](/api-reference/api-keys/get-api-key)

## User authentication

Turnkey is a powerful toolkit for progressive authentication of users. With fine-grained control over onboarding flows and wallet connections, you can improve conversion and craft better UX.

Using any of Turnkey's client-side SDKs, your app can authenticate users across web2 and web3 accounts, including:

* **WebAuthN/Passkeys**: Biometric or passkey-based login based on the WebAuthn standard. [Learn more](/authentication/passkeys/introduction)
* **Email or SMS**: Passwordless login via a one-time passcode sent to a user's email address or phone number. [Learn more](/authentication/email) | [SMS Authentication](/authentication/sms)
* **OAuth and social logins**: Social login with Google, Apple, Twitter, Discord, GitHub, LinkedIn, and more. [Learn more](/authentication/social-logins)
* **Wallets**: External wallet login via Sign-In With Ethereum and Sign-In With Solana. [Learn more](/embedded-wallets/code-examples/wallet-auth)

Your app can configure each of these authentication methods to be an upfront login method, or as an account that users link later.

All of Turnkey's authentication methods create a common user object, where you can easily find a user's unique ID and all of the accounts they've linked to their profile. A user is a user, regardless of whether they've connected with a wallet, email or other account.

Once a user successfully authenticates with Turnkey, Turnkey creates a session for that user that your app can use to represent an authenticated session or to make authenticated requests to your backend.

For information about managing authenticated sessions, see our [Sessions](/authentication/sessions) documentation.

## Related Resources

<CardGroup cols={2}>
  <Card title="Passkey Introduction" icon="key" href="/authentication/passkeys/introduction">
    Biometric and hardware-based passwordless authentication using WebAuthn
    standard.
  </Card>

  <Card title="Email Authentication" icon="envelope" href="/authentication/email">
    Passwordless login via one-time codes sent to users' email addresses.
  </Card>

  <Card title="SMS Authentication" icon="message" href="/authentication/sms">
    User verification through one-time passwords sent via text message.
  </Card>

  <Card title="Social Logins" icon="users" href="/authentication/social-logins">
    OAuth authentication with popular social providers like Google, Apple, and
    Twitter.
  </Card>

  <Card title="Sessions" icon="clock" href="/authentication/sessions">
    Manage authenticated user sessions and access tokens in your application.
  </Card>
</CardGroup>


# Discoverable vs. Non-Discoverable
Source: https://docs.turnkey.com/authentication/passkeys/discoverable-vs-non-discoverable

Also known as "resident" vs. "non-resident" credentials. From [the spec](https://www.w3.org/TR/webauthn-2/)

> Historically, client-side discoverable credentials have been known as resident credentials or resident keys. Due to the phrases ResidentKey and residentKey being widely used in both the WebAuthn API and also in the Authenticator Model (e.g., in dictionary member names, algorithm variable names, and operation parameters) the usage of resident within their names has not been changed for backwards compatibility purposes. Also, the term resident key is defined here as equivalent to a client-side discoverable credential.

What does this mean exactly?

* "resident" credentials and "discoverable" credentials are the same
* "non-resident" credentials and "non-discoverable" credentials are the same.

The spec authors made this rename for clarity.

With terminology out of the way, what is a "discoverable" credential compared to a "non-discoverable" credential? And why does it matter?

## Discoverable credentials

A discoverable credential is a self-contained key pair, stored on the end-user's device. Discoverable credentials are preferred because keys are self-contained, can easily be synced and can be used across devices independently. Crucially for UX, the end-user is able to list their passkeys and choose which device/passkey they'd like to use:

<CardGroup>
  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/passkeys/img/passkeys/discoverable_device_choice.png" alt="device selection on Chrome" />
  </Frame>

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/passkeys/img/passkeys/discoverable_passkey_choice.png" alt="passkey selection on Chrome" />
  </Frame>
</CardGroup>

With discoverable credentials you don't have to keep track of credential IDs. Your authentication flow can simply be: "prompt the user with passkey authentication", and let the browser or device native UX handle the rest! The downside is you lose some control over these prompts, because they will vary depending on your users' OS and browser.

For a live example using discoverable credentials, see [wallet.tx.xyz](https://wallet.tx.xyz/).

## Non-Discoverable credentials

A non-discoverable credential isn’t stored on the end-user's device fully: Turnkey must store the generated credential ID; otherwise the user won’t be able to sign. This is because the actual signing key is a combination of an “on-device” secret and the credential ID (see details [here](https://crypto.stackexchange.com/questions/105942/how-do-non-resident-keys-work-in-webauthn)).

Why would you choose non-discoverable credentials?

* Most hardware security keys have limited slots to store discoverable credentials, or will refuse to create new discoverable credentials on the hardware altogether. YubiKey 5 [advertises 25 slots](https://support.yubico.com/hc/en-us/articles/4404456942738-FAQ#h_01FFHQFVBW0995G2MKZGCKQVEJ), SoloKeys [support 50](https://github.com/solokeys/solo1/issues/156#issuecomment-477645573), NitroKeys 3 [support 10](https://github.com/Nitrokey/nitrokey-3-firmware/blob/0e23c75318e2016ac1cfb8345de9279e3ad2eaf9/components/apps/src/lib.rs#L390). Non-discoverable credentials aren't subject to these limits because they work off of a single hardware secret.
* Security keys can only allow clearing of individual slots if they support [CTAP 2.1](https://fidoalliance.org/specs/fido-v2.1-rd-20201208/fido-client-to-authenticator-protocol-v2.1-rd-20201208.html). This is described in [this blog post](https://fy.blackhats.net.au/blog/2023-02-02-how-hype-will-turn-your-security-key-into-junk/). When security keys do not support CTAP 2.1, slots can only be freed up by resetting the hardware entirely, erasing all secrets at once.
* Non-discoverable credentials take less space. This is important in some environments, but unlikely to be relevant if your users are storing passkeys in their Google or Apple accounts (plenty of space available there!)
* Credential IDs have to be communicated during authentication (via the `allowCredentials` field). This allows browsers to offer better, more tailored prompts in some cases. For example: if the list contains a single authenticator with `"transports": ["AUTHENTICATOR_TRANSPORT_INTERNAL"]`, Chrome does “the right thing” by skipping the device selection popup: users go straight to the fingerprint popup, with no need to select “this device”!

The downside to this is, of course, that you need to store credential IDs, and you need to make sure you can retrieve credentials for each user. This can be done with a table of credentials keyed by user email, for example. Or if you have your own authentication already, a list of credentials can be returned when the user logs in.

For a live example using non-discoverable credentials, head to [app.turnkey.com](https://app.turnkey.com). That's right, Turnkey uses non-discoverable credentials because we need to offer broad support for security keys. We have some work ongoing to support both discoverable and non-discoverable credentials going forward.


# Integrating Passkeys
Source: https://docs.turnkey.com/authentication/passkeys/integration



## Passkey flow

A typical passkey flow is composed of 4 main steps, depicted below:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/passkeys/img/passkeys/turnkey_passkey_flow.png" alt="Passkey flow on Turnkey" />
</Frame>

1. Your app frontend triggers a passkey prompt.
2. Your end-user uses their device to produce a signature with their passkey, and a signed request is produced.
3. The signed request is forwarded to your backend. This step is optional, see ["To Proxy or not to proxy"](#proxying-signed-requests) below for more information.
4. The signed request is verified within a Turnkey secure enclave.

This flow happens once for **registration** and for each subsequent **authentication** or signature request. The main difference is the browser APIs used to trigger the passkey prompt in step (1):

* **Passkey registration** uses `navigator.credentials.create`(as described in [this guide](https://web.dev/passkey-registration/)). `navigator.credentials.create` triggers the creation of a **new** passkey.
* **Passkey authentication** uses `navigator.credentials.get`. See [this guide](https://web.dev/passkey-form-autofill/) for more information. `navigator.credentials.get` triggers a signature prompt for an **existing** passkey.

## Our SDK can help

Our SDK has integrated passkey functionality, and we've built examples to help you get started.

* [`@turnkey/http`](https://www.npmjs.com/package/@turnkey/http) has a helper to trigger passkey registration (`getWebAuthnAttestation`). You can see it in action in our [`with-federated-passkeys`](https://github.com/tkhq/sdk/tree/main/examples/with-federated-passkeys) example: [direct code link](https://github.com/tkhq/sdk/blob/a2bfbf3cbd6040902bbe4c247900ac560be42925/examples/with-federated-passkeys/src/pages/index.tsx#L88)

* [`@turnkey/webauthn-stamper`](https://www.npmjs.com/package/@turnkey/webauthn-stamper) is a passkey-compatible stamper which integrates seamlessly with `TurnkeyClient`:

```ts
import { WebauthnStamper } from "@turnkey/webauthn-stamper";
import { TurnkeyClient, createActivityPoller } from "@turnkey/http";

const stamper = new WebauthnStamper({
  rpId: "your.app.xyz",
});

// New HTTP client able to sign with passkeys
const httpClient = new TurnkeyClient(
  { baseUrl: "https://api.turnkey.com" },
  stamper
);

// This will produce a signed request that can be POSTed from anywhere.
// The `signedRequest` has a URL, a POST body, and a "stamp" (HTTP header name and value)
const signedRequest = await httpClient.stampCreatePrivateKeys(...)

// Alternatively, you can POST directly from your frontend.
// Our HTTP client will use the webauthn stamper and the configured baseUrl automatically!
const activityPoller = createActivityPoller({
  client: client,
  requestFn: client.createPrivateKeys,
});

// Contains the activity result; no backend proxy needed!
const completedActivity = await activityPoller({
  type: "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2",
  // (omitting the rest of this for brevity)
})
```

* [`@turnkey/viem`](https://www.npmjs.com/package/@turnkey/viem) is a package wrapping all of the above so that you work directly with Viem without worrying about passkeys. See [this demo](https://github.com/tkhq/sdk/tree/main/examples/with-viem-and-passkeys).

Regardless of whether you use our helpers and abstractions, take a look at [our registration and authentication options guide](/authentication/passkeys/options). This will help you choose the right options for your passkey flow.

If you have questions, feedback, or find yourself in need of an abstraction or integration that doesn't exist yet, please get in touch with us! You can

* Create an [issue on our SDK repo](https://github.com/tkhq/sdk/issues)
* Join our slack community [here](https://join.slack.com/t/clubturnkey/shared_invite/zt-31v4yhgw6-PwBzyNsWCCBTk2xft3EoHQ)
* Contact us at [hello@turnkey.com](mailto:hello@turnkey.com)

We're here to make this as easy as possible for you and your team!

## Passkey wallets with sub-organizations

If you're wondering how to create independent, non-custodial wallets for your end-users, head to [Sub-Organizations](/concepts/sub-organizations). In short: you'll be able to pass the registered passkeys as part of a "create sub-organization" activity, making your end-users the sole owners of any resource created within the sub-organization (including private keys). Your organization will only have read permissions.


# Introduction to Passkeys
Source: https://docs.turnkey.com/authentication/passkeys/introduction

Passkeys are born out of a new standard being pushed by major industry players: Apple and Google.

Google has a great high-level introduction to passkeys at [https://developers.google.com/identity/passkeys](https://developers.google.com/identity/passkeys), and Apple has its own version here: [https://developer.apple.com/passkeys](https://developer.apple.com/passkeys)

## TLDR: what are passkeys?

From a technical point of view, passkeys are cryptographic key pairs created on end-user devices. Apple and Google have done a great job making these key pairs usable:

* Key generation happens in secure end-user hardware.
* Using passkeys is easy thanks to native browser UIs and cross-device syncing.
* Passkey recovery for users is supported natively by Apple via iCloud Keychain and Google via the Google Password Manager.

Passkeys come with big security upgrades compared to traditional passwords:

* Access to passkeys is gated with OS-level biometrics: faceID, touchID, lock screen patterns, and so on.
* Passkeys are bound to the web domain that creates them. This is important to thwart phishing attacks, where an attacker hosts a similar-looking website to steal user credentials. This is doable with passwords; impossible with passkeys.
* Because passkeys rely on public key cryptography, passkeys have two components: a public key and a private key. Private keys are never disclosed to websites or apps, making them a lot harder to steal. Only public keys are sent. To authenticate, passkeys sign messages (with their private keys) and provide signatures as proofs, similar to crypto wallets.

## Isn't this similar to Webauthn?

If you know about Webauthn, congratulations: a lot of this will feel familiar. Passkeys rely on the [same web standard](https://www.w3.org/TR/webauthn-2/) and the same browser APIs: `navigator.credentials.create` and `navigator.credentials.get`.

The difference? Passkeys are resident credentials and they can be synced between devices. As a result, they are **not** device-bound and can be used from any device.

## How do cross-device syncing and recovery work?

Synchronization and recovery are both supported natively by Apple and Google:

* With Apple, Passkeys created on one device are synced through [iCloud Keychain](https://support.apple.com/en-us/HT204085) as long as the user is logged in with their Apple ID. Apple covers both syncing and recovery in ["About the security of passkeys"](https://support.apple.com/en-us/102195). For some additional detail, see [this Q\&A with the passkey team](https://developer.apple.com/news/?id=21mnmxow). Apple's account recovery process is documented in [this support page](https://support.apple.com/en-us/HT204921).
* With Google, [Google Password Manager](https://passwords.google/) syncs passkeys across devices seamlessly. Google has plans to support syncing more broadly across different operating systems, see [this support summary](https://developers.google.com/identity/passkeys/supported-environments#chrome-passkey-support-summary). Recovery is covered in [this FAQ ("What happens if a user loses their device?")](https://developers.google.com/identity/passkeys/faq#what_happens_if_a_user_loses_their_device): it relies on Google's overall [account recovery process](https://support.google.com/accounts/answer/7682439?hl=en) because passkeys are attached to Google accounts.

## OS and browser support

Modern browsers have great support for passkeys. See [caniuse](https://caniuse.com/passkeys) for detailed information.

Support also varies by operating system: [this matrix](https://passkeys.dev/device-support/#matrix) has detailed information about OS-level support.

## Betting on Webauthn and Passkeys

We believe **it's time to move away from passwords** so we've built Turnkey without them. When you authenticate to Turnkey you'll be prompted to create a new passkey:

<CardGroup>
  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/passkeys/img/passkeys/turnkey_authenticator_selection.png" alt="Authenticator selection on Turnkey" />
  </Frame>

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/passkeys/img/passkeys/turnkey_passkey_prompt.png" alt="Passkey prompt on Turnkey" />
  </Frame>
</CardGroup>

Authentication to Turnkey requires a passkey signature. No password needed!

Next up, learn about how you can integrate passkeys into your app, [here](/authentication/passkeys/integration).


# Native Passkeys
Source: https://docs.turnkey.com/authentication/passkeys/native

If you're unfamiliar with passkeys broadly, head to  for an overview. TL;DR: passkeys are cryptographic key pairs generated and stored on secure hardware. Typically this is your Mac's or iPhone's , your Android's , or an external security key plugged in via USB.

* Registration ("sign up") creates a new key pair: this is your passkey
* Authentication ("sign in") uses an existing passkey to sign a message, proving ownership of the associated private key stored on your device.

## Passkeys on the Web

Creating and using passkeys on the web is straightforward: browsers offer APIs to do it!

* `navigator.credentials.create` creates a passkey
* `navigator.credentials.get` prompts the user to select a passkey to sign a message

And this doesn't require a backend. Here's a demo proving it: [https://passkeyapp.tkhqlabs.xyz/](https://passkeyapp.tkhqlabs.xyz/)

An important security feature of passkeys: they're **domain-bound** to prevent phishing. In other words: passkeys created on `passkeyapp.tkhqlabs.xyz` won't be usable on `turnkey.com` for example. Browsers prevent this.

## Native Platform APIs

### Android

In the Android ecosystem the `CredentialManager` supports creating and using passkeys with `CreatePublicKeyCredentialRequest` and `GetCredentialRequest`. See [the associated documentation](https://developer.android.com/training/sign-in/passkeys#sign-in) for more information.

### iOS

iOS APIs to create and use passkeys are available as well:

* `ASAuthorizationPlatformPublicKeyCredentialProvider(…).createCredentialRegistrationRequest` for passkey creation
* `ASAuthorizationPlatformPublicKeyCredentialProvider(…).createCredentialAssertionRequest` for passkey usage

See [these docs](https://developer.apple.com/documentation/authenticationservices/asauthorizationplatformpublickeycredentialprovider) for more info. And [this app](https://github.com/r-n-o/shiny) for a mini demo.

### Beware: no native Turnkey SDK (yet)

While the native APIs to interact with passkeys exists on both iOS and Android, Turnkey doesn't yet offer an SDK for Swift or Kotlin, which means you'd have to write code to sign activities and send HTTP requests to our API. Get in touch with us if this is something you're attempting to do, we'd love to support you and release this as a proper SDK maintained by Turnkey.

## Building with React Native (recommended)

Turnkey has a fully-featured [TypeScript SDK](https://github.com/tkhq/sdk/). It provides a type-safe client to call the Turnkey API and abstracts activity request signing.

[React Native](https://reactnative.dev/) lets you write your app in Typescript and compile it into native code for both iOS and Android automatically.

To sign Turnkey requests with native passkeys in a React Native application we've released [`@turnkey/react-native-passkey-stamper`](https://www.npmjs.com/package/@turnkey/react-native-passkey-stamper), a package compatible with our TypeScript client to sign Turnkey requests with native passkeys.

Under the hood this package wraps [`react-native-passkey`](https://github.com/f-23/react-native-passkey), which calls the right native APIs on [iOS](https://github.com/f-23/react-native-passkey/blob/17184a1b1f6f3ac61e07aa784c9b64efb28b570e/ios/Passkey.swift#L29) and [Android](https://github.com/f-23/react-native-passkey/blob/17184a1b1f6f3ac61e07aa784c9b64efb28b570e/android/src/main/java/com/reactnativepasskey/PasskeyModule.kt#L30C44-L30C76), and exports a unified interface that we leverage.

Bottom-line: if you've used our [webauthn stamper](https://www.npmjs.com/package/@turnkey/webauthn-stamper) or [API key stamper](https://www.npmjs.com/package/@turnkey/api-key-stamper), using our React Native passkey stamper will feel familiar. Take a look at the ["Installation"](https://www.npmjs.com/package/@turnkey/react-native-passkey-stamper#installation) and ["Usage"](https://www.npmjs.com/package/@turnkey/react-native-passkey-stamper#usage) sections to get started with passkeys in your React Native application.

If you're looking for a concrete example, head to [this repository](https://github.com/r-n-o/passkeyapp): it contains a sample application integrated with Turnkey, written with Expo, and tested on both Android and iOS.

## Linking apps and web domains

Passkeys on native apps aren't app-bound, they're **domain** bound just like web passkeys. This may come as a surprise: you'll have to configure a web domain to use passkeys natively! Configuration is done separately per ecosystem, but the idea is the same:

* iOS expects a JSON file at the domain root (`/.well-known /apple-app-site-association`) : [example](https://github.com/r-n-o/passkeyapp/blob/main/http/.well-known/apple-app-site-association)
* Android expects a JSON file at the domain root (`/.well-known/assetlinks.json`): [example](https://github.com/r-n-o/passkeyapp/blob/main/http/.well-known/assetlinks.json)

This unlocks interesting flows where users use their web-created passkeys in a "companion" native app, or vice-versa. For example: a native app linked to the wallet.tx.xyz domain would allow users to log into their account from a native mobile app *using their web-created passkey* as long as they're synced properly.

Note that these associations are "many-to-many": a website can link multiple associated apps, and a single native application can choose to create passkeys for multiple domains, via a dropdown for example. However (as far as we know) a single passkey is always bound to a single web domain: it can't be bound to multiple web domains.


# Passkey Options
Source: https://docs.turnkey.com/authentication/passkeys/options

Whether you use the raw browser APIs or one of our helpers you'll have flexibility to set your own registration and authentication options. This page provides an overview and some recommendations related to these options.

## Registration options

Mozilla has good (but lengthy) documentation on each option: [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/create). Below we detail the most relevant options you'll want to think about.

### `challenge`

This is the challenge signed by the end-user for registration. During registration this challenge isn't meaningful so we recommend picking a random challenge. It will not be visible to users.

### `timeout`

Number of seconds before "giving up". The browser will simply show a timeout popup:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/passkeys/img/passkeys/timeout.png" alt="Timeout popup" />
</Frame>

This UI isn't very helpful, so we recommend making the timeout long (5 minutes). The less your users see this, the better.

### `rp`

The `rp` options is an object with 2 fields: `id` and `name`.

`rp.id` (aka RPID) should be your app top-level domain. For example, if your app is hosted on `https://your.app.xyz` the RPID should be `app.xyz` unless you have good reasons to do otherwise (see below).

<Accordion title="Reasons to set RPID to specific sub-domains">
  `rp.id`, or RPID, is a way to identify the website a passkey is associated with. Once set at registration time, it **determines the set of origins on which the passkey may be be used**. The [WebAuthn spec](https://www.w3.org/TR/webauthn-2/#relying-party-identifier) states that the RPID must be a “registrable domain suffix of, or equal to” the current domain. If the page creating a passkey is hosted at `https://your.app.xyz`, the RPID can thus be "your.app.xyz" or "app.xyz".

  A passkey with RPID "your.app.xyz" **cannot** be used on `https://www.app.xyz` or `https://foo.app.xyz`. However a passkey created with RPID "app.xyz" **will** be usable on all `https://*.app.xyz` sub-domains: `https://your.app.xyz`, `https://www.app.xyz`, `https://foo.app.xyz`, and so on. Hence our general recommendation above to set `app.xyz` (top-level domain) as the RPID to maximize flexibility.

  A reason why you might want to set the RPID to "your.app.xyz" instead of "app.xyz" like recommended above is extra security: if you are worried about user passkeys being usable across all your sub-domains, it makes sense to scope passkeys to the sub-domain they're meant to be used on, and only that sub-domain.

  If you scope passkeys to a specific sub-domain, be aware that migrating your app to a different sub-domain later will require a migration process where users have to re-enroll themselves by creating new passkeys on the new sub-domain. Passkeys cannot be transferred from one RPID to another.
</Accordion>

`rp.id` will show up in the initial registration popup:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/passkeys/img/passkeys/registration_options_rpid.png" alt="RPID in registration prompt" />
</Frame>

`rp.name` doesn't show up in the popup so can be set to anything. We recommend setting it to the correctly capitalized name of your app, in case browsers start showing it in their native UIs in the future.

### `attestation`

This option indicates whether an attestation is needed, to prove the authenticator authenticity. In general, Turnkey doesn't need attestations. Most passkeys do not produce meaningful attestations for privacy reasons. In the context of passkey integrations, you can omit this option: it will default to "none".

### `pubKeyCredParams` and `alg`

The `pubKeyCredParams` is a list of supported algorithms. If you're relying on Turnkey to validate passkey signatures, this list should be: `[{alg: -7, type: "public-key"}, {alg: -257, type: "public-key"}]`.

The integers `-7` and `-257` are algorithm identifiers for ES256 (aka P256) and RS256 (aka RSA), respectively. The full list of possible values is part of the [COSE standard, maintained by IANA](https://www.iana.org/assignments/cose/cose.xhtml#algorithms). Currently Turnkey only supports ES256 and RS256.

### `user`

The `user` field has three sub-fields:

* `id`: also known as "user handle", isn't visible to the end-user. We **strongly recommend setting this to a random value** (e.g. `const id = new Uint8Array(32); crypto.getRandomValues(id)`) to make sure a new passkey is created. Be aware: **if you accidentally set this value to an existing user handle, the corresponding passkey will be overridden!** [This section of spec](https://www.w3.org/TR/webauthn-2/#dictionary-user-credential-params) is clear on the matter: "the user handle ought not be a constant value across different accounts, even for non-discoverable credentials".

* `name`: this will show up in the passkey list modal (see screenshot below). We recommend setting this to something the user will recognize: their email, the name of your app, or potentially leave this up to the user:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/passkeys/img/passkeys/user_name_and_display.png" alt="User name and display name in passkey list" />
</Frame>

* `displayName`: as far as we can tell this doesn't show up in current browser UIs. It might show up in future iterations so it's best to populate this with the same value as `name`.

### `authenticatorSelection`

This option has lots of consequences for UX, and it has many sub-options, outlined below.

#### `authenticatorAttachment`

This option, if set, restricts the type of authenticators that can be registered. See the table below for the values this option can take and their effect on registration prompts (captured via Chrome on a MacBook Pro).

| Empty (default)                                                                                                                                                                                  | `platform`                                                                                                                                                                                        | `cross-platform`                                                                                                                                                                                           |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| If you want broad compatibility, leave this option empty, and the browser UI will allow for both internal and external passkeys.                                                                 | If set to `platform`, only internal authenticators (face ID, touch ID, and so on) can be registered.                                                                                              | If set to `cross-platform`, only passkeys from other devices or attached via USB are allowed.                                                                                                              |
| <Frame> <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/passkeys/img/passkeys/attachment_unspecified.png" alt="authenticatorAttachment unspecified" />    </Frame> | <Frame> <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/passkeys/img/passkeys/attachment_platform.png" alt="authenticatorAttachment set to platform" />    </Frame> | <Frame> <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/passkeys/img/passkeys/attachment_cross_platform.png" alt="authenticatorAttachment set to cross-platform" /> </Frame> |

#### `requireResidentKey` and `residentKey`

These options allow you to specify whether you want your users to create discoverable or non-discoverable credentials. See [Discoverable vs. non-discoverable](/authentication/passkeys/discoverable-vs-non-discoverable) for more information. Default values: `residentKey` is `discouraged` and `requireResidentKey` is `false`.

Important note: the default for `requireResidentKey` (`discouraged`) results in different outcomes based on OS: Android devices create non-discoverable credentials whereas iOS devices create discoverable credentials. If you want to create discoverable credentials whenever possible, set `requireResidentKey` to `false` and `residentKey` to `preferred`, which work across Android and iOS devices.

#### `userVerification`

"User verification" refers to mechanisms on the authenticators themselves such as PIN codes or biometric/fingerprint readers. This flag can be set to:

* `discouraged`: yubikey PINs won't be required even if the device technically supports it. We've found that for TouchID/FaceID, authentication will still be required however.
* `preferred`: yubikey PINs and other authentication mechanisms will be required if supported, but devices without them will be accepted.
* `required`: authenticators without user verification support won't be accepted.

To maximize compatibility we recommend setting `userVerification` to "discouraged" or "preferred" because some authenticators do not support user verification.

Due to poor yubikey PIN UX in browsers, setting `userVerification` to "discouraged" is best unless you operate with a strict security threat model where user verification makes a big difference.

"preferred" is the default value if you don't specify this option.

## Authentication options

Mozilla's documentation on authentication options can be found here: [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/get). Luckily there are fewer authentication options than registration.

### `challenge`

This is the challenge to sign with the passkey. If you're integrating with Turnkey, the challenge should be the POST body of the request to be signed. Our SDK and helpers set this automatically for you already.

### `rpId`

Must match the `rp.id` option during passkey registration. Passkeys are domain bound, so it's not possible to use a passkey registered with `rp.id` set to "foo.com" and use it on "bar.com". This is a core anti-phishing counter-measure.

### `allowCredentials`

List of objects restricting which credentials can be used during authentication. This is crucial to specify if you're using [non-discoverable credentials](/authentication/passkeys/discoverable-vs-non-discoverable#non-discoverable-credentials) or if you want to tailor browser prompts to the right type of transport.

Each object in this list has an ID (the credential ID) and a list of transports (e.g. "hybrid", "internal", "usb", etc). The `transports` list is **optional** but results in better, more targeted prompts. For example, here are screenshot of targeted prompts captured on Chrome, on a MacBook laptop:

| `transports: ["internal"]`                                                                                                                                                                            | `transports: ["usb"]`                                                                                                                                                                       | `transports: ["hybrid"]`                                                                                                                                                                         |
| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| <Frame> <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/passkeys/img/passkeys/transport_internal.png" alt="authentication prompt with transports: internal" /> </Frame> | <Frame> <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/passkeys/img/passkeys/transport_usb.png" alt="authentication prompt with transports: usb" /> </Frame> | <Frame> <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/passkeys/img/passkeys/transport_hybrid.png" alt="authentication prompt with transport: hybrid" /> </Frame> |

The credential ID needs to be passed as a buffer but is returned from registration as a base64-encoded value: make sure to decode it (in JavaScript: `Buffer.from(storedCredentialId, "base64")`) to avoid issues.

If the wrong credential ID is specified, `transports: ["internal"]` is set, browsers error right away because they can enumerate internal credentials. Chrome, for example, displays the following error:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/passkeys/img/passkeys/no_passkey_available.png" alt="Chrome error when no matching passkey has been found for the provided Credential ID" />
</Frame>

However, if the wrong credential ID is specified without `transports` set (or with other-than-internal `transports` set), browsers won't error right away because they can't enumerate external credentials. They will display an error once the user has pressed their security key or gone through the cross-device passkey flow:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/passkeys/img/passkeys/wrong_credential_id.png" alt="Chrome error when the credential ID used by the user is not in the allowCredentials list" />
</Frame>

### `attestation`

See [`attestation`](#attestation) above.

### `timeout`

See [`timeout`](#timeout) above.

### `UserVerification`

See [`UserVerification`](#userverification) above.


# Proxying signed requests
Source: https://docs.turnkey.com/authentication/proxying-signed-requests

Turnkey has an open CORS policy for its public API. This means your frontend can choose to POST sign requests straight to `https://api.turnkey.com`. Your frontend can also choose to forward the requests via a backend server (which POSTs the signed request to Turnkey).

How should you decide what to do? Here are some considerations:

* A backend proxy can be useful if you need to inspect and persist activity results. For example: if your users are creating wallets, you might want to persist the addresses. If your users are signing transactions, you might want to broadcast on their behalf.
* Another reason why a backend server could be beneficial is monitoring, feature toggles, and validation: with a proxy you're able to control which requests are proxied and which aren't. You can also perform additional validation before signed requests are forwarded to Turnkey.
* POSTing signed requests directly from your app frontend to Turnkey saves you the burden of running a proxy server, and takes you out of the loop so that your end-users interact directly with Turnkey. This is a "hands-off" approach that can work well if you want to give your end-users maximum flexibility and ownership over their sub-organization.


# Sessions
Source: https://docs.turnkey.com/authentication/sessions

Turnkey sessions allow a user to take multiple, contiguous actions in a defined period of time.

## What is a session?

Such actions can be divided into two buckets:

* Read operations: Retrieving data (e.g., viewing wallet balances)
* Write operations: Modifying data or performing sensitive actions (e.g., signing transactions)

## How can I create a session?

### Read-only sessions

In terms of end-user experience, a read-only session might make sense in low-touch applications where users are primarily reading data (think viewing wallets and their balances). As for implementation, there are a few ways a developer can achieve read-only access on behalf of a user. Note: an end-user (sub-organization) falls hierarchically under the developer (parent-organization).

#### Parent organization access

By default, a parent organization has read access to all of its sub-organizations’ data. This means you can set up a federated model where the client makes requests to a backend (containing the parent organization’s API key credentials), the backend populates the requested data, and returns it back to the client. From an implementation perspective, each read request (i.e. `get` or `list`) requires an `organizationId` parameter. Populate that field with the sub-organization’s ID in order to get its data.

#### Client side access

Separately, if you would like the client to have all read requests encapsulated (instead of reading data via a proxy like in the previous approach), the client can initiate a read-only session via a [CreateReadOnlySession activity](/api-reference/sessions/create-read-only-session). This activity returns a session string that, if passed into an HTTP request via `X-Session` header, gives permission to perform reads. Note that because this is an activity performed by an end-user, it requires authentication (e.g. via passkey).

If you’d like to do this via our SDK abstractions, you can leverage the [login](https://github.com/tkhq/sdk/blob/6b3ea14d1184c5394449ecaad2b0f445e373823f/packages/sdk-browser/src/sdk-client.ts#L231-L255)1 method, which creates a `CreateReadOnlySession` activity under the hood. It stores the resulting session string in [Local Storage](https://github.com/tkhq/sdk/blob/6b3ea14d1184c5394449ecaad2b0f445e373823f/packages/sdk-browser/src/sdk-client.ts#L242-L252)2, and subsequent requests to fetch data from Turnkey injects the session stored here at [call time](https://github.com/tkhq/sdk/blob/6b3ea14d1184c5394449ecaad2b0f445e373823f/packages/sdk-browser/src/__generated__/sdk-client-base.ts#L45-L47)3 within `@turnkey/sdk-browser`.

### Read-write sessions

In contrast to read-only sessions, a read-write session makes sense when a user would like to make several authenticated write requests in a window of time. There are a few ways to achieve this:

#### Creating a read-write session

There are several mechanisms to obtain read-write sessions: OTP, OAuth, Passkey sessions, and Session refreshing

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/features/img/read_write_sessions.png" alt="Read-write sessions" />
</Frame>

Our SDK contains several abstractions that manage authentication. You can checkout all of our examples leveraging these examples [here](https://github.com/tkhq/sdk/tree/main/examples)

**Note:** The session JWT is only metadata signed by Turnkey that references the client side stored API keypair, and is useful for verifying the session server-side or associating metadata, but it cannot be used to authenticate requests to Turnkey’s API.
Only the session keypair can be used to create valid `x-stamp` signatures for API requests to Turnkey. In other words, solely the session JWT cannot be used to stamp requests outside of the client context.

### Mechanisms

There are two primary mechanisms we offer that provide client side key generation and signing to support read-write sessions.

#### IndexedDB (web only):

For web apps that want stronger session persistence without relying on iframes or exposing credentials to your app’s JavaScript runtime, Turnkey supports using the [SubtleCrypto](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto) API to generate unextractable asymmetric key pairs and store them securely in the browser’s IndexedDB.

This approach enables long-lived, client-held sessions that survive page reloads, tab closures, and even browser restarts – **without ever exposing the private key** to your JavaScript code.

Turnkey’s SDK provides helpers to:

* Create a new session by generating a P-256 key pair via `crypto.subtle.generateKey()`
* Sign requests
* Store and retrieve the key using IndexedDB under a given session ID
* Abstractions built on top of the `IndexedDBStamper` that simplify authentication flows

This is currently the **most persistent** session model for modern browsers that support WebCrypto. It is especially valuable in Progressive Web App (PWA) contexts or when iframe and Local Storage approaches are insufficient.

To see a full working example, check out our [IndexedDB SDK example](https://github.com/tkhq/sdk/tree/main/examples/with-indexed-db). Or our [Web demo application](https://github.com/tkhq/demo-ewk) that leverages abstractions such as the `IndexedDbClient` for full end-to-end authentication flows.

#### SecureStorage (mobile only)

Secure Storage operates essentially the same as IndexedDB with respect to authentication flows for Turnkey except it is mobile native and keys are generated using @turnkey/crypto rather than WebCrypto.

#### LocalStorage:

Another option is to create an API key and store it directly within Local Storage. However, this is a riskier setup than IndexedDb/SecureStorage as anyone who is able to access this client-side API key has full access to a User.

### Sessions FAQ

<AccordionGroup>
  <Accordion title="How can I refresh a session?">
    Once a user has a valid session, it is trivial to use that session to create a new session. The `refreshSession` abstraction will create a brand new session and automatically store the resulting new session in local storage.
  </Accordion>

  <Accordion title="How can I delete a session?">
    In order to delete a session, simply remove all user-related artifacts from Local Storage.

    ```ts
    /**
      * Clears out all data pertaining to a user session.
      *
      * @returns {Promise<boolean>}
      */
      logout = async (): Promise<boolean> => {
        await removeStorageValue(StorageKeys.Client);
        await removeStorageValue(StorageKeys.Session);
        return true;
      };
    ```
  </Accordion>

  <Accordion title="How long are sessions?">
    The expiration of session keys can be specified to any amount of time using the `expirationSeconds` parameter. The default length is 900 seconds (15 minutes).
  </Accordion>

  <Accordion title="How many session keys can be active at once?">
    A user can have up to 10 expiring API keys at any given time. If you create an expiring API key that exceeds that limit, Turnkey automatically deletes one of your existing keys using the following priority:

    * Expired API keys are deleted first
    * If no expired keys exist, the oldest unexpired key is deleted
      If you are looking to invalidate existing sessions, you can use the `invalidateExisting` parameter for all `_LOGIN` activities. This will clear all existing session keys.
  </Accordion>

  <Accordion title="Can I use the same sessions implementation for web and mobile?">
    Absolutely! Through leveraging IndexedDb you can handle sessions in the same way for Web and PWAs. However, for React Native/Mobile applications you will need to leverage Secure Storage.
  </Accordion>
</AccordionGroup>


# SMS authentication
Source: https://docs.turnkey.com/authentication/sms

SMS authentication enables users to authenticate their Turnkey account using their phone number via a 6-9 digit or bech32 alphanumeric one-time password (OTP). When authenticated, users receive an expiring API key stored in memory within an iframe, which functions like a session key to access their wallet.

## Access and pricing

SMS authentication is available to all Enterprise customers. To enable this feature, please reach out to the Turnkey team ([help@turnkey.com](mailto:help@turnkey.com)).

SMS pricing is usage-based and varies depending on the country of the destination phone number. A downloadable price list for all supported countries is available <a href="https://tkhq-prod-public-content.s3.us-east-1.amazonaws.com/sms-prices.csv" download>here as a CSV</a>.

## Prerequisites

Make sure you have set up your primary Turnkey organization with at least one API user that can programmatically initiate OTP and create sub-organizations. Check out our [Quickstart guide](/getting-started/quickstart) if you need help getting started. To allow an API user to initiate email auth, you'll need the following policy in your main organization:

```json
{
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '<YOUR_API_USER_ID>')",
  "condition": "(activity.resource == 'AUTH' && activity.action == 'CREATE') || (activity.resource == 'OTP' && activity.action == 'CREATE') || (activity.resource == 'OTP' && activity.action == 'VERIFY') || (activity.resource == 'ORGANIZATION' && activity.action == 'CREATE')"
}
```

## How it works

SMS authentication uses three activities:

1. `INIT_OTP` - sends a 6-9 digit or bech32 alphanumeric OTP code to the specified phone number
2. `VERIFY_OTP` - verifies the code and returns a verificationToken JWT
3. `OTP_LOGIN` - verified the verificationToken and returns a session JWT

## Implementation

### Initiating SMS authentication

The flow begins with a new activity of type `ACTIVITY_TYPE_INIT_OTP` using the parent organization id with these parameters:

* `otpType`: specify `"OTP_TYPE_SMS"`
* `contact`: user's phone number
* `emailCustomization`: optional parameters for customizing emails
* `userIdentifier`: optional parameter for rate limiting SMS OTP requests per user.
  We recommend generating this server-side based on the user's IP address or public key.
  See the [OTP Rate Limits](#otp-rate-limits) section below for more details.
* `alphanumeric`: optional parameter for making this code bech32 alphanumeric or not. default: true
* `otpLength`: optional parameter for selecting the length of the OTP. default: 9
* `expirationSeconds`: optional validity window (defaults to 5 minutes)

#### One-Time Password Sandbox Environment

To test OTP codes in our sandbox environment you can use the following:

* `alphanumeric` must be set to `false`
* `otpLength` must be set to `6`
* Phone Numebr: +1 999-999-9999
* OTP Code: `000000`

After receiving the OTP, users complete OTP verification with `ACTIVITY_TYPE_VERIFY_OTP` using the parent organization id which returns a verificationToken JWT:

* `otpId`: ID from the init activity
* `otpCode`: the 6-9 digit or alphanumeric code received via email
* `expirationSeconds`: optional validity window (defaults to 1 hour)

After receiving the verification token, users complete OTP authentication flow with with `ACTIVITY_TYPE_OTP_LOGIN` using the sub orgazanition ID associated with the contact from the first step:

* `publicKey`: public key to add to organization data associated with the signing key in IndexedDB or SecureStorage.
* `verificationToken`: JWT returned from successfull `VERIFY_OTP` activity
* `expirationSeconds`: optional validity window (defaults to 15 minutes)
* `invalidateExisting`: optional boolean to invalidate previous login sessions

## Authorization

SMS authentication requires proper permissions through policies or parent organization status.

## Enabling/disabling SMS auth

### For top-level organizations

SMS authentication is disabled by default. Enable it using `ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE`:

```bash
turnkey request --host api.turnkey.com --path /public/v1/submit/set_organization_feature --body '{
        "timestampMs": "'"$(date +%s)"'000",
        "type": "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE",
        "organizationId": "<YOUR-ORG-ID>",
        "parameters": {
                "name": "FEATURE_NAME_SMS_AUTH"
        }
}' --organization <YOUR-ORG-ID>
```

### For sub-organizations

* SMS auth is enabled by default
* Disable during creation using `disableSmsAuth: true` in the `CreateSubOrganizationIntentV7` activity
* Disable after creation using `ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE` with feature name `FEATURE_NAME_SMS_AUTH`

## Implementation notes

* Users are limited to 10 long-lived API keys and 10 expiring API keys
* When the expiring API key limit is reached, the oldest key is automatically discarded

## OTP rate limits

In order to safeguard users, Turnkey enforces rate limits for OTP auth activities. If a `userIdentifier` parameter is provided, the following limits are enforced:

* 3 requests per 3 minutes per unique `userIdentifier`
* 3 retries max per code, after which point that code will be locked
* 3 active codes per user, each with a 5 minute TTL


# Social logins
Source: https://docs.turnkey.com/authentication/social-logins

Social logins provide a familiar and convenient way for users to access applications using their existing accounts from popular platforms like Google, Apple, or Facebook. Under the hood, this functionality is powered by OAuth - a robust authentication protocol that enables secure user verification through OpenID Connect ([OIDC](https://openid.net/specs/openid-connect-core-1_0.html)) tokens. This feature is available exclusively for sub-organization users.

Similar to [email auth](/authentication/email), social login authentication is ideal for users who prefer not to manage API keys or [passkeys](/authentication/passkeys/introduction) directly. This makes it particularly well-suited for onboarding users who are comfortable with traditional web2-style accounts but may be unfamiliar with cryptographic keys and credentials. An example implementing social login authentication for an organization can be found in our SDK repo [here](https://github.com/tkhq/sdk/tree/main/examples/oauth).

## Roles and responsibilities

* **Turnkey**: runs verifiable infrastructure to create credentials and verify OIDC tokens

* **Parent**: that's you! **For the rest of this guide we'll assume you, the reader, are a Turnkey customer**. We assume that you have:

  * an existing Turnkey organization (we'll refer to this organization as "the parent organization")
  * a web application frontend (we'll refer to this as just "app" or "web app")
  * a backend able to sign and POST Turnkey activities ("backend" or "parent backend")

* **End-User**: the end-user is a user of your web app. They have an account with Google.

* **OIDC Provider**: a provider able to authenticate your End-Users and provide OIDC tokens as proof. We'll use [Google](https://developers.google.com/identity/openid-connect/openid-connect) as an example.

## OAuth Authentication

This section covers the OAuth authentication process, including both login and signup flows, since they are similar and most apps handle them in a unified way.

```mermaid
sequenceDiagram
    participant User
    participant Frontend
    participant OAuth Provider
    participant Backend
    participant Turnkey

    Frontend->>Frontend: Create API keypair
    User->>Frontend: Clicks "Log in with <OAuth provider>"
    Frontend->>OAuth Provider: Start OAuth flow with nonce=sha256(API publicKey)
    OAuth Provider->>User: Prompt to grant permission
    User->>OAuth Provider: Grants permission
    OAuth Provider->>Frontend: Return oidcToken
    Frontend->>Backend: Send oidcToken + API publicKey
    Backend->>Turnkey: Gets subOrgIds with that associated oidcToken
    Turnkey->>Backend: Return subOrgId (or null)
    alt SubOrgId not found
        Backend->>Turnkey: Create sub-org using oidcToken
        Turnkey->>Backend: Return new subOrgId
    end
    Backend->>Turnkey: Call oauth_login with oidcToken, API publicKey
    Turnkey->>Backend: Return session JWT
    Backend->>Frontend: Return session JWT
```

<Steps>
  <Step title="Create API Key">
    The frontend generates an API keypair before starting the OAuth login flow. This keypair will later become the session keypair once the user is authenticated via Turnkey.
  </Step>

  <Step title="Start the OAuth Login Flow">
    The user begins the login process by clicking "Log in with \<OAuth provider>" on the frontend.
  </Step>

  <Step title="Initiate OAuth with Nonce">
    When starting the OAuth request to the provider, the frontend sets the `nonce` to `sha256(publicKey)` based on the API public key. This binds the resulting OIDC token to the keypair.
  </Step>

  <Step title="User Grants Permission">
    The OAuth provider prompts the user to grant permission to share their identity. Once approved, the OAuth provider returns an `oidcToken` to the frontend.
  </Step>

  <Step title="Send Credentials to Backend">
    The frontend sends the `oidcToken` and API public key to your backend.
  </Step>

  <Step title="Get or Create a Turnkey Sub-organization">
    The backend gets subOrgIds that are associated with that `oidcToken`. If no sub-organization exists, it creates one using the identity in the token.
  </Step>

  <Step title="Create a Session">
    The backend calls `oauth_login` with the `oidcToken`, and API public key. Turnkey validates that the token’s `nonce` matches `sha256(publicKey)` and returns a session JWT. The backend sends this JWT to the frontend.
  </Step>

  <Step title="You're Now Authenticated">
    Your frontend now treats the API keypair as the session keypair. It can use the private key to sign requests to Turnkey using the `x-stamp` header.
  </Step>
</Steps>

## What does Turnkey use from the OIDC tokens to prove identity?

Turnkey parses and validates the following fields from the OIDC token to confirm the user's identity:

* `issuer` (iss) – The OAuth provider that issued the token (e.g., `https://accounts.google.com`)
* `audience` (aud) – The OAuth app’s client ID
* `subject` (sub) – The unique identifier for the user in the OAuth provider's system

**Note:**\
Some OAuth providers (like Google) encourage you to register separate client IDs for each platform (e.g., web, iOS, Android). However, as discussed above, in the Turnkey flow the `aud` claim from the OIDC token is used as part of how sub-organizations are identified.

If a user logs in on one platform using the web client ID, and then later logs in on another platform using a different iOS client ID, the two tokens will have different `aud` values. Because of this, Turnkey will not consider them the same identity.

To ensure users are recognized consistently across platforms, you must use the same OAuth client ID everywhere. In most cases, this means using your web client ID for web, iOS, and Android flows.

## OIDC token verification

All OIDC tokens are verified inside of Turnkey's [secure enclaves](/security/secure-enclaves).

We've designed a new secure enclave to fetch TLS content securely and bring [non-repudiation](https://en.wikipedia.org/wiki/Non-repudiation#In_digital_security) on top of TLS content: our TLS fetcher returns a URL and the fetched content, signed by the TLS fetcher's quorum key. By trusting the TLS fetcher quorum key, other Turnkey enclaves can bring TLS-fetched data into their computation safely. Verifying OIDC token is the first computation which requires this!

To verify an OIDC token, other Turnkey enclaves receive the OIDC token as well as:

* the signed content of the issuer's OpenId configuration. OpenId configuration **must** be hosted under `/.well-known/openid-configuration` for each domain. For Google for example, the issuer configuration is at [`accounts.google.com/.well-known/openid-configuration`](https://accounts.google.com/.well-known/openid-configuration). This JSON document contains, among other thing, a `jwksUri` key. The value for this key is a URL hosting the list of currently-valid OIDC token signers.
* the signed content of the issuer's `jwksUri` (e.g., for Google, the `jwksUri` is [`googleapis.com/oauth2/v3/cert`](https://www.googleapis.com/oauth2/v3/certs)). This is a list of public keys against which the secure enclave can verify tokens. Note: **these public keys rotate periodically** (every \~6hrs), hence it's not possible to hardcode these public keys in our secure enclave code directly. We have to fetch them dynamically!

With all of that, an enclave can independently verify an OIDC token without making outbound requests. Once the token is parsed and considered authentic, our enclaves match the `iss`, `aud` and `sub` attributes against the registered OAuth providers on the Turnkey sub-organization. We also check `exp` to make sure the OIDC token is not expired, and the `nonce` attribute (see next section).

## Nonce restrictions in OIDC tokens

Our [`OAUTH_LOGIN`](/api-reference/user-auth/oauth_login) activity requires 2 parameters minimum:

* `oidcToken`: the base64 OIDC token
* `publicKey`: the client-side public key generated by the user

In order to prevent OIDC tokens from being used against multiple public keys, our enclaves parse the OIDC token and, as part of the validation logic, enforce that the `nonce` claim is set to `sha256(publicKey)`.

For example, if the public key is `0394e549c71fa99dd5cf752fba623090be314949b74e4cdf7ca72031dd638e281a`, our enclaves expect the OIDC token nonce to be `1663bba492a323085b13895634a3618792c4ec6896f3c34ef3c26396df22ef82`.

This restriction only applies during **authentication** (`OAUTH` activity). Registration via `CREATE_OAUTH_PROVIDER` and `CREATE_SUB_ORGANIZATION` activities is not affected since these activities do not accept a `publicKey` and do not return encrypted credentials as a result.

If your OAuth provider does not allow you to customize `nonce` claims, Turnkey also accepts and validates `tknonce` claims. This is an alternative claim that will be considered. Only one of (`nonce`, `tknonce`) needs to be set to `sha256(publicKey)`; not both.

## OAuth vs. OIDC

[OAuth2.0](https://datatracker.ietf.org/doc/html/rfc6749) is a separate protocol from [OIDC](https://openid.net/specs/openid-connect-core-1_0.html), with distinct goals:

* "OAuth2.0" is an authorization framework
* "OIDC" is an authentication framework

We chose to name this feature "OAuth" because of the term familiarity: most Turnkey customers will have to setup an "OAuth" app with Google, and the user experience is often referred to as "OAuth" flows regardless of the protocol underneath.

## Providers

Below, some details and pointers about specific providers we've worked with before. If yours isn't listed below it does not mean it can't be supported: any OIDC provider should work with Turnkey's OAuth.

### Google

This provider is extensively tested and supported. We've integrated it in our demo wallet (hosted at [https://wallet.tx.xyz](https://wallet.tx.xyz)), along with Apple and Facebook:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/authentication/img/oauth_demo_wallet.png" alt="OAuth demo wallet" />
</Frame>

The code is open-source, feel free to [check it out](https://github.com/tkhq/demo-embedded-wallet) for reference. The exact line where the OAuth component is loaded is here: [ui/src/screens/LandingScreen.tsx](https://github.com/tkhq/demo-embedded-wallet/blob/d4ec308e9ce0bf0da7b64da2b39e1a80c077eb82/ui/src/screens/LandingScreen.tsx#L384).

The main documentation for Google OIDC is available [here](https://github.com/tkhq/demo-embedded-wallet/blob/bf0e2292cbd2ee9cde6b241591b077fadf7ee71b/src/components/auth.tsx#L157).

### Apple

Apple integration is also extensively tested and supported, and is integrated into our demo wallet (hosted at [https://wallet.tx.xyz](https://wallet.tx.xyz)). The code provides an [example component](https://github.com/tkhq/demo-embedded-wallet/blob/bf0e2292cbd2ee9cde6b241591b077fadf7ee71b/src/components/apple-auth.tsx) as well as an [example redirect handler](https://github.com/tkhq/demo-embedded-wallet/blob/bf0e2292cbd2ee9cde6b241591b077fadf7ee71b/src/app/\(landing\)/oauth-callback/apple/page.tsx).

Documentation for Apple OIDC can be found [here](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple).

### Facebook

Facebook OIDC requires a [manual flow with PFKE](https://developers.facebook.com/docs/facebook-login/guides/advanced/oidc-token/) (Proof for Key Exchange). This flow requires a few extra steps compared with Apple or Google. Specifically:

* You will need to generate a **code verifier** that can either be recalled (e.g. from a database) or reassembled in a later request.
* You will need to provide a **code challenge** as a parameter of the OAuth redirect that is either the code verifier itself or the hash of the code verifier.
* Instead of receiving the OIDC token after the OAuth flow, you will receive an **auth code** that must be exchanged for an OIDC token in a subsequent request. The code verifier and your app's ID are also required in this exchange.

In our example demo wallet, we opt to avoid using a database in the authentication process and instead generate our verification code serverside using the hash of a nonce and a secret salt value. The nonce is then passed to and returned from the Facebook API as a **state** parameter (see [the API spec](https://developers.facebook.com/docs/facebook-login/guides/advanced/oidc-token/) for details). Finally, the server reconstructs the verification code by re-hashing the nonce and the the salt. The full flow is displayed below:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/authentication/img/facebook-oauth.png" alt="Facebook OAuth flow" />
</Frame>

Code for the [redirect component](https://github.com/tkhq/demo-embedded-wallet/blob/bf0e2292cbd2ee9cde6b241591b077fadf7ee71b/src/components/facebook-auth.tsx), [OAuth callback](https://github.com/tkhq/demo-embedded-wallet/blob/bf0e2292cbd2ee9cde6b241591b077fadf7ee71b/src/app/\(landing\)/oauth-callback/facebook/page.tsx), and [code exchange](https://github.com/tkhq/demo-embedded-wallet/blob/bf0e2292cbd2ee9cde6b241591b077fadf7ee71b/src/actions/turnkey.ts#L54) are all available in the example wallet repo.

If you prefer to use a database such as Redis instead of reassembling the verification code, you can store the verification code and retrieve it in the exchange stage using a lookup key either passed as **state** or stored in local browser storage.

### Auth0

This provider was tested successfully and offers a wide range of authentication factors and integration. For example, Auth0 can wrap Twitter's auth or any other ["Social Connection"](https://marketplace.auth0.com/features/social-connections).

In the testing process we discovered that Auth0 admins can manage users freely. Be careful about who can and can't access your Auth0 account: Auth0's management APIs allow for account merging. Specifically, anyone with a `users:update` scope token can call [this endpoint](https://auth0.com/docs/api/management/v2/users/post-identities) to arbitrarily link an identity.

For example, if a Google-authenticated user (OIDC token `sub` claim: `google-oauth2|118121659617646047510`) gets merged into a Twitter-authenticated user (OIDC token `sub` claim: `twitter|47169608`), the OIDC token obtained by logging in through Google post-merge will be `twitter|47169608`. This can be surprising and lead to account takeover if an Auth0 admin is malicious. This is documented in Auth0's own docs, [here](https://auth0.com/docs/manage-users/user-accounts/user-account-linking#precautions).

### AWS Cognito

The main thing to call out is the inability to pass custom `nonce` claims easily. To pass the hash of the end-user's public key, use a custom `tknonce` claim instead.

### Social linking

Social linking is the concept of automatically linking an email address to a Turnkey user by authenticating with a social provider. This allows an end-user to authenticate with the social provider, or a matching email address. Currently, we only allow automatic linking for Google social logins.

The cases are as follows:

1. The end-user authenticates with Google. Their email address is automatically linked to their authentication methods and considered “verified,” allowing them to log in with email OTP or email auth in the future.
2. The end-user authenticates with a Google email address (e.g., @gmail.com) via email OTP or email auth. If they later authenticate with Google, the Google OIDC provider will automatically be added as a valid login method, provided the email matches.
3. The end-user has existing non-Google authentication methods (e.g. phone number, passkeys, etc.) and later adds Google OIDC as a login method (via [CREATE\_OAUTH\_PROVIDERS](/api-reference/activities/create-oauth-providers#api-key)). The email address in the Google account will be automatically marked as "verified" and linked to the existing user.

For more information on how to implement social linking, see the [social linking code example](/embedded-wallets/code-examples/social-linking).


# Advanced
Source: https://docs.turnkey.com/category/advanced

Use Turnkey's low-level http libraries directly

<CardGroup>
  <Card title="TurnkeyClient" href="/sdks/advanced/turnkey-client" icon="file-lines" iconType="solid" horizontal>
    Detailed guide on installing and initializing the TurnkeyClient
  </Card>

  <Card title="ApiKeyStamper" href="/sdks/advanced/api-key-stamper" icon="file-lines" iconType="solid" horizontal>
    Guide on using the ApiKeyStamper
  </Card>

  <Card title="WalletStamper" href="/sdks/advanced/wallet-stamper" icon="file-lines" iconType="solid" horizontal>
    Guide on using the WalletStamper
  </Card>

  <Card title="WebauthnStamper" href="/sdks/advanced/webauthn-stamper" icon="file-lines" iconType="solid" horizontal>
    Guide on using the WebauthnStamper
  </Card>

  <Card title="IframeStamper" href="/sdks/advanced/iframe-stamper" icon="file-lines" iconType="solid" horizontal>
    Guide on using the IframeStamper
  </Card>

  <Card title="IndexedDbStamper" href="/sdks/advanced/indexed-db-stamper" icon="file-lines" iconType="solid" horizontal>
    Guide on using the IndexedDbStamper
  </Card>
</CardGroup>


# Code examples
Source: https://docs.turnkey.com/category/code-examples



<CardGroup>
  <Card title="Create a sub-org with a passkey user" href="/embedded-wallets/code-examples/create-sub-org-passkey" icon="file-lines" iconType="solid" horizontal>
    Create a sub-org with a passkey user
  </Card>

  <Card title="Authenticate a user with a passkey credential" href="/embedded-wallets/code-examples/authenticate-user-passkey" icon="file-lines" iconType="solid" horizontal>
    Authenticate a user with a passkey credential
  </Card>

  <Card title="Create a user passkey session" href="/embedded-wallets/code-examples/create-passkey-session" icon="file-lines" iconType="solid" horizontal>
    Create a user passkey session
  </Card>

  <Card title="Create a user with email only" href="/embedded-wallets/code-examples/create-user-email" icon="file-lines" iconType="solid" horizontal>
    Create a user with email only
  </Card>

  <Card title="Authenticate a user with email" href="/embedded-wallets/code-examples/authenticate-user-email" icon="file-lines" iconType="solid" horizontal>
    Authenticate a user with email
  </Card>

  <Card title="Recover a user with email" href="/embedded-wallets/code-examples/email-recovery" icon="file-lines" iconType="solid" horizontal>
    Recover a user with email
  </Card>

  <Card title="Add an additional passkey" href="/embedded-wallets/code-examples/add-credential" icon="file-lines" iconType="solid" horizontal>
    Add an additional passkey
  </Card>

  <Card title="Authenticate a user with an Ethereum wallet" href="/embedded-wallets/code-examples/wallet-auth" icon="file-lines" iconType="solid" horizontal>
    Authenticate a user with an Ethereum wallet
  </Card>

  <Card title="Signing transactions" href="/embedded-wallets/code-examples/signing-transactions" icon="file-lines" iconType="solid" horizontal>
    Signing transactions
  </Card>

  <Card title="Import wallet or private key" href="/embedded-wallets/code-examples/import" icon="file-lines" iconType="solid" horizontal>
    Import wallet or private key
  </Card>

  <Card title="Export wallet or private key" href="/embedded-wallets/code-examples/export" icon="file-lines" iconType="solid" horizontal>
    Export wallet or private key
  </Card>

  <Card title="Social linking" href="/embedded-wallets/code-examples/social-linking" icon="file-lines" iconType="solid" horizontal>
    Social linking
  </Card>
</CardGroup>


# Code examples
Source: https://docs.turnkey.com/category/code-examples-1



<CardGroup>
  <Card title="Signing transactions" href="/signing-automation/code-examples/signing-transactions" icon="file-lines" horizontal iconType="solid">
    Signing transactions
  </Card>
</CardGroup>


# Security & Architecture
Source: https://docs.turnkey.com/category/security

Learn how Turnkey achieves innovative, cloud scale, no single point of failure security.

Turnkey is the first verifiable key management system of its kind, securing millions of wallets and private keys for a wide variety of use cases.
Turnkey's security architecture ensures that raw private keys are never exposed to Turnkey, your software, or your team.
We provide end-to-end private key generation and access control within secure enclaves, with strong isolation guarantees and
cryptographic attestation proving that only authorized code is running. Our custom-built operating system, QuorumOS,
minimizes attack surface and enables reproducible, auditable deployments. From hardware-backed trust to multi-factor access controls,
every layer of Turnkey's architecture is designed to be secure, verifiable, and developer-friendly by default. Our whitepaper covers our
holistic security model in-depth, and speaks to our vision for building verifiable key management infrastructure. Learn more about our approach to security here.

<CardGroup>
  <Card title="Our approach" href="/security/our-approach" icon="file-lines" iconType="solid" horizontal>
    Learn about Turnkey's unique security framework
  </Card>

  <Card title="Non-custodial key management" href="/security/non-custodial-key-mgmt" icon="file-lines" iconType="solid" horizontal>
    Learn how Turnkey handles private keys
  </Card>

  <Card title="Secure enclaves" href="/security/secure-enclaves" icon="file-lines" iconType="solid" horizontal>
    Overview of secure enclaves and how we use them
  </Card>

  <Card title="Quorum deployments" href="/security/quorum-deployments" icon="file-lines" iconType="solid" horizontal>
    Learn how we deploy our secure applications
  </Card>

  <Card title="Verifiable data" href="/security/verifiable-data" icon="file-lines" iconType="solid" horizontal>
    Learn how we ensure an end-to-end audit trail
  </Card>

  <Card title="Disaster recovery" href="/security/disaster-recovery" icon="file-lines" iconType="solid" horizontal>
    Turnkey's disaster recovery process
  </Card>

  <Card title="Enclave secure channels" href="/security/enclave-secure-channels" icon="file-lines" iconType="solid" horizontal>
    Learn about Turnkey's enclave to end-user secure channels
  </Card>

  <Card title="The Turnkey Whitepaper" href="/security/whitepaper" icon="file-lines" iconType="solid" horizontal>
    Read about Turnkey's ambitious foundations with the Turnkey Whitepaper
  </Card>

  <Card title="Reporting a vulnerability" href="/security/reporting-a-vulnerability" icon="file-lines" iconType="solid" horizontal>
    Overview of Turnkey's responsible disclosure program
  </Card>
</CardGroup>


# Web3 libraries
Source: https://docs.turnkey.com/category/web3-libraries

Turnkey Web3 libraries

<CardGroup>
  <Card title="Ethers" href="/sdks/web3/ethers" icon="file-lines" iconType="solid" horizontal>
    Ethers wrapper
  </Card>

  <Card title="Viem" href="/sdks/web3/viem" icon="file-lines" iconType="solid" horizontal>
    Viem wrapper
  </Card>

  <Card title="CosmJS" href="/sdks/web3/cosmjs" icon="file-lines" iconType="solid" horizontal>
    CosmJS wrapper
  </Card>

  <Card title="EIP 1193" href="/sdks/web3/eip-1193" icon="file-lines" iconType="solid" horizontal>
    EIP 1193 provider
  </Card>

  <Card title="Solana" href="/sdks/web3/solana" icon="file-lines" iconType="solid" horizontal>
    Solana Web3 wrapper
  </Card>
</CardGroup>


# API Key Stamper
Source: https://docs.turnkey.com/changelogs/api-key-stamper/readme



# @turnkey/api-key-stamper

## 0.4.7

### Patch Changes

* [#698](https://github.com/tkhq/sdk/pull/698) [`7625df0`](https://github.com/tkhq/sdk/commit/7625df0538002c3455bd5862211210e38472e164) Author [@moeodeh3](https://github.com/moeodeh3) - Introduces an optional `runtimeOverride` parameter that allows the ability to explicitly specify the crypto environment: `"browser"`, `"node"`, or `"purejs"`.

## 0.4.6

### Patch Changes

* Updated dependencies \[[`40c4035`](https://github.com/tkhq/sdk/commit/40c40359ec7096d0bca39ffc93e89361b3b11a1a)]:
  * @turnkey/encoding\@0.5.0

## 0.4.5

### Patch Changes

* 4d1d775: Better error message and docstring for API key import

## 0.4.4

### Patch Changes

* 2d5977b: Update error messaging around api key and target public key usage

## 0.4.3

### Patch Changes

* Updated dependencies \[e5c4fe9]
  * @turnkey/encoding\@0.4.0

## 0.4.2

### Patch Changes

* Updated dependencies \[93666ff]
  * @turnkey/encoding\@0.3.0

## 0.4.1

### Patch Changes

* Changes: Resolves bugs where byte arrays might not be sufficiently padded (32 bytes are expected for x, y, and d elements of a JWK)

* Updated dependencies
  * @turnkey/encoding\@0.2.1

## 0.4.0

### Minor Changes

* New PureJS implementation for \`@turnkey/api-key-stamper\`\` to support React Native
* Introduce a dependency on `@turnkey/encoding` to consolidate utility functions

## 0.3.1

### Patch Changes

* Upgrade to Node v18 (#184)

## 0.3.0

### Minor Changes

* Use rollup to build ESM and CommonJS, fix ESM support (#174)

## 0.2.0

### Minor Changes

* Add ESM support (#154)

## 0.1.1

### Patch Changes

* Hint for web bundlers not to polyfill Node crypto

## 0.1.0

Initial release


# Cosmjs
Source: https://docs.turnkey.com/changelogs/cosmjs/readme



# @turnkey/cosmjs

## 0.7.15

### Patch Changes

* Updated dependencies \[[`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd), [`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd), [`7625df0`](https://github.com/tkhq/sdk/commit/7625df0538002c3455bd5862211210e38472e164)]:
  * @turnkey/http\@3.5.0
  * @turnkey/sdk-browser\@5.3.0
  * @turnkey/sdk-server\@4.2.0
  * @turnkey/api-key-stamper\@0.4.7

## 0.7.14

### Patch Changes

* Updated dependencies:
  * @turnkey/sdk-browser\@5.2.3

## 0.7.13

### Patch Changes

* Updated dependencies:
  * @turnkey/sdk-browser\@5.2.2

## 0.7.12

### Patch Changes

* [#665](https://github.com/tkhq/sdk/pull/665) [`be0a621`](https://github.com/tkhq/sdk/commit/be0a621fb962bd51d2df1a1e79f5260d7c696772) Author [@amircheikh](https://github.com/amircheikh) - Fix for `no runner registered` error when using mismatched versions of turnkey/http

* Updated dependencies \[[`be0a621`](https://github.com/tkhq/sdk/commit/be0a621fb962bd51d2df1a1e79f5260d7c696772)]:
  * @turnkey/http\@3.4.2
  * @turnkey/sdk-browser\@5.2.1
  * @turnkey/sdk-server\@4.1.1

## 0.7.11

### Patch Changes

* Updated dependencies \[[`5afbe51`](https://github.com/tkhq/sdk/commit/5afbe51949bdd1997fad083a4c1e4272ff7409dc), [`a38a6e3`](https://github.com/tkhq/sdk/commit/a38a6e36dc2bf9abdea64bc817d1cad95b8a289a), [`40c4035`](https://github.com/tkhq/sdk/commit/40c40359ec7096d0bca39ffc93e89361b3b11a1a), [`593de2d`](https://github.com/tkhq/sdk/commit/593de2d9404ec8cf53426f9cf832c13eefa3fbf2)]:
  * @turnkey/sdk-browser\@5.2.0
  * @turnkey/sdk-server\@4.1.0
  * @turnkey/http\@3.4.1
  * @turnkey/api-key-stamper\@0.4.6

## 0.7.10

### Patch Changes

* Updated dependencies \[[`27fe590`](https://github.com/tkhq/sdk/commit/27fe590cdc3eb6a8cde093eeefda2ee1cdc79412)]:
  * @turnkey/sdk-browser\@5.1.0
  * @turnkey/sdk-server\@4.0.1

## 0.7.9

### Patch Changes

* Updated dependencies \[[`07dfd33`](https://github.com/tkhq/sdk/commit/07dfd3397472687092e1c73b1d68714f421b9ca0), [`e8a5f1b`](https://github.com/tkhq/sdk/commit/e8a5f1b431623c4ff1cb85c6039464b328cf0e6a)]:
  * @turnkey/sdk-browser\@5.0.0
  * @turnkey/sdk-server\@4.0.0
  * @turnkey/http\@3.4.0

## 0.7.8

### Patch Changes

* Updated dependencies \[25ca339]
  * @turnkey/sdk-browser\@4.3.0
  * @turnkey/sdk-server\@3.3.0
  * @turnkey/http\@3.3.0

## 0.7.7

### Patch Changes

* Updated dependencies \[3f6e415]
* Updated dependencies \[4d1d775]
  * @turnkey/sdk-browser\@4.2.0
  * @turnkey/sdk-server\@3.2.0
  * @turnkey/http\@3.2.0
  * @turnkey/api-key-stamper\@0.4.5

## 0.7.6

### Patch Changes

* Updated dependencies \[3e4a482]
  * @turnkey/sdk-browser\@4.1.0
  * @turnkey/sdk-server\@3.1.0
  * @turnkey/http\@3.1.0

## 0.7.5

### Patch Changes

* Updated dependencies \[7b72769]
  * @turnkey/sdk-server\@3.0.1

## 0.7.4

### Patch Changes

* Updated dependencies \[e501690]
* Updated dependencies \[d1083bd]
* Updated dependencies \[f94d36e]
  * @turnkey/sdk-browser\@4.0.0
  * @turnkey/sdk-server\@3.0.0
  * @turnkey/http\@3.0.0

## 0.7.3

### Patch Changes

* Updated dependencies \[bf87774]
  * @turnkey/sdk-browser\@3.1.0

## 0.7.2

### Patch Changes

* Updated dependencies \[5ec5187]
  * @turnkey/sdk-browser\@3.0.1
  * @turnkey/sdk-server\@2.6.1

## 0.7.1

### Patch Changes

* Updated dependencies \[0e4e959]
* Updated dependencies \[856f449]
* Updated dependencies \[c9ae537]
* Updated dependencies \[d4ce5fa]
* Updated dependencies \[ecdb29a]
* Updated dependencies \[72890f5]
  * @turnkey/sdk-browser\@3.0.0
  * @turnkey/sdk-server\@2.6.0
  * @turnkey/http\@2.22.0

## 0.7.0

### Minor Changes

* a7b5ce3: Update @cosmos/\* dependencies from v0.31.0 to v0.33.0 and cosmjs-types from v0.8.0 to v0.9.0

### Patch Changes

* Updated dependencies \[93540e7]
* Updated dependencies \[fdb8bf0]
* Updated dependencies \[9147962]
  * @turnkey/sdk-browser\@2.0.0
  * @turnkey/sdk-server\@2.5.0

## 0.6.14

### Patch Changes

* Updated dependencies \[233ae71]
* Updated dependencies \[9317588]
  * @turnkey/sdk-browser\@1.16.0
  * @turnkey/sdk-server\@2.4.0

## 0.6.13

### Patch Changes

* Updated dependencies \[56a307e]
  * @turnkey/sdk-browser\@1.15.0
  * @turnkey/sdk-server\@2.3.0
  * @turnkey/http\@2.21.0

## 0.6.12

### Patch Changes

* Updated dependencies \[3c44c4a]
* Updated dependencies \[bfc833f]
  * @turnkey/sdk-browser\@1.14.0
  * @turnkey/sdk-server\@2.2.0
  * @turnkey/http\@2.20.0

## 0.6.11

### Patch Changes

* Updated dependencies \[69d2571]
* Updated dependencies \[57f9cb0]
  * @turnkey/sdk-browser\@1.13.0
  * @turnkey/sdk-server\@2.1.0
  * @turnkey/http\@2.19.0

## 0.6.10

### Patch Changes

* Updated dependencies \[755833b]
  * @turnkey/sdk-browser\@1.12.1
  * @turnkey/sdk-server\@2.0.1

## 0.6.9

### Patch Changes

* Updated dependencies \[6695af2]
* Updated dependencies \[1ebd4e2]
  * @turnkey/sdk-browser\@1.12.0
  * @turnkey/sdk-server\@2.0.0
  * @turnkey/http\@2.18.0

## 0.6.8

### Patch Changes

* Updated dependencies \[053fbfb]
  * @turnkey/sdk-browser\@1.11.2
  * @turnkey/sdk-server\@1.7.3
  * @turnkey/http\@2.17.3

## 0.6.7

### Patch Changes

* Updated dependencies \[328d6aa]
* Updated dependencies \[b90947e]
* Updated dependencies \[2d5977b]
* Updated dependencies \[fad7c37]
  * @turnkey/sdk-browser\@1.11.1
  * @turnkey/sdk-server\@1.7.2
  * @turnkey/api-key-stamper\@0.4.4
  * @turnkey/http\@2.17.2

## 0.6.6

### Patch Changes

* Updated dependencies \[7988bc1]
* Updated dependencies \[538d4fc]
* Updated dependencies \[12d5aaa]
  * @turnkey/sdk-browser\@1.11.0
  * @turnkey/sdk-server\@1.7.1
  * @turnkey/http\@2.17.1

## 0.6.5

### Patch Changes

* @turnkey/sdk-browser\@1.10.2

## 0.6.4

### Patch Changes

* Updated dependencies \[78bc39c]
  * @turnkey/sdk-server\@1.7.0
  * @turnkey/http\@2.17.0
  * @turnkey/sdk-browser\@1.10.1

## 0.6.3

### Patch Changes

* Updated dependencies \[8bea78f]
  * @turnkey/sdk-browser\@1.10.0

## 0.6.2

### Patch Changes

* Updated dependencies \[3dd74ac]
* Updated dependencies \[1e36edf]
* Updated dependencies \[4df8914]
* Updated dependencies \[11a9e2f]
  * @turnkey/sdk-browser\@1.9.0
  * @turnkey/sdk-server\@1.6.0
  * @turnkey/http\@2.16.0

## 0.6.1

### Patch Changes

* Updated dependencies \[9ebd062]
  * @turnkey/sdk-browser\@1.8.0
  * @turnkey/sdk-server\@1.5.0
  * @turnkey/http\@2.15.0

## 0.6.0

### Minor Changes

* 5e60923: Add compatibility with wallet accounts and @turnkey/sdk-browser and @turnkey/sdk-server

### Patch Changes

* Updated dependencies \[abe7138]
* Updated dependencies \[96d7f99]
  * @turnkey/sdk-server\@1.4.2
  * @turnkey/sdk-browser\@1.7.1
  * @turnkey/http\@2.14.2
  * @turnkey/api-key-stamper\@0.4.3

## 0.5.21

### Patch Changes

* Updated dependencies \[ff059d5]
  * @turnkey/http\@2.14.1

## 0.5.20

### Patch Changes

* Updated dependencies \[848f8d3]
  * @turnkey/http\@2.14.0

## 0.5.19

### Patch Changes

* Updated dependencies \[93dee46]
  * @turnkey/http\@2.13.0

## 0.5.18

### Patch Changes

* Updated dependencies \[e2f2e0b]
  * @turnkey/http\@2.12.3

## 0.5.17

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.12.2

## 0.5.16

### Patch Changes

* Updated dependencies \[f17a229]
  * @turnkey/http\@2.12.1

## 0.5.15

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.12.0

## 0.5.14

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.11.0

## 0.5.13

### Patch Changes

* Updated dependencies \[7a9ce7a]
  * @turnkey/http\@2.10.0

## 0.5.12

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.9.1

## 0.5.11

### Patch Changes

* Updated dependencies \[83b62b5]
  * @turnkey/http\@2.9.0

## 0.5.10

### Patch Changes

* Updated dependencies \[46a7d90]
  * @turnkey/http\@2.8.0

## 0.5.9

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.7.1

## 0.5.8

### Patch Changes

* Updated dependencies \[d73725b]
  * @turnkey/http\@2.7.0

## 0.5.7

### Patch Changes

* Updated dependencies \[f9d636c]
  * @turnkey/http\@2.6.2

## 0.5.6

### Patch Changes

* Updated dependencies \[52e2389]
  * @turnkey/http\@2.6.1

## 0.5.5

### Patch Changes

* Updated dependencies \[7a3c890]
  * @turnkey/http\@2.6.0

## 0.5.4

### Patch Changes

* Upgrade to Node v18 (#184)
* Updated dependencies
  * @turnkey/http\@2.5.1

## 0.5.3

### Patch Changes

* Updated dependencies \[464ac0e]
  * @turnkey/http\@2.5.0

## 0.5.2

### Patch Changes

* @turnkey/http\@2.4.2

## 0.5.1

### Patch Changes

* Updated dependencies \[f87ced8]
  * @turnkey/http\@2.4.1

## 0.5.0

### Minor Changes

* Use rollup to build ESM and CommonJS, fix ESM support (#174)

### Patch Changes

* Updated dependencies \[fc5b291]
  * @turnkey/http\@2.4.0

## 0.4.14

### Patch Changes

* @turnkey/http\@2.3.1

## 0.4.13

### Patch Changes

* Updated dependencies \[f1bd68a]
  * @turnkey/http\@2.3.0

## 0.4.12

### Patch Changes

* Updated dependencies \[ed50a0f]
* Updated dependencies
  * @turnkey/http\@2.2.0

## 0.4.11

### Patch Changes

* Updated dependencies \[bb6ea0b]
  * @turnkey/http\@2.1.0

## 0.4.10

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.0.0
* Updated the shape of signing

## 0.4.9

### Patch Changes

* Updated dependencies
  * @turnkey/http\@1.3.0

## 0.4.8

### Patch Changes

* Updated dependencies
  * @turnkey/http\@1.2.0

## 0.4.7

### Patch Changes

* @turnkey/http\@1.1.1

## 0.4.6

### Patch Changes

* Updated dependencies
  * @turnkey/http\@1.1.0

## 0.4.5

### Patch Changes

* Updated dependencies \[8d1d0e8]
  * @turnkey/http\@1.0.1

## 0.4.4

### Patch Changes

* 46473ec: This breaking change updates generated code to be shorter and more intuitive to read:

  * generated fetchers do not include the HTTP method in their name. For example `useGetGetActivity` is now `useGetActivity`, and `usePostSignTransaction` is `useSignTransaction`.
  * input types follow the same convention (no HTTP method in the name): `TPostCreatePrivateKeysInput` is now `TCreatePrivateKeysInput`.
  * the "federated" request helpers introduced in `0.18.0` are now named "signed" requests to better reflect what they are. `FederatedRequest` is now `SignedRequest`, and generated types follow. For example: `federatedPostCreatePrivateKeys` is now `signCreatePrivateKeys`, `federatedGetGetActivity` is now `signGetActivity`, and so on.

  The name updates should be automatically suggested if you use VSCode since the new names are simply shorter versions of the old one.

* Updated dependencies \[46473ec]

* Updated dependencies \[38b424f]
  * @turnkey/http\@1.0.0

## 0.4.3

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.18.1

## 0.4.2

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.18.0

## 0.4.1

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.17.1

## 0.4.0

### Minor Changes

* No public facing changes

### Patch Changes

* Updated dependencies \[9317f51]
  * @turnkey/http\@0.17.0

## 0.3.0

### Minor Changes

* No public facing changes

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.16.0
    * Fix `.postGetPrivateKey(...)`'s underlying path, while adding `@deprecated` `.postGetPrivateKeyBackwardsCompat(...)` for backward compatibility

## 0.2.1

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.15.0

## 0.2.0

### Minor Changes

* Moved `sha256` hashing from local to remote

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.14.0

## 0.1.1

### Patch Changes

* New `TurnkeyRequestError` error class that contains rich error details
* Updated dependencies
  * @turnkey/http\@0.13.2

## 0.1.0

* Initial release


# Crypto
Source: https://docs.turnkey.com/changelogs/crypto/readme



# @turnkey/crypto

## 2.4.1

### Patch Changes

* [#700](https://github.com/tkhq/sdk/pull/700) [`878e039`](https://github.com/tkhq/sdk/commit/878e03973856cfec83e6e3fda5b76d1b64943628) Author [@andrewkmin](https://github.com/andrewkmin) - Add validations to uncompressRawPublicKey method

## 2.4.0

### Minor Changes

* [#662](https://github.com/tkhq/sdk/pull/662) [`10ee5c5`](https://github.com/tkhq/sdk/commit/10ee5c524b477ce998e4fc635152cd101ae5a9cc) Thanks [@moe-dev](https://github.com/moe-dev)! - Add function `verifySessionJwtSignature` to verify session tokens return from Turnkey and signed by the notarizer

## 2.3.1

### Patch Changes

* 2bc0046: Migrated from WebCrypto (crypto.subtle.verify) to Noble for ECDSA signature verification

## 2.3.0

### Minor Changes

* 668edfa: Add keyformat to decryptExportBundle for displaying Solana private keys

## 2.2.0

### Minor Changes

* Added `toDerSignature` function used to convert a raw ECDSA signature into DER-encoded format for compatibility with our backend, which requires DER signatures

## 2.1.0

### Minor Changes

* [https://github.com/tkhq/sdk/pull/384](https://github.com/tkhq/sdk/pull/384): Reorganize into two subparts:

  * `crypto.ts`: core cryptography utilities
  * `turnkey.ts`: Turnkey-specific cryptography utilities

  Add `verifyStampSignature` method:

  * See in-line code docs for more details + example of usage
  * This is useful for checking the validity of a stamp (signature) against the request body

### Patch Changes

* d989d46: Remove unnecessary react/typsecript packages

## 2.0.0

### Major Changes

* \[BREAKING CHANGE] renamed `decryptBundle` to `decryptCredentialBundle` (for decrypting email auth/recovery and oauth credential bundles) in order to distinguish from the new `decryptExportBundle` (for decrypting bundles containing wallet mnemonics or private key material)

### Patch Changes

* Updated dependencies \[e5c4fe9]
  * @turnkey/encoding\@0.4.0

## 1.0.0

### Major Changes

* 93666ff: turnkey/crypto standard HPKE encryption, first major release. Allows for programmatic importing in environments like node. Moved some encoding helper functions to turnkey/encoding

### Patch Changes

* Updated dependencies \[93666ff]
  * @turnkey/encoding\@0.3.0

## 0.2.1

### Patch Changes

* Updated dependencies
  * @turnkey/encoding\@0.2.1

## 0.2.0

### Minor Changes

* Add HPKE encryption

## 0.1.1

### Patch Changes

* d968e0b: Bugfix: return public key

## 0.1.0

Initial release


# Dart
Source: https://docs.turnkey.com/changelogs/dart/readme



# Change Log

All notable changes to this project will be documented in this file.
See [Conventional Commits](https://conventionalcommits.org) for commit guidelines.

## 2025-03-11

### Changes

***

Packages with breaking changes:

* There are no breaking changes in this release.

Packages with other changes:

* [`turnkey_sdk_flutter` - `v0.1.0`](#turnkey_sdk_flutter---v010)

***

#### `turnkey_sdk_flutter` - `v0.1.0`

* Initial release. Client side abstracted functions for Turnkey-powered Flutter apps

## 2025-02-18

### Changes

***

Packages with breaking changes:

* There are no breaking changes in this release.

Packages with other changes:

* [`turnkey_sessions` - `v0.1.2`](#turnkey_sessions---v012)

***

#### `turnkey_sessions` - `v0.1.2`

* **DOCS**: Added auto login / logout example to README.

## 2025-02-18

### Changes

***

Packages with breaking changes:

* There are no breaking changes in this release.

Packages with other changes:

* [`turnkey_sessions` - `v0.1.1`](#turnkey_sessions---v011)

***

#### `turnkey_sessions` - `v0.1.1`

* **FEAT**: Listeners notified when session expires (turnkey\_sessions).

## 2025-02-11

### Changes

***

Packages with breaking changes:

* There are no breaking changes in this release.

Packages with other changes:

* [`turnkey_sessions` - `v0.1.0`](#turnkey_sessions---v010)

***

#### `turnkey_sessions` - `v0.1.0`

## 2025-02-11

### Changes

***

Packages with breaking changes:

* There are no breaking changes in this release.

Packages with other changes:

* [`turnkey_crypto` - `v0.1.1`](#turnkey_crypto---v011)

***

#### `turnkey_crypto` - `v0.1.1`

* Exposed generateP256KeyPair function


# Eip 1193 Provider
Source: https://docs.turnkey.com/changelogs/eip-1193-provider/readme



# @turnkey/eip-1193-provider

## 3.3.15

### Patch Changes

* Updated dependencies \[[`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd), [`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd), [`7625df0`](https://github.com/tkhq/sdk/commit/7625df0538002c3455bd5862211210e38472e164)]:
  * @turnkey/http\@3.5.0
  * @turnkey/sdk-browser\@5.3.0
  * @turnkey/api-key-stamper\@0.4.7

## 3.3.14

### Patch Changes

* Updated dependencies:
  * @turnkey/sdk-browser\@5.2.3

## 3.3.13

### Patch Changes

* Updated dependencies:
  * @turnkey/sdk-browser\@5.2.2

## 3.3.12

### Patch Changes

* [#665](https://github.com/tkhq/sdk/pull/665) [`be0a621`](https://github.com/tkhq/sdk/commit/be0a621fb962bd51d2df1a1e79f5260d7c696772) Author [@amircheikh](https://github.com/amircheikh) - Fix for `no runner registered` error when using mismatched versions of turnkey/http

* Updated dependencies \[[`be0a621`](https://github.com/tkhq/sdk/commit/be0a621fb962bd51d2df1a1e79f5260d7c696772)]:
  * @turnkey/http\@3.4.2
  * @turnkey/sdk-browser\@5.2.1

## 3.3.11

### Patch Changes

* Updated dependencies \[[`5afbe51`](https://github.com/tkhq/sdk/commit/5afbe51949bdd1997fad083a4c1e4272ff7409dc), [`40c4035`](https://github.com/tkhq/sdk/commit/40c40359ec7096d0bca39ffc93e89361b3b11a1a), [`593de2d`](https://github.com/tkhq/sdk/commit/593de2d9404ec8cf53426f9cf832c13eefa3fbf2)]:
  * @turnkey/sdk-browser\@5.2.0
  * @turnkey/http\@3.4.1
  * @turnkey/api-key-stamper\@0.4.6

## 3.3.10

### Patch Changes

* Updated dependencies \[[`27fe590`](https://github.com/tkhq/sdk/commit/27fe590cdc3eb6a8cde093eeefda2ee1cdc79412)]:
  * @turnkey/sdk-browser\@5.1.0

## 3.3.9

### Patch Changes

* Updated dependencies \[[`07dfd33`](https://github.com/tkhq/sdk/commit/07dfd3397472687092e1c73b1d68714f421b9ca0)]:
  * @turnkey/sdk-browser\@5.0.0
  * @turnkey/http\@3.4.0

## 3.3.8

### Patch Changes

* Updated dependencies \[25ca339]
  * @turnkey/sdk-browser\@4.3.0
  * @turnkey/http\@3.3.0

## 3.3.7

### Patch Changes

* Updated dependencies \[3f6e415]
* Updated dependencies \[4d1d775]
  * @turnkey/sdk-browser\@4.2.0
  * @turnkey/http\@3.2.0
  * @turnkey/api-key-stamper\@0.4.5

## 3.3.6

### Patch Changes

* Updated dependencies \[3e4a482]
  * @turnkey/sdk-browser\@4.1.0
  * @turnkey/http\@3.1.0

## 3.3.5

### Patch Changes

* 7a89040: Fix type resolution

## 3.3.4

### Patch Changes

* Updated dependencies \[e501690]
* Updated dependencies \[d1083bd]
* Updated dependencies \[f94d36e]
  * @turnkey/sdk-browser\@4.0.0
  * @turnkey/http\@3.0.0

## 3.3.3

### Patch Changes

* Updated dependencies \[bf87774]
  * @turnkey/sdk-browser\@3.1.0

## 3.3.2

### Patch Changes

* Updated dependencies \[5ec5187]
  * @turnkey/sdk-browser\@3.0.1

## 3.3.1

### Patch Changes

* Updated dependencies \[0e4e959]
* Updated dependencies \[856f449]
* Updated dependencies \[d4ce5fa]
* Updated dependencies \[ecdb29a]
* Updated dependencies \[72890f5]
  * @turnkey/sdk-browser\@3.0.0
  * @turnkey/http\@2.22.0

## 3.3.0

### Minor Changes

* 93540e7: ## Major Package Updates

  ### @turnkey/sdk-browser

  * create abstract `TurnkeyBaseClient` class which extends `TurnkeySDKClientBase`
    * `TurnkeyBrowserClient`, `TurnkeyIframeClient`, `TurnkeyPasskeyClient`, and `TurnkeyWalletClient` all extend `TurnkeyBaseClient`
  * TurnkeyBrowserClient
    * Session Management
      * `refreshSession` - attempts to refresh an existing, active session and will extend the session expiry using the `expirationSeconds` parameter
      * loginWithBundle - authenticate a user via a credential bundle and creates a read-write session
      * loginWithPasskey - attempts to authenticate a user via passkey and create a read-only or read-write session
      * loginWithSession - takes a `Session`, which can be either read-only or read-write, created via a server action and attempts to authenticate the user
  * TurnkeyPasskeyClient
    * Session Management
      * createPasskeySession - leverages passkey authentication to create a read-write session. Once authenticated, the user will not be prompted for additional passkey taps.

  ### @turnkey/sdk-react

  * update `TurnkeyContext` to use new `.getSession()` method to check if there is an active session
  * `OTPVerification` component no longer receives `authIframeClient` or `onValidateSuccess` props

  ## Minor Package Updates

  ### @turnkey/sdk-server

  * expose `sendCredential` server action
  * add `SessionType` enum
    * `READ_ONLY` & `READ_WRITE`

  ### @turnkey/eip-1193-provider

  * update dependencies in `package.json`
    * moved from `peerDependencies` to `dependencies`
      * `"@turnkey/http": "workspace:*"`
      * `"@turnkey/sdk-browser": "workspace:*"`
    * moved from `devDependencies` to `dependencies`
      * `"@turnkey/api-key-stamper": "workspace:*"`
  * specify TypeScript version ^5.1.5

### Patch Changes

* Updated dependencies \[93540e7]
* Updated dependencies \[9147962]
  * @turnkey/sdk-browser\@2.0.0

## 3.1.5

### Patch Changes

* Updated dependencies \[233ae71]
  * @turnkey/sdk-browser\@1.16.0

## 3.1.4

### Patch Changes

* Updated dependencies \[56a307e]
  * @turnkey/sdk-browser\@1.15.0
  * @turnkey/http\@2.21.0

## 3.1.3

### Patch Changes

* Updated dependencies \[3c44c4a]
  * @turnkey/sdk-browser\@1.14.0
  * @turnkey/http\@2.20.0

## 3.1.2

### Patch Changes

* Updated dependencies \[69d2571]
* Updated dependencies \[57f9cb0]
  * @turnkey/sdk-browser\@1.13.0
  * @turnkey/http\@2.19.0

## 3.1.1

### Patch Changes

* Updated dependencies \[755833b]
  * @turnkey/sdk-browser\@1.12.1

## 3.1.0

### Minor Changes

* 4945c71: Add support for @turnkey/sdk-browser clients

### Patch Changes

* Updated dependencies \[6695af2]
  * @turnkey/sdk-browser\@1.12.0
  * @turnkey/http\@2.18.0

## 3.0.5

### Patch Changes

* Updated dependencies \[053fbfb]
  * @turnkey/http\@2.17.3

## 3.0.4

### Patch Changes

* @turnkey/http\@2.17.2

## 3.0.3

### Patch Changes

* Updated dependencies \[538d4fc]
  * @turnkey/http\@2.17.1

## 3.0.2

### Patch Changes

* Updated dependencies \[78bc39c]
  * @turnkey/http\@2.17.0

## 3.0.1

### Patch Changes

* Updated dependencies \[4df8914]
  * @turnkey/http\@2.16.0

## 3.0.0

### Patch Changes

* 9c056d0: fix: personal\_sign parameters
* Updated dependencies \[9ebd062]
  * @turnkey/http\@2.15.0

## 2.0.8

### Patch Changes

* Updated dependencies \[96d7f99]
  * @turnkey/http\@2.14.2

## 2.0.7

### Patch Changes

* Updated dependencies \[ff059d5]
  * @turnkey/http\@2.14.1

## 2.0.6

### Patch Changes

* Updated dependencies \[848f8d3]
  * @turnkey/http\@2.14.0

## 2.0.5

### Patch Changes

* Updated dependencies \[93dee46]
  * @turnkey/http\@2.13.0

## 2.0.4

### Patch Changes

* Updated dependencies \[e2f2e0b]
  * @turnkey/http\@2.12.3

## 2.0.3

### Patch Changes

* Removes unused VERSION from constants. Fixes issue with using process in a browser environment.

## 2.0.2

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.12.2

## 2.0.1

### Patch Changes

* Updated dependencies \[f17a229]
  * @turnkey/http\@2.12.1

## 2.0.0

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.12.0

## 1.0.0

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.11.0

## 0.2.0

### Minor Changes

* 65f781b: Initial Release

## 0.1.0

Initial release!


# Encoding
Source: https://docs.turnkey.com/changelogs/encoding/readme



# @turnkey/encoding

## 0.5.0

### Minor Changes

* [#653](https://github.com/tkhq/sdk/pull/653) [`40c4035`](https://github.com/tkhq/sdk/commit/40c40359ec7096d0bca39ffc93e89361b3b11a1a) Thanks [@moe-dev](https://github.com/moe-dev)! - Add pointEncode function

## 0.4.0

### Minor Changes

* added hexToAscii function, useful for converting a raw hex string to a (wallet) mnemonic

## 0.3.0

### Minor Changes

* 93666ff: turnkey/crypto standard HPKE encryption, first major release. Allows for programmatic importing in environments like node. Moved some encoding helper functions to turnkey/encoding

## 0.2.1

### Patch Changes

* 2d7e5a9: include additional utility functions

## 0.2.0

### Minor Changes

* fac7770: Add uint8ArrayFromHexstring and drop language saying this is an internal package

## 0.1.0

Initial release


# Ethers
Source: https://docs.turnkey.com/changelogs/ethers/readme



# @turnkey/ethers

## 1.1.32

### Patch Changes

* Updated dependencies \[[`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd), [`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd), [`7625df0`](https://github.com/tkhq/sdk/commit/7625df0538002c3455bd5862211210e38472e164)]:
  * @turnkey/http\@3.5.0
  * @turnkey/sdk-browser\@5.3.0
  * @turnkey/sdk-server\@4.2.0
  * @turnkey/api-key-stamper\@0.4.7

## 1.1.31

### Patch Changes

* Updated dependencies:
  * @turnkey/sdk-browser\@5.2.3

## 1.1.30

### Patch Changes

* Updated dependencies:
  * @turnkey/sdk-browser\@5.2.2

## 1.1.29

### Patch Changes

* [#665](https://github.com/tkhq/sdk/pull/665) [`be0a621`](https://github.com/tkhq/sdk/commit/be0a621fb962bd51d2df1a1e79f5260d7c696772) Author [@amircheikh](https://github.com/amircheikh) - Fix for `no runner registered` error when using mismatched versions of turnkey/http

* Updated dependencies \[[`be0a621`](https://github.com/tkhq/sdk/commit/be0a621fb962bd51d2df1a1e79f5260d7c696772)]:
  * @turnkey/http\@3.4.2
  * @turnkey/sdk-browser\@5.2.1
  * @turnkey/sdk-server\@4.1.1

## 1.1.28

### Patch Changes

* Updated dependencies \[[`5afbe51`](https://github.com/tkhq/sdk/commit/5afbe51949bdd1997fad083a4c1e4272ff7409dc), [`a38a6e3`](https://github.com/tkhq/sdk/commit/a38a6e36dc2bf9abdea64bc817d1cad95b8a289a), [`40c4035`](https://github.com/tkhq/sdk/commit/40c40359ec7096d0bca39ffc93e89361b3b11a1a), [`593de2d`](https://github.com/tkhq/sdk/commit/593de2d9404ec8cf53426f9cf832c13eefa3fbf2)]:
  * @turnkey/sdk-browser\@5.2.0
  * @turnkey/sdk-server\@4.1.0
  * @turnkey/http\@3.4.1
  * @turnkey/api-key-stamper\@0.4.6

## 1.1.27

### Patch Changes

* Updated dependencies \[[`27fe590`](https://github.com/tkhq/sdk/commit/27fe590cdc3eb6a8cde093eeefda2ee1cdc79412)]:
  * @turnkey/sdk-browser\@5.1.0
  * @turnkey/sdk-server\@4.0.1

## 1.1.26

### Patch Changes

* Updated dependencies \[[`07dfd33`](https://github.com/tkhq/sdk/commit/07dfd3397472687092e1c73b1d68714f421b9ca0), [`e8a5f1b`](https://github.com/tkhq/sdk/commit/e8a5f1b431623c4ff1cb85c6039464b328cf0e6a)]:
  * @turnkey/sdk-browser\@5.0.0
  * @turnkey/sdk-server\@4.0.0
  * @turnkey/http\@3.4.0

## 1.1.25

### Patch Changes

* Updated dependencies \[25ca339]
  * @turnkey/sdk-browser\@4.3.0
  * @turnkey/sdk-server\@3.3.0
  * @turnkey/http\@3.3.0

## 1.1.24

### Patch Changes

* Updated dependencies \[3f6e415]
* Updated dependencies \[4d1d775]
  * @turnkey/sdk-browser\@4.2.0
  * @turnkey/sdk-server\@3.2.0
  * @turnkey/http\@3.2.0
  * @turnkey/api-key-stamper\@0.4.5

## 1.1.23

### Patch Changes

* Updated dependencies \[3e4a482]
  * @turnkey/sdk-browser\@4.1.0
  * @turnkey/sdk-server\@3.1.0
  * @turnkey/http\@3.1.0

## 1.1.22

### Patch Changes

* Updated dependencies \[7b72769]
  * @turnkey/sdk-server\@3.0.1

## 1.1.21

### Patch Changes

* Updated dependencies \[e501690]
* Updated dependencies \[d1083bd]
* Updated dependencies \[f94d36e]
  * @turnkey/sdk-browser\@4.0.0
  * @turnkey/sdk-server\@3.0.0
  * @turnkey/http\@3.0.0

## 1.1.20

### Patch Changes

* Updated dependencies \[bf87774]
  * @turnkey/sdk-browser\@3.1.0

## 1.1.19

### Patch Changes

* Updated dependencies \[5ec5187]
  * @turnkey/sdk-browser\@3.0.1
  * @turnkey/sdk-server\@2.6.1

## 1.1.18

### Patch Changes

* Updated dependencies \[0e4e959]
* Updated dependencies \[856f449]
* Updated dependencies \[c9ae537]
* Updated dependencies \[d4ce5fa]
* Updated dependencies \[ecdb29a]
* Updated dependencies \[72890f5]
  * @turnkey/sdk-browser\@3.0.0
  * @turnkey/sdk-server\@2.6.0
  * @turnkey/http\@2.22.0

## 1.1.17

### Patch Changes

* Updated dependencies \[93540e7]
* Updated dependencies \[fdb8bf0]
* Updated dependencies \[9147962]
  * @turnkey/sdk-browser\@2.0.0
  * @turnkey/sdk-server\@2.5.0

## 1.1.16

### Patch Changes

* Updated dependencies \[233ae71]
* Updated dependencies \[9317588]
  * @turnkey/sdk-browser\@1.16.0
  * @turnkey/sdk-server\@2.4.0

## 1.1.15

### Patch Changes

* Updated dependencies \[56a307e]
  * @turnkey/sdk-browser\@1.15.0
  * @turnkey/sdk-server\@2.3.0
  * @turnkey/http\@2.21.0

## 1.1.14

### Patch Changes

* Updated dependencies \[3c44c4a]
* Updated dependencies \[bfc833f]
  * @turnkey/sdk-browser\@1.14.0
  * @turnkey/sdk-server\@2.2.0
  * @turnkey/http\@2.20.0

## 1.1.13

### Patch Changes

* Updated dependencies \[69d2571]
* Updated dependencies \[57f9cb0]
  * @turnkey/sdk-browser\@1.13.0
  * @turnkey/sdk-server\@2.1.0
  * @turnkey/http\@2.19.0

## 1.1.12

### Patch Changes

* Updated dependencies \[755833b]
  * @turnkey/sdk-browser\@1.12.1
  * @turnkey/sdk-server\@2.0.1

## 1.1.11

### Patch Changes

* Updated dependencies \[6695af2]
* Updated dependencies \[1ebd4e2]
  * @turnkey/sdk-browser\@1.12.0
  * @turnkey/sdk-server\@2.0.0
  * @turnkey/http\@2.18.0

## 1.1.10

### Patch Changes

* Updated dependencies \[053fbfb]
  * @turnkey/sdk-browser\@1.11.2
  * @turnkey/sdk-server\@1.7.3
  * @turnkey/http\@2.17.3

## 1.1.9

### Patch Changes

* Updated dependencies \[328d6aa]
* Updated dependencies \[b90947e]
* Updated dependencies \[2d5977b]
* Updated dependencies \[fad7c37]
  * @turnkey/sdk-browser\@1.11.1
  * @turnkey/sdk-server\@1.7.2
  * @turnkey/api-key-stamper\@0.4.4
  * @turnkey/http\@2.17.2

## 1.1.8

### Patch Changes

* Updated dependencies \[7988bc1]
* Updated dependencies \[538d4fc]
* Updated dependencies \[12d5aaa]
  * @turnkey/sdk-browser\@1.11.0
  * @turnkey/sdk-server\@1.7.1
  * @turnkey/http\@2.17.1

## 1.1.7

### Patch Changes

* @turnkey/sdk-browser\@1.10.2

## 1.1.6

### Patch Changes

* Updated dependencies \[78bc39c]
  * @turnkey/sdk-server\@1.7.0
  * @turnkey/http\@2.17.0
  * @turnkey/sdk-browser\@1.10.1

## 1.1.5

### Patch Changes

* Updated dependencies \[8bea78f]
  * @turnkey/sdk-browser\@1.10.0

## 1.1.4

### Patch Changes

* Updated dependencies \[3dd74ac]
* Updated dependencies \[1e36edf]
* Updated dependencies \[4df8914]
* Updated dependencies \[11a9e2f]
  * @turnkey/sdk-browser\@1.9.0
  * @turnkey/sdk-server\@1.6.0
  * @turnkey/http\@2.16.0

## 1.1.3

### Patch Changes

* Updated dependencies \[9ebd062]
  * @turnkey/sdk-browser\@1.8.0
  * @turnkey/sdk-server\@1.5.0
  * @turnkey/http\@2.15.0

## 1.1.2

### Patch Changes

* Updated dependencies \[abe7138]
* Updated dependencies \[96d7f99]
  * @turnkey/sdk-server\@1.4.2
  * @turnkey/sdk-browser\@1.7.1
  * @turnkey/http\@2.14.2
  * @turnkey/api-key-stamper\@0.4.3

## 1.1.1

### Patch Changes

* Updated dependencies \[ff059d5]
* Updated dependencies \[ff059d5]
  * @turnkey/sdk-browser\@1.7.0
  * @turnkey/sdk-server\@1.4.1
  * @turnkey/http\@2.14.1
  * @turnkey/api-key-stamper\@0.4.2

## 1.1.0

### Minor Changes

* bdded80: Support awaiting consensus

  * Add a few new helper functions:
    * `serializeSignature` serializes a raw signature

### Patch Changes

* Updated dependencies \[c988ed0]
* Updated dependencies \[848f8d3]
  * @turnkey/sdk-browser\@1.6.0
  * @turnkey/sdk-server\@1.4.0
  * @turnkey/http\@2.14.0

## 1.0.21

### Patch Changes

* Updated dependencies \[1813ed5]
  * @turnkey/sdk-browser\@1.5.0

## 1.0.20

### Patch Changes

* Updated dependencies \[bab5393]
* Updated dependencies \[a16073c]
* Updated dependencies \[7e7d209]
  * @turnkey/sdk-browser\@1.4.0

## 1.0.19

### Patch Changes

* Updated dependencies \[93dee46]
  * @turnkey/http\@2.13.0
  * @turnkey/sdk-browser\@1.3.0
  * @turnkey/sdk-server\@1.3.0

## 1.0.18

### Patch Changes

* Updated dependencies \[e2f2e0b]
  * @turnkey/sdk-browser\@1.2.4
  * @turnkey/sdk-server\@1.2.4
  * @turnkey/http\@2.12.3

## 1.0.17

### Patch Changes

* Updated dependencies
  * @turnkey/sdk-browser\@1.2.3
  * @turnkey/sdk-server\@1.2.3

## 1.0.16

### Patch Changes

* Updated dependencies
  * @turnkey/api-key-stamper\@0.4.1
  * @turnkey/http\@2.12.2
  * @turnkey/sdk-browser\@1.2.2
  * @turnkey/sdk-server\@1.2.2

## 1.0.15

### Patch Changes

* Updated dependencies \[f17a229]
  * @turnkey/http\@2.12.1
  * @turnkey/sdk-browser\@1.2.1
  * @turnkey/sdk-server\@1.2.1

## 1.0.14

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.12.0
  * @turnkey/sdk-browser\@1.2.0
  * @turnkey/sdk-server\@1.2.0

## 1.0.13

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.11.0
  * @turnkey/sdk-browser\@1.1.0
  * @turnkey/sdk-server\@1.1.0

## 1.0.12

### Patch Changes

* Updated dependencies
  * @turnkey/sdk-browser\@1.0.0
  * @turnkey/sdk-server\@1.0.0

## 1.0.11

### Patch Changes

* @turnkey/sdk-browser\@0.4.1

## 1.0.10

### Patch Changes

* Updated dependencies \[e4b29da]
  * @turnkey/sdk-browser\@0.4.0

## 1.0.9

### Patch Changes

* Updated dependencies \[d409d81]
  * @turnkey/sdk-browser\@0.3.0

## 1.0.8

### Patch Changes

* @turnkey/sdk-browser\@0.2.1

## 1.0.7

### Patch Changes

* Updated dependencies
* Updated dependencies \[e4d2a84]
  * @turnkey/sdk-browser\@0.2.0
  * @turnkey/sdk-server\@0.2.0

## 1.0.6

### Patch Changes

* Updated dependencies
  * @turnkey/sdk-browser\@0.1.0
  * @turnkey/sdk-server\@0.1.0

## 1.0.5

### Patch Changes

* a6502e6: Add support for new Turnkey Client types

## 1.0.4

### Patch Changes

* Updated dependencies \[7a9ce7a]
  * @turnkey/http\@2.10.0

## 1.0.3

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.9.1

## 1.0.2

### Patch Changes

* Updated dependencies \[83b62b5]
  * @turnkey/http\@2.9.0

## 1.0.1

### Patch Changes

* Updated dependencies \[46a7d90]
  * @turnkey/http\@2.8.0

## 1.0.0

### Major Changes

Updates @turnkey/ethers package and examples to use ethers v6. Refer to [https://docs.ethers.org/v6/migrating](https://docs.ethers.org/v6/migrating) for full migration instructions.

✨Summary of Changes✨

`getBalance` is no longer a method on the signer. It must be obtained via the provider instance.
Additionally, it requires an address to be passed in:

```
// before
const balance = await connectedSigner.getBalance();

// after
// first get the address
const address = await connectedSigner.getAddress()
// then pass it in
const balance = await connectedSigner.provider?.getBalance(address)
```

`getChainId` is no longer a method on the signer. It must be obtained via the network object on the provider instance:

```
// before
const chainId = await connectedSigner.getChainId();

// after
const chainId = (await connectedSigner.provider?.getNetwork())?.chainId;
```

`getTransactionCount` is no longer a method on the signer. It must be obtained via the provider instance.
Additionally, it requires an address to be passed in:

```
// before
const transactionCount = await connectedSigner.getTransactionCount();

// after
// first get the address
const address = await connectedSigner.getAddress()
// then pass it in
const transactionCount = await connectedSigner.provider?.getTransactionCount(address);
```

`getFeeData` is no longer a method on the signer. It must be obtained via the provider instance:

```
// before
const feeData = await connectedSigner.getFeeData();

// after
const feeData = await connectedSigner.provider?.getFeeData();
```

BigNumber -> bigint: numerical values such as, chainId, fee data, balance now use new ES6 primitive `bigint` instead of `BigNumber`.
For example, when checking if the balance is `0`, `bigint` must now be used for comparison:

```
// before
if (balance.isZero()) {...}

// after
if (balance === 0n) {...}
```

## 0.19.9

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.7.1

## 0.19.8

### Patch Changes

* Updated dependencies (\[c3b423b], \[d73725b])
  * @turnkey/api-key-stamper\@0.4.0
  * @turnkey/http\@2.7.0

## 0.19.7

### Patch Changes

* Updated dependencies \[f9d636c]
  * @turnkey/http\@2.6.2

## 0.19.6

### Patch Changes

* Updated dependencies \[52e2389]
  * @turnkey/http\@2.6.1

## 0.19.5

### Patch Changes

* Updated dependencies \[7a3c890]
  * @turnkey/http\@2.6.0

## 0.19.4

### Patch Changes

* Upgrade to Node v18 (#184)
* Updated dependencies
  * @turnkey/api-key-stamper\@0.3.1
  * @turnkey/http\@2.5.1

## 0.19.3

### Patch Changes

* Updated dependencies \[464ac0e]
  * @turnkey/http\@2.5.0

## 0.19.2

### Patch Changes

* @turnkey/http\@2.4.2

## 0.19.1

### Patch Changes

* Updated dependencies \[f87ced8]
  * @turnkey/http\@2.4.1

## 0.19.0

### Minor Changes

* Use rollup to build ESM and CommonJS, fix ESM support (#174)

### Patch Changes

* Updated dependencies \[fc5b291]
  * @turnkey/api-key-stamper\@0.3.0
  * @turnkey/http\@2.4.0

## 0.18.3

### Patch Changes

* Updated dependencies
  * @turnkey/api-key-stamper\@0.3.0
  * @turnkey/http\@2.3.1

## 0.18.2

### Patch Changes

* Updated dependencies \[f1bd68a]
  * @turnkey/http\@2.3.0

## 0.18.1

### Patch Changes

* Updated dependencies \[ed50a0f]
* Updated dependencies
  * @turnkey/http\@2.2.0

## 0.18.0

### Minor Changes

* cf8631a: Update interface to support `signWith`

This change supports signing with wallet account addresses, private key addresses, or private key IDs. See below for an example:

```js
const turnkeyClient = new TurnkeyClient(
  {
    baseUrl: "https://api.turnkey.com",
  },
  // This uses API key credentials.
  // If you're using passkeys, use `@turnkey/webauthn-stamper` to collect webauthn signatures:
  // new WebauthnStamper({...options...})
  new ApiKeyStamper({
    apiPublicKey: "...",
    apiPrivateKey: "...",
  }),
);

// Initialize a Turnkey Signer
const turnkeySigner = new TurnkeySigner({
  client: turnkeyClient,
  organizationId: "...",
  signWith: "...",
});
```

## 0.17.4

### Patch Changes

* Updated dependencies \[bb6ea0b]
  * @turnkey/http\@2.1.0

## 0.17.3

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.0.0
* Updated the shape of signing

## 0.17.2

### Patch Changes

* Updated dependencies
  * @turnkey/http\@1.3.0

## 0.17.1

### Patch Changes

* Update documentation as follows:
* ebf87a9: This breaking change adds support for stampers (@turnkey/api-key-stamper / @turnkey/webauthn-stamper) to integrate with API keys or passkeys, bringing it to parity with our [Viem](https://github.com/tkhq/sdk/tree/main/packages/viem) package. See the following examples for sample usage:
  * [with-ethers](https://github.com/tkhq/sdk/tree/main/examples/with-ethers): updated to use `@turnkey/api-key-stamper`
  * [with-ethers-and-passkeys](https://github.com/tkhq/sdk/tree/main/examples/with-ethers-and-passkeys): demonstrates usage of `@turnkey/webauthn-stamper`

## 0.17.0

### Minor Changes

* Add support for stampers (@turnkey/api-key-stamper / @turnkey/webauthn-stamper) to integrate with API keys or passkeys.

## 0.16.8

### Patch Changes

* Updated dependencies
  * @turnkey/http\@1.2.0

## 0.16.7

### Patch Changes

* @turnkey/http\@1.1.1

## 0.16.6

### Patch Changes

* Updated dependencies
  * @turnkey/http\@1.1.0

## 0.16.5

### Patch Changes

* Updated dependencies \[8d1d0e8]
  * @turnkey/http\@1.0.1

## 0.16.4

### Patch Changes

* 46473ec: This breaking change updates generated code to be shorter and more intuitive to read:

  * generated fetchers do not include the HTTP method in their name. For example `useGetGetActivity` is now `useGetActivity`, and `usePostSignTransaction` is `useSignTransaction`.
  * input types follow the same convention (no HTTP method in the name): `TPostCreatePrivateKeysInput` is now `TCreatePrivateKeysInput`.
  * the "federated" request helpers introduced in `0.18.0` are now named "signed" requests to better reflect what they are. `FederatedRequest` is now `SignedRequest`, and generated types follow. For example: `federatedPostCreatePrivateKeys` is now `signCreatePrivateKeys`, `federatedGetGetActivity` is now `signGetActivity`, and so on.

  The name updates should be automatically suggested if you use VSCode since the new names are simply shorter versions of the old one.

* Updated dependencies \[46473ec]

* Updated dependencies \[38b424f]
  * @turnkey/http\@1.0.0

## 0.16.3

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.18.1

## 0.16.2

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.18.0

## 0.16.1

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.17.1

## 0.16.0

### Minor Changes

* No public facing changes

### Patch Changes

* Updated dependencies \[9317f51]
  * @turnkey/http\@0.17.0

## 0.15.0

### Minor Changes

* No public facing changes

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.16.0
    * Fix `.postGetPrivateKey(...)`'s underlying path, while adding `@deprecated` `.postGetPrivateKeyBackwardsCompat(...)` for backward compatibility

## 0.14.1

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.15.0

## 0.14.0

### Minor Changes

* `signTransaction(...)` now verifies and drops `tx.from` if present
  * This mimics the behavior of ethers' Wallet [implementation](https://github.com/ethers-io/ethers.js/blob/f97b92bbb1bde22fcc44100af78d7f31602863ab/packages/wallet/src.ts/index.ts#L117-L121)

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.14.0

## 0.13.2

### Patch Changes

* New `TurnkeyRequestError` error class that contains rich error details
* Updated dependencies
  * @turnkey/http\@0.13.2

## 0.13.1

### Patch Changes

* Error messages now contain Turnkey-specific error details
* Updated dependencies
  * @turnkey/http\@0.13.1

## 0.13.0

### Minor Changes

* No public facing changes

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.13.0

## 0.12.0

### Minor Changes

* Error messages now contain Turnkey-specific error code and message

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.12.0

## 0.11.0

### Minor Changes

* `TurnkeySigner` now conforms to ethers' `TypedDataSigner` interface

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.11.0

## 0.10.0

### Minor Changes

* Added EIP-712 support for signing typed data to Ethers.
* Update Gnosis example to make use of new signing functionality.

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.10.0

## 0.9.0

### Minor Changes

* Improved support for React Native runtime ([https://github.com/tkhq/sdk/pull/37](https://github.com/tkhq/sdk/pull/37))

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.9.0

## 0.8.1

### Patch Changes

* Switched from `undici` to `cross-fetch` to improve bundler compatibility
* Updated dependencies
  * @turnkey/http\@0.8.1

## 0.8.0

### Minor Changes

* Added browser runtime support — `@turnkey/ethers` is now a universal (isomorphic) package
* Dropped support for Node.js v14; we recommend using Node v18+

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.8.0

## 0.7.0

### Minor Changes

* No public facing changes

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.7.0

## 0.6.0

### Minor Changes

* `#signMessage(...)`: move encoding and hashing logic to client side, `eth_sign` style

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.6.0

## 0.5.0

### Minor Changes

* Arbitrary message signing

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.5.0

## 0.4.0

### Minor Changes

* `timestamp` -> `timestampMs`

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.4.0

## 0.3.1

### Patch Changes

* Fix outdated artifact
* Updated dependencies
  * @turnkey/http\@0.3.1

## 0.3.0

### Minor Changes

* `keyId` -> `privateKeyId` everywhere

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.3.0

## 0.2.0

### Minor Changes

* Change parameter from `keyId` to `privateKeyId`
* Bump API version to latest Beta

### Patch Changes

* Updated dependencies
  * @turnkey/http\@0.2.0

## 0.1.3

### Patch Changes

* Support runtime config for credentials
* Updated dependencies
  * @turnkey/http\@0.1.3

## 0.1.2

### Patch Changes

* Drop internal dev dependency
* Updated dependencies
  * @turnkey/http\@0.1.2

## 0.1.1

### Patch Changes

* Initial release
* Updated dependencies
  * @turnkey/http\@0.1.1


# Go
Source: https://docs.turnkey.com/changelogs/golang/readme



# CHANGELOG

## [v0.3.0](https://github.com/tkhq/go-sdk/compare/v0.2.0...v0.3.0) (2025-02-19)

* Update per mono release v2025.2.1
  * Introduces new `GetWalletAccount` query

## [v0.2.0](https://github.com/tkhq/go-sdk/compare/v0.1.0...v0.2.0) (2025-02-13)

* Update per mono release v2025.1.11
* Update vulnerable go crypto package

## [v0.1.0](https://github.com/tkhq/go-sdk/compare/8c73e973e9a5e1e4cfabef7aaae24a8fad91478f...v0.1.0) (2025-01-17)

* First "official" beta release! 🥳
* Because it's the first, this release version corresponds to the latest changes merged in `8c73e973e9a5e1e4cfabef7aaae24a8fad91478f`


# Http
Source: https://docs.turnkey.com/changelogs/http/readme



# @turnkey/http

## 3.5.0

### Minor Changes

* [#704](https://github.com/tkhq/sdk/pull/704) [`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd) Author [@amircheikh](https://github.com/amircheikh) - Added `name` field to constructor. `isHttpClient` now uses this new field to complete the check. This fixes a bug where `isHttpClient` would fail the check under certain production environments.

  Synced with mono 2025.6.10 to include the following endpoints:

  `update_user_email`: Update a User's email in an existing Organization

  `update_user_name`: Update a User's name in an existing Organization

  `update_user_phone_number`: Update a User's phone number in an existing Organization

### Patch Changes

* Updated dependencies \[[`7625df0`](https://github.com/tkhq/sdk/commit/7625df0538002c3455bd5862211210e38472e164)]:
  * @turnkey/api-key-stamper\@0.4.7

## 3.4.2

### Patch Changes

* [#665](https://github.com/tkhq/sdk/pull/665) [`be0a621`](https://github.com/tkhq/sdk/commit/be0a621fb962bd51d2df1a1e79f5260d7c696772) Author [@amircheikh](https://github.com/amircheikh) - Exposed `isHttpClient` function for determining if a passed in client is from turnkey/http

## 3.4.1

### Patch Changes

* [#663](https://github.com/tkhq/sdk/pull/663) [`593de2d`](https://github.com/tkhq/sdk/commit/593de2d9404ec8cf53426f9cf832c13eefa3fbf2) Thanks [@moe-dev](https://github.com/moe-dev)! - Update to endpoints as per mono v2025.5.7. Add V5 TON address format generation. Non breaking

* Updated dependencies \[[`5afbe51`](https://github.com/tkhq/sdk/commit/5afbe51949bdd1997fad083a4c1e4272ff7409dc), [`40c4035`](https://github.com/tkhq/sdk/commit/40c40359ec7096d0bca39ffc93e89361b3b11a1a)]:
  * @turnkey/webauthn-stamper\@0.5.1
  * @turnkey/encoding\@0.5.0
  * @turnkey/api-key-stamper\@0.4.6

## 3.4.0

### Minor Changes

* Added new authentication activities:
  * STAMP\_LOGIN: Handles authentication flows for passkeys, wallet logins, and session refresh. Initiated by sub-organizations; returns a session JWT.
  * INIT\_OTP: Initiates sending a 6–9 digit or bech32 alphanumeric OTP to an email or phone. Initiated by the parent organization.
  * VERIFY\_OTP: Verifies the OTP and returns a verification token. Initiated by the parent organization.
  * OTP\_LOGIN: Completes OTP-based authentication by verifying a tokenized OTP challenge and establishing a session. Initiated by the parent organization; returns a session JWT.
  * OAUTH\_LOGIN: Finalizes OAuth-based logins from third-party OIDC providers. Initiated by the parent organization; returns a session JWT.

## 3.3.0

### Minor Changes

* 25ca339: Adding replyToEmailAddress field for specifying reply-to when using a customer sender

## 3.2.0

### Minor Changes

* 3f6e415: Update per mono v2025.4.5
  * Introduces Tron transaction parsing and policy engine support. For more information, take a look at our [docs](https://docs.turnkey.com/networks/tron)

### Patch Changes

* Updated dependencies \[4d1d775]
  * @turnkey/api-key-stamper\@0.4.5

## 3.1.0

### Minor Changes

* 3e4a482: Release per mono v2025.4.4
  * Adds parsing and policy engine support for Ethereum Type 3 (EIP-4844) and Type 4 (EIP-7702) transactions. There is no change to any signing interface or API; you simply can now use Turnkey's signing endpoints to sign those transaction types. See [with-viem](https://github.com/tkhq/sdk/blob/main/examples/with-viem/) for examples.
  * New wallet account creations will now automatically derive the underlying derived account's public key. For example: previously, if derived an Ethereum wallet account, you would get the resulting Ethereum address (`0x...`). If you also wanted the public key associated with that underlying key, you would've had to derive an additional wallet account with `ADDRESS_FORMAT_COMPRESSED`. Now, this will automatically be derived for you. It is now a property that has been added to the wallet account primitive (i.e. accessible via `walletAccount.publicKey`).

## 3.0.0

### Major Changes

* f94d36e: Remove deprecated TurnkeyApiService. TurnkeyApi should be used instead.

### Minor Changes

* d1083bd: New activity `INIT_OTP_AUTH_V2` which allows alphanumeric boolean and otpLength (6-9) to be passed

* This release introduces the `INIT_OTP_AUTH_V2` activity. The difference between it and `INIT_OTP_AUTH` is that it can now accept `alphanumeric` and `otpLength` for selecting crockford bech32 alphanumeric codes and the length of those codes. By default alphanumeric = true, otpLength = 9

* This release introduces `sendFromEmailSenderName` to `INIT_OTP_AUTH`, `INIT_OTP_AUTH_V2`, `EMAIL_AUTH` and `EMAIL_AUTH_V2`. This is an optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'.

## 2.22.0

### Minor Changes

* ecdb29a: Update API as per mono v2025.3.2

  * This release introduces the `CREATE_USERS_V3` activity. The difference between it and `CREATE_USERS_V2` is that it can now accept `userPhoneNumber` and `oauthProviders`. In total, it accepts the following parameters:

  ```javascript
  /** @description A list of Users. */
  users: {
    /** @description Human-readable name for a User. */
    userName: string;
    /** @description The user's email address. */
    userEmail?: string;
    /** @description The user's phone number in E.164 format e.g. +13214567890 */
    userPhoneNumber?: string;
    /** @description A list of API Key parameters. This field, if not needed, should be an empty array in your request body. */
    apiKeys: definitions["v1ApiKeyParamsV2"][];
    /** @description A list of Authenticator parameters. This field, if not needed, should be an empty array in your request body. */
    authenticators: definitions["v1AuthenticatorParamsV2"][];
    /** @description A list of Oauth providers. This field, if not needed, should be an empty array in your request body. */
    oauthProviders: definitions["v1OauthProviderParams"][];
    /** @description A list of User Tag IDs. This field, if not needed, should be an empty array in your request body. */
    userTags: string[];
  }
  ```

  See [source code](https://github.com/tkhq/sdk/blob/60c0c03440785b841d1f6f393612046423dc665f/packages/http/src/__generated__/services/coordinator/public/v1/public_api.types.ts#L2894-L2909) to view details on the nested types.

## 2.21.0

### Minor Changes

* 56a307e: Update API to mono v2025.3.0
  * This release introduces an `invalidateExisting` flag to the `CreateReadWriteSession` and `Oauth` activities. If enabled, this will invalidate existing read-write and oauth API keys. This is useful in scenarios where a user attempts to create numerous `ReadWrite` or `Oauth` sessions. Because our API caps the number of session keys associated with a user, this flag can clear all other existing session keys of that specific type (e.g. setting `invalidateExisting: true` for `CreateReadWriteSession` will invalidate all previously created read-write session keys)

## 2.20.0

### Minor Changes

* 3c44c4a: Updates per mono release v2025.2.2

## 2.19.0

### Minor Changes

* 57f9cb0: Update endpoints - surface `GetWalletAccount`. This endpoint takes in the following args:
  ```javascript
  /** @description Unique identifier for a given Organization. */
  organizationId: string;
  /** @description Unique identifier for a given Wallet. */
  walletId: string;
  /** @description Address corresponding to a Wallet Account. */
  address?: string;
  /** @description Path corresponding to a Wallet Account. */
  path?: string;
  ```

## 2.18.0

### Minor Changes

* 6695af2: Update per mono release v2025.1.11

## 2.17.3

### Patch Changes

* 053fbfb: Update mono dependencies

## 2.17.2

### Patch Changes

* Updated dependencies \[2d5977b]
  * @turnkey/api-key-stamper\@0.4.4

## 2.17.1

### Patch Changes

* 538d4fc: Update api endpoints - NEW: User verification, SMS customization params

## 2.17.0

### Minor Changes

* 78bc39c: Add default accounts for various address types
  * Add wallet account ID to list wallets endpoint

## 2.16.0

### Minor Changes

* 4df8914: Version bump corresponding to mono release v2024.10.10.
  * Improved error message for duplicate activity submission
  * Address derivation support for DOGE, TON, SEI, XLM
  * Fix server side error if sub\_org doesn’t have email and/or phone number

## 2.15.0

### Minor Changes

* 9ebd062: Release OTP functionality

## 2.14.2

### Patch Changes

* 96d7f99: Update dependencies
* Updated dependencies \[e5c4fe9]
  * @turnkey/encoding\@0.4.0
  * @turnkey/api-key-stamper\@0.4.3

## 2.14.1

### Patch Changes

* ff059d5: Update dependencies
* Updated dependencies \[93666ff]
  * @turnkey/encoding\@0.3.0
  * @turnkey/api-key-stamper\@0.4.2

## 2.14.0

### Minor Changes

* 848f8d3: Add new helpers and update types and errors

  * `getSignatureFromActivity` returns the signature corresponding to a completed activity
  * `getSignedTransactionFromActivity` returns the signed transaction corresponding to a completed activity
  * `assertActivityCompleted` checks the state of an activity and throws an error if the activity either requires consensus or is otherwise not yet completed
  * `TERMINAL_ACTIVITY_STATUSES` is a const containing all terminal activity statuses. Useful for checking on an activity
  * `TurnkeyActivityError` now uses `undefined` instead of `null`
  * Export some additional types: `TActivity`, `TActivityId`, `TActivityStatus`, `TActivityType`

## 2.13.0

### Minor Changes

* 93dee46: Add create read write session v2 which allows for user targeting directly from stamp or optional userId in intent

## 2.12.3

### Patch Changes

* e2f2e0b: Added two new endpoints for deleting private keys and deleting wallets

## 2.12.2

### Patch Changes

* 2d7e5a9: fix a (currently unused) return value

* Updated dependencies
  * @turnkey/api-key-stamper\@0.4.1
  * @turnkey/encoding\@0.2.1

## 2.12.1

### Patch Changes

* f17a229: Update to oauth related endpoints to drop jwks uri from oauth providers

## 2.12.0

### Minor Changes

* Add Email Auth V2 - Optional invalidate exisiting Email Authentication API keys

## 2.11.0

### Minor Changes

* Update to use new endpoints. Including CREATE\_READ\_WRITE\_SESSION which allows one shot passkey sessions (returns org information and a credential bundle) and CREATE\_API\_KEYS\_V2 which allows a curve type to be passed (SECP256K1 or P256)

## 2.10.0

### Minor Changes

* 7a9ce7a: Sync 2024.3.16

## 2.9.1

### Patch Changes

* Update generated files to latest release: optional pagination options were added to list sub-organization and list wallet account endpoints.

## 2.9.0

### Minor Changes

* 83b62b5: Sync types for latest release

## 2.8.0

### Minor Changes

* 46a7d90: Update to v2024.2.1 API: add activities to initialize wallet import, import wallet, delete users, delete private key tags, delete user tags, and list sub-organizations

## 2.7.1

### Patch Changes

* Update to v2024.2.0 API types: `mnemonicLength` is now a number instead of a string

## 2.7.0

### Minor Changes

* Introduce and reference `@turnkey/encoding` to consolidate utility functions
* Updated dependencies (\[c3b423b], \[d73725b])
  * @turnkey/webauthn-stamper\@0.5.0
  * @turnkey/api-key-stamper\@0.4.0
  * @turnkey/encoding\@0.1.0

## 2.6.2

### Patch Changes

* b45a9ac: Include package version in request headers
* f9d636c: Export VERSION from turnkey/http

## 2.6.1

### Patch Changes

* 52e2389: Revert version export (#186 and #187)

## 2.6.0

### Minor Changes

* 0794f41: Add VERSION constant
* 7a3c890: Add key export support

### Patch Changes

* 4517e3b: Update version string to include package name

## 2.5.1

### Patch Changes

* Upgrade to Node v18 (#184)
* Updated dependencies
  * @turnkey/webauthn-stamper\@0.4.3
  * @turnkey/api-key-stamper\@0.3.1

## 2.5.0

### Minor Changes

* 464ac0e: Update protos for latest release, which includes:

  * Support optional expirations for API keys, configurable via the `expirationSeconds` parameter.
  * Support Email Auth. Details to follow ⚡️

## 2.4.2

### Patch Changes

* Updated dependencies \[a03e385]
  * @turnkey/webauthn-stamper\@0.4.2

## 2.4.1

### Patch Changes

* Fix universal files to stop using `require`. Use ES6 imports instead (#178)
* Updated dependencies \[f87ced8]
  * @turnkey/webauthn-stamper\@0.4.1

## 2.4.0

### Minor Changes

* Use rollup to build ESM and CommonJS, fix ESM support (#174)

### Patch Changes

* Updated dependencies \[fc5b291]
  * @turnkey/api-key-stamper\@0.3.0
  * @turnkey/webauthn-stamper\@0.4.0

## 2.3.1

### Patch Changes

* Updated dependencies
  * @turnkey/api-key-stamper\@0.2.0

## 2.3.0

### Minor Changes

* Sync protos from latest public endpoints

## 2.2.0

### Minor Changes

* Add ESM to package dist (#154)

### Patch Changes

* ed50a0f: simplify types

## 2.1.0

### Minor Changes

* bb6ea0b: Update generated files
  * new query endpoints to retrieve wallets (`/public/v1/query/list_wallets`)
  * new query endpoint to retrieve wallet accounts (`/public/v1/query/list_wallet_accounts`)

## 2.0.0

### Major Changes

* Synced protos from mono

### Upgrade notes

* `signRawPayload` and `signTransaction` now expect a `signWith` param instead of `privateKeyId` previously
* `signRawPayload` and `signTransaction` have been updated to expect a new type: `ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2` and `ACTIVITY_TYPE_SIGN_TRANSACTION_V2`, respectively
* If you have policies authorizing `ACTIVITY_TYPE_SIGN_RAW_PAYLOAD` or `ACTIVITY_TYPE_SIGN_TRANSACTION` specifically, they will need to be updated to authorize `ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2` and `ACTIVITY_TYPE_SIGN_TRANSACTION_V2` (or better yet, update your policies to allow all signing actions categorically using policy resources and actions. See [https://docs.turnkey.com/managing-policies/examples](https://docs.turnkey.com/managing-policies/examples))
* `createSubOrganization` now uses `ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4` under the hood, which utilizes wallets. The shape of the request has been updated to include the following parameter, `wallet`. Here's an example:

```js
{
  ...
  wallet: {
    walletName: "Default Wallet",
    accounts: [
      {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: "m/44'/60'/0'/0/0",
        addressFormat: "ADDRESS_FORMAT_ETHEREUM",
      },
    ],
  },
}
```

See [https://docs.turnkey.com/concepts/sub-organizations](https://docs.turnkey.com/concepts/sub-organizations) for more details.

## 1.3.0

### Minor Changes

* Synced protos from mono
* Adds base URL check during initialization (closes [https://github.com/tkhq/sdk/issues/124](https://github.com/tkhq/sdk/issues/124))
* The following are new features additions, fresh out the oven. Still getting them ready for primetime! Refreshed examples to come soon™️. Stay tuned and reach out to the Turnkey team if you have any questions.
  * Wallets:
    * 🟢 `ACTIVITY_TYPE_CREATE_WALLET` (via `/api/v1/submit/create_wallet`): create a HD wallet
    * 🟢 `ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS` (via `/api/v1/submit/create_wallet_accounts`): create a wallet account (address)
    * 🟢 `ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2` (via `/api/v1/submit/sign_raw_payload_v2`): sign a payload with a specified private key or address
    * 🟢 `ACTIVITY_TYPE_SIGN_TRANSACTION_V2` (via `/api/v1/submit/sign_transaction_v2`): sign a transaction with a specified private key or address
  * Organization features:
    * 🟢 `ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE` (via `/api/v1/submit/set_organization_feature`): set an organization feature
    * 🟢 `ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE` (via `/api/v1/submit/remove_organization_feature`): remove an organization feature
    * Only one feature supported as of this time; additional documentation to follow.
  * Export private key:
    * 🟡 `ACTIVITY_TYPE_EXPORT_PRIVATE_KEY` (via `/api/v1/submit/export_private_key`): export a private key, encrypted to a target public key. We do not yet have CLI or front-end tooling to use this safely; stay tuned!
  * Email recovery:
    * 🟡 `ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY` (via `/api/v1/submit/init_user_email_recovery`): initialize a new email recovery flow

Note:

* 🟢: good to go!
* 🟡: these endpoints are safe to use, but still experimental/unstable. Check back for updates and guidance.

### Patch Changes

* Updated dependencies
  * @turnkey/webauthn-stamper\@0.2.0

## 1.2.0

### Minor Changes

* The `createSubOrganization` request has been updated under the hood:

  * Calling `.createSubOrganization` on our HTTP client will trigger an activity of type `CREATE_SUB_ORGANIZATION_V3` instead of `CREATE_SUB_ORGANIZATION_V2` previously.
  * If there are any policies referencing `CREATE_SUB_ORGANIZATION_V2` specifically, they will no longer work out of the box if creating sub-orgs via SDK. These policies will need to be updated to allow `CREATE_SUB_ORGANIZATION_V3`. See policy examples related to access control [here](https://docs.turnkey.com/managing-policies/examples#access-control) for additional methods of constructing policies.
  * `CREATE_SUB_ORGANIZATION_V3` supports everything `CREATE_SUB_ORGANIZATION_V2` supports, with the addition of a `privateKeys` field to atomically create a sub-org with private keys. If no private keys are desired, simply provide an empty array.
  * **NOTE**: when reading `createSubOrganization` results, SDK users will now need to look at `activity.result.createSubOrganizationResultV3` instead of the previously valid `activity.result.createSubOrganizationResult`.

## 1.1.1

### Patch Changes

* Updated dependencies
  * @turnkey/api-key-stamper\@0.1.1

## 1.1.0

### Minor Changes

New exports:

* new `TurnkeyClient`. This is now the preferred interface to make Turnkey requests, because it supports both API keys and webauthn-signed requests. It also doesn't rely on global initialization
* new method to poll requests: `createActivityPoller`

Deprecation notices:

* deprecate `TurnkeyApi` (use `TurnkeyClient` instead), `init`, `browserInit` (no need for them anymore if you're using `TurnkeyClient`), and `withAsyncPolling` (use `createActivityPoller` instead)
* deprecate `SignedRequest` in favor of `TSignedRequest`. Besides the more correct name, `TSignedRequest` differs in its `stamp` property. It now stores the stamper header name as well as value, so users do not have to hardcode Turnkey stamp header names (e.g. "X-Stamp-Webauthn").

Update our swagger and generated files to latest versions:

* new endpoint to update users: `/public/v1/submit/update_user`
* pagination `limit` option has been updated to `string` instead of number for consistency with other pagination options

Signing is now performed through Turnkey stampers. New dependencies:

* @turnkey/webauthn-stamper\@0.1.0
* @turnkey/api-key-stamper\@0.1.0

## 1.0.1

### Patch Changes

* 8d1d0e8: Synced protos from mono

## 1.0.0

### Major Changes

* 46473ec: This breaking change updates generated code to be shorter and more intuitive to read:

  * generated fetchers do not include the HTTP method in their name. For example `useGetGetActivity` is now `useGetActivity`, and `usePostSignTransaction` is `useSignTransaction`.
  * input types follow the same convention (no HTTP method in the name): `TPostCreatePrivateKeysInput` is now `TCreatePrivateKeysInput`.
  * the "federated" request helpers introduced in `0.18.0` are now named "signed" requests to better reflect what they are. `FederatedRequest` is now `SignedRequest`, and generated types follow. For example: `federatedPostCreatePrivateKeys` is now `signCreatePrivateKeys`, `federatedGetGetActivity` is now `signGetActivity`, and so on.

  The name updates should be automatically suggested if you use VSCode since the new names are simply shorter versions of the old one.

### Patch Changes

* 38b424f: Sync public api types

## 0.18.1

### Patch Changes

* Synced protos from mono

## 0.18.0

### Minor Changes

* Add support for federated requests (an example is included under `sdk/examples/with-federated-passkeys`)
* Routine re-sync protos from mono

## 0.17.1

### Patch Changes

* Re-sync protos from mono. No public-facing changes.

## 0.17.0

### Minor Changes

* Added support for ed25519
* New endpoint to programmatically approve or reject activities (`/submit/approve_activity`, `/submit/reject_activity`)
* New endpoint to programmatically create authenticators (`/submit/create_authenticators`)
* New endpoints to update Private Key tags (`/submit/update_private_key_tag`)
* New endpoints to update User tags (`/submit/update_user_tag`)
* Simplified shape for `AuthenticatorParams` with a new `AuthenticatorParamsV2`. To take advantage of this new shape, use `ACTIVITY_TYPE_CREATE_USERS_V2` and the new `ACTIVITY_TYPE_CREATE_AUTHENTICATORS`.

## 0.16.0

### Minor Changes

* Fix `.postGetPrivateKey(...)`'s underlying path, while adding `@deprecated` `.postGetPrivateKeyBackwardsCompat(...)` for backward compatibility

## 0.15.0

### Minor Changes

* Export a new helper for offline request signing: `sealAndStampRequestBody(...)`.

## 0.14.0

### Minor Changes

* Updated the `addressFormats` enum field in `/submit/create_private_keys`

## 0.13.2

### Patch Changes

* New `TurnkeyRequestError` error class that contains rich error details

## 0.13.1

### Patch Changes

* Error messages now contain Turnkey-specific error details

## 0.13.0

### Minor Changes

* New `/submit/create_api_only_users` endpoint: `TurnkeyApi.postCreateApiOnlyUsers(...)`
* Marked `TurnkeyApi.postCreateUsers(...)` as deprecated
* Improved documentation on methods (via TSDoc)

## 0.12.0

### Minor Changes

* Error messages now contain Turnkey-specific error code and message

## 0.11.0

### Minor Changes

* New `/submit/create_users` endpoint: `TurnkeyApi.postCreateUsers(...)`

## 0.10.0

### Minor Changes

* No public-facing changes

## 0.9.0

### Minor Changes

* Improved support for React Native runtime ([https://github.com/tkhq/sdk/pull/37](https://github.com/tkhq/sdk/pull/37))

## 0.8.1

### Patch Changes

* Switched from `undici` to `cross-fetch` to improve bundler compatibility

## 0.8.0

### Minor Changes

* Added browser runtime support — `@turnkey/http` is now a universal (isomorphic) package
* The API fetchers are now exported as namespace `TurnkeyApi`. `PublicApiService` has been marked as deprecated, but will remain functional until we hit v1.0.
* Dropped support for Node.js v14; we recommend using Node v18+

## 0.7.0

### Minor Changes

* Improved documentation
* Added `withAsyncPolling(...)` helper to provide built-in async polling support. Read more:
  * [https://github.com/tkhq/sdk/tree/main/packages/http#withasyncpolling-helper](https://github.com/tkhq/sdk/tree/main/packages/http#withasyncpolling-helper)

## 0.6.0

### Minor Changes

* Improved OpenAPI documentation

## 0.5.0

### Minor Changes

* Arbitrary message signing

## 0.4.0

### Minor Changes

* `timestamp` -> `timestampMs`

## 0.3.1

### Patch Changes

* Fix outdated artifact

## 0.3.0

### Minor Changes

* `keyId` -> `privateKeyId` everywhere

## 0.2.0

### Minor Changes

* Change parameter from `keyId` to `privateKeyId`
* Bump API version to latest Beta

## 0.1.3

### Patch Changes

* Support runtime config for credentials

## 0.1.2

### Patch Changes

* Drop internal dev dependency

## 0.1.1

### Patch Changes

* Initial release
* Updated dependencies
  * @turnkey/jest-config\@0.1.1


# Iframe Stamper
Source: https://docs.turnkey.com/changelogs/iframe-stamper/readme



# @turnkey/iframe-stamper

## 2.5.0

### Minor Changes

* e501690: Add new utility functions

  * Add `clearEmbeddedKey()` async function, which clears the embedded key within an iframe
  * Add `initEmbeddedKey()` async function, which reinitializes the embedded key within an iframe

## 2.4.0

### Minor Changes

* a833088: Add `getEmbeddedPublicKey()` async function to get the public key of the live embedded key within the iframe

## 2.3.0

### Minor Changes

* 9147962: Add `dangerouslyOverrideIframeKeyTtl` option to override iframe embedded key TTL (for longer lived read/write sessions)

## 2.2.0

### Minor Changes

* a216a47: Add `requestId` to iframe requests. This allows developers to send multiple requests at once to an iframe, and have the corresponding responses be handled correctly (in order)

## 2.1.0

### Minor Changes

* fad7c37: `@turnkey/iframe-stamper` - Implemented MessageChannel API for secure communication between the parent and iframe.

  @turnkey/sdk-browser - fixed spelling in package.json
  @turnkey/sdk-server - fixed spelling in package.json

## 2.0.0

### Major Changes

* 5d0bfde: Include `organizationId` and `userId` in injected import and export bundles.

### Minor Changes

* 2f2d09a: Add implementation for `applySettings()`
  * This is a function to apply settings on allowed parameters in the iframe.
  * Ultimately, this is used to style the HTML element used for plaintext in wallet and private key import.

### Patch Changes

* 976663e: Add `sandbox` attribute to iframe element

## 1.2.0

### Minor Changes

* 0281b88: Remove optional publicKey parameter from injectKeyExportBundle.
* 0e3584a: Add optional keyFormat and publicKey parameters to injectKeyExportBundle. Add extractKeyEncryptedBundle.

## 1.1.0

### Minor Changes

* 46a7d90: Add injectImportBundle and extractWalletEncryptedBundle to support wallet import.

## 1.0.0

### Major Changes

* This breaking change uses an HTML element instead of an ID to reference the iframe's container.

## 0.4.1

### Patch Changes

* Upgrade to Node v18 (#184)

## 0.4.0

### Minor Changes

* c98c222: - Add support for auth (e.g. via email), and include recovery under it. Note that the preferred path is now to use `injectCredentialBundle`, as opposed to `injectRecoveryBundle` (deprecated).

## 0.3.0

### Minor Changes

* Use rollup to build ESM and CommonJS, fix ESM support (#174)

## 0.2.1

### Patch Changes

* Catch and bubble up errors in the underlying iframe by listening to `ERROR` events (#165)

## 0.2.0

### Minor Changes

* Support wallet and private key export

## 0.1.0

Initial release


# React Native Passkey Stamper
Source: https://docs.turnkey.com/changelogs/react-native-passkey-stamper/readme



# @turnkey/react-native-passkey-stamper

## 1.0.17

### Patch Changes

* Updated dependencies \[[`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd)]:
  * @turnkey/http\@3.5.0

## 1.0.16

### Patch Changes

* Updated dependencies \[[`be0a621`](https://github.com/tkhq/sdk/commit/be0a621fb962bd51d2df1a1e79f5260d7c696772)]:
  * @turnkey/http\@3.4.2

## 1.0.15

### Patch Changes

* Updated dependencies \[[`40c4035`](https://github.com/tkhq/sdk/commit/40c40359ec7096d0bca39ffc93e89361b3b11a1a), [`593de2d`](https://github.com/tkhq/sdk/commit/593de2d9404ec8cf53426f9cf832c13eefa3fbf2)]:
  * @turnkey/encoding\@0.5.0
  * @turnkey/http\@3.4.1

## 1.0.14

### Patch Changes

* Updated dependencies \[[`07dfd33`](https://github.com/tkhq/sdk/commit/07dfd3397472687092e1c73b1d68714f421b9ca0)]:
  * @turnkey/http\@3.4.0

## 1.0.13

### Patch Changes

* Updated dependencies \[25ca339]
  * @turnkey/http\@3.3.0

## 1.0.12

### Patch Changes

* Updated dependencies \[3f6e415]
  * @turnkey/http\@3.2.0

## 1.0.11

### Patch Changes

* Updated dependencies \[3e4a482]
  * @turnkey/http\@3.1.0

## 1.0.10

### Patch Changes

* Updated dependencies \[d1083bd]
* Updated dependencies \[f94d36e]
  * @turnkey/http\@3.0.0

## 1.0.9

### Patch Changes

* Updated dependencies \[ecdb29a]
  * @turnkey/http\@2.22.0

## 1.0.8

### Patch Changes

* Updated dependencies \[56a307e]
  * @turnkey/http\@2.21.0

## 1.0.7

### Patch Changes

* Updated dependencies \[3c44c4a]
  * @turnkey/http\@2.20.0

## 1.0.6

### Patch Changes

* Updated dependencies \[57f9cb0]
  * @turnkey/http\@2.19.0

## 1.0.5

### Patch Changes

* Updated dependencies \[6695af2]
  * @turnkey/http\@2.18.0

## 1.0.4

### Patch Changes

* Updated dependencies \[053fbfb]
  * @turnkey/http\@2.17.3

## 1.0.3

### Patch Changes

* @turnkey/http\@2.17.2

## 1.0.2

### Patch Changes

* Updated dependencies \[538d4fc]
  * @turnkey/http\@2.17.1

## 1.0.1

### Patch Changes

* Updated dependencies \[78bc39c]
  * @turnkey/http\@2.17.0

## 1.0.0

### Major Changes

Upgrade react-native-passkey to 3.0.0 (see [release notes](https://github.com/f-23/react-native-passkey/releases/tag/v3.0.0)). Among other things you can now specify `withSecurityKey` and `withPlatformKey` (new optional arguments to `createPasskey`) to target platform passkeys or security keys on iOS. The same options can be passed as configuration to `PasskeyStamper` to target these features at authentication time.

This is a major change because the `transports` property, previously a string array (`Array<string>`) is now an array of enums (`Array<AuthenticatorTransport>`).

## 0.2.16

### Patch Changes

* Updated dependencies \[4df8914]
  * @turnkey/http\@2.16.0

## 0.2.15

### Patch Changes

* Updated dependencies \[9ebd062]
  * @turnkey/http\@2.15.0

## 0.2.14

### Patch Changes

* Updated dependencies \[e5c4fe9]
* Updated dependencies \[96d7f99]
  * @turnkey/encoding\@0.4.0
  * @turnkey/http\@2.14.2

## 0.2.13

### Patch Changes

* Updated dependencies \[ff059d5]
* Updated dependencies \[93666ff]
  * @turnkey/http\@2.14.1
  * @turnkey/encoding\@0.3.0

## 0.2.12

### Patch Changes

* Updated dependencies \[848f8d3]
  * @turnkey/http\@2.14.0

## 0.2.11

### Patch Changes

* Updated dependencies \[93dee46]
  * @turnkey/http\@2.13.0

## 0.2.10

### Patch Changes

* Updated dependencies \[e2f2e0b]
  * @turnkey/http\@2.12.3

## 0.2.9

### Patch Changes

* Updated dependencies
  * @turnkey/encoding\@0.2.1
  * @turnkey/http\@2.12.2

## 0.2.8

### Patch Changes

* Updated dependencies \[f17a229]
  * @turnkey/http\@2.12.1

## 0.2.7

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.12.0

## 0.2.6

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.11.0

## 0.2.5

### Patch Changes

* Updated dependencies \[7a9ce7a]
  * @turnkey/http\@2.10.0

## 0.2.4

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.9.1

## 0.2.3

### Patch Changes

* Updated dependencies \[83b62b5]
  * @turnkey/http\@2.9.0

## 0.2.2

### Patch Changes

* Updated dependencies \[46a7d90]
  * @turnkey/http\@2.8.0

## 0.2.1

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.7.1

## 0.2.0

### Minor Changes

* Introduce `@turnkey/encoding` to consolidate utility functions
* Updated dependencies \[d73725b]
  * @turnkey/encoding\@0.1.0
  * @turnkey/http\@2.7.0

## 0.1.0

Initial release


# SDK Browser
Source: https://docs.turnkey.com/changelogs/sdk-browser/readme



# @turnkey/sdk-browser

## 5.3.0

### Minor Changes

* [#704](https://github.com/tkhq/sdk/pull/704) [`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd) Author [@amircheikh](https://github.com/amircheikh) - Synced with mono 2025.6.10 to include the following endpoints:

  `update_user_email`: Update a User's email in an existing Organization

  `update_user_name`: Update a User's name in an existing Organization

  `update_user_phone_number`: Update a User's phone number in an existing Organization

### Patch Changes

* Updated dependencies \[[`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd), [`7625df0`](https://github.com/tkhq/sdk/commit/7625df0538002c3455bd5862211210e38472e164), [`878e039`](https://github.com/tkhq/sdk/commit/878e03973856cfec83e6e3fda5b76d1b64943628)]:
  * @turnkey/http\@3.5.0
  * @turnkey/api-key-stamper\@0.4.7
  * @turnkey/crypto\@2.4.1
  * @turnkey/wallet-stamper\@1.0.5
  * @turnkey/indexed-db-stamper\@1.1.1

## 5.2.3

### Patch Changes

* Updated dependencies \[[`039602a`](https://github.com/tkhq/sdk/commit/039602a015d20783952b992d1d339f5fc003f658)]:
  * @turnkey/sdk-types\@0.2.1

## 5.2.2

### Patch Changes

* Updated dependencies \[[`0dd3fc3`](https://github.com/tkhq/sdk/commit/0dd3fc31956992c5b449da5868f6eef8b0bb194c)]:
  * @turnkey/sdk-types\@0.2.0

## 5.2.1

### Patch Changes

* Updated dependencies \[[`be0a621`](https://github.com/tkhq/sdk/commit/be0a621fb962bd51d2df1a1e79f5260d7c696772)]:
  * @turnkey/http\@3.4.2
  * @turnkey/crypto\@2.4.0
  * @turnkey/wallet-stamper\@1.0.4

## 5.2.0

### Minor Changes

* [#659](https://github.com/tkhq/sdk/pull/659) [`5afbe51`](https://github.com/tkhq/sdk/commit/5afbe51949bdd1997fad083a4c1e4272ff7409dc) Author [@turnekybc](https://github.com/turnekybc) - export types and models from @turnkey/sdk-browser

### Patch Changes

* [#653](https://github.com/tkhq/sdk/pull/653) [`40c4035`](https://github.com/tkhq/sdk/commit/40c40359ec7096d0bca39ffc93e89361b3b11a1a) Thanks [@moe-dev](https://github.com/moe-dev)! - Allow external keys to be passed to resetKeyPair in the indexedDbClient/Stamper enabling refreshing RW sessions

* [#663](https://github.com/tkhq/sdk/pull/663) [`593de2d`](https://github.com/tkhq/sdk/commit/593de2d9404ec8cf53426f9cf832c13eefa3fbf2) Thanks [@moe-dev](https://github.com/moe-dev)! - Update to endpoints as per mono v2025.5.7. Add V5 TON address format generation. Non breaking

* Updated dependencies \[[`5afbe51`](https://github.com/tkhq/sdk/commit/5afbe51949bdd1997fad083a4c1e4272ff7409dc), [`40c4035`](https://github.com/tkhq/sdk/commit/40c40359ec7096d0bca39ffc93e89361b3b11a1a), [`10ee5c5`](https://github.com/tkhq/sdk/commit/10ee5c524b477ce998e4fc635152cd101ae5a9cc), [`40c4035`](https://github.com/tkhq/sdk/commit/40c40359ec7096d0bca39ffc93e89361b3b11a1a), [`593de2d`](https://github.com/tkhq/sdk/commit/593de2d9404ec8cf53426f9cf832c13eefa3fbf2)]:
  * @turnkey/wallet-stamper\@1.0.4
  * @turnkey/webauthn-stamper\@0.5.1
  * @turnkey/encoding\@0.5.0
  * @turnkey/crypto\@2.4.0
  * @turnkey/indexed-db-stamper\@1.1.0
  * @turnkey/http\@3.4.1
  * @turnkey/api-key-stamper\@0.4.6

## 5.1.0

### Minor Changes

* Update @turnkey/sdk-types readme and install dependency in packages with common types

* [#650](https://github.com/tkhq/sdk/pull/650) [`27fe590`](https://github.com/tkhq/sdk/commit/27fe590cdc3eb6a8cde093eeefda2ee1cdc79412) Author [@turnekybc](https://github.com/turnekybc) - Update @turnkey/sdk-types readme and install dependency in packages with common types

### Patch Changes

* Updated dependencies \[[`27fe590`](https://github.com/tkhq/sdk/commit/27fe590cdc3eb6a8cde093eeefda2ee1cdc79412)]:
  * @turnkey/sdk-types\@0.1.0

## 5.0.0

### Major Changes

* [#601](https://github.com/tkhq/sdk/pull/601) [`07dfd33`](https://github.com/tkhq/sdk/commit/07dfd3397472687092e1c73b1d68714f421b9ca0) Author [@moe-dev](https://github.com/moe-dev)

This release introduces the new `indexedDbClient`, leveraging the `indexedDbStamper` to securely store cryptographic keys directly in IndexedDB. It provides persistent, secure, non-extractable authentication, replacing legacy iframe-based flows for OTP, passkey, external wallet, and OAuth authentications.

### Key Changes:

* **IndexedDB Client (`indexedDbClient`)**:

  * Offers persistent, tamper-resistant authentication using P-256 keys stored securely in IndexedDB.
  * Eliminates the need for credential injection via iframes, significantly improving the DevEx and UX of session management.
  * Provides human-readable sessions through `getSession()`.

* **Deprecation Notice**:
  * Authentication via the `iframeClient` (e.g., `auth.turnkey.com`) is deprecated. Developers should migrate authentication flows to the new IndexedDB-based client.
  * Existing iframe-based wallet flows (Email Recovery, Import, and Export) remain supported.

These enhancements simplify integrations, improve UX, and deliver a more robust client-side experience.

### Patch Changes

* Updated dependencies \[[`07dfd33`](https://github.com/tkhq/sdk/commit/07dfd3397472687092e1c73b1d68714f421b9ca0)]:
  * @turnkey/indexed-db-stamper\@1.0.0
  * @turnkey/http\@3.4.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 4.3.0

### Minor Changes

* 25ca339: Adding replyToEmailAddress field for specifying reply-to when using a customer sender

### Patch Changes

* Updated dependencies \[25ca339]
  * @turnkey/http\@3.3.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 4.2.0

### Minor Changes

* 3f6e415: Update per mono v2025.4.5

### Patch Changes

* Updated dependencies \[3f6e415]
* Updated dependencies \[4d1d775]
  * @turnkey/http\@3.2.0
  * @turnkey/api-key-stamper\@0.4.5
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 4.1.0

### Minor Changes

* 3e4a482: Release per mono v2025.4.4

### Patch Changes

* Updated dependencies \[3e4a482]
  * @turnkey/http\@3.1.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 4.0.0

### Major Changes

* d1083bd: initOtpAuth now defaults to v2 (breaking) which allows alphanumeric boolean and otpLength (6-9) to be passed. More details below.

* This release introduces the `INIT_OTP_AUTH_V2` activity. The difference between it and `INIT_OTP_AUTH` is that it can now accept `alphanumeric` and `otpLength` for selecting crockford bech32 alphanumeric codes and the length of those codes. By default alphanumeric = true, otpLength = 9

* This release introduces `sendFromEmailSenderName` to `INIT_OTP_AUTH`, `INIT_OTP_AUTH_V2`, `EMAIL_AUTH` and `EMAIL_AUTH_V2`. This is an optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'.

### Minor Changes

* e501690: Add new utility functions:

  * Add `clearEmbeddedKey()` async function, which clears the embedded key within an iframe
  * Add `initEmbeddedKey()` async function, which reinitializes the embedded key within an iframe

  These can be used in tandem to reset the embedded key within an iframe. See demo video in this PR's description: [https://github.com/tkhq/sdk/pull/571](https://github.com/tkhq/sdk/pull/571)

  Usage may look like the following:

  ```javascript
  import { Turnkey } from "@turnkey/sdk-browser";

  ...

  // create an instance of TurnkeyBrowserSDK
  const turnkeyBrowserSDK = new Turnkey(config);

  // create an instance of TurnkeyIframeClient
  const iframeClient = await turnkeyBrowserSDK.iframeClient({
    iframeContainer: document.getElementById(
      "turnkey-auth-iframe-container-id",
    ),
    iframeUrl: "https://auth.turnkey.com",
    iframeElementId: "turnkey-auth-iframe-element-id",
  });

  ...

  // Clear the existing embedded key
  await iframeClient.clearEmbeddedKey();

  const newPublicKey = await iframeClient.initEmbeddedKey();
  ```

### Patch Changes

* Updated dependencies \[e501690]
* Updated dependencies \[d1083bd]
* Updated dependencies \[f94d36e]
  * @turnkey/iframe-stamper\@2.5.0
  * @turnkey/http\@3.0.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 3.1.0

### Minor Changes

* bf87774: Expose `getEmbeddedPublicKey()` via `TurnkeyIframeClient`. This can be used to fetch the live public key of the target embedded key living within an iframe.

  Usage may look like the following:

  ```javascript
  import { Turnkey } from "@turnkey/sdk-browser";

  // create an instance of TurnkeyBrowserSDK
  const turnkeyBrowserSDK = new Turnkey(config);

  // create an instance of TurnkeyIframeClient
  const iframeClient = await turnkeyBrowserSDK.iframeClient({
    iframeContainer: document.getElementById(
      "turnkey-auth-iframe-container-id",
    ),
    iframeUrl: "https://auth.turnkey.com",
    iframeElementId: "turnkey-auth-iframe-element-id",
  });

  ...

  const publicKey = await iframeClient.getEmbeddedPublicKey();
  ```

  Functionally, this can be useful for scenarios where the developer would like to verify whether an iframe has a live embedded key within it. This contrasts from the static `iframeStamper.iframePublicKey` exposed by `@turnkey/iframe-stamper`'s `publicKey()` method.

### Patch Changes

* Updated dependencies \[a833088]
  * @turnkey/iframe-stamper\@2.4.0

## 3.0.1

### Patch Changes

* 5ec5187: Fix initOtpAuth bug with improper version result (to be updated to V2 following release r2025.3.8)

## 3.0.0

### Major Changes

* 72890f5: ### @turnkey/sdk-browser

  * Move all type definitions to [`./__types__/base.ts`](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-browser/src/__types__/base.ts)
  * `TurnkeyBrowserClient`
    * `refereshSession()` now consumes a [RefreshSessionParams](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-browser/src/__types__/base.ts#L213) parameter
    * `loginWithBundle()` now consumes a [LoginWithBundleParams](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-browser/src/__types__/base.ts#L219) parameter
    * `loginWithPasskey()` now consumes a [LoginWithPasskeyParams](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-browser/src/__types__/base.ts#L224) parameter
    * `loginWithWallet()` now consumes a [LoginWithWalletParams](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-browser/src/__types__/base.ts#L231) parameter

  ### @turnkey/sdk-react

  * `Auth.tsx`
    * updated `passkeyClient?.loginWithPasskey()` to implement new method signature
    * updated `walletClient?.loginWithWallet()` to implement new method signature

  ### @turnkey/sdk-server

  * Move all type definitions to [`./__types__/base.ts`](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-server/src/__types__/base.ts)

### Minor Changes

* ecdb29a: Update API as per mono v2025.3.2 - Add CREATE\_USERS\_V3

### Patch Changes

* 0e4e959: bump update policy activity to v2
* 856f449: update `TurnkeyBrowserClient.login()` to align with other functions like `loginWithPasskey()` and `loginWithWallet()`
* d4ce5fa: fix unexpected error when using read-only session type when calling loginWithPasskey & loginWithWallet
* Updated dependencies \[ecdb29a]
  * @turnkey/http\@2.22.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 2.0.0

### Major Changes

* 93540e7: ## Major Package Updates

  ### @turnkey/sdk-browser

  * create abstract `TurnkeyBaseClient` class which extends `TurnkeySDKClientBase`
    * `TurnkeyBrowserClient`, `TurnkeyIframeClient`, `TurnkeyPasskeyClient`, and `TurnkeyWalletClient` all extend `TurnkeyBaseClient`
  * TurnkeyBrowserClient
    * Session Management
      * `refreshSession` - attempts to refresh an existing, active session and will extend the session expiry using the `expirationSeconds` parameter
      * loginWithBundle - authenticate a user via a credential bundle and creates a read-write session
      * loginWithPasskey - attempts to authenticate a user via passkey and create a read-only or read-write session
      * loginWithSession - takes a `Session`, which can be either read-only or read-write, created via a server action and attempts to authenticate the user
  * TurnkeyPasskeyClient
    * Session Management
      * createPasskeySession - leverages passkey authentication to create a read-write session. Once authenticated, the user will not be prompted for additional passkey taps.

  ### @turnkey/sdk-react

  * update `TurnkeyContext` to use new `.getSession()` method to check if there is an active session
  * `OTPVerification` component no longer receives `authIframeClient` or `onValidateSuccess` props

  ## Minor Package Updates

  ### @turnkey/sdk-server

  * expose `sendCredential` server action
  * add `SessionType` enum
    * `READ_ONLY` & `READ_WRITE`

  ### @turnkey/eip-1193-provider

  * update dependencies in `package.json`
    * moved from `peerDependencies` to `dependencies`
      * `"@turnkey/http": "workspace:*"`
      * `"@turnkey/sdk-browser": "workspace:*"`
    * moved from `devDependencies` to `dependencies`
      * `"@turnkey/api-key-stamper": "workspace:*"`
  * specify TypeScript version ^5.1.5

### Minor Changes

* 9147962: add dangerouslyOverrideIframeKeyTtl option to override iframe embedded key TTL (for longer lived read/write sessions)

### Patch Changes

* Updated dependencies \[9147962]
  * @turnkey/iframe-stamper\@2.3.0
  * @turnkey/crypto\@2.3.1

## 1.16.0

### Minor Changes

* 233ae71: Add updateUserAuth, addUserAuth, deleteUserAuth helper functions

### Patch Changes

* @turnkey/crypto\@2.3.1

## 1.15.0

### Minor Changes

* 56a307e: Update api to mono v2025.3.0

### Patch Changes

* Updated dependencies \[56a307e]
  * @turnkey/http\@2.21.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 1.14.0

### Minor Changes

* 3c44c4a: Updates per mono release v2025.2.2

### Patch Changes

* Updated dependencies \[3c44c4a]
  * @turnkey/http\@2.20.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 1.13.0

### Minor Changes

* 57f9cb0: Update endpoints - surface GetWalletAccount

### Patch Changes

* 69d2571: Upgrade elliptic
* Updated dependencies \[57f9cb0]
  * @turnkey/http\@2.19.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 1.12.1

### Patch Changes

* 755833b: refactor stamper out of config object and move it directly onto the client to match @turnkey/http
* Updated dependencies \[2bc0046]
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 1.12.0

### Minor Changes

* 6695af2: Update per mono release v2025.1.11

### Patch Changes

* Updated dependencies \[6695af2]
  * @turnkey/http\@2.18.0
  * @turnkey/crypto\@2.3.0
  * @turnkey/wallet-stamper\@1.0.2

## 1.11.2

### Patch Changes

* 053fbfb: Update mono dependencies
* Updated dependencies \[053fbfb]
* Updated dependencies \[a216a47]
  * @turnkey/http\@2.17.3
  * @turnkey/iframe-stamper\@2.2.0
  * @turnkey/crypto\@2.3.0
  * @turnkey/wallet-stamper\@1.0.2

## 1.11.1

### Patch Changes

* 328d6aa: Add defaultXrpAccountAtIndex helper

* b90947e: Update default account exports, surface WalletAccount type

* 2d5977b: Update error messaging around api key and target public key usage

* fad7c37: @turnkey/iframe-stamper - Implemented MessageChannel API for secure communication between the parent and iframe.

  @turnkey/sdk-browser - fixed spelling in package.json
  @turnkey/sdk-server - fixed spelling in package.json

* Updated dependencies \[2d5977b]

* Updated dependencies \[fad7c37]
  * @turnkey/api-key-stamper\@0.4.4
  * @turnkey/iframe-stamper\@2.1.0
  * @turnkey/crypto\@2.3.0
  * @turnkey/http\@2.17.2
  * @turnkey/wallet-stamper\@1.0.2

## 1.11.0

### Minor Changes

* 7988bc1: Fix readWrite session to use credentialBundle and add loginWithAuthBundle to create a session when you already have a credentialBundle

### Patch Changes

* 538d4fc: Update api endpoints - NEW: User verification, SMS customization params
* 12d5aaa: Update TurnkeySDKBrowserConfig type with an optional iframeUrl field. The TurnkeyContext provider will check for an iframeUrl otherwise it will fallback to the default.
* Updated dependencies \[c895c8f]
* Updated dependencies \[538d4fc]
  * @turnkey/wallet-stamper\@1.0.2
  * @turnkey/http\@2.17.1
  * @turnkey/crypto\@2.3.0

## 1.10.2

### Patch Changes

* Updated dependencies \[668edfa]
  * @turnkey/crypto\@2.3.0
  * @turnkey/wallet-stamper\@1.0.1

## 1.10.1

### Patch Changes

* Updated dependencies \[78bc39c]
  * @turnkey/http\@2.17.0
  * @turnkey/crypto\@2.2.0
  * @turnkey/wallet-stamper\@1.0.0

## 1.10.0

### Minor Changes

##### `TurnkeyWalletClient`

* Added new `TurnkeyWalletClient` to the `@turnkey/sdk-browser`
  **Reason**: Allows using the `WalletStamper` with the browser sdk
* Added `getPublicKey` method to `TurnkeyWalletClient`
  **Reason**: Enables easy access to wallet public key for sub-organization creation and future authentication flows
* Updated `TurnkeyWalletClient` to use new `WalletInterface`
  **Reason**: Ensures compatibility with the updated Wallet Stamper interfaces

##### `AuthClient` (new enum)

* Introduced a new enum to track which client is authenticated (Passkey, Wallet, Iframe)

##### `TurnkeyBrowserClient`, `TurnkeyIframeClient`, `TurnkeyPasskeyClient`, `TurnkeyWalletClient`

* Added a static `authClient` property to base `TurnkeyBrowserClient` to be used by the child classes to track which client was used for the initial authentication

##### `UserSession` interface

* Added a new `UserSession` interface which is to be stored in local storage to track the authentication state of the user and to eliminate the need to store the write and read sessions separately.
* Added `authClient` in the session object to store the authentication method used in the user's session data. Will be used in the `@turnkey/sdk-react` to determine which client to return.
* Added new versioned `UserSession` key: `"@turnkey/session/v1"`

##### `login` and `loginWithReadWriteSession` methods

* Updated to use the new `authClient` property to track and store the authentication method used during login

### Patch Changes

* Updated dependencies \[8bea78f]
  * @turnkey/wallet-stamper\@2.0.0
  * @turnkey/crypto\@2.2.0

## 1.9.0

### Minor Changes

* 3dd74ac: Added functionality for constructing and returning stamped requests for all packages
* 1e36edf: Support RS256 by default when invoking createUserPasskey
* 4df8914: Version bump corresponding to mono release v2024.10.10. More detailed changelog to follow
* 11a9e2f: Allow override of WebauthnStamper configuration

### Patch Changes

* Updated dependencies \[33e8e03]
* Updated dependencies \[d989d46]
* Updated dependencies \[4df8914]
  * @turnkey/crypto\@2.1.0
  * @turnkey/http\@2.16.0

## 1.8.0

### Minor Changes

* 9ebd062: Release OTP functionality

### Patch Changes

* Updated dependencies \[9ebd062]
  * @turnkey/http\@2.15.0

## 1.7.1

### Patch Changes

* 96d7f99: Update dependencies
* Updated dependencies \[e5c4fe9]
* Updated dependencies \[96d7f99]
  * @turnkey/crypto\@2.0.0
  * @turnkey/encoding\@0.4.0
  * @turnkey/http\@2.14.2
  * @turnkey/api-key-stamper\@0.4.3

## 1.7.0

### Minor Changes

* ff059d5: Add ability to create a read + write session

### Patch Changes

* Updated dependencies \[ff059d5]
* Updated dependencies \[93666ff]
  * @turnkey/http\@2.14.1
  * @turnkey/crypto\@1.0.0
  * @turnkey/encoding\@0.3.0
  * @turnkey/api-key-stamper\@0.4.2

## 1.6.0

### Minor Changes

* c988ed0: Support activity polling (e.g. for awaiting consensus)

  * \[Breaking] Update the `activityPoller` parameter for configuring polling behavior
  * Polling continues until either a max number of retries is reached, or if the activity hits a terminal status

  The shape of the parameter has gone from:

  ```
  {
    duration: number;
    timeout: number;
  }
  ```

  to

  ```
  {
    intervalMs: number;
    numRetries: number;
  }
  ```

### Patch Changes

* Updated dependencies \[848f8d3]
  * @turnkey/http\@2.14.0

## 1.5.0

### Minor Changes

* 1813ed5: Allow `organizationId` override for `TurnkeyBrowserClient.login` with an extra `config` argument

## 1.4.0

### Minor Changes

* bab5393: Add keyformat to key export bundle injection

### Patch Changes

* a16073c: Exposes storage APIs used by the sdk for managing users & sessions
* 7e7d209: Add authenticatorAttachment option

## 1.3.0

### Minor Changes

* 93dee46: Add create read write session v2 which allows for user targeting directly from stamp or optional userId in intent

### Patch Changes

* Updated dependencies \[93dee46]
  * @turnkey/http\@2.13.0

## 1.2.4

### Patch Changes

* Updated dependencies \[e2f2e0b]
  * @turnkey/http\@2.12.3

## 1.2.3

### Patch Changes

* Fix activity versioning for CREATE\_SUB\_ORGANIZATION (V5=>V6)

## 1.2.2

### Patch Changes

* f4b607f: Verify and pad uncompressed public keys while creating passkey sessions

* Updated dependencies
  * @turnkey/api-key-stamper\@0.4.1
  * @turnkey/encoding\@0.2.1
  * @turnkey/http\@2.12.2
  * @turnkey/crypto\@0.2.1

## 1.2.1

### Patch Changes

* f17a229: Update to oauth related endpoints to drop jwks uri from oauth providers
* Updated dependencies \[f17a229]
  * @turnkey/http\@2.12.1

## 1.2.0

### Minor Changes

* Add Email Auth V2 - Optional invalidate exisiting Email Authentication API keys

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.12.0

## 1.1.0

### Minor Changes

* Update to use new endpoints. Including CREATE\_READ\_WRITE\_SESSION which allows one shot passkey sessions (returns org information and a credential bundle) and CREATE\_API\_KEYS\_V2 which allows a curve type to be passed (SECP256K1 or P256)

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.11.0

## 1.0.0

### Major Changes

* Stable Release: Add Oauth integration. New suborg creation version will now require an oauthProviders field under root users.

## 0.4.1

### Patch Changes

* Updated dependencies
  * @turnkey/crypto\@0.2.0

## 0.4.0

### Minor Changes

* e4b29da: Deprecate the `getAuthBundle()` path for passkey sessions and replace it with `getReadWriteSession()` to store authBundles with their expirationTimestamps so applications can better manually manage active writing sessions

## 0.3.0

### Minor Changes

* d409d81: Add support for Passkey Sessions

## 0.2.1

### Patch Changes

* Updated dependencies \[5d0bfde]
* Updated dependencies \[2f2d09a]
* Updated dependencies \[976663e]
  * @turnkey/iframe-stamper\@2.0.0

## 0.2.0

### Minor Changes

* updated syntax

### Patch Changes

* Updated dependencies \[5d0bfde]
* Updated dependencies \[2f2d09a]
* Updated dependencies \[976663e]
  * @turnkey/iframe-stamper\@2.0.0

## 0.1.0

### Minor Changes

* Ready for 0.1.0

## 0.0.1

Initial (experimental) release! This is an alpha release and subject to change.


# SDK React Native
Source: https://docs.turnkey.com/changelogs/sdk-react-native/readme



# @turnkey/sdk-react-native

## 1.3.3

### Patch Changes

* Updated dependencies \[[`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd), [`7625df0`](https://github.com/tkhq/sdk/commit/7625df0538002c3455bd5862211210e38472e164), [`878e039`](https://github.com/tkhq/sdk/commit/878e03973856cfec83e6e3fda5b76d1b64943628)]:
  * @turnkey/http\@3.5.0
  * @turnkey/api-key-stamper\@0.4.7
  * @turnkey/crypto\@2.4.1
  * @turnkey/react-native-passkey-stamper\@1.0.17

## 1.3.2

### Patch Changes

* Updated dependencies \[[`be0a621`](https://github.com/tkhq/sdk/commit/be0a621fb962bd51d2df1a1e79f5260d7c696772)]:
  * @turnkey/http\@3.4.2
  * @turnkey/crypto\@2.4.0
  * @turnkey/react-native-passkey-stamper\@1.0.16

## 1.3.1

### Patch Changes

* Updated dependencies \[[`40c4035`](https://github.com/tkhq/sdk/commit/40c40359ec7096d0bca39ffc93e89361b3b11a1a), [`10ee5c5`](https://github.com/tkhq/sdk/commit/10ee5c524b477ce998e4fc635152cd101ae5a9cc), [`593de2d`](https://github.com/tkhq/sdk/commit/593de2d9404ec8cf53426f9cf832c13eefa3fbf2)]:
  * @turnkey/encoding\@0.5.0
  * @turnkey/crypto\@2.4.0
  * @turnkey/http\@3.4.1
  * @turnkey/api-key-stamper\@0.4.6
  * @turnkey/react-native-passkey-stamper\@1.0.15

## 1.3.0

### Minor Changes

* [#622](https://github.com/tkhq/sdk/pull/622) [`59f8941`](https://github.com/tkhq/sdk/commit/59f8941f77e548e248b2fdafcad36f5f0c2a5d29) Author [@moeodeh3](https://github.com/moeodeh3) - Added support for React 19

  Renamed `sessionKey` parameter to `storageKey` in `createEmbeddedKey` `saveEmbeddedKey` and `getEmbeddedKey`.

  Added optional `embeddedStorageKey` parameter to `createSession`. This allows for retrieval of the embedded key from a custom location in secure storage.

### Patch Changes

* [#641](https://github.com/tkhq/sdk/pull/641) [`77611c8`](https://github.com/tkhq/sdk/commit/77611c8f15aa16b316d81ee6addab62d86f2f3bc) Author [@amircheikh](https://github.com/amircheikh) - Added `onSessionEmpty`. A callback function that runs when there is no active session on app launch.

* Updated dependencies \[[`07dfd33`](https://github.com/tkhq/sdk/commit/07dfd3397472687092e1c73b1d68714f421b9ca0)]:
  * @turnkey/http\@3.4.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/react-native-passkey-stamper\@1.0.14

## 1.2.3

### Patch Changes

* Updated dependencies \[25ca339]
  * @turnkey/http\@3.3.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/react-native-passkey-stamper\@1.0.13

## 1.2.2

### Patch Changes

* ef399e1: - Eliminated a race condition in `refreshSession` that could throw:
  `TurnkeyReactNativeError: Embedded key not found when refreshing the session`

  * The embedded key is now generated entirely in memory using `generateP256KeyPair`
  * Removed the need to store and immediately retrieve the private key from secure storage
  * `refreshSession` now accepts a single optional parameter object
  * `StorageKeys.RefreshEmbeddedKey` is now deprecated and no longer used during session refresh

* Updated dependencies \[3f6e415]

* Updated dependencies \[4d1d775]
  * @turnkey/http\@3.2.0
  * @turnkey/api-key-stamper\@0.4.5
  * @turnkey/crypto\@2.3.1
  * @turnkey/react-native-passkey-stamper\@1.0.12

## 1.2.1

### Patch Changes

* Updated dependencies \[3e4a482]
  * @turnkey/http\@3.1.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/react-native-passkey-stamper\@1.0.11

## 1.2.0

### Minor Changes

* ab45d29: Added `createSessionFromEmbeddedKey` function. This allows creation of a session using a compressed embedded key stored by calling `createEmbeddedKey`. You may also optionally pass in an embedded key created seperately. Utilizing these two functions with a `createSuborg` api call allows for a '1 tap' passkey sign up flow [(example)](https://github.com/tkhq/react-native-demo-wallet/blob/ccf2d6c182b9e5c5ce98014a56b0b9f4282277c2/providers/auth-provider.tsx#L186).

  Added optional `isCompressed` boolean field to the `createEmbeddedKey` function. This field is necessary for calling `createSessionFromEmbeddedKey`.

## 1.1.0

### Minor Changes

* e8bc05b: Introduces handleGoogleOAuth(): Adds a utility function to handle the Google OAuth authentication flow in React Native.

**Usage Summary**:\
`handleGoogleOAuth` launches an InAppBrowser to initiate the OAuth flow using your client ID, nonce, and app scheme. After a successful login, it extracts the `oidcToken` from the redirect URL and calls your `onSuccess` callback with the token.

```ts
handleGoogleOAuth({
  clientId: string,           // Google OAuth client ID
  nonce: string,              // Random nonce
  scheme: string,             // App’s custom URL scheme (e.g., "myapp")
  originUri?: string,         // Optional custom origin URI - defaults to Turnkey proxies
  redirectUri?: string,       // Optional custom redirect URI - defaults to Turnkey proxies
  onSuccess: (oidcToken: string) => void, // Called with token on success
});
```

## 1.0.5

### Patch Changes

* 3b5b360: - Adds optional parameter for createEmbeddedKey():
  * You can now pass a sessionKey to createEmbeddedKey() to generate separate embedded keys for different sessions, which is helpful when running multiple authentication flows concurrently.
  * Introduces onSessionExpiryWarning():
    * You can now add a callback via the provider config that triggers 15 seconds before a session expires.
  * Introduces refreshSession():
    * You now can refresh an active session that is about to expire.

## 1.0.4

### Patch Changes

* Updated dependencies \[d1083bd]
* Updated dependencies \[f94d36e]
  * @turnkey/http\@3.0.0
  * @turnkey/crypto\@2.3.1

## 1.0.3

### Minor Changes

* a7e7de0: Fixed compatibility issue with `@turnkey/viem`

## 1.0.2

### Patch Changes

* Updated dependencies \[ecdb29a]
  * @turnkey/http\@2.22.0
  * @turnkey/crypto\@2.3.1

## 1.0.1

### Patch Changes

* Updated dependencies \[56a307e]
  * @turnkey/http\@2.21.0
  * @turnkey/crypto\@2.3.1

## 1.0.0

### Major Changes

* fcf9503: This breaking change adds support for multiple sessions:

  * The concept of a **selected session** has been introduced:
    * Users can switch between sessions using `setSelectedSession({ sessionKey: <key> })`.
    * The selected session determines the active `client`, `user`, and `session` state.
    * API calls such as `updateUser`, `createWallet`, and `signRawPayload` now apply to the selected session.
  * A session limit of **15 active sessions** has been enforced:
    * If the limit is reached, users must remove an existing session before creating a new one.
    * Expired or invalid sessions are automatically cleaned up.

## 0.1.1

### Patch Changes

* Updated dependencies \[3c44c4a]
  * @turnkey/http\@2.20.0
  * @turnkey/crypto\@2.3.1


# SDK React
Source: https://docs.turnkey.com/changelogs/sdk-react/readme



# @turnkey/sdk-react

## 5.2.4

### Patch Changes

* Updated dependencies \[[`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd), [`7625df0`](https://github.com/tkhq/sdk/commit/7625df0538002c3455bd5862211210e38472e164), [`878e039`](https://github.com/tkhq/sdk/commit/878e03973856cfec83e6e3fda5b76d1b64943628)]:
  * @turnkey/sdk-browser\@5.3.0
  * @turnkey/sdk-server\@4.2.0
  * @turnkey/crypto\@2.4.1
  * @turnkey/wallet-stamper\@1.0.5

## 5.2.3

### Patch Changes

* Updated dependencies \[[`039602a`](https://github.com/tkhq/sdk/commit/039602a015d20783952b992d1d339f5fc003f658)]:
  * @turnkey/sdk-types\@0.2.1
  * @turnkey/sdk-browser\@5.2.3

## 5.2.2

### Patch Changes

* Updated dependencies \[[`0dd3fc3`](https://github.com/tkhq/sdk/commit/0dd3fc31956992c5b449da5868f6eef8b0bb194c)]:
  * @turnkey/sdk-types\@0.2.0
  * @turnkey/sdk-browser\@5.2.2

## 5.2.1

### Patch Changes

* Updated dependencies \[]:
  * @turnkey/crypto\@2.4.0
  * @turnkey/sdk-browser\@5.2.1
  * @turnkey/sdk-server\@4.1.1
  * @turnkey/wallet-stamper\@1.0.4

## 5.2.0

### Minor Changes

* [#632](https://github.com/tkhq/sdk/pull/632) [`a38a6e3`](https://github.com/tkhq/sdk/commit/a38a6e36dc2bf9abdea64bc817d1cad95b8a289a) Author [@amircheikh](https://github.com/amircheikh) - Added optional `socialLinking` boolean to the `authConfig`. If true, this will enable social linking for new Google \<-> Gmail users. For more information on social linking, visit [our docs](https://docs.turnkey.com/authentication/social-logins#social-linking).

### Patch Changes

* Updated dependencies \[[`5afbe51`](https://github.com/tkhq/sdk/commit/5afbe51949bdd1997fad083a4c1e4272ff7409dc), [`10ee5c5`](https://github.com/tkhq/sdk/commit/10ee5c524b477ce998e4fc635152cd101ae5a9cc), [`a38a6e3`](https://github.com/tkhq/sdk/commit/a38a6e36dc2bf9abdea64bc817d1cad95b8a289a), [`40c4035`](https://github.com/tkhq/sdk/commit/40c40359ec7096d0bca39ffc93e89361b3b11a1a), [`593de2d`](https://github.com/tkhq/sdk/commit/593de2d9404ec8cf53426f9cf832c13eefa3fbf2)]:
  * @turnkey/sdk-browser\@5.2.0
  * @turnkey/wallet-stamper\@1.0.4
  * @turnkey/crypto\@2.4.0
  * @turnkey/sdk-server\@4.1.0

## 5.1.0

### Minor Changes

* Update @turnkey/sdk-types readme and install dependency in packages with common types

* [#650](https://github.com/tkhq/sdk/pull/650) [`27fe590`](https://github.com/tkhq/sdk/commit/27fe590cdc3eb6a8cde093eeefda2ee1cdc79412) Author [@turnekybc](https://github.com/turnekybc) - Update @turnkey/sdk-types readme and install dependency in packages with common types

### Patch Changes

* Updated dependencies \[[`27fe590`](https://github.com/tkhq/sdk/commit/27fe590cdc3eb6a8cde093eeefda2ee1cdc79412)]:
  * @turnkey/sdk-browser\@5.1.0
  * @turnkey/sdk-types\@0.1.0
  * @turnkey/sdk-server\@4.0.1

## 5.0.2

### Patch Changes

* [#648](https://github.com/tkhq/sdk/pull/648) [`fd2eb18`](https://github.com/tkhq/sdk/commit/fd2eb18afd7a1338f584eda65962f9880eea7092) Thanks [@moe-dev](https://github.com/moe-dev)! - Patch fix for inpage oauth on EWK sometimes failing with Google

## 5.0.1

### Patch Changes

* [#646](https://github.com/tkhq/sdk/pull/646) [`c6754f2`](https://github.com/tkhq/sdk/commit/c6754f29cce16f0d4451e380742f581a2bf55e77) Thanks [@moe-dev](https://github.com/moe-dev)! - Patch releases fixes Google Oauth edge case in the Auth Component where logins fail due to indexedDbPublic key not being available yet

## 5.0.0

### Major Changes

* [#601](https://github.com/tkhq/sdk/pull/601) [`07dfd33`](https://github.com/tkhq/sdk/commit/07dfd3397472687092e1c73b1d68714f421b9ca0) Author [@moe-dev](https://github.com/moe-dev)

This release significantly enhances authentication by integrating the new `indexedDbClient` within the `useTurnkey` hook and updating the `Auth` component to leverage IndexedDB for secure, persistent client-side authentication.

### Key Changes:

* **IndexedDB Authentication**:

  * Replaced the legacy iframe-based authentication with `indexedDbClient` for all authentication flows in the `Auth` component.
  * Secure, persistent, non-extractable P-256 keys stored in IndexedDB now provide authentication and session management.

* **Enhanced Developer Experience**:
  * The `useTurnkey` hook now includes direct access to the new `indexedDbClient`.
  * Simplified and secure client-side authentication without iframe complexity or credential injection.

### Deprecation Notice:

* The `iframeClient` for authentication flows is now deprecated. All new integrations should migrate to the IndexedDB-based authentication provided by `indexedDbClient`.

### Patch Changes

* Updated dependencies \[[`07dfd33`](https://github.com/tkhq/sdk/commit/07dfd3397472687092e1c73b1d68714f421b9ca0), [`e8a5f1b`](https://github.com/tkhq/sdk/commit/e8a5f1b431623c4ff1cb85c6039464b328cf0e6a)]:
  * @turnkey/sdk-browser\@5.0.0
  * @turnkey/sdk-server\@4.0.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 4.2.6

### Patch Changes

* fe0957d: Updated the styling of the OtpInput component in the Auth component to remove spinner buttons from numeric inputs.
* Updated dependencies \[25ca339]
  * @turnkey/sdk-browser\@4.3.0
  * @turnkey/sdk-server\@3.3.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 4.2.5

### Patch Changes

* 1cf9243: - Added `openOAuthInPage` to the `authConfig`. This makes the Google, Apple and Facebook login pages replace the current URL, rather than opening in a popup.
  * Fixed keyboard input type on mobile. Now, the keyboard will correctly default to "number" input for numeric OTP codes and "text" input for alphanumeric OTP codes.
* Updated dependencies \[3f6e415]
  * @turnkey/sdk-browser\@4.2.0
  * @turnkey/sdk-server\@3.2.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 4.2.4

### Patch Changes

* Updated dependencies \[3e4a482]
  * @turnkey/sdk-browser\@4.1.0
  * @turnkey/sdk-server\@3.1.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 4.2.3

### Patch Changes

* 0e630b2: Update supported countries for SMS deliverability in EWK

## 4.2.2

### Patch Changes

* 7755413: Ensure that iframe has an embedded key

## 4.2.1

### Patch Changes

* Updated dependencies \[7b72769]
  * @turnkey/sdk-server\@3.0.1

## 4.2.0

### Minor Changes

* de59993: Update default country codes to supported deliveries:

  USA, Canada, France, Czech Republic, Finland, Germany, Greece, Hungary, Iceland, Ireland, Italy, Latvia (with a 1 min delay), Lithuania, Luxembourg, Malta, Mexico, Moldova, Montenegro, Netherlands, Norway, Poland, Portugal, Romania, Serbia, Slovenia, Spain, Sweden, Switzerland.

* d1083bd: Add `otpConfig` param to `Auth` component that allows you to pass in `alphanumeric` and `otpLength` default for the Auth component is still false, 6 respectively (non breaking)

### Patch Changes

* Updated dependencies \[e501690]
* Updated dependencies \[d1083bd]
  * @turnkey/sdk-browser\@4.0.0
  * @turnkey/sdk-server\@3.0.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 4.1.3

### Patch Changes

* Updated dependencies \[bf87774]

  * @turnkey/sdk-browser\@3.1.0

    * Expose `getEmbeddedPublicKey()` via `TurnkeyIframeClient`. This can be used to fetch the live public key of the target embedded key living within an iframe.

      Usage may look like the following:

      ```javascript
      import { useTurnkey } from "@turnkey/sdk-react";

      ...

      const { authIframeClient } = useTurnkey();

      const publicKey = await authIframeClient!.getEmbeddedPublicKey();
      ```

      Functionally, this can be useful for scenarios where the developer would like to verify whether an iframe has a live embedded key within it. This contrasts from the static `iframeStamper.iframePublicKey` exposed by `@turnkey/iframe-stamper`'s `publicKey()` method.

## 4.1.2

### Patch Changes

* Updated dependencies \[5ec5187]
  * @turnkey/sdk-browser\@3.0.1
  * @turnkey/sdk-server\@2.6.1

## 4.1.1

### Patch Changes

* 2b8de45: Add passkeyConfig to EWK

  You can do this by passing optional `passkeyConfig` of interface `PasskeyConfig` to the `<Auth>` component

  ```
  export interface PasskeyConfig {
    displayName?: string;
    name?: string;
  }
  ```

## 4.1.0

### Minor Changes

* 72890f5: ### @turnkey/sdk-browser

  * Move all type definitions to [`./__types__/base.ts`](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-browser/src/__types__/base.ts)
  * `TurnkeyBrowserClient`
    * `refereshSession()` now consumes a [RefreshSessionParams](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-browser/src/__types__/base.ts#L213) parameter
    * `loginWithBundle()` now consumes a [LoginWithBundleParams](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-browser/src/__types__/base.ts#L219) parameter
    * `loginWithPasskey()` now consumes a [LoginWithPasskeyParams](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-browser/src/__types__/base.ts#L224) parameter
    * `loginWithWallet()` now consumes a [LoginWithWalletParams](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-browser/src/__types__/base.ts#L231) parameter

  ### @turnkey/sdk-react

  * `Auth.tsx`
    * updated `passkeyClient?.loginWithPasskey()` to implement new method signature
    * updated `walletClient?.loginWithWallet()` to implement new method signature

  ### @turnkey/sdk-server

  * Move all type definitions to [`./__types__/base.ts`](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-server/src/__types__/base.ts)

### Patch Changes

* c9ae537: Update nextJs to >= 15.2.3 as per github advisory: [https://github.com/advisories/GHSA-f82v-jwr5-mffw](https://github.com/advisories/GHSA-f82v-jwr5-mffw)

  For Next.js 15.x, this issue is fixed in 15.2.3
  For Next.js 14.x, this issue is fixed in 14.2.25
  For Next.js 13.x, this issue is fixed in 13.5.9
  For Next.js 12.x, this issue is fixed in 12.3.5

* Updated dependencies \[0e4e959]

* Updated dependencies \[856f449]

* Updated dependencies \[c9ae537]

* Updated dependencies \[d4ce5fa]

* Updated dependencies \[ecdb29a]

* Updated dependencies \[72890f5]
  * @turnkey/sdk-browser\@3.0.0
  * @turnkey/sdk-server\@2.6.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 4.0.0

### Major Changes

* 93540e7: ## Major Package Updates

  ### @turnkey/sdk-browser

  * create abstract `TurnkeyBaseClient` class which extends `TurnkeySDKClientBase`
    * `TurnkeyBrowserClient`, `TurnkeyIframeClient`, `TurnkeyPasskeyClient`, and `TurnkeyWalletClient` all extend `TurnkeyBaseClient`
  * TurnkeyBrowserClient
    * Session Management
      * `refreshSession` - attempts to refresh an existing, active session and will extend the session expiry using the `expirationSeconds` parameter
      * loginWithBundle - authenticate a user via a credential bundle and creates a read-write session
      * loginWithPasskey - attempts to authenticate a user via passkey and create a read-only or read-write session
      * loginWithSession - takes a `Session`, which can be either read-only or read-write, created via a server action and attempts to authenticate the user
  * TurnkeyPasskeyClient
    * Session Management
      * createPasskeySession - leverages passkey authentication to create a read-write session. Once authenticated, the user will not be prompted for additional passkey taps.

  ### @turnkey/sdk-react

  * update `TurnkeyContext` to use new `.getSession()` method to check if there is an active session
  * `OTPVerification` component no longer receives `authIframeClient` or `onValidateSuccess` props

  ## Minor Package Updates

  ### @turnkey/sdk-server

  * expose `sendCredential` server action
  * add `SessionType` enum
    * `READ_ONLY` & `READ_WRITE`

  ### @turnkey/eip-1193-provider

  * update dependencies in `package.json`
    * moved from `peerDependencies` to `dependencies`
      * `"@turnkey/http": "workspace:*"`
      * `"@turnkey/sdk-browser": "workspace:*"`
    * moved from `devDependencies` to `dependencies`
      * `"@turnkey/api-key-stamper": "workspace:*"`
  * specify TypeScript version ^5.1.5

### Minor Changes

* 9147962: add dangerouslyOverrideIframeKeyTtl option to override iframe embedded key TTL (for longer lived read/write sessions)

### Patch Changes

* fdb8bf0: Add loading indicators for EWK. Exposed email customization to EWK.
* Updated dependencies \[93540e7]
* Updated dependencies \[fdb8bf0]
* Updated dependencies \[9147962]
  * @turnkey/sdk-browser\@2.0.0
  * @turnkey/sdk-server\@2.5.0
  * @turnkey/crypto\@2.3.1

## 3.1.0

### Minor Changes

* 9317588: Adds wallet as an authentication option in the Embedded Wallet Kit components for sdk-react

### Patch Changes

* Updated dependencies \[233ae71]
* Updated dependencies \[9317588]
  * @turnkey/sdk-browser\@1.16.0
  * @turnkey/sdk-server\@2.4.0
  * @turnkey/crypto\@2.3.1

## 3.0.6

### Patch Changes

* Updated dependencies \[56a307e]
  * @turnkey/sdk-browser\@1.15.0
  * @turnkey/sdk-server\@2.3.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 3.0.5

### Patch Changes

* cdf2e6e: Fix issue in EWK preventing sign up flow

## 3.0.4

### Patch Changes

* 9256e75: Fix apple login issue on mobile web browser
* bfc833f: Add getOrCreateSuborg server action
* Updated dependencies \[3c44c4a]
* Updated dependencies \[bfc833f]
  * @turnkey/sdk-browser\@1.14.0
  * @turnkey/sdk-server\@2.2.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 3.0.3

### Patch Changes

* 5f6de98: Fix phone number validation issue causing issues with non +1 country codes
* Updated dependencies \[69d2571]
* Updated dependencies \[57f9cb0]
  * @turnkey/sdk-browser\@1.13.0
  * @turnkey/sdk-server\@2.1.0
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 3.0.2

### Patch Changes

* faa757c: Patch EWK custom session lengths - previously not working as intended (defaulted to 15 minute sessions only) and fix the following useLocalStorage issue when compiling: \[Error: useLocalStorage is a client-only hook]
* a8bd73b: Fix issue with EWK where suborgs were being created on failed fetches

## 3.0.1

### Patch Changes

* cb8cf7e: Add all supported country codes to phone input field
* 2eb2179: Fix bundling issue with sdk-react
* Updated dependencies \[755833b]
* Updated dependencies \[2bc0046]
  * @turnkey/sdk-browser\@1.12.1
  * @turnkey/sdk-server\@2.0.1
  * @turnkey/crypto\@2.3.1
  * @turnkey/wallet-stamper\@1.0.3

## 3.0.0

### Major Changes

* 1ebd4e2: Remove references to server actions and import from sdk-server

### Patch Changes

* Updated dependencies \[6695af2]
* Updated dependencies \[1ebd4e2]
  * @turnkey/sdk-browser\@1.12.0
  * @turnkey/sdk-server\@2.0.0
  * @turnkey/crypto\@2.3.0
  * @turnkey/wallet-stamper\@1.0.2

## 2.0.4

### Patch Changes

* 99ebe78: Fixed MUI components not inheriting fonts.
* Updated dependencies \[053fbfb]
  * @turnkey/sdk-browser\@1.11.2
  * @turnkey/sdk-server\@1.7.3
  * @turnkey/crypto\@2.3.0
  * @turnkey/wallet-stamper\@1.0.2

## 2.0.3

### Patch Changes

* d43c52c: Add session length customization, wallet generation customization, enter to continue, more css customization and css fixes (icon sizing issues, etc)
* 5419d49: fix css bundling bug
* Updated dependencies \[328d6aa]
* Updated dependencies \[b90947e]
* Updated dependencies \[2d5977b]
* Updated dependencies \[fad7c37]
  * @turnkey/sdk-browser\@1.11.1
  * @turnkey/sdk-server\@1.7.2
  * @turnkey/crypto\@2.3.0
  * @turnkey/wallet-stamper\@1.0.2

## 2.0.2

### Patch Changes

* eaf3e20: Fix css related build issues with React 19+ & NextJs 15+

## 2.0.1

### Patch Changes

* 0da96aa: Add readme to react sdk

## 2.0.0

### Major Changes

* 95717d7: New Feature: UI components - Auth, Export, Import. Leverages server and client directives on NextJS 13+ to abstract functionalities away from the developer

### Patch Changes

* c8330fa: Add a user identifier for sms rate limiting
* 12d5aaa: Update TurnkeySDKBrowserConfig type with an optional iframeUrl field. The TurnkeyContext provider will check for an iframeUrl otherwise it will fallback to the default.
* Updated dependencies \[7988bc1]
* Updated dependencies \[c895c8f]
* Updated dependencies \[538d4fc]
* Updated dependencies \[12d5aaa]
  * @turnkey/sdk-browser\@1.11.0
  * @turnkey/wallet-stamper\@1.0.2
  * @turnkey/sdk-server\@1.7.1
  * @turnkey/crypto\@2.3.0

## 1.1.2

### Patch Changes

* @turnkey/sdk-browser\@1.10.2
* @turnkey/wallet-stamper\@1.0.1

## 1.1.1

### Patch Changes

* @turnkey/sdk-browser\@1.10.1
* @turnkey/wallet-stamper\@1.0.0

## 1.1.0

### Minor Changes

* The `useTurnkey` hook now returns the new `walletClient`, used for authenticating requests via wallet signatures
* Added new `client` object returned from the `useTurnkey` hook. This is the authenticated client. It will be null if the user is not authenticated. Example:

  ```typescript
  const { client } = useTurnkey();
  ```

### Patch Changes

* Updated dependencies \[8bea78f]
  * @turnkey/wallet-stamper\@2.0.0
  * @turnkey/sdk-browser\@1.10.0

## 1.0.14

### Patch Changes

* Updated dependencies \[3dd74ac]
* Updated dependencies \[1e36edf]
* Updated dependencies \[4df8914]
* Updated dependencies \[11a9e2f]
  * @turnkey/sdk-browser\@1.9.0

## 1.0.13

### Patch Changes

* Updated dependencies \[9ebd062]
  * @turnkey/sdk-browser\@1.8.0

## 1.0.12

### Patch Changes

* Updated dependencies \[96d7f99]
  * @turnkey/sdk-browser\@1.7.1

## 1.0.11

### Patch Changes

* Updated dependencies \[ff059d5]
  * @turnkey/sdk-browser\@1.7.0

## 1.0.10

### Patch Changes

* Updated dependencies \[c988ed0]
  * @turnkey/sdk-browser\@1.6.0

## 1.0.9

### Patch Changes

* Updated dependencies \[1813ed5]
  * @turnkey/sdk-browser\@1.5.0

## 1.0.8

### Patch Changes

* Updated dependencies \[bab5393]
* Updated dependencies \[a16073c]
* Updated dependencies \[7e7d209]
  * @turnkey/sdk-browser\@1.4.0

## 1.0.7

### Patch Changes

* Updated dependencies \[93dee46]
  * @turnkey/sdk-browser\@1.3.0

## 1.0.6

### Patch Changes

* Updated dependencies \[e2f2e0b]
  * @turnkey/sdk-browser\@1.2.4

## 1.0.5

### Patch Changes

* Updated dependencies
  * @turnkey/sdk-browser\@1.2.3

## 1.0.4

### Patch Changes

* Updated dependencies
  * @turnkey/sdk-browser\@1.2.2

## 1.0.3

### Patch Changes

* f17a229: Update to oauth related endpoints to drop jwks uri from oauth providers
* Updated dependencies \[f17a229]
  * @turnkey/sdk-browser\@1.2.1

## 1.0.2

### Patch Changes

* Updated dependencies
  * @turnkey/sdk-browser\@1.2.0

## 1.0.1

### Patch Changes

* Updated dependencies
  * @turnkey/sdk-browser\@1.1.0

## 1.0.0

### Major Changes

* Stable Release: Add Oauth integration. New suborg creation version will now require an oauthProviders field under root users.

### Patch Changes

* Updated dependencies
  * @turnkey/sdk-browser\@1.0.0

## 0.4.1

### Patch Changes

* @turnkey/sdk-browser\@0.4.1

## 0.4.0

### Minor Changes

* e4b29da: Deprecate the `getAuthBundle()` path for passkey sessions and replace it with `getReadWriteSession()` to store authBundles with their expirationTimestamps so applications can better manually manage active writing sessions

### Patch Changes

* Updated dependencies \[e4b29da]
  * @turnkey/sdk-browser\@0.4.0

## 0.3.0

### Minor Changes

* d409d81: Add support for Passkey Sessions

### Patch Changes

* Updated dependencies \[d409d81]
  * @turnkey/sdk-browser\@0.3.0

## 0.2.1

### Patch Changes

* @turnkey/sdk-browser\@0.2.1

## 0.2.0

### Minor Changes

* updated syntax

### Patch Changes

* Updated dependencies
  * @turnkey/sdk-browser\@0.2.0

## 0.1.0

### Minor Changes

* Ready for 0.1.0

### Patch Changes

* Updated dependencies
  * @turnkey/sdk-browser\@0.1.0

## 0.0.1

Initial (experimental) release! This is an alpha release and subject to change.


# SDK Server
Source: https://docs.turnkey.com/changelogs/sdk-server/readme



# @turnkey/sdk-server

## 4.2.0

### Minor Changes

* [#704](https://github.com/tkhq/sdk/pull/704) [`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd) Author [@amircheikh](https://github.com/amircheikh) - Synced with mono 2025.6.10 to include the following endpoints:

  `update_user_email`: Update a User's email in an existing Organization

  `update_user_name`: Update a User's name in an existing Organization

  `update_user_phone_number`: Update a User's phone number in an existing Organization

### Patch Changes

* [#698](https://github.com/tkhq/sdk/pull/698) [`7625df0`](https://github.com/tkhq/sdk/commit/7625df0538002c3455bd5862211210e38472e164) Author [@moeodeh3](https://github.com/moeodeh3) - Introduces an optional `runtimeOverride` parameter that allows the ability to explicitly specify the crypto environment: `"browser"`, `"node"`, or `"purejs"`.

* Updated dependencies \[[`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd), [`7625df0`](https://github.com/tkhq/sdk/commit/7625df0538002c3455bd5862211210e38472e164)]:
  * @turnkey/http\@3.5.0
  * @turnkey/api-key-stamper\@0.4.7
  * @turnkey/wallet-stamper\@1.0.5

## 4.1.1

### Patch Changes

* Updated dependencies \[[`be0a621`](https://github.com/tkhq/sdk/commit/be0a621fb962bd51d2df1a1e79f5260d7c696772)]:
  * @turnkey/http\@3.4.2
  * @turnkey/wallet-stamper\@1.0.4

## 4.1.0

### Minor Changes

* [#632](https://github.com/tkhq/sdk/pull/632) [`a38a6e3`](https://github.com/tkhq/sdk/commit/a38a6e36dc2bf9abdea64bc817d1cad95b8a289a) Author [@amircheikh](https://github.com/amircheikh) - Exposed `createOauthProviders` and `getUsers` as server actions. These are used for social linking within `@turnkey/sdk-react`.

### Patch Changes

* [#663](https://github.com/tkhq/sdk/pull/663) [`593de2d`](https://github.com/tkhq/sdk/commit/593de2d9404ec8cf53426f9cf832c13eefa3fbf2) Thanks [@moe-dev](https://github.com/moe-dev)! - Update to endpoints as per mono v2025.5.7. Add V5 TON address format generation. Non breaking

* Updated dependencies \[[`5afbe51`](https://github.com/tkhq/sdk/commit/5afbe51949bdd1997fad083a4c1e4272ff7409dc), [`593de2d`](https://github.com/tkhq/sdk/commit/593de2d9404ec8cf53426f9cf832c13eefa3fbf2)]:
  * @turnkey/wallet-stamper\@1.0.4
  * @turnkey/http\@3.4.1
  * @turnkey/api-key-stamper\@0.4.6

## 4.0.1

### Patch Changes

* Update @turnkey/sdk-types readme and install dependency in packages with common types

* [#650](https://github.com/tkhq/sdk/pull/650) [`27fe590`](https://github.com/tkhq/sdk/commit/27fe590cdc3eb6a8cde093eeefda2ee1cdc79412) Author [@turnekybc](https://github.com/turnekybc) - Update @turnkey/sdk-types readme and install dependency in packages with common types

## 4.0.0

### Major Changes

* [#601](https://github.com/tkhq/sdk/pull/601) [`07dfd33`](https://github.com/tkhq/sdk/commit/07dfd3397472687092e1c73b1d68714f421b9ca0) Author [@moe-dev](https://github.com/moe-dev).

This release introduces significant updates and new actions to the SDK server methods, enhancing authentication flows and simplifying usage:

**Updated Actions:**

* `sendOtp`: No longer requires a suborganization ID; OTPs can now be sent directly under a parent organization's context to any email or phone number.

* `verifyOtp`: Now returns a `verificationToken`, which is required for creating sessions via the new `otpLogin` action.

**New Actions:**

* `otpLogin`: Creates a session using a previously obtained `verificationToken`. Returns a session JWT.

* `oauthLogin`: Authenticates using an OIDC token obtained from a third-party provider (e.g., Google, Apple, Facebook). Returns a session JWT.

These changes standardize authentication processes, simplify integration, and streamline session management across the SDK.

### Patch Changes

* [#631](https://github.com/tkhq/sdk/pull/631) [`e8a5f1b`](https://github.com/tkhq/sdk/commit/e8a5f1b431623c4ff1cb85c6039464b328cf0e6a) Author [@andrewkmin](https://github.com/andrewkmin) - Remove unused Next.js dependency

  * while the `"use server"` directive in `actions.ts` is to be used specifically with Next, removing it from this package (`@turnkey/sdk-server`) is fine, though applications *using* this package will need Next.js

* Updated dependencies \[[`07dfd33`](https://github.com/tkhq/sdk/commit/07dfd3397472687092e1c73b1d68714f421b9ca0)]:
  * @turnkey/http\@3.4.0
  * @turnkey/wallet-stamper\@1.0.3

## 3.3.0

### Minor Changes

* 25ca339: Adding replyToEmailAddress field for specifying reply-to when using a customer sender

### Patch Changes

* Updated dependencies \[25ca339]
  * @turnkey/http\@3.3.0
  * @turnkey/wallet-stamper\@1.0.3

## 3.2.0

### Minor Changes

* 3f6e415: Update per mono v2025.4.5

### Patch Changes

* Updated dependencies \[3f6e415]
* Updated dependencies \[4d1d775]
  * @turnkey/http\@3.2.0
  * @turnkey/api-key-stamper\@0.4.5
  * @turnkey/wallet-stamper\@1.0.3

## 3.1.0

### Minor Changes

* 3e4a482: Release per mono v2025.4.4

### Patch Changes

* Updated dependencies \[3e4a482]
  * @turnkey/http\@3.1.0
  * @turnkey/wallet-stamper\@1.0.3

## 3.0.1

### Patch Changes

* 7b72769: Add sendFromEmailSenderName to sendOtp server action

## 3.0.0

### Major Changes

* d1083bd: initOtpAuth now defaults to v2 (breaking) which allows alphanumeric boolean and otpLength (6-9) to be passed + associated updates to server actions. More details below.

* This release introduces the `INIT_OTP_AUTH_V2` activity. The difference between it and `INIT_OTP_AUTH` is that it can now accept `alphanumeric` and `otpLength` for selecting crockford bech32 alphanumeric codes and the length of those codes. By default alphanumeric = true, otpLength = 9

* This release introduces `sendFromEmailSenderName` to `INIT_OTP_AUTH`, `INIT_OTP_AUTH_V2`, `EMAIL_AUTH` and `EMAIL_AUTH_V2`. This is an optional custom sender name for use with sendFromEmailAddress; if left empty, will default to 'Notifications'.

### Patch Changes

* Updated dependencies \[d1083bd]
* Updated dependencies \[f94d36e]
  * @turnkey/http\@3.0.0
  * @turnkey/wallet-stamper\@1.0.3

## 2.6.1

### Patch Changes

* 5ec5187: Fix initOtpAuth bug with improper version result (to be updated to V2 following release r2025.3.8)

## 2.6.0

### Minor Changes

* ecdb29a: Update API as per mono v2025.3.2 - Add CREATE\_USERS\_V3

### Patch Changes

* 0e4e959: bump update policy activity to v2

* c9ae537: Update nextJs to >= 15.2.3 as per github advisory: [https://github.com/advisories/GHSA-f82v-jwr5-mffw](https://github.com/advisories/GHSA-f82v-jwr5-mffw)

  For Next.js 15.x, this issue is fixed in 15.2.3
  For Next.js 14.x, this issue is fixed in 14.2.25
  For Next.js 13.x, this issue is fixed in 13.5.9
  For Next.js 12.x, this issue is fixed in 12.3.5

* 72890f5: ### @turnkey/sdk-browser

  * Move all type definitions to [`./__types__/base.ts`](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-browser/src/__types__/base.ts)
  * `TurnkeyBrowserClient`
    * `refereshSession()` now consumes a [RefreshSessionParams](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-browser/src/__types__/base.ts#L213) parameter
    * `loginWithBundle()` now consumes a [LoginWithBundleParams](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-browser/src/__types__/base.ts#L219) parameter
    * `loginWithPasskey()` now consumes a [LoginWithPasskeyParams](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-browser/src/__types__/base.ts#L224) parameter
    * `loginWithWallet()` now consumes a [LoginWithWalletParams](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-browser/src/__types__/base.ts#L231) parameter

  ### @turnkey/sdk-react

  * `Auth.tsx`
    * updated `passkeyClient?.loginWithPasskey()` to implement new method signature
    * updated `walletClient?.loginWithWallet()` to implement new method signature

  ### @turnkey/sdk-server

  * Move all type definitions to [`./__types__/base.ts`](https://github.com/tkhq/sdk/blob/494911d948d0a53c0d00aa01e9821aefd5e3f80d/packages/sdk-server/src/__types__/base.ts)

* Updated dependencies \[ecdb29a]
  * @turnkey/http\@2.22.0
  * @turnkey/wallet-stamper\@1.0.3

## 2.5.0

### Minor Changes

* 93540e7: ## Major Package Updates

  ### @turnkey/sdk-browser

  * create abstract `TurnkeyBaseClient` class which extends `TurnkeySDKClientBase`
    * `TurnkeyBrowserClient`, `TurnkeyIframeClient`, `TurnkeyPasskeyClient`, and `TurnkeyWalletClient` all extend `TurnkeyBaseClient`
  * TurnkeyBrowserClient
    * Session Management
      * `refreshSession` - attempts to refresh an existing, active session and will extend the session expiry using the `expirationSeconds` parameter
      * loginWithBundle - authenticate a user via a credential bundle and creates a read-write session
      * loginWithPasskey - attempts to authenticate a user via passkey and create a read-only or read-write session
      * loginWithSession - takes a `Session`, which can be either read-only or read-write, created via a server action and attempts to authenticate the user
  * TurnkeyPasskeyClient
    * Session Management
      * createPasskeySession - leverages passkey authentication to create a read-write session. Once authenticated, the user will not be prompted for additional passkey taps.

  ### @turnkey/sdk-react

  * update `TurnkeyContext` to use new `.getSession()` method to check if there is an active session
  * `OTPVerification` component no longer receives `authIframeClient` or `onValidateSuccess` props

  ## Minor Package Updates

  ### @turnkey/sdk-server

  * expose `sendCredential` server action
  * add `SessionType` enum
    * `READ_ONLY` & `READ_WRITE`

  ### @turnkey/eip-1193-provider

  * update dependencies in `package.json`
    * moved from `peerDependencies` to `dependencies`
      * `"@turnkey/http": "workspace:*"`
      * `"@turnkey/sdk-browser": "workspace:*"`
    * moved from `devDependencies` to `dependencies`
      * `"@turnkey/api-key-stamper": "workspace:*"`
  * specify TypeScript version ^5.1.5

### Patch Changes

* fdb8bf0: Add loading indicators for EWK. Exposed email customization to EWK.

## 2.4.0

### Minor Changes

* 9317588: Adds wallet as an authentication option in the Embedded Wallet Kit components for sdk-react

## 2.3.0

### Minor Changes

* 56a307e: Update api to mono v2025.3.0

### Patch Changes

* Updated dependencies \[56a307e]
  * @turnkey/http\@2.21.0

## 2.2.0

### Minor Changes

* 3c44c4a: Updates per mono release v2025.2.2

### Patch Changes

* bfc833f: Add getOrCreateSuborg server action
* Updated dependencies \[3c44c4a]
  * @turnkey/http\@2.20.0

## 2.1.0

### Minor Changes

* 57f9cb0: Update endpoints - surface GetWalletAccount

### Patch Changes

* 69d2571: Upgrade elliptic
* Updated dependencies \[57f9cb0]
  * @turnkey/http\@2.19.0

## 2.0.1

### Patch Changes

* 755833b: refactor stamper out of config object and move it directly onto the client to match @turnkey/http

## 2.0.0

### Major Changes

* 1ebd4e2: Add server actions

### Minor Changes

* 6695af2: Update per mono release v2025.1.11

### Patch Changes

* Updated dependencies \[6695af2]
  * @turnkey/http\@2.18.0

## 1.7.3

### Patch Changes

* 053fbfb: Update mono dependencies
* Updated dependencies \[053fbfb]
  * @turnkey/http\@2.17.3

## 1.7.2

### Patch Changes

* 328d6aa: Add defaultXrpAccountAtIndex helper

* b90947e: Update default account exports, surface WalletAccount type

* fad7c37: @turnkey/iframe-stamper - Implemented MessageChannel API for secure communication between the parent and iframe.

  @turnkey/sdk-browser - fixed spelling in package.json
  @turnkey/sdk-server - fixed spelling in package.json

* Updated dependencies \[2d5977b]
  * @turnkey/api-key-stamper\@0.4.4
  * @turnkey/http\@2.17.2

## 1.7.1

### Patch Changes

* 538d4fc: Update api endpoints - NEW: User verification, SMS customization params
* Updated dependencies \[538d4fc]
  * @turnkey/http\@2.17.1

## 1.7.0

### Minor Changes

* 78bc39c: Add default accounts for various address types
  * Add wallet account ID to list wallets endpoint

### Patch Changes

* Updated dependencies \[78bc39c]
  * @turnkey/http\@2.17.0

## 1.6.0

### Minor Changes

* 3dd74ac: Added functionality for constructing and returning stamped requests for all packages
* 4df8914: Version bump corresponding to mono release v2024.10.10. More detailed changelog to follow

### Patch Changes

* Updated dependencies \[4df8914]
  * @turnkey/http\@2.16.0

## 1.5.0

### Minor Changes

* 9ebd062: Release OTP functionality

### Patch Changes

* Updated dependencies \[9ebd062]
  * @turnkey/http\@2.15.0

## 1.4.2

### Patch Changes

* abe7138: Export DEFAULT\_SOLANA\_ACCOUNTS
* 96d7f99: Update dependencies
* Updated dependencies \[96d7f99]
  * @turnkey/http\@2.14.2
  * @turnkey/api-key-stamper\@0.4.3

## 1.4.1

### Patch Changes

* ff059d5: Update dependencies
* Updated dependencies \[ff059d5]
  * @turnkey/http\@2.14.1
  * @turnkey/api-key-stamper\@0.4.2

## 1.4.0

### Minor Changes

* c988ed0: Support activity polling (e.g. for awaiting consensus)

  * \[Breaking] Update the `activityPoller` parameter for configuring polling behavior
  * Polling continues until either a max number of retries is reached, or if the activity hits a terminal status

  The shape of the parameter has gone from:

  ```
  {
    duration: number;
    timeout: number;
  }
  ```

  to

  ```
  {
    intervalMs: number;
    numRetries: number;
  }
  ```

### Patch Changes

* Updated dependencies \[848f8d3]
  * @turnkey/http\@2.14.0

## 1.3.0

### Minor Changes

* 93dee46: Add create read write session v2 which allows for user targeting directly from stamp or optional userId in intent

### Patch Changes

* Updated dependencies \[93dee46]
  * @turnkey/http\@2.13.0

## 1.2.4

### Patch Changes

* Updated dependencies \[e2f2e0b]
  * @turnkey/http\@2.12.3

## 1.2.3

### Patch Changes

* Fix activity versioning for CREATE\_SUB\_ORGANIZATION (V5=>V6)

## 1.2.2

### Patch Changes

* Updated dependencies \[2d7e5a9]
  * @turnkey/api-key-stamper\@0.4.1
  * @turnkey/http\@2.12.2

## 1.2.1

### Patch Changes

* f17a229: Update to oauth related endpoints to drop jwks uri from oauth providers
* Updated dependencies \[f17a229]
  * @turnkey/http\@2.12.1

## 1.2.0

### Minor Changes

* Add Email Auth V2 - Optional invalidate exisiting Email Authentication API keys

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.12.0

## 1.1.0

### Minor Changes

* Update to use new endpoints. Including CREATE\_READ\_WRITE\_SESSION which allows one shot passkey sessions (returns org information and a credential bundle) and CREATE\_API\_KEYS\_V2 which allows a curve type to be passed (SECP256K1 or P256)

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.11.0

## 1.0.0

### Major Changes

* Stable Release: Add Oauth integration. New suborg creation version will now require an oauthProviders field under root users.

## 0.2.0

### Minor Changes

* updated syntax

### Patch Changes

* e4d2a84: Update client name

## 0.1.0

### Minor Changes

* Ready for 0.1.0

## 0.0.1

Initial (experimental) release! This is an alpha release and subject to change.


# Solana
Source: https://docs.turnkey.com/changelogs/solana/readme



# @turnkey/solana

## 1.0.31

### Patch Changes

* Updated dependencies \[[`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd), [`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd), [`7625df0`](https://github.com/tkhq/sdk/commit/7625df0538002c3455bd5862211210e38472e164)]:
  * @turnkey/http\@3.5.0
  * @turnkey/sdk-browser\@5.3.0
  * @turnkey/sdk-server\@4.2.0

## 1.0.30

### Patch Changes

* Updated dependencies:
  * @turnkey/sdk-browser\@5.2.3

## 1.0.29

### Patch Changes

* Updated dependencies:
  * @turnkey/sdk-browser\@5.2.2

## 1.0.28

### Patch Changes

* [#665](https://github.com/tkhq/sdk/pull/665) [`be0a621`](https://github.com/tkhq/sdk/commit/be0a621fb962bd51d2df1a1e79f5260d7c696772) Author [@amircheikh](https://github.com/amircheikh) - Fix for `no runner registered` error when using mismatched versions of turnkey/http

* Updated dependencies \[[`be0a621`](https://github.com/tkhq/sdk/commit/be0a621fb962bd51d2df1a1e79f5260d7c696772)]:
  * @turnkey/http\@3.4.2
  * @turnkey/sdk-browser\@5.2.1
  * @turnkey/sdk-server\@4.1.1

## 1.0.27

### Patch Changes

* Updated dependencies \[[`5afbe51`](https://github.com/tkhq/sdk/commit/5afbe51949bdd1997fad083a4c1e4272ff7409dc), [`a38a6e3`](https://github.com/tkhq/sdk/commit/a38a6e36dc2bf9abdea64bc817d1cad95b8a289a), [`40c4035`](https://github.com/tkhq/sdk/commit/40c40359ec7096d0bca39ffc93e89361b3b11a1a), [`593de2d`](https://github.com/tkhq/sdk/commit/593de2d9404ec8cf53426f9cf832c13eefa3fbf2)]:
  * @turnkey/sdk-browser\@5.2.0
  * @turnkey/sdk-server\@4.1.0
  * @turnkey/http\@3.4.1

## 1.0.26

### Patch Changes

* Updated dependencies \[[`27fe590`](https://github.com/tkhq/sdk/commit/27fe590cdc3eb6a8cde093eeefda2ee1cdc79412)]:
  * @turnkey/sdk-browser\@5.1.0
  * @turnkey/sdk-server\@4.0.1

## 1.0.25

### Patch Changes

* Updated dependencies \[[`07dfd33`](https://github.com/tkhq/sdk/commit/07dfd3397472687092e1c73b1d68714f421b9ca0), [`e8a5f1b`](https://github.com/tkhq/sdk/commit/e8a5f1b431623c4ff1cb85c6039464b328cf0e6a)]:
  * @turnkey/sdk-browser\@5.0.0
  * @turnkey/sdk-server\@4.0.0
  * @turnkey/http\@3.4.0

## 1.0.24

### Patch Changes

* Updated dependencies \[25ca339]
  * @turnkey/sdk-browser\@4.3.0
  * @turnkey/sdk-server\@3.3.0
  * @turnkey/http\@3.3.0

## 1.0.23

### Patch Changes

* Updated dependencies \[3f6e415]
  * @turnkey/sdk-browser\@4.2.0
  * @turnkey/sdk-server\@3.2.0
  * @turnkey/http\@3.2.0

## 1.0.22

### Patch Changes

* Updated dependencies \[3e4a482]
  * @turnkey/sdk-browser\@4.1.0
  * @turnkey/sdk-server\@3.1.0
  * @turnkey/http\@3.1.0

## 1.0.21

### Patch Changes

* Updated dependencies \[7b72769]
  * @turnkey/sdk-server\@3.0.1

## 1.0.20

### Patch Changes

* Updated dependencies \[e501690]
* Updated dependencies \[d1083bd]
* Updated dependencies \[f94d36e]
  * @turnkey/sdk-browser\@4.0.0
  * @turnkey/sdk-server\@3.0.0
  * @turnkey/http\@3.0.0

## 1.0.19

### Patch Changes

* Updated dependencies \[bf87774]
  * @turnkey/sdk-browser\@3.1.0

## 1.0.18

### Patch Changes

* Updated dependencies \[5ec5187]
  * @turnkey/sdk-browser\@3.0.1
  * @turnkey/sdk-server\@2.6.1

## 1.0.17

### Patch Changes

* Updated dependencies \[0e4e959]
* Updated dependencies \[856f449]
* Updated dependencies \[c9ae537]
* Updated dependencies \[d4ce5fa]
* Updated dependencies \[ecdb29a]
* Updated dependencies \[72890f5]
  * @turnkey/sdk-browser\@3.0.0
  * @turnkey/sdk-server\@2.6.0
  * @turnkey/http\@2.22.0

## 1.0.16

### Patch Changes

* Updated dependencies \[93540e7]
* Updated dependencies \[fdb8bf0]
* Updated dependencies \[9147962]
  * @turnkey/sdk-browser\@2.0.0
  * @turnkey/sdk-server\@2.5.0

## 1.0.15

### Patch Changes

* Updated dependencies \[233ae71]
* Updated dependencies \[9317588]
  * @turnkey/sdk-browser\@1.16.0
  * @turnkey/sdk-server\@2.4.0

## 1.0.14

### Patch Changes

* Updated dependencies \[56a307e]
  * @turnkey/sdk-browser\@1.15.0
  * @turnkey/sdk-server\@2.3.0
  * @turnkey/http\@2.21.0

## 1.0.13

### Patch Changes

* Updated dependencies \[3c44c4a]
* Updated dependencies \[bfc833f]
  * @turnkey/sdk-browser\@1.14.0
  * @turnkey/sdk-server\@2.2.0
  * @turnkey/http\@2.20.0

## 1.0.12

### Patch Changes

* Updated dependencies \[69d2571]
* Updated dependencies \[57f9cb0]
  * @turnkey/sdk-browser\@1.13.0
  * @turnkey/sdk-server\@2.1.0
  * @turnkey/http\@2.19.0

## 1.0.11

### Patch Changes

* Updated dependencies \[755833b]
  * @turnkey/sdk-browser\@1.12.1
  * @turnkey/sdk-server\@2.0.1

## 1.0.10

### Patch Changes

* Updated dependencies \[6695af2]
* Updated dependencies \[1ebd4e2]
  * @turnkey/sdk-browser\@1.12.0
  * @turnkey/sdk-server\@2.0.0
  * @turnkey/http\@2.18.0

## 1.0.9

### Patch Changes

* Updated dependencies \[053fbfb]
  * @turnkey/sdk-browser\@1.11.2
  * @turnkey/sdk-server\@1.7.3
  * @turnkey/http\@2.17.3

## 1.0.8

### Patch Changes

* Updated dependencies \[328d6aa]
* Updated dependencies \[b90947e]
* Updated dependencies \[2d5977b]
* Updated dependencies \[fad7c37]
  * @turnkey/sdk-browser\@1.11.1
  * @turnkey/sdk-server\@1.7.2
  * @turnkey/http\@2.17.2

## 1.0.7

### Patch Changes

* c895c8f: Update @solana/web3.js from ^1.88.1 to ^1.95.8
* Updated dependencies \[7988bc1]
* Updated dependencies \[538d4fc]
* Updated dependencies \[12d5aaa]
  * @turnkey/sdk-browser\@1.11.0
  * @turnkey/sdk-server\@1.7.1
  * @turnkey/http\@2.17.1

## 1.0.6

### Patch Changes

* @turnkey/sdk-browser\@1.10.2

## 1.0.5

### Patch Changes

* Updated dependencies \[78bc39c]
  * @turnkey/sdk-server\@1.7.0
  * @turnkey/http\@2.17.0
  * @turnkey/sdk-browser\@1.10.1

## 1.0.4

### Patch Changes

* 9eaf38a: Add optional org id for all signing methods

## 1.0.3

### Patch Changes

* Updated dependencies \[8bea78f]
  * @turnkey/sdk-browser\@1.10.0

## 1.0.2

### Patch Changes

* b55bc32: Add optional org id to addSignature function
* Updated dependencies \[3dd74ac]
* Updated dependencies \[1e36edf]
* Updated dependencies \[4df8914]
* Updated dependencies \[11a9e2f]
  * @turnkey/sdk-browser\@1.9.0
  * @turnkey/sdk-server\@1.6.0
  * @turnkey/http\@2.16.0

## 1.0.1

### Patch Changes

* Updated dependencies \[9ebd062]
  * @turnkey/sdk-browser\@1.8.0
  * @turnkey/sdk-server\@1.5.0
  * @turnkey/http\@2.15.0

## 1.0.0

### Major Changes

* a4f0f69: Integrate @turnkey/solana with Turnkey's Sign Transaction endpoint. There are no breaking changes, but a major release felt right given this is effectively adding "full" Solana support.

  This release introduces a new method: `signTransaction`. Under the hood, this creates an activity of type `ACTIVITY_TYPE_SIGN_TRANSACTION_V2`. There is **no action required** for existing users of `addSignature`.

  * `addSignature` does not use our Policy Engine, and instead signs a transaction's message straight up
  * While `addSignature` mutates the incoming transaction by adding a signature to it directly, `signTransaction` returns a new transaction object
  * Both legacy and versioned (V0) transactions are supported

  For some examples of how you can use Turnkey's Policy Engine with Solana transactions, see [https://docs.turnkey.com/concepts/policies/examples](https://docs.turnkey.com/concepts/policies/examples).

### Patch Changes

* Updated dependencies \[abe7138]
* Updated dependencies \[96d7f99]
  * @turnkey/sdk-server\@1.4.2
  * @turnkey/sdk-browser\@1.7.1
  * @turnkey/http\@2.14.2

## 0.5.1

### Patch Changes

* Updated dependencies \[ff059d5]
* Updated dependencies \[ff059d5]
  * @turnkey/sdk-browser\@1.7.0
  * @turnkey/sdk-server\@1.4.1
  * @turnkey/http\@2.14.1

## 0.5.0

### Minor Changes

* bdded80: Support awaiting consensus

### Patch Changes

* Updated dependencies \[c988ed0]
* Updated dependencies \[848f8d3]
  * @turnkey/sdk-browser\@1.6.0
  * @turnkey/sdk-server\@1.4.0
  * @turnkey/http\@2.14.0

## 0.4.3

### Patch Changes

* Updated dependencies \[1813ed5]
  * @turnkey/sdk-browser\@1.5.0

## 0.4.2

### Patch Changes

* Updated dependencies \[bab5393]
* Updated dependencies \[a16073c]
* Updated dependencies \[7e7d209]
  * @turnkey/sdk-browser\@1.4.0

## 0.4.1

### Patch Changes

* Updated dependencies \[93dee46]
  * @turnkey/http\@2.13.0
  * @turnkey/sdk-browser\@1.3.0
  * @turnkey/sdk-server\@1.3.0

## 0.4.0

### Minor Changes

* c342954: Add compatibility with @turnkey/sdk-server and @turnkey/sdk-browser

## 0.3.10

### Patch Changes

* Updated dependencies \[e2f2e0b]
  * @turnkey/http\@2.12.3

## 0.3.9

### Patch Changes

* Updated dependencies \[2d7e5a9]
  * @turnkey/http\@2.12.2

## 0.3.8

### Patch Changes

* Updated dependencies \[f17a229]
  * @turnkey/http\@2.12.1

## 0.3.7

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.12.0

## 0.3.6

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.11.0

## 0.3.5

### Patch Changes

* Updated dependencies \[7a9ce7a]
  * @turnkey/http\@2.10.0

## 0.3.4

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.9.1

## 0.3.3

### Patch Changes

* Updated dependencies \[83b62b5]
  * @turnkey/http\@2.9.0

## 0.3.2

### Patch Changes

* Updated dependencies \[46a7d90]
  * @turnkey/http\@2.8.0

## 0.3.1

### Patch Changes

Adjust logic for signing transactions and versioned transactions to avoid typechecks (#218)

## 0.3.0

### Minor Changes

Add support for signing Solana versioned transactions (#216)

## 0.2.2

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.7.1

## 0.2.1

### Patch Changes

* Updated dependencies \[d73725b]
  * @turnkey/http\@2.7.0

## 0.2.0

### Minor Changes

* \#202: implements `signMessage` on the Solana `TurnkeySigner`

## 0.1.1

* Fix readme link

## 0.1.0

* Initial release


# Telegram Cloud Storage Stamper
Source: https://docs.turnkey.com/changelogs/telegram-cloud-storage-stamper/readme



# @turnkey/telegram-cloud-storage-stamper

## 2.0.3

### Patch Changes

* Updated dependencies \[[`7625df0`](https://github.com/tkhq/sdk/commit/7625df0538002c3455bd5862211210e38472e164)]:
  * @turnkey/api-key-stamper\@0.4.7

## 2.0.2

### Patch Changes

* Updated dependencies \[]:
  * @turnkey/api-key-stamper\@0.4.6

## 2.0.1

### Patch Changes

* Updated dependencies \[4d1d775]
  * @turnkey/api-key-stamper\@0.4.5

## 2.0.0

### Major Changes

* 24ca647: Remove default export and used all named exports for consistency

  ### Package imports for `@turnkey/telegram-cloud-storage-stamper`

  #### for versions \< v2.0.0

  ```typescript
  import TelegramCloudStorageStamper, {
    CloudStorageAPIKey,
  } from "@turnkey/telegram-cloud-storage-stamper";
  ```

  #### for versions >= v2.0.0

  ```typescript
  import {
    TelegramCloudStorageStamper,
    CloudStorageAPIKey,
  } from "@turnkey/telegram-cloud-storage-stamper";
  ```

## 1.0.3

### Patch Changes

* Updated dependencies \[2d5977b]
  * @turnkey/api-key-stamper\@0.4.4

## 1.0.2

### Patch Changes

* Export the default cloud storage api key location

## 1.0.1

### Patch Changes

* Update the default cloud storage key to conform to cloud storage key constraints

## 1.0.0

### Major Changes

* Initial release of the telegram-cloud-storage-stamper package. This package is to be used alongside Telegram mini-app development and provides a stamping utility and an interface into Telegram Cloud Storage. More can be read in the [readme](../packages/telegram-cloud-storage-stamper/readme.md).


# Viem
Source: https://docs.turnkey.com/changelogs/viem/readme



# @turnkey/viem

## 0.9.10

### Patch Changes

* Updated dependencies \[[`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd), [`5f3dd98`](https://github.com/tkhq/sdk/commit/5f3dd9814650308b3bf3198168c453e7b1a98efd), [`7625df0`](https://github.com/tkhq/sdk/commit/7625df0538002c3455bd5862211210e38472e164)]:
  * @turnkey/http\@3.5.0
  * @turnkey/sdk-browser\@5.3.0
  * @turnkey/sdk-server\@4.2.0
  * @turnkey/api-key-stamper\@0.4.7

## 0.9.9

### Patch Changes

* Updated dependencies:
  * @turnkey/sdk-browser\@5.2.3

## 0.9.8

### Patch Changes

* Updated dependencies:
  * @turnkey/sdk-browser\@5.2.2

## 0.9.7

### Patch Changes

* [#665](https://github.com/tkhq/sdk/pull/665) [`be0a621`](https://github.com/tkhq/sdk/commit/be0a621fb962bd51d2df1a1e79f5260d7c696772) Author [@amircheikh](https://github.com/amircheikh) - Fix for `no runner registered` error when using mismatched versions of turnkey/http

* Updated dependencies \[[`be0a621`](https://github.com/tkhq/sdk/commit/be0a621fb962bd51d2df1a1e79f5260d7c696772)]:
  * @turnkey/http\@3.4.2
  * @turnkey/sdk-browser\@5.2.1
  * @turnkey/sdk-server\@4.1.1

## 0.9.6

### Patch Changes

* Updated dependencies \[[`5afbe51`](https://github.com/tkhq/sdk/commit/5afbe51949bdd1997fad083a4c1e4272ff7409dc), [`a38a6e3`](https://github.com/tkhq/sdk/commit/a38a6e36dc2bf9abdea64bc817d1cad95b8a289a), [`40c4035`](https://github.com/tkhq/sdk/commit/40c40359ec7096d0bca39ffc93e89361b3b11a1a), [`593de2d`](https://github.com/tkhq/sdk/commit/593de2d9404ec8cf53426f9cf832c13eefa3fbf2)]:
  * @turnkey/sdk-browser\@5.2.0
  * @turnkey/sdk-server\@4.1.0
  * @turnkey/http\@3.4.1
  * @turnkey/api-key-stamper\@0.4.6

## 0.9.5

### Patch Changes

* Updated dependencies \[[`27fe590`](https://github.com/tkhq/sdk/commit/27fe590cdc3eb6a8cde093eeefda2ee1cdc79412)]:
  * @turnkey/sdk-browser\@5.1.0
  * @turnkey/sdk-server\@4.0.1

## 0.9.4

### Patch Changes

* Updated dependencies \[[`07dfd33`](https://github.com/tkhq/sdk/commit/07dfd3397472687092e1c73b1d68714f421b9ca0), [`e8a5f1b`](https://github.com/tkhq/sdk/commit/e8a5f1b431623c4ff1cb85c6039464b328cf0e6a)]:
  * @turnkey/sdk-browser\@5.0.0
  * @turnkey/sdk-server\@4.0.0
  * @turnkey/http\@3.4.0

## 0.9.3

### Patch Changes

* Updated dependencies \[25ca339]
  * @turnkey/sdk-browser\@4.3.0
  * @turnkey/sdk-server\@3.3.0
  * @turnkey/http\@3.3.0

## 0.9.2

### Patch Changes

* d440e7b: Update `signAuthorization` implementation to explicitly include `yParity` in the response

## 0.9.1

### Patch Changes

* Updated dependencies \[3f6e415]
* Updated dependencies \[4d1d775]
  * @turnkey/sdk-browser\@4.2.0
  * @turnkey/sdk-server\@3.2.0
  * @turnkey/http\@3.2.0
  * @turnkey/api-key-stamper\@0.4.5

## 0.9.0

### Minor Changes

* 2f75cf1: Add support for signing Type 3 (EIP-4844) transactions
  * Note the inline comments on the `signTransaction` [implementation](https://github.com/tkhq/sdk/blob/5e5666aba978f756e2021c261830effc5559811f/packages/viem/src/index.ts#L392): when signing Type 3 transactions, our Viem implementation will extract the transaction payload (not including blobs, commitments, or proofs), sign it, extract the signature, and then reassemble the entire transaction payload.
  * See [with-viem](https://github.com/tkhq/sdk/tree/main/examples/with-viem/) for examples.

### Patch Changes

* Updated dependencies \[3e4a482]
  * @turnkey/sdk-browser\@4.1.0
  * @turnkey/sdk-server\@3.1.0
  * @turnkey/http\@3.1.0

## 0.8.0

### Minor Changes

* 1d709ce: - Add support for EIP 7702 (Type 4) transactions by way of a new `signAuthorization` method
  * Update upstream `viem` version to `^2.24.2` (required for 7702)
  * Introduce new `to` parameter, used for indicating the result shape of `signMessage` (and related) requests
    * Affects `signTypedData` as well
    * Is used by `signAuthorization`
    * As a result, `serializeSignature` is updated as well

## 0.7.2

### Patch Changes

* Updated dependencies \[7b72769]
  * @turnkey/sdk-server\@3.0.1

## 0.7.1

### Patch Changes

* 123406b: The organizationId parameter is ignored when using a client other than TurnkeyClient (e.g., passkeyClient). Consequently, the SDK calls the client without the specified organizationId, which is unintended. This patch resolves the issue
* Updated dependencies \[e501690]
* Updated dependencies \[d1083bd]
* Updated dependencies \[f94d36e]
  * @turnkey/sdk-browser\@4.0.0
  * @turnkey/sdk-server\@3.0.0
  * @turnkey/http\@3.0.0

## 0.7.0

### Minor Changes

* d99fe40: Upgrade upstream viem dependency

### Patch Changes

* Updated dependencies \[bf87774]
  * @turnkey/sdk-browser\@3.1.0

## 0.6.18

### Patch Changes

* Updated dependencies \[5ec5187]
  * @turnkey/sdk-browser\@3.0.1
  * @turnkey/sdk-server\@2.6.1

## 0.6.17

### Patch Changes

* Updated dependencies \[0e4e959]
* Updated dependencies \[856f449]
* Updated dependencies \[c9ae537]
* Updated dependencies \[d4ce5fa]
* Updated dependencies \[ecdb29a]
* Updated dependencies \[72890f5]
  * @turnkey/sdk-browser\@3.0.0
  * @turnkey/sdk-server\@2.6.0
  * @turnkey/http\@2.22.0

## 0.6.16

### Patch Changes

* Updated dependencies \[93540e7]
* Updated dependencies \[fdb8bf0]
* Updated dependencies \[9147962]
  * @turnkey/sdk-browser\@2.0.0
  * @turnkey/sdk-server\@2.5.0

## 0.6.15

### Patch Changes

* Updated dependencies \[233ae71]
* Updated dependencies \[9317588]
  * @turnkey/sdk-browser\@1.16.0
  * @turnkey/sdk-server\@2.4.0

## 0.6.14

### Patch Changes

* Updated dependencies \[56a307e]
  * @turnkey/sdk-browser\@1.15.0
  * @turnkey/sdk-server\@2.3.0
  * @turnkey/http\@2.21.0

## 0.6.13

### Patch Changes

* Updated dependencies \[3c44c4a]
* Updated dependencies \[bfc833f]
  * @turnkey/sdk-browser\@1.14.0
  * @turnkey/sdk-server\@2.2.0
  * @turnkey/http\@2.20.0

## 0.6.12

### Patch Changes

* Updated dependencies \[69d2571]
* Updated dependencies \[57f9cb0]
  * @turnkey/sdk-browser\@1.13.0
  * @turnkey/sdk-server\@2.1.0
  * @turnkey/http\@2.19.0

## 0.6.11

### Patch Changes

* Updated dependencies \[755833b]
  * @turnkey/sdk-browser\@1.12.1
  * @turnkey/sdk-server\@2.0.1

## 0.6.10

### Patch Changes

* Updated dependencies \[6695af2]
* Updated dependencies \[1ebd4e2]
  * @turnkey/sdk-browser\@1.12.0
  * @turnkey/sdk-server\@2.0.0
  * @turnkey/http\@2.18.0

## 0.6.9

### Patch Changes

* Updated dependencies \[053fbfb]
  * @turnkey/sdk-browser\@1.11.2
  * @turnkey/sdk-server\@1.7.3
  * @turnkey/http\@2.17.3

## 0.6.8

### Patch Changes

* Updated dependencies \[328d6aa]
* Updated dependencies \[b90947e]
* Updated dependencies \[2d5977b]
* Updated dependencies \[fad7c37]
  * @turnkey/sdk-browser\@1.11.1
  * @turnkey/sdk-server\@1.7.2
  * @turnkey/api-key-stamper\@0.4.4
  * @turnkey/http\@2.17.2

## 0.6.7

### Patch Changes

* Updated dependencies \[7988bc1]
* Updated dependencies \[538d4fc]
* Updated dependencies \[12d5aaa]
  * @turnkey/sdk-browser\@1.11.0
  * @turnkey/sdk-server\@1.7.1
  * @turnkey/http\@2.17.1

## 0.6.6

### Patch Changes

* @turnkey/sdk-browser\@1.10.2

## 0.6.5

### Patch Changes

* Updated dependencies \[78bc39c]
  * @turnkey/sdk-server\@1.7.0
  * @turnkey/http\@2.17.0
  * @turnkey/sdk-browser\@1.10.1

## 0.6.4

### Patch Changes

* Updated dependencies \[8bea78f]
  * @turnkey/sdk-browser\@1.10.0

## 0.6.3

### Patch Changes

* Updated dependencies \[3dd74ac]
* Updated dependencies \[1e36edf]
* Updated dependencies \[4df8914]
* Updated dependencies \[11a9e2f]
  * @turnkey/sdk-browser\@1.9.0
  * @turnkey/sdk-server\@1.6.0
  * @turnkey/http\@2.16.0

## 0.6.2

### Patch Changes

* Updated dependencies \[9ebd062]
  * @turnkey/sdk-browser\@1.8.0
  * @turnkey/sdk-server\@1.5.0
  * @turnkey/http\@2.15.0

## 0.6.1

### Patch Changes

* Updated dependencies \[abe7138]
* Updated dependencies \[96d7f99]
  * @turnkey/sdk-server\@1.4.2
  * @turnkey/sdk-browser\@1.7.1
  * @turnkey/http\@2.14.2
  * @turnkey/api-key-stamper\@0.4.3

## 0.6.0

### Minor Changes

* 2bb9ea0: Add synchronous createAccount variant (thank you @mshrieve)

  * Closes [https://github.com/tkhq/sdk/issues/349](https://github.com/tkhq/sdk/issues/349)
  * Originally attributed to [https://github.com/tkhq/sdk/pull/348](https://github.com/tkhq/sdk/pull/348)
  * Upshot: no change required if your setup was working. However, if you would like a synchronous option for creating a Viem account, now you may do so with `createAccountWithAddress`

### Patch Changes

* Updated dependencies \[ff059d5]
* Updated dependencies \[ff059d5]
  * @turnkey/sdk-browser\@1.7.0
  * @turnkey/sdk-server\@1.4.1
  * @turnkey/http\@2.14.1
  * @turnkey/api-key-stamper\@0.4.2

## 0.5.0

### Minor Changes

* 848f8d3: Support awaiting consensus and improve error handling

  * Add new error types that extend `BaseError` (and thus implement `error.walk`)
    * `TurnkeyConsensusNeededError` wraps consensus-related errors
    * `TurnkeyActivityError` wraps base Turnkey errors
  * Add a few new helper functions:
    * `serializeSignature` serializes a raw signature
    * `isTurnkeyActivityConsensusNeededError` and `isTurnkeyActivityError` use `error.walk` to check the type of a Viem error

### Patch Changes

* Updated dependencies \[c988ed0]
* Updated dependencies \[848f8d3]
  * @turnkey/sdk-browser\@1.6.0
  * @turnkey/sdk-server\@1.4.0
  * @turnkey/http\@2.14.0

## 0.4.31

### Patch Changes

* Updated dependencies \[1813ed5]
  * @turnkey/sdk-browser\@1.5.0

## 0.4.30

### Patch Changes

* Updated dependencies \[bab5393]
* Updated dependencies \[a16073c]
* Updated dependencies \[7e7d209]
  * @turnkey/sdk-browser\@1.4.0

## 0.4.29

### Patch Changes

* Updated dependencies \[93dee46]
  * @turnkey/http\@2.13.0
  * @turnkey/sdk-browser\@1.3.0
  * @turnkey/sdk-server\@1.3.0

## 0.4.28

### Patch Changes

* Updated dependencies \[e2f2e0b]
  * @turnkey/sdk-browser\@1.2.4
  * @turnkey/sdk-server\@1.2.4
  * @turnkey/http\@2.12.3

## 0.4.27

### Patch Changes

* Updated dependencies
  * @turnkey/sdk-browser\@1.2.3
  * @turnkey/sdk-server\@1.2.3

## 0.4.26

### Patch Changes

* Updated dependencies \[2d7e5a9]
* Updated dependencies \[f4b607f]
  * @turnkey/api-key-stamper\@0.4.1
  * @turnkey/http\@2.12.2
  * @turnkey/sdk-browser\@1.2.2
  * @turnkey/sdk-server\@1.2.2

## 0.4.25

### Patch Changes

* Updated dependencies \[f17a229]
  * @turnkey/http\@2.12.1
  * @turnkey/sdk-browser\@1.2.1
  * @turnkey/sdk-server\@1.2.1

## 0.4.24

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.12.0
  * @turnkey/sdk-browser\@1.2.0
  * @turnkey/sdk-server\@1.2.0

## 0.4.23

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.11.0
  * @turnkey/sdk-browser\@1.1.0
  * @turnkey/sdk-server\@1.1.0

## 0.4.22

### Patch Changes

* Updated dependencies
  * @turnkey/sdk-browser\@1.0.0
  * @turnkey/sdk-server\@1.0.0

## 0.4.21

### Patch Changes

* @turnkey/sdk-browser\@0.4.1

## 0.4.20

### Patch Changes

* d59e1b6: Add export of turnkey viem account functions
* Updated dependencies \[e4b29da]
  * @turnkey/sdk-browser\@0.4.0

## 0.4.19

### Patch Changes

* Updated dependencies \[d409d81]
  * @turnkey/sdk-browser\@0.3.0

## 0.4.18

### Patch Changes

* @turnkey/sdk-browser\@0.2.1

## 0.4.17

### Patch Changes

* Updated dependencies
* Updated dependencies \[e4d2a84]
  * @turnkey/sdk-browser\@0.2.0
  * @turnkey/sdk-server\@0.2.0

## 0.4.16

### Patch Changes

* Updated dependencies
  * @turnkey/sdk-browser\@0.1.0
  * @turnkey/sdk-server\@0.1.0

## 0.4.15

### Patch Changes

* a6502e6: Add support for new Turnkey Client types

## 0.4.14

### Patch Changes

* Updated dependencies \[7a9ce7a]
  * @turnkey/http\@2.10.0

## 0.4.13

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.9.1

## 0.4.12

### Patch Changes

* Updated dependencies \[83b62b5]
  * @turnkey/http\@2.9.0

## 0.4.11

### Patch Changes

* Updated dependencies \[46a7d90]
  * @turnkey/http\@2.8.0

## 0.4.10

### Patch Changes

* Updated dependencies
  * @turnkey/http\@2.7.1

## 0.4.9

### Patch Changes

* Updated dependencies (\[c3b423b], \[d73725b])
  * @turnkey/api-key-stamper\@0.4.0
  * @turnkey/http\@2.7.0

## 0.4.8

### Patch Changes

* 4794c64: Updated dependencies

## 0.4.7

### Patch Changes

* Updated dependencies \[f9d636c]
  * @turnkey/http\@2.6.2

## 0.4.6

### Patch Changes

* Updated dependencies \[52e2389]
  * @turnkey/http\@2.6.1

## 0.4.5

### Patch Changes

* Updated dependencies \[7a3c890]
  * @turnkey/http\@2.6.0

## 0.4.4

### Patch Changes

* Upgrade to Node v18 (#184)
* Updated dependencies
  * @turnkey/api-key-stamper\@0.3.1
  * @turnkey/http\@2.5.1

## 0.4.3

### Patch Changes

* Updated dependencies \[464ac0e]
  * @turnkey/http\@2.5.0

## 0.4.2

### Patch Changes

* @turnkey/http\@2.4.2

## 0.4.1

### Patch Changes

* Updated dependencies \[f87ced8]
  * @turnkey/http\@2.4.1

## 0.4.0

### Minor Changes

* Use rollup to build ESM and CommonJS, fix ESM support (#174)

### Patch Changes

* Updated dependencies \[fc5b291]
  * @turnkey/api-key-stamper\@0.3.0
  * @turnkey/http\@2.4.0

## 0.3.4

### Patch Changes

* Updated dependencies
  * @turnkey/api-key-stamper\@0.2.0
  * @turnkey/http\@2.3.1

## 0.3.3

### Patch Changes

* Updated dependencies \[f1bd68a]
  * @turnkey/http\@2.3.0

## 0.3.2

### Patch Changes

* Updated dependencies \[ed50a0f]
* Updated dependencies
  * @turnkey/http\@2.2.0

## 0.3.0

### Minor Changes

* cf8631a: Update interface to support `signWith`

This change supports signing with wallet account addresses, private key addresses, or private key IDs. See below for an example:

```js
const httpClient = new TurnkeyClient(
  {
    baseUrl: "https://api.turnkey.com",
  },
  // This uses API key credentials.
  // If you're using passkeys, use `@turnkey/webauthn-stamper` to collect webauthn signatures:
  // new WebauthnStamper({...options...})
  new ApiKeyStamper({
    apiPublicKey: "...",
    apiPrivateKey: "...",
  }),
);

// Create the Viem custom account
const turnkeyAccount = await createAccount({
  client: httpClient,
  organizationId: "...",
  signWith: "...",
  // optional; will be fetched from Turnkey if not provided
  ethereumAddress: "...",
});
```

## 0.2.7

### Patch Changes

* Updated dependencies \[bb6ea0b]
  * @turnkey/http\@2.1.0

## 0.2.6

### Patch Changes

* 59dcd2f: Unpin typescript
* da7c960: Bump Viem dependency to fix `getAddresses()` for LocalAccount
* Updated dependencies
  * @turnkey/http\@2.0.0
* Updated the shape of signing

## 0.2.5

### Patch Changes

* Updated dependencies
  * @turnkey/http\@1.3.0

## 0.2.4

### Patch Changes

* 0ec2d94: Addresses a bug when signing raw messages (see [https://github.com/tkhq/sdk/issues/116](https://github.com/tkhq/sdk/issues/116))

## 0.2.3

### Patch Changes

* Updated dependencies
  * @turnkey/http\@1.2.0

## 0.2.2

### Patch Changes

* Updated dependencies
  * @turnkey/api-key-stamper\@0.1.1
  * @turnkey/http\@1.1.1

## 0.2.1

### Patch Changes

* Fix code sample in the readme; add more details and links

## 0.2.0

### Minor Changes

* Add new `createAccount` method and deprecates the existing `createApiAccount`. `createAccount` offers a superset of functionality and works with stampers (`@turnkey/api-key-stamper` / `@turnkey/webauthn-stamper`) to integrate with API keys or passkeys.

### Patch Changes

* Updated dependencies: @turnkey/http\@1.1.0
* New dependency: @turnkey/api-key-stamper\@0.1.0

## 0.1.1

### Patch Changes

* readme updates

## 0.1.0

Initial release!


# Wallet Stamper
Source: https://docs.turnkey.com/changelogs/wallet-stamper/readme



# @turnkey/wallet-stamper

## 1.0.5

### Patch Changes

* Updated dependencies \[[`878e039`](https://github.com/tkhq/sdk/commit/878e03973856cfec83e6e3fda5b76d1b64943628)]:
  * @turnkey/crypto\@2.4.1

## 1.0.4

### Patch Changes

* [#659](https://github.com/tkhq/sdk/pull/659) [`5afbe51`](https://github.com/tkhq/sdk/commit/5afbe51949bdd1997fad083a4c1e4272ff7409dc) Author [@turnekybc](https://github.com/turnekybc) - export types and models from @turnkey/sdk-browser

* Updated dependencies \[[`40c4035`](https://github.com/tkhq/sdk/commit/40c40359ec7096d0bca39ffc93e89361b3b11a1a), [`10ee5c5`](https://github.com/tkhq/sdk/commit/10ee5c524b477ce998e4fc635152cd101ae5a9cc)]:
  * @turnkey/encoding\@0.5.0
  * @turnkey/crypto\@2.4.0

## 1.0.3

### Patch Changes

* Updated dependencies \[2bc0046]
  * @turnkey/crypto\@2.3.1

## 1.0.2

### Patch Changes

* c895c8f: Update @solana/web3.js from ^1.88.1 to ^1.95.8
  * @turnkey/crypto\@2.3.0

## 1.0.1

### Patch Changes

* Updated dependencies \[668edfa]
  * @turnkey/crypto\@2.3.0

## 1.0.0

### Major Changes

* Renamed `recoverPublicKey` to `getPublicKey` on the `EthereumWallet` interface to improve clarity and consistency across wallet interfaces

* Changed `getPublicKey` method signature to take no parameters

  ```typescript
  // Old method signature
  recoverPublicKey(message: string): Promise<string>;
  ```

  ```typescript
  // New method signature
  getPublicKey(): Promise<string>;
  ```

* Added an `EthereumWallet` implementation as a helper to simplify support for Ethereum wallets:

  ```typescript
  import { EthereumWallet } from "@turnkey/wallet-stamper";

  const wallet = new EthereumWallet();

  // Instantiate the WalletStamper with the EthereumWallet
  const walletStamper = new WalletStamper(wallet);

  // Instantiate the TurnkeyClient with the WalletStamper
  const client = new TurnkeyClient({ baseUrl: BASE_URL }, walletStamper);
  ```

### Patch Changes

* Updated dependencies \[8bea78f]
* @turnkey/crypto\@2.2.0

## 0.0.5

### Patch Changes

* Updated dependencies \[e5c4fe9]
* @turnkey/encoding\@0.4.0

## 0.0.4

### Patch Changes

* Updated dependencies \[93666ff]
* @turnkey/encoding\@0.3.0

## 0.0.3

### Patch Changes

* Updated dependencies \[2d7e5a9]
* Updated dependencies \[f4b607f]
* @turnkey/encoding\@0.2.1

## 0.0.2

### Patch Changes

* 68a14dd: Initial release! 🎉


# Webauthn Stamper
Source: https://docs.turnkey.com/changelogs/webauthn-stamper/readme



# @turnkey/webauthn-stamper

## 0.5.1

### Patch Changes

* [#659](https://github.com/tkhq/sdk/pull/659) [`5afbe51`](https://github.com/tkhq/sdk/commit/5afbe51949bdd1997fad083a4c1e4272ff7409dc) Author [@turnekybc](https://github.com/turnekybc) - export types and models from @turnkey/sdk-browser

## 0.5.0

### Minor Changes

* Remove dependency on `noble/hashes` and `Buffer` in favor of a minimal sha256 lib
* Introduce `@turnkey/encoding` to consolidate utility functions

## 0.4.3

### Patch Changes

* Upgrade to Node v18 (#184)

## 0.4.2

### Patch Changes

* Make sha256 computation synchronous to resolve ios passkey prompt issues (#179)

## 0.4.1

### Patch Changes

* Fix universal files to stop using `require`. Use ES6 imports instead (#178)

## 0.4.0

### Minor Changes

* Use rollup to build ESM and CommonJS, fix ESM support (#174)

## 0.3.0

### Minor Changes

* Add support for ESM (#154)

## 0.2.0

### Minor Changes

* Adds Buffer polyfill for environments where it is not globally available ([https://github.com/tkhq/sdk/pull/125](https://github.com/tkhq/sdk/pull/125))

## 0.1.0

Initial release


# Organizations
Source: https://docs.turnkey.com/concepts/organizations

An organization is a logical grouping of resources (e.g. users, policies, wallets). These resources can only be accessed by authorized and permissioned users within the organization. Resources are not shared between organizations.

## Root quorum

All organizations are controlled by a [Root Quorum](/concepts/users/root-quorum) which contains the root users and the required threshold of approvals to take any action. Only the root quorum can update the root quorum or feature set.

## Features

Organization features are Turnkey product offerings that organizations can opt-in to or opt-out of. Note that these features can be set and updated using the activities `ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE` and `ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE`. The following is a list of such features:

| Name                             | Description                                   | Default  | Notes                                                                                                                                                                                                                                                                      |
| -------------------------------- | --------------------------------------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| FEATURE\_NAME\_EMAIL\_AUTH       | Enables email authentication activities       | Enabled  | Can only be initiated by a parent organization for a sub-organization.                                                                                                                                                                                                     |
| FEATURE\_NAME\_EMAIL\_RECOVERY   | Enables email recovery activities             | Enabled  | Can only be initiated by a parent organization for a sub-organization.                                                                                                                                                                                                     |
| FEATURE\_NAME\_WEBAUTHN\_ORIGINS | The origin Webauthn credentials are scoped to | Disabled | Parent organization feature applies to all sub-organizations. If not enabled, sub-organizations default to allowing all origins: "\*". For Passkey WaaS, we highly recommend enabling this feature. Example value: "[https://www.turnkey.com"](https://www.turnkey.com%22) |
| FEATURE\_NAME\_WEBHOOK           | A URL to receive activity notification events | Disabled | Example value: "[https://your.service.com/webhook"](https://your.service.com/webhook%22)                                                                                                                                                                                   |

## Permissions

All activity requests are subject to enforcement by Turnkey's policy engine. The policy engine determines if a request is allowed by checking the following:

* Does this request violate our feature set?
  * Email recovery cannot be initiated if disabled
  * Email auth cannot be initiated if disabled
* Should this request be denied by default?
  * All import requests must target your own user
* Does this request meet the root quorum threshold?
* What is the outcome of evaluating this request against all organization policies? Outcomes include:
  * `OUTCOME_ALLOW`: the request is allowed to process
  * `OUTCOME_REQUIRES_CONSENSUS`: the request needs additional approvals
  * `OUTCOME_REJECTED`: the request should be rejected
  * `OUTCOME_DENY_EXPLICIT`: the request has been explicitly denied via policies
  * `OUTCOME_DENY_IMPLICIT`: the request has been implicitly denied as no policies grant the required permissions
* Should this request be allowed by default?
  * Users can manage their own credentials unless policies explicitly deny this

## Resource limits

Organizations have [resource limits](/concepts/resource-limits) for performance and security considerations. If you're bumping into these limits, check out sub-organizations below.

## Sub-organizations

A sub-organization is an isolated organization that has a pointer to a parent organization. The parent organization has **read** access to all sub-organizations, but no **write** access. This means users within the parent organization have no ability to use wallets or alter any resources in the sub-organization.

For more information on sub-organizations and common use cases for this functionality, follow along in the next section <Icon icon="square-right" iconType="solid" />.


# Overview
Source: https://docs.turnkey.com/concepts/overview

Turnkey is flexible, scalable, and secure wallet infrastructure that can be used for transaction automation (e.g., payments flows, smart contract management), or non-custodial embedded wallets. Turnkey offers low-level primitives that can be combined to accomplish a variety of goals.

Turnkey’s security and flexibility enables you to build cutting-edge user experiences, whether you’re using our bare-bones API or pre-built UI components. To make the most out of your implementation, we recommend reading through the following Concepts page for a better understanding of how our products work, and how to best utilize all of Turnkey’s features.

### How Turnkey works

At the core of Turnkey is an important concept: instead of directly managing private keys, wallets are accessed through authenticators like passkeys, social logins, or API keys:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/concepts/all_concepts.png" alt="all concepts screenshot" />
</Frame>

* **Organizations (parent orgs)** in Turnkey are top-level entities that contain users, wallets, and policies for a business, with the initial “parent organization” typically representing an entire Turnkey-powered application.
* Parent organizations can create **sub-organizations (sub-orgs)**, which are fully segregated organizations nested under the parent organization. Parent orgs cannot modify the contents of a sub-org, and sub-orgs and typically represent an end user.
* Both parent organizations and sub-organizations contain a set of **resources and authenticators** that you can configure, including their own users, wallets, API keys, private keys, and policies.
* **Activities** (like signing transactions or creating users) are governed by **policies** created via Turnkey’s policy engine, though root users can bypass the policy engine when meeting root quorum requirements.
* **Wallets** in Turnkey are HD seed phrases that can generate multiple wallet accounts (addresses) for signing operations.

### Managing Turnkey interactions and organizations

There are two primary ways for users to interact with Turnkey — via the Turnkey Dashboard, and by submitting activity requests via our public API.

The Turnkey Dashboard, which is where you’ll first create your Turnkey parent organization, is where root users of your parent organization will typically manage administrative activities. It supports passkey authentication only.

On the other hand, interactions with Turnkey at scale (primarily, interactions initiated by end users) can be done via programmatically calling the Turnkey public API and submitting activity requests, with a variety of authentication methods supported.

## Concepts dictionary

For more details on individual concepts, feel free to explore our concept-specific documentation (also accessible through the left navbar).

### Organizations

An organization is a logical grouping of resources like users, policies, and wallets. There are two types of organizations:

| Organization type   | Description|
| :------------------ ||
| Parent Organization | When you first setup your implementation of Turnkey by signing up on the dashboard you create a parent organization controlled by your business. In most implementations, a top-level organization represents an entire Turnkey-powered implementation. For more information on Turnkey parent organizations [look here](/concepts/organizations).                                                                                                                                                                                                                                                                                                                                 |
| Sub-Organization    | A fully segregated organization nested under the parent organization. Parent organizations have read access to all their sub-organizations, but do not have write access. Each sub-organization typically maps to an individual end user in a Turnkey-powered application. Parent organizations can initiate limited actions for sub-organizations that then must be completed by the sub-organization, or without the need for completion by the sub-organization (e.g. `INIT_OTP_AUTH` or `INIT_USER_EMAIL_RECOVERY` require completion by sub-organization, `EMAIL_AUTH` does not). For more information on Turnkey sub-organizations [look here](/concepts/sub-organizations). |

### Users

Turnkey users are resources within organizations or sub-organizations that can submit activities to Turnkey via a valid credential (e.g., API key, passkey). These requests can be made either by making direct API calls or through the Turnkey Dashboard. Users must be set up to authenticate to Turnkey with credentials (API keys, passkeys), or via other authentication methods such as OAuth, or email auth, with upper limits on credentials defined here in our [resource limits](/concepts/resource-limits). Users can also have associated “tags” which are logical groupings that can be referenced in policies. Users can only submit activities within their given organization — they cannot take action across organizations.

There are two main types of users:

| User type    | Description|
| :----------- ||
| Root Users   | The first user(s) created in an organization will have root permissions, meaning they can bypass the policy engine to take any action within that specific organization. This ability can be limited via root quorum, which requires a threshold of root users to access root permissions. For example, if there are five root users and the threshold is three, at least three users must approve an activity for the root quorum threshold to be reached. When you first create a Turnkey organization, your user is automatically created as the sole member of the root quorum by default. |
| Normal Users | Other than managing their own credentials, non-root users have no permissions unless explicitly granted by [policies](/concepts/policies/overview). By combining non-root users with policies granting permission for specific actions, you can build support for experiences providing [delegated access](/concepts/policies/delegated-access) to business controlled service account.                                                                                                                                                                                                        |

In parent organizations, a user often maps to an individual from your team with administrative privileges and responsibilities. In sub-organizations, which are often used to manage an end user's resources, a user can represent an end user and their credentials. If there is only one user representing the end user with only end-user controlled credentials then this would be more akin to a standard non-custodial setup. However, this flexible primitive can often represent other aspects of your backend or application. For example, a Turnkey user might map to a:

* Backend service used to automate certain transactions
* Service with delegated access to take action on behalf of an end user
* Required co-signer for all end user transactions

For more information on Turnkey users [look here](/concepts/users/introduction).

### Credentials

Interacting with the Turnkey API requires each API call to be authenticated by cryptographically stamping it with a credential. This process is abstracted away in our SDKs and ensures that the request cannot be tampered with as it travels to the secure enclave. Credentials include API keys and passkeys / Webauthn devices for all Users, while sub-organization users can also use email or OAuth to authenticate. Email and OAuth leverage API keys under the hood.

For more information on Turnkey user credentials [look here](/concepts/users/credentials).

### Activities

Activities are specific actions taken by users, such as signing a transaction, adding a new user, or creating a sub-organization. Activity requests are always evaluated through our policy engine, and can evaluate to ALLOW, DENY, or REQUIRES\_CONSENSUS (i.e., requires additional approvals before being allowed).

For more information on Turnkey activities [look here](/developer-reference/api-overview/submissions).

### Policies

Policies, enforced by Turnkey’s policy engine, grant users permissions to perform activities. These policies are a series of logical statements (e.g., User ID == 123 or ETH address == 0x543…9b34) that evaluate to either “ALLOW” or “DENY.” Through these policies you can set granular controls on which users can take which actions with which wallets. Policies can also require multi-party approval / consensus, meaning a threshold of certain users will be required to approve the activity. As mentioned above, the root quorum will bypass the policy engine.

For more information on Turnkey policies [look here](/concepts/policies/overview).

### Wallets and private keys

Resources used to generate crypto addresses and sign transactions or messages. We currently support secp256k1 and ed25519 curves and have two main types:

| Resource type       | Description|
| :------------------ ||
| Wallets (preferred) | A hierarchical deterministic (HD) wallet, which is a collection of cryptographic key pairs derived from a common seed phrase. A wallet (i.e., a single seed phrase) can have many wallet accounts (i.e., a set of derived addresses). Wallets support various cryptographic curves and can be represented by a checksummed mnemonic phrase, making them easier to back up and recover. We limit each organization to 100 Wallets, but there is no limit on the total number of wallet accounts. For more information on Turnkey HD wallets [look here](/concepts/wallets). |
| Private Keys        | Raw private keys represented by an alphanumeric string. We limit each organization to 1,000 private keys, therefore we recommend using wallets instead of private keys for better scalability.                                                                                                                                                                                                                                                                                                                                                                             |

Learn more about leveraging Wallets across different crypto ecosystems on our [Ecosystem Support](/networks/framework) page.

<CardGroup>
  <Card title="Overview" href="/concepts/overview" icon="file-lines" iconType="solid" horizontal>
    Understand Turnkey's core features and fundamentals.
  </Card>

  {" "}

  <Card title="Organizations" href="/concepts/organizations" icon="file-lines" iconType="solid" horizontal>
    Learn about Organizations on Turnkey
  </Card>

  <Card title="Sub-Organizations" href="/concepts/sub-organizations" icon="file-lines" iconType="solid" horizontal>
    Learn about sub-organizations on Turnkey
  </Card>

  {" "}

  <Card title="Users" href="/concepts/users/introduction" icon="folder" iconType="solid" horizontal>
    3 items
  </Card>

  {" "}

  <Card title="Wallets" href="/concepts/wallets" icon="file-lines" iconType="solid" horizontal>
    Learn about Wallets on Turnkey
  </Card>

  {" "}

  <Card title="Resource Limits" href="/concepts/resource-limits" icon="file-lines" iconType="solid" horizontal>
    Organization resource limits
  </Card>

  <Card title="Policies" href="/concepts/policies/overview" icon="folder" iconType="solid" horizontal>
    5 items
  </Card>
</CardGroup>


# Delegated Access
Source: https://docs.turnkey.com/concepts/policies/delegated-access

With Turnkey you can create multi-user accounts with flexible co-ownership controls. This primitive enables you to establish delegated access to a user’s wallet, reducing or removing the need for them to manually approve each action. You can provide a smoother user experience while ensuring that end-users maintain full control over their wallets.

## Overview

Delegated access works by creating a specialized business-controlled user within each end-user’s sub-organization that has carefully scoped permissions to perform only specific actions, such as signing transactions to designated addresses. This can enable your backend to do things like:

* Automate common transactions (e.g., staking, redemptions)
* Sign transactions to whitelisted addresses without user involvement
* Perform scheduled operations
* Respond to specific onchain events programmatically

## Implementation flow

Here’s how to implement delegated access for an embedded wallet setup:

* Create a sub-organization with two root users: The end user and your “Delegated User” with an API key authenticator that you control
* Enable the Delegated Account to take particular actions by setting policies explicitly allowing those specific actions
* Update the root quorum to ensure only the end-user retains root privileges

A simple example demonstrating the delegated acess setup can be found [here](https://github.com/tkhq/sdk/tree/main/examples/delegated-access).

## Step-by-step implementation

### Step 1: Create a sub-organization with two root users[​](#step-1-create-a-sub-organization-with-two-root-users)

* Create your sub-organization with the two root users being:
  * The end-user
  * A user you control (we'll call it the ‘Delegated Account’)

```json
{
  "type": "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V7",
  "timestampMs": "<time-in-ms>",
  "organizationId": "your-organization-id",
  "parameters": {
    "subOrganizationName": "<sub-org-name>",
    "rootUsers": [
      {
        "userName": "<end-user-name>",
        "userEmail": "enduser@example.com",
        "authenticators": [
          {
            "authenticatorName": "<passkey-name>",
            "challenge": "<webauthn-challenge>",
            "attestation": {
              "credentialId": "<credential-id>",
              "clientDataJson": "<client-data-json>",
              "attestationObject": "<attestation-object>",
              "transports": ["AUTHENTICATOR_TRANSPORT_HYBRID"]
            }
          }
        ],
        "apiKeys": [],
      "oidcProviders": []
      },
      {
        "userName": "Delegated Account",
        "userEmail": "<email>(optional)",
        "authenticators": [],
        "apiKeys": [
          {
            "apiKeyName": "<delegated-account-api-key-name>",
            "publicKey": "<delegated-account-api-public-key>"
          }
        ],
      "oidcProviders": []
      }
    ],
    "rootQuorumThreshold": 1,
    "wallet": {
      "walletName": "Default ETH Wallet",
      "accounts": [
        {
          "curve": "CURVE_SECP256K1",
          "pathFormat": "PATH_FORMAT_BIP32",
          "path": "m/44'/60'/0'/0/0",
          "addressFormat": "ADDRESS_FORMAT_ETHEREUM"
        }
      ]
    }
  }
}
```

### Step 2: Limit the permissions of the Delegated Account user via policies

* Create a custom policy granting the Delegated Account specific permissions. You might grant that user permissions to:
  * Sign any transaction
  * Sign only transactions to a specific address
  * Create new users in the sub-org
  * Or any other activity you want to be able to take using your Delegated Account

Here’s one example, granting the Delegated Account only the permission to sign ethereum transactions to a specific receiver address:

```json
{
  "type": "ACTIVITY_TYPE_CREATE_POLICY",
  "timestampMs": "<time-in-ms>",
  "organizationId": "sub-organization-id",
  "parameters": {
    "policyName": "Allow Delegated Account to sign transactions to specific address",
    "policy": {
      "effect": "EFFECT_ALLOW",
      "consensus": "approvers.any(user, user.id == <DELEGATED_ACCOUNT_USER_ID>)",
      "condition": "eth.tx.to == <RECIPIENT_ADDRESS>"
    },
  }
}
```

### Step 3: Remove the Delegated Account from the root quorum using the Delegated Account's credentials:

```json
// Update the root quorum of the sub organization to ONLY include the end user, removing the delegated access user
{
  "type": "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM",
  "timestampMs": "<time-in-ms>",
  "organizationId": "<sub-organization-id>",
  "parameters": {
    "threshold": 1,
    "userIds": [
      "<end-user-id>" 
    ]
  }
}
```

After completing these steps, the sub-organization will have two users: the end-user (the only root-user) and the Delegated Account user, which only has the permissions granted earlier via policies and no longer retains root user privileges.

## Delegated Access Code Example

Below is a code example outlining the implementation of the delegated access setup flow described above

```js
import { Turnkey } from "@turnkey/sdk-server";
import dotenv from "dotenv";

dotenv.config();

  // Initialize the Turnkey Server Client on the server-side
  const turnkeyServer = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPrivateKey: process.env.TURNKEY_API_PRIVATE_KEY,
    apiPublicKey: process.env.TURNKEY_API_PUBLIC_KEY,
    defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
  }).apiClient();


  // To create an API key programmatically check https://github.com/tkhq/sdk/blob/main/examples/kitchen-sink/src/sdk-server/createApiKey.ts
  const publicKey = "<delegated_api_public_key>";
  const curveType = "API_KEY_CURVE_P256"; // this is the default
  const apiKeys = [
    {
      apiKeyName: "Delegated - API Key",
      publicKey,
      curveType,
    },
  ];

  // STEP 1: Create a sub org with End User and Delegated access user in Root Quorum

  const subOrg = await turnkeyClient.createSubOrganization({
    organizationId: process.env.TURNKEY_ORGANIZATION_ID!,
    subOrganizationName: `Sub Org - With Delegated Access User`,
    rootUsers: [
      {
        userName: "Delegated Access User",
        apiKeys,
        authenticators: [],
        oauthProviders: []
      },
      {
          userName: "End User",
          userEmail: "<some-email>",
          apiKeys: [],
          authenticators: [],
          oauthProviders: []
      },
    ],
    rootQuorumThreshold: 1,
    wallet: {
      "walletName": "Default ETH Wallet",
      "accounts": [
        {
          "curve": "CURVE_SECP256K1",
          "pathFormat": "PATH_FORMAT_BIP32",
          "path": "m/44'/60'/0'/0/0",
          "addressFormat": "ADDRESS_FORMAT_ETHEREUM"
        }
      ]
    },
  });

  console.log("sub-org id:", subOrg.subOrganizationId);

  // Initializing the Turkey client used by the Delegated Access User
  // Notice the subOrganizationId created above 
  const turnkeyDelegatedAccessClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPrivateKey: process.env.DELEGATED_API_PRIVATE_KEY!,
    apiPublicKey: process.env.DELEGATED_API_PUBLIC_KEY!,
    defaultOrganizationId: subOrg.subOrganizationId,
  }).apiClient();

  // STEP 2: Create a policy allowing the Delegated access user to send Ethereum transactions to a particular address

  // Creating a policy for the Delegated account 
  const delegated_userid = subOrg.rootUserIds[0];
  const policyName = "Allow Delegated Account to sign transactions to specific address";
  const effect = "EFFECT_ALLOW";
  const consensus = `approvers.any(user, user.id == '${delegated_userid}')`;
  const condition = `eth.tx.to == '${process.env.RECIPIENT_ADDRESS}'`;
  const notes = "";

  const { policyId } = await turnkeyDelegated.createPolicy({
    policyName,
    condition,
    consensus,
    effect,
    notes,
  });

  // STEP 3: Update the root quorum to only include the End User, removing the Delegated Access user

  // Remove the Delegated Account from the root quorum
  const RootQuorum = await turnkeyDelegated.updateRootQuorum({
    threshold: 1,
    userIds: [subOrg.rootUserIds[1]], // retain the end user
  });
```

## Frequently Asked Questions

### Policy Design and Creation

<Accordion title="Can I create policies on behalf of a user without their explicit approval?">
  Yes — if the delegated access (DA) user is part of the root quorum, they can create policies unilaterally. Once removed from the root quorum, only the remaining quorum member (typically the end-user) can make further policy changes.

  Note that this is also possible even if the initating user, the delegate, is not a root user: a policy may exist that grants explicit permissions to non-root users to create policies.
</Accordion>

<Accordion title="When does the user 'approve' a delegated access setup?">
  End-user approval typically happens during **<u>intent</u>** creation — for example, when the end-user authorizes a DA user by adjusting the quorum or signs an initial setup transaction.
</Accordion>

<Accordion title="After a limit order is filled, how can I remove/null a policy programmatically?">
  As long as the DA user remains authorized, they can remove policies programmatically. If they’ve been removed from the quorum, policy deletion will require the user’s explicit approval.

  **<u>NOTE:</u>** Turnkey is looking to support the concept of 'one-time-use policies' to make it easier to manage redundany policies.
</Accordion>

### Security & Risk Management

<Accordion title="If a delegated API key is leaked, does that allow someone to act on behalf of the user?">
  Yes — if the key is attached to a broad policy. That’s why it’s important to limit the scope of policies and enforce API hygiene practices.
</Accordion>

<Accordion title="Is this the same risk as having a master delegate account?">
  In effect, yes. The key difference is that granular policies **can restrict** what a DA user can do, offering better security hygiene even if there's still elevated access.
</Accordion>

<Accordion title="What are best practices for storing and rotating Delegate Access API keys?">
  Typically this is a combination of, or all of the following practices, though not exclusive to just these:

  * Using short-lived keys whenever viable
  * Rotating API keys regurarly
  * Monitoring the usage
  * Secure storage (e.g. in HSMs or vaults)
</Accordion>

### Best Practices

<Accordion title="How do I scope a delegated access policy to reduce signing risk?">
  You can define strict transaction conditions. For example:

  ```javascript
  solana.tx.instructions.count() == 1 &&
  solana.tx.transfers.count() == 1 &&
  solana.tx.transfers.all(transfer, transfer.to == '<SPECIFIC_ADDRESS>')
  ```

  You can also consider the following:

  * Recipient address restrictions (ie allowlisting addresses)
  * Contract method selectors
  * Transaction structure invariants
  * Blockhash constraints (on Solana)
</Accordion>

<Accordion title="Can I dynamically add policies per limit order without user friction?">
  Yes — this is a common pattern. You can add a policy per order (limit, stop loss, TWAP, etc.) using the DA user, without requiring the end-user to sign for each one.
</Accordion>

<Accordion title="What are common implementation patterns among Turnkey clients using Delegated Access?">
  Turnkey's Policy Engine shines through its flexibility. There are many different approaches you can take based on your requirements, but various themes we see include:

  * Using **broad policies** with business-controlled API keys
  * Using \*\*fine-grained policies, \*\*scoped to predictable transaction shapes
  * Using delegated access to implement **limit orders, automation flows, or advanced trading logic** (e.g. perps, TWAPs)
  * Ensuring **strong operational security** (e.g. tight scoping & expiring keys) is increasingly common
</Accordion>

### EVM and SVM-Specific Strategies

<Accordion title="Are time-bound transactions supported?">
  Yes, on Solana via `solana.tx.recent_blockhash`, which restricts a transaction’s validity to a \~60–90 second window. Not ideal for delayed executions (e.g. limit orders), but useful for immediate, single-use actions.
</Accordion>

<Accordion title="For EVM transactions, can I enforce token-specific or contract-specific limits?">
  Yes, though it’s limited today. You can inspect calldata (e.g., using `eth.tx.data[...]`) and enforce conditions like:

  ```javascript
  eth.tx.to == '<TOKEN_CONTRACT>' &&
  eth.tx.data[0..4] == '<ERC20_FUNCTION_SELECTOR>'
  ```

  Granular support for calldata parsing and value limits is coming soon.
</Accordion>

<Accordion title="Is it safe to whitelist routers (e.g. Jupiter) in delegated access policies?">
  Not entirely. Even if you allowlist the router, it could still be abused to swap all assets. You can’t control downstream behavior unless you control the contract.

  > **Suggestion:** Only allow DA keys to interact with contracts you fully trust or control. Limit scope as much as possible (e.g., to specific instructions, amounts, or recipients).
</Accordion>


# Policy examples
Source: https://docs.turnkey.com/concepts/policies/examples



## Access control

#### Allow a specific user to create wallets

```json
{
  "policyName": "Allow user <USER_ID> to create wallets",
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '<USER_ID>')",
  "condition": "activity.resource == 'WALLET' && activity.action == 'CREATE'"
}
```

#### Allow users with a specific tag to create users

```json
{
  "policyName": "Allow user_tag <USER_TAG_ID> to create users",
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.tags.contains('<USER_TAG_ID>'))",
  "condition": "activity.resource == 'USER' && activity.action == 'CREATE'"
}
```

#### Require two users with a specific tag to add policies

```json
{
  "policyName": "Require two users with user_tag <USER_TAG_ID> to create policies",
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.filter(user, user.tags.contains('<USER_TAG_ID>')).count() >= 2",
  "condition": "activity.resource == 'POLICY' && activity.action == 'CREATE'"
}
```

#### Deny all delete actions for users with a specific tag

```json
{
  "policyName": "Only user_tag <USER_TAG_ID> can take actions",
  "effect": "EFFECT_DENY",
  "consensus": "approvers.any(user, user.tags.contains('<USER_TAG_ID>'))",
  "condition": "activity.action == 'DELETE'"
}
```

#### Allow a specific user (e.g. API-only user) to create a sub-org

```json
{
  "policyName": "Allow user <USER_ID> to create a sub-org",
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '<YOUR_API_USER_ID>')",
  "condition": "activity.resource == 'ORGANIZATION' && activity.action == 'CREATE'"
}
```

#### Allow a specific user to perform auth type activities (full list [here](/concepts/policies/language#activity-breakdown))

Note: The `activity.resource` portion determines which activities can be performed. The `activity.action` determines what types of actions can be taken upon those resources.

```json
{
  "policyName": "Allow user <USER_ID> to initiate auth type activities",
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '<YOUR_API_USER_ID>')",
  "condition": "activity.resource == 'AUTH' && activity.action == 'CREATE'"
}
```

#### Allow a specific user to perform [generic OTP](/api-reference/activities/init-generic-otp) activities

```json
{
  "policyName": "Allow user <USER_ID> to initiate and verify generic OTP activities",
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '<YOUR_API_USER_ID>')",
  "condition": "activity.resource in ['AUTH', 'OTP'] && activity.action in ['CREATE','VERIFY']"
}
```

#### Allow a specific user to perform a specific activity type (full list [here](/concepts/policies/language#activity-breakdown))

Note: Activities may be upgraded over time, and thus new versions may be introduced.
These policies will NOT be valid if an activity type is upgraded and requests are made on the new activity type.
For example, if Turnkey introduces `ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V3` (upgraded from `ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2`)
and a request is made with the newer `V3` version, this policy with not allow that user to perform `ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V3` activities.

```json JSON
{
  "policyName": "Allow user <USER_ID> to perform create read write session v2",
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '<YOUR_API_USER_ID>')",
  "condition": "activity.type == 'ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION_V2'"
}
```

#### Allow a specific credential type to perform a specific action (full list of credential types [here](/authentication/credentials#credential-types))

This policy can be used to say, only passkeys are allowed to sign transactions and not authentication through SMS (or any other authentication method).

```json JSON
{
  "policyName": "Allow signing with only passkeys",
  "effect": "EFFECT_ALLOW",
  "consensus": "credentials.any(credential, credential.type == 'CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR')",
  "condition": "activity.type == 'ACTIVITY_TYPE_SIGN_TRANSACTION_V2'"
}
```

#### Allow a specific credential with a specific public key type to perform a specific action

```json JSON
{
  "policyName": "Allow signing with only passkeys",
  "effect": "EFFECT_ALLOW",
  "consensus": "credentials.any(credential, credential.public_key == '<YOUR_CREDENTIAL_PUBLIC_KEY>')",
  "condition": "activity.type == 'ACTIVITY_TYPE_SIGN_TRANSACTION_V2'"
}
```

## Signing control

#### Allow a specific user to sign transactions with any account address within a specific wallet

```JSON
{
  "policyName": "Allow <USER_ID> to sign transactions with <WALLET_ID>",
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '<USER_ID>')",
  "condition": "activity.action == 'SIGN' && wallet.id == '<WALLET_ID>'"
}
```

#### Allow a specific user to sign transactions with a specific wallet account address

```json
{
  "policyName": "Allow <USER_ID> to sign transactions with <WALLET_ACCOUNT_ADDRESS>",
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '<USER_ID>')",
  "condition": "activity.action == 'SIGN' && wallet_account.address == '<WALLET_ACCOUNT_ADDRESS>'"
}
```

#### Allow a specific user to sign transactions with a specific private key

```json
{
  "policyName": "Allow <USER_ID> to sign transactions with <PRIVATE_KEY_ID>",
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '<USER_ID>')",
  "condition": "activity.action == 'SIGN' && private_key.id == '<PRIVATE_KEY_ID>'"
}
```

### Ethereum (EVM)

Note: see the [language section](/concepts/policies/language#appendix) for more details.

#### Allow ERC-20 transfers for a specific token smart contract

```json
{
  "policyName": "Enable ERC-20 transfers for <CONTRACT_ADDRESS>",
  "effect": "EFFECT_ALLOW",
  "condition": "eth.tx.to == '<CONTRACT_ADDRESS>' && eth.tx.data[0..10] == '0xa9059cbb'"
}
```

#### Allow anyone to sign transactions for testnet (Sepolia)

```json
{
  "policyName": "Allow signing ethereum sepolia transactions",
  "effect": "EFFECT_ALLOW",
  "condition": "eth.tx.chain_id == 11155111"
}
```

#### Allow ETH transactions with a specific nonce range

```json
{
  "policyName": "Allow signing Ethereum transactions with an early nonce",
  "effect": "EFFECT_ALLOW",
  "condition": "eth.tx.nonce <= 3"
}
```

#### Allow signing of EIP-712 payloads for Hyperliquid `ApproveAgent` operations

```json
{
  "policyName": "Allow signing of EIP-712 Payloads for Hyperliquid `ApproveAgent` operations",
  "effect": "EFFECT_ALLOW",
  "condition": "eth.eip_712.domain.name == 'HyperliquidSignTransaction' && eth.eip_712.primary_type == 'HyperliquidTransaction:ApproveAgent' && activity.type == 'ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2'"
}
```

#### Allow signing of EIP-712 payloads for EIP-3009 Transfers

```json
{
  "policyName": "Allow signing of EIP-712 payloads for EIP-3009 Transfers for USD Coin",
  "effect": "EFFECT_ALLOW",
  "condition": "eth.eip_712.domain.name == 'USD Coin' && eth.eip_712.primary_type == 'TransferWithAuthorization' && activity.type == 'ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2'"
}
```

#### Allow signing of EIP-712 payloads for EIP-2612 Permits for USD Coin

```json
{
  "policyName": "Allow signing of EIP-712 payloads for EIP-2612 Permits for USD Coin",
  "effect": "EFFECT_ALLOW",
  "condition": "eth.eip_712.domain.name == 'USD Coin' && eth.eip_712.primary_type == 'Permit' && activity.type == 'ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2'"
}
```

### Solana

Note: see the [language section](/concepts/policies/language#appendix) for various approaches on writing Solana policies.

#### Allow Solana transactions that include a transfer from one specific sender

```json
{
  "policyName": "Enable transactions with a transfer sent by <SENDER_ADDRESS>",
  "effect": "EFFECT_ALLOW",
  "condition": "solana.tx.transfers.all(transfer, transfer.from == '<SENDER_ADDRESS>')"
}
```

#### Allow Solana transactions that include a transfer to only one specific recipient

```json
{
  "policyName": "Enable transactions with a single transfer sent to <RECIPIENT_ADDRESS>",
  "effect": "EFFECT_ALLOW",
  "condition": "solana.tx.transfers.count == 1 && solana.tx.transfers[0].to == '<RECIPIENT_ADDRESS>'"
}
```

#### Allow Solana transactions that have exactly one transfer, to one specific recipient

```json
{
  "policyName": "Enable transactions with a transfer sent to <RECIPIENT_ADDRESS>",
  "effect": "EFFECT_ALLOW",
  "condition": "solana.tx.transfers.all(transfer, transfer.to == '<RECIPIENT_ADDRESS>')"
}
```

#### Allow Solana transactions that only use the Solana System Program

```json
{
  "policyName": "Enable transactions that only use the system program",
  "effect": "EFFECT_ALLOW",
  "condition": "solana.tx.program_keys.all(p, p == '11111111111111111111111111111111')"
}
```

#### Deny all Solana transactions transferring to an undesired address

```json
{
  "policyName": "Reject transactions with a transfer sent to <BAD_ADDRESS>",
  "effect": "EFFECT_DENY",
  "condition": "solana.tx.transfers.any(transfer, transfer.to == '<BAD_ADDRESS>')"
}
```

#### Allow Solana transactions with specific expected instruction data

```json
{
  "policyName": "Enable transactions where the first instruction has precisely <HEX BYTES>",
  "effect": "EFFECT_ALLOW",
  "condition": "solana.tx.instructions[0].instruction_data_hex == '<HEX BYTES>'"
}
```

#### Allow Solana transactions whose first instruction involves a specific address

```json
{
  "policyName": "Enable transactions where the first instruction has a first account involving <ADDRESS>",
  "effect": "EFFECT_ALLOW",
  "condition": "solana.tx.instructions[0].accounts[0].account_key == '<ADDRESS>'"
}
```

#### Solana SPL token transfers -- Context and Examples

Turnkey’s policy engine supports policies for SPL token transfers. Specifically, we support creating policies for the `Transfer`, `TransferChecked` and `TransferCheckedWithFee` instructions across both the Solana Token Program and the Solana Token 2022 Program.

Some important context for using SPL token policies with Turnkey:

**Token Account Addresses** For context, Solana implements SPL token balances for a particular wallet address by creating a whole new account called a "token account" which has a pointer in its data field labeled "owner" that points back to the wallet address in question. So to hold a particular token in your Solana wallet, you have to have to create a new token account meant to hold that token, owned by your Solana wallet. For policies related to the receiving token address of an SPL transfer, the token address receiving the tokens will have to be used, NOT the wallet address that is the owner for the receiving token address. This is because, while both the owning wallet address and the receiving token address are specified in the transfer instruction, the owning wallet address of the recipient token address is not specified. For this we highly recommend using the convention of “associated token addresses” to set policies that, for example, allow SPL token transfers to a particular wallet address.

For further context on associated token addresses check out Solana’s documentation on it: [https://spl.solana.com/associated-token-account](https://spl.solana.com/associated-token-account)

<Note>
  An example implementation of using a policy to allow transfers to the
  associated token address of the intended recipient wallet address can be found
  in our SDK examples
  [here](https://github.com/tkhq/sdk/tree/main/examples/with-solana#6-running-the-create-spl-token-transfer-with-policy-example).
</Note>

**Mint Address Accessibility** The mint account address of the token will only be accessible when the transaction is constructed using instructions that specify the mint address – `TransferChecked` and `TransferCheckedWithFee`. For transactions constructed using the simple `Transfer` method, the mint account will be considered empty.

Here are some example policies for SPL transfers:

#### Allow a user to sign Solana transactions that include a single instruction which is an SPL token transfer from a particular sending token address

```json
{
  "policyName": "Allow user <USER_ID> to sign Solana transactions that include only a single SPL Transfer FROM <TOKEN_ADDRESS>",
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '<USER_ID>')",
  "condition": "solana.tx.instructions.count() == 1 && solana.tx.spl_transfers.count() == 1 && solana.tx.spl_transfers.all(transfer, transfer.from == '<TOKEN_ADDRESS>')"
}
```

#### Allow a user to sign Solana transactions only if ALL of the instructions are SPL transfers TO a particular token address

```json
{
  "policyName": "Allow user <USER_ID> to sign Solana transactions only if ALL of the instructions are SPL transfers TO <TOKEN_ADDRESS>",
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '<USER_ID>')",
  "condition": "solana.tx.instructions.count() == solana.tx.spl_transfers.count() && solana.tx.spl_transfers.all(transfer, transfer.to == '<TOKEN_ADDRESS>')"
}
```

#### Allow users with a specific tag to sign Solana transactions only if ALL of the instructions are SPL token transfers with a specific address as the owner of the sending token address

```json
{
  "policyName": "Allow users with <USER_TAG> to sign Solana transactions only if ALL of the instructions are SPL token transfers with <OWNER_ADDRESS> as the owner of the sending token address",
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.tags.contains('<USER_TAG_ID'))",
  "condition": "solana.tx.instructions.count() == solana.tx.spl_transfers.count() && solana.tx.spl_transfers.all(transfer, transfer.owner == '<OWNER_ADDRESS>')"
}
```

#### Allow a user to sign Solana transactions that include a single instruction which is an SPL token transfer where the atomic units of the transfer are less than a threshold amount

```json
{
  "policyName": "Allow user <USER_ID> to sign Solana transactions that include a single instruction which is an SPL token transfer where the atomic units of the transfer are less than <AMOUNT>",
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '<USER_ID>')",
  "condition": "solana.tx.instructions.count() == 1 && solana.tx.spl_transfers.count() == 1 && solana.tx.spl_transfers.all(transfer, transfer.amount < <AMOUNT>)"
}
```

#### Allow a user to sign Solana transactions only if ALL of the instructions are SPL token transfers where the token mint address is a particular address

```json
{
  "policyName": "Allow <USER_ID> to sign a Solana transaction only if ALL of the instructions are SPL token transfers where the token mint address is <TOKEN_MINT_ADDRESS>",
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '<USER_ID>')",
  "condition": "solana.tx.instructions.count() == solana.tx.spl_transfers.count() && solana.tx.spl_transfers.all(transfer, transfer.token_mint == '<TOKEN_MINT_ADDRESS>')"
}
```

#### Allow a user to sign Solana transactions that includes a single instruction which is an SPL token transfer where one of the multisig signers of the owner is a particular address

```json
{
  "policyName": "Allow <USER_ID> to sign a Solana transaction only if ALL of it's instructions are SPL token transfers where one of the multisig signers of the owner is <SIGNER_ADDRESS>",
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '<USER_ID>')",
  "condition": "solana.tx.instructions.count() == 1 && solana.tx.spl_transfers.count() == 1 && solana.tx.spl_transfers.all(transfer, transfer.signers.any(s, s == '<SIGNER_ADDRESS>'))"
}
```

### Tron

Note: see the [language section](/concepts/policies/language#appendix) for more details.

#### Allow Tether TRC-20 transfers on the Nile Testnet

This policy allows for all transfer calls on the Tether smart contract on the Nile testnet. The contract addresses on Nile testnet and Tron mainnet for Tether are different!

```json
{
  "policyName": "Enable Tether TRC-20 transfers on the Nile Testnet for the Tether contract address: "TXYZopYRdj2D9XRtbG411XZZ3kM5VkAeBf"",
  "effect": "EFFECT_ALLOW",
  "condition": "tron.tx.contract[0].contract_address == 'TXYZopYRdj2D9XRtbG411XZZ3kM5VkAeBf' && tron.tx.contract[0].data[0..8] == 'a9059cbb'"
}
```

#### Allow TRX transfers under 10,000,000 SUN (10 TRX)

The amount field is denoted in SUN, the lowest denomination of TRX.

```json
{
  "policyName": "Allow TRX transfers under 10 TRX",
  "effect": "EFFECT_ALLOW",
  "condition": "tron.tx.contract[0].amount < 10000000"
}
```

#### Allow all TransferContract transactions

This policy allows for any TRX Transfer

```json
{
  "policyName": "Allow all TRX transfers",
  "effect": "EFFECT_ALLOW",
  "condition": "tron.tx.contract[0].type == 'TransferContract'"
}
```


# Policy language
Source: https://docs.turnkey.com/concepts/policies/language

This page provides an overview of how to author policies using our policy language. To begin, we'll need to get familiar with the language's grammar, keywords, and types.

## Grammar

The grammar has been designed for flexibility and expressiveness. We currently support the following operations:

| Operation  | Operators                    | Example                      | Types                    |
| ---------- | ---------------------------- | ---------------------------- | ------------------------ |
| logical    | &&, \|\|                     | "true && false"              | (bool, bool) -> bool     |
| comparison | ==, !=, \<, >, \<=, >=       | "1 \< 2"                     | (int, int) -> bool       |
| comparison | ==, !=                       | "'a' != 'b'"                 | (string, string) -> bool |
| comparison | in                           | "1 in \[1, 2, 3]"            | (T, list\<T>) -> bool    |
| access     | x\[\<index>]                 | \[1,2,3]\[0]                 | (list\<T>) -> T          |
| access     | x\[\<index>]                 | "'abc'\[0]"                  | (string) -> string       |
| access     | x\[\<start>..\<end>]         | \[1,2,3]\[0..2]              | (list\<T>) -> (list\<T>) |
| access     | x\[\<start>..\<end>]         | "'abc'\[0..2]"               | (string) -> string       |
| access     | x.\<field>                   | "user.tags"                  | (struct) -> T            |
| function   | x.all(item, \<predicate>)    | "\[1,1,1].all(x, x == 1)"    | (list\<T>) -> bool       |
| function   | x.any(item, \<predicate>)    | "\[1,2,3].any(x, x == 1)"    | (list\<T>) -> bool       |
| function   | x.contains(\<value>)         | "\[1,2,3].contains(1)"       | (list\<T>) -> bool       |
| function   | x.count()                    | "\[1,2,3].count()"           | (list\<T>) -> int        |
| function   | x.filter(item, \<predicate>) | "\[1,2,3].filter(x, x == 1)" | (list\<T>) -> (list\<T>) |

## Keywords

Keywords are reserved words that are dynamically interchanged for real values at evaluation time. Each field supports a different set of keywords.

### Consensus

| Keyword         | Type              | Description                                           |
| --------------- | ----------------- | ----------------------------------------------------- |
| **approvers**   | list\<User>       | The users that have approved an activity              |
| **credentials** | list\<Credential> | The credentials that were used to approve an activity |

### Condition

| Keyword          | Type                | Description                                                  |
| ---------------- | ------------------- | ------------------------------------------------------------ |
| **activity**     | Activity            | The activity metadata of the request                         |
| **eth.tx**       | EthereumTransaction | The parsed Ethereum transaction payload (see Appendix below) |
| **eth.eip\_712** | Eip712TypedData     | EIP-712 Typed Data                      (see Appendix below) |
| **solana.tx**    | SolanaTransaction   | The parsed Solana transaction payload (see Appendix below)   |
| **tron.tx**      | TronTransaction     | The parsed Tron transaction payload (see Appendix below)     |
| **wallet**       | Wallet              | The target wallet used in sign requests                      |
| **private\_key** | PrivateKey          | The target private key used in sign requests                 |

## Types

The language is strongly typed which makes policies easy to author and maintain.

### Primitive

| Type         | Example                                 | Notes                                            |
| ------------ | --------------------------------------- | ------------------------------------------------ |
| **bool**     | true                                    |                                                  |
| **int**      | 256                                     | i128                                             |
| **uint**     | 170141183460469231731687303715884105728 | u256                                             |
| **string**   | 'a'                                     | only single quotes are supported                 |
| **list\<T>** | \[1, 2, 3]                              | a list of type T                                 |
| **struct**   | \{ id: 'abc' }                          | a key-value map of \{ field: T } (defined below) |

### Struct

| Struct                  | Field                        | Type                                    | Description                                                                                                                                                                                                                                                                                  |
| ----------------------- | ---------------------------- | --------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **User**                | id                           | string                                  | The identifier of the user                                                                                                                                                                                                                                                                   |
|                         | tags                         | list\<string>                           | The collection of tags for the user                                                                                                                                                                                                                                                          |
|                         | email                        | string                                  | The email address of the user                                                                                                                                                                                                                                                                |
|                         | alias                        | string                                  | The alias of the user                                                                                                                                                                                                                                                                        |
| **Credential**          | id                           | string                                  | The identifier of the API key or authenticator that was used to approve the request                                                                                                                                                                                                          |
|                         | user\_id                     | string                                  | The identifier of the user who owns this request and approved the request                                                                                                                                                                                                                    |
|                         | type                         | string                                  | The credential type, a full list can be found [here](/authentication/credentials#credential-types)                                                                                                                                                                                           |
|                         | credential\_id               | string                                  | The credential ID of a passkey. Note: this is only populated for passkeys (also known as Authenticators within Turnkey resources), not API keys                                                                                                                                              |
|                         | public\_key                  | string                                  | The public key of the credential that approved the request                                                                                                                                                                                                                                   |
| **Activity**            | type                         | string                                  | The type of the activity (e.g. ACTIVITY\_TYPE\_SIGN\_TRANSACTION\_V2)                                                                                                                                                                                                                        |
|                         | resource                     | string                                  | The resource type the activity targets: `USER`, `PRIVATE_KEY`, `POLICY`, `WALLET`, `ORGANIZATION`, `INVITATION`, `CREDENTIAL`, `CONFIG`, `RECOVERY`, `AUTH`, `OTP`, `PAYMENT_METHOD`, `SUBSCRIPTION`                                                                                         |
|                         | action                       | string                                  | The action of the activity: `CREATE`, `UPDATE`, `DELETE`, `SIGN`, `EXPORT`, `IMPORT`                                                                                                                                                                                                         |
| **Wallet**              | id                           | string                                  | The identifier of the wallet                                                                                                                                                                                                                                                                 |
|                         | imported                     | bool                                    | Boolean indicating whether or not this wallet has been imported                                                                                                                                                                                                                              |
|                         | exported                     | bool                                    | Boolean indicating whether or not this wallet has been exported                                                                                                                                                                                                                              |
|                         | label                        | string                                  | The label of this wallet                                                                                                                                                                                                                                                                     |
| **Wallet Account**      | address                      | string                                  | The wallet account address                                                                                                                                                                                                                                                                   |
| **PrivateKey**          | id                           | string                                  | The identifier of the private key                                                                                                                                                                                                                                                            |
|                         | tags                         | list\<string>                           | The collection of tags for the private key                                                                                                                                                                                                                                                   |
|                         | imported                     | bool                                    | Boolean indicating whether or not this private key has been imported                                                                                                                                                                                                                         |
|                         | exported                     | bool                                    | Boolean indicating whether or not this private key has been exported                                                                                                                                                                                                                         |
|                         | label                        | string                                  | The label of this private key                                                                                                                                                                                                                                                                |
| **EthereumTransaction** | from                         | string                                  | The sender address of the transaction                                                                                                                                                                                                                                                        |
|                         | to                           | string                                  | The receiver address of the transaction (can be an EOA or smart contract)                                                                                                                                                                                                                    |
|                         | data                         | string                                  | The arbitrary calldata of the transaction (hex-encoded)                                                                                                                                                                                                                                      |
|                         | value                        | int                                     | The amount being sent (in wei)                                                                                                                                                                                                                                                               |
|                         | gas                          | int                                     | The maximum allowed gas for the transaction                                                                                                                                                                                                                                                  |
|                         | gas\_price                   | int                                     | The price of gas for the transaction (Note: this field was used in legacy transactions and was replaced with max\_fee\_per\_gas in EIP 1559 transactions, however when evaluating policies on EIP 1559 transactions, this field will be populated with the same value as max\_fee\_per\_gas) |
|                         | chain\_id                    | int                                     | The chain identifier for the transaction                                                                                                                                                                                                                                                     |
|                         | nonce                        | int                                     | The nonce for the transaction                                                                                                                                                                                                                                                                |
|                         | max\_fee\_per\_gas           | int                                     | EIP 1559 field specifying the max amount to pay per unit of gas for the transaction (Note: This is the sum of the gas for the transaction and the priority fee described below)                                                                                                              |
|                         | max\_priority\_fee\_per\_gas | int                                     | EIP 1559 field specifying the max amount of the tip to be paid to miners for the transaction                                                                                                                                                                                                 |
|                         | max\_fee\_per\_blob\_gas     | int                                     | EIP 4844 field specifying the maximum fee users are willing to pay per unit of blob gas, akin to the tip in EIP 1559                                                                                                                                                                         |
|                         | type                         | string                                  | The EVM transaction type. This should be one of the following: "LEGACY", "TYPE\_1" (EIP 2930), "TYPE\_2" (EIP 1559), "TYPE\_3" (EIP 4844), "TYPE\_4" (EIP 7702)                                                                                                                              |
|                         | function\_name               | string                                  | ABI field specifying the function name that the transaction call data is calling                                                                                                                                                                                                             |
|                         | function\_signature          | string                                  | ABI field specifying the leading bytes which denote the function being called in the call data                                                                                                                                                                                               |
|                         | contract\_call\_args         | Option\<Map\<String, ContractArgument>> | ABI field specifying all contract arguments parsed from the contract call data. It is a mapping of the string representations of the arg name to the argument itself                                                                                                                         |
| **Eip712TypedData**     | primary\_type                | string                                  | The type of the primary (i.e. outermost) structure in the `message` JSON                                                                                                                                                                                                                     |
|                         | domain                       | Eip712Domain                            | The `Domain` of the payload                                                                                                                                                                                                                                                                  |
|                         | message                      | Map\<string, Value>                     | JSON serializaiton of the message payload                                                                                                                                                                                                                                                    |
| **SolanaTransaction**   | account\_keys                | list\<string>                           | The accounts (public keys) involved in the transaction                                                                                                                                                                                                                                       |
|                         | program\_keys                | list\<string>                           | The programs (public keys) involved in the transaction                                                                                                                                                                                                                                       |
|                         | instructions                 | list\<Instruction>                      | A list of Instructions (see below)                                                                                                                                                                                                                                                           |
|                         | transfers                    | list\<Transfer>                         | A list of Transfers (see below)                                                                                                                                                                                                                                                              |
|                         | recent\_blockhash            | string                                  | The recent blockhash specified in a transaction                                                                                                                                                                                                                                              |
|                         | spl\_transfers               | list\<SPLTransfer>                      | A list of SPLTransfers (see below)                                                                                                                                                                                                                                                           |
|                         | address\_table\_lookups      | list\<AddressTableLookup>               | A list of AddressTableLookups (see below)                                                                                                                                                                                                                                                    |
| **TronTransaction**     | ref\_block\_bytes            | string                                  | The height of the transaction reference block                                                                                                                                                                                                                                                |
|                         | ref\_block\_hash             | string                                  | The hash of the transaction reference block                                                                                                                                                                                                                                                  |
|                         | expiration                   | int                                     | Transaction expiration time in milliseconds                                                                                                                                                                                                                                                  |
|                         | timestamp                    | int                                     | Transaction timestamp in milliseconds                                                                                                                                                                                                                                                        |
|                         | data                         | string                                  | Transaction memo (not the call data!)                                                                                                                                                                                                                                                        |
|                         | fee\_limit                   | int                                     | The maximum energy cost allowed for the execution of smart contract transactions                                                                                                                                                                                                             |
|                         | contract                     | list\<TronContract>                     | A list of TronContract. This is the main content of a Tron transaction. This determines the type of transaction being executed and its parameters (see below)                                                                                                                                |

\*\*NOTE: The `ContractArgument` type, used in documentation for ABI an IDL arguments represents an enum indicating this type could be any one of the string, number, array or struct types listed in our Primitives section.

#### Nested Structs

| Struct                          | Field                     | Type                                 | Description                                                                                                                                                                   |
| ------------------------------- | ------------------------- | ------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Eip712Domain**                | name                      | string                               | The name                                                                                                                                                                      |
|                                 | version                   | string                               | The version                                                                                                                                                                   |
|                                 | chain\_id                 | uint                                 | The chain ID                                                                                                                                                                  |
|                                 | verifying\_contract       | string (case insensitive)            | The address of the verifying contract                                                                                                                                         |
| **Instruction**                 | program\_key              | string                               | The program (public key) involved in the instruction                                                                                                                          |
|                                 | accounts                  | list\<Account>                       | A list of Accounts involved in the instruction                                                                                                                                |
|                                 | instruction\_data\_hex    | string                               | Raw hex bytes corresponding to instruction data                                                                                                                               |
|                                 | address\_table\_lookups   | list\<AddressTableLookup>            | A list of AddressTableLookups used in the instruction.                                                                                                                        |
|                                 | parsed\_instruction\_data | Option\<SolanaParsedInstructionData> | IDL related field specifying all additional information for an instruction calling a program for which an IDL has been uploaded                                               |
| **Transfer**                    | from                      | string                               | A Solana account (public key) representing the sender of the transfer                                                                                                         |
|                                 | to                        | string                               | A Solana account (public key) representing the recipient of the transfer                                                                                                      |
|                                 | amount                    | int                                  | The native SOL amount for the transfer (lamports)                                                                                                                             |
| **SPLTransfer**                 | from                      | string                               | A Solana account (public key) representing the token account that is sending tokens in this SPL transfer                                                                      |
|                                 | to                        | string                               | A Solana account (public key) representing the token account that is receiving tokens in this SPL transfer                                                                    |
|                                 | amount                    | int                                  | The amount (noted in raw atomic units) of this SPL transfer                                                                                                                   |
|                                 | owner                     | string                               | A Solana account (public key) representing the owner of the sending token account for this SPL transfer                                                                       |
|                                 | signers                   | list\<string>                        | A list of Solana accounts (public keys) representing the multisig signers (if they exist) for this SPL transfer                                                               |
|                                 | token\_mint               | string                               | A Solana account (public key) representing the token mint of the token being transferred in this SPL transfer                                                                 |
| **Account**                     | account\_key              | string                               | A Solana account (public key)                                                                                                                                                 |
|                                 | signer                    | boolean                              | An indicator of whether or not the account is a signer                                                                                                                        |
|                                 | writable                  | boolean                              | An indicator of whether or not the account can perform a write operation                                                                                                      |
| **AddressTableLookup**          | address\_table\_key       | string                               | A Solana address (public key) corresponding to the address table                                                                                                              |
|                                 | writable\_indexes         | list\<int>                           | Indexes corresponding to accounts that can perform writes                                                                                                                     |
|                                 | readonly\_indexes         | list\<int>                           | Indexes corresponding to accounts that can only perform reads                                                                                                                 |
| **SolanaParsedInstructionData** | instruction\_name         | string                               | IDL related field specifying the name of the instruction being called                                                                                                         |
|                                 | discriminator             | string                               | IDL related field specifying the byte discriminator denoting which instruction is being called by the instruction call data                                                   |
|                                 | named\_account            | map\<string, string>                 | IDL related field specifying a mapping of account names to the account string, with the names as defined by the program IDL                                                   |
|                                 | program\_call\_args       | map\<string, ContractArgument>       | IDL related field specifying a mapping of account names to the account string, with the names as defined by the program IDL                                                   |
| **TronContract**                | type                      | string                               | The contract type, a complete list can be found in the Tron Protocol Documentation                                                                                            |
|                                 | permission\_id            | int                                  | The transaction permission type                                                                                                                                               |
|                                 | owner\_address            | string                               | The address of the caller of the transaction                                                                                                                                  |
|                                 | to\_address               | string                               | The address of the recipient (Only available for TransferContract's)                                                                                                          |
|                                 | amount                    | int                                  | The amount of TRX to send (Only available for TransferContract's)                                                                                                             |
|                                 | contract\_address         | string                               | The address of the contract being called (Only available for TriggerSmartContract's)                                                                                          |
|                                 | call\_value               | int                                  | The amount of TRX passed to the contract (Only available for TriggerSmartContract's)                                                                                          |
|                                 | data                      | string                               | The function selector, and the functions parameters of the contract (Only available for TriggerSmartContract's)                                                               |
|                                 | call\_token\_value        | int                                  | The amount of a TRC-10 token passed to the contract (Only available for TriggerSmartContract's)                                                                               |
|                                 | token\_id                 | int                                  | The TRC-10 token id (Only available for TriggerSmartContract's)                                                                                                               |
|                                 | resource                  | string                               | The resource to delegate/undelegate will be "ENERGY" or "BANDWIDTH" (Only available for Delegate, UnDelegate, FreezeBalanceV2, UnfreezeBalanceV2 contract's)                  |
|                                 | balance                   | int                                  | The amount of sun (1,000,000 sun = 1 TRX) staked for resources to be delegated (Only available for DelegateContract and UnDelegateContract)                                   |
|                                 | receiver\_address         | string                               | The resource receiver address (Only available for DelegateContract and UnDelegateContract)                                                                                    |
|                                 | lock                      | bool                                 | Indicates if the delegated resources are locked or not. If true resources cannot be undelegated within the lock\_period (Only available for DelegateContract's)               |
|                                 | lock\_period              | int                                  | The time, in blocks, of how long the delegation is locked, only valid when lock is true (Only available for DelegateContract's)                                               |
|                                 | frozen\_balance           | int                                  | The amount of sun (1,000,000 sun = 1 TRX) to be frozen (Only available for FreezeBalanceV2Contract's)                                                                         |
|                                 | unfreeze\_balance         | int                                  | The amount of sun (1,000,000 sun = 1 TRX) to unfreeze (Only available for UnfreezeBalanceV2Contract's)                                                                        |
|                                 | owner                     | TronPermission                       | The owner permission of the account (Only available for AccountPermissionUpdateContract's)                                                                                    |
|                                 | witness                   | TronPermission                       | The witness permission of the account (Only available for AccountPermissionUpdateContract's)                                                                                  |
|                                 | actives                   | list\<TronPermission>                | A list of active permissions for the account (Only available for AccountPermissionUpdateContract's)                                                                           |
| **TronPermission**              | type                      | string                               | The permission type either "Owner", "Witness", or "Active"                                                                                                                    |
|                                 | id                        | int                                  | The permission id Owner = 0, Witness = 1, Active = 2+n where n is the 0 indexed active permission number                                                                      |
|                                 | permission\_name          | string                               | The name of the permission                                                                                                                                                    |
|                                 | threshold                 | int                                  | The operation is allowed only when the sum of the weights of the participating signatures exceeds the domain value. Requires a maximum value less than the Long type (int64). |
|                                 | parent\_id                | int                                  | The parent id, currently always 0                                                                                                                                             |
|                                 | operations                | String                               | Hex encoded 32 bytes (256 bits), each bit represents the authority of a contract, a 1 means the authority to own the contract                                                 |
|                                 | keys                      | TronKey                              | A list of address's and weight's that jointly own the permission can be up to 5 keys.                                                                                         |
| **TronKey**                     | address                   | string                               | The address authorized for a specific TronPermission                                                                                                                          |
|                                 | weight                    | int                                  | The weight of this address's signature for this permission, used to reach "threshold" in a TronPermission                                                                     |

## Activity Breakdown

| Resource Type                  | Action |                                      Activity Type |
| ------------------------------ | ------ | -------------------------------------------------: |
| **ORGANIZATION**               | CREATE |      ACTIVITY\_TYPE\_CREATE\_SUB\_ORGANIZATION\_V7 |
|                                | DELETE |               ACTIVITY\_TYPE\_DELETE\_ORGANIZATION |
|                                | DELETE |          ACTIVITY\_TYPE\_DELETE\_SUB\_ORGANIZATION |
| **INVITATION**                 | CREATE |                ACTIVITY\_TYPE\_CREATE\_INVITATIONS |
|                                | DELETE |                 ACTIVITY\_TYPE\_DELETE\_INVITATION |
| **POLICY**                     | CREATE |                 ACTIVITY\_TYPE\_CREATE\_POLICY\_V3 |
|                                | CREATE |                   ACTIVITY\_TYPE\_CREATE\_POLICIES |
|                                | UPDATE |                 ACTIVITY\_TYPE\_UPDATE\_POLICY\_V2 |
|                                | DELETE |                     ACTIVITY\_TYPE\_DELETE\_POLICY |
| **SMART\_CONTRACT\_INTERFACE** | CREATE | ACTIVITY\_TYPE\_CREATE\_SMART\_CONTRACT\_INTERFACE |
|                                | DELETE | ACTIVITY\_TYPE\_DELETE\_SMART\_CONTRACT\_INTERFACE |
| **WALLET**                     | CREATE |                     ACTIVITY\_TYPE\_CREATE\_WALLET |
|                                | CREATE |           ACTIVITY\_TYPE\_CREATE\_WALLET\_ACCOUNTS |
|                                | EXPORT |                     ACTIVITY\_TYPE\_EXPORT\_WALLET |
|                                | EXPORT |            ACTIVITY\_TYPE\_EXPORT\_WALLET\_ACCOUNT |
|                                | IMPORT |               ACTIVITY\_TYPE\_INIT\_IMPORT\_WALLET |
|                                | IMPORT |                     ACTIVITY\_TYPE\_IMPORT\_WALLET |
|                                | DELETE |                    ACTIVITY\_TYPE\_DELETE\_WALLETS |
|                                | UPDATE |                     ACTIVITY\_TYPE\_UPDATE\_WALLET |
| **PRIVATE\_KEY**               | CREATE |          ACTIVITY\_TYPE\_CREATE\_PRIVATE\_KEYS\_V2 |
|                                | CREATE |          ACTIVITY\_TYPE\_CREATE\_PRIVATE\_KEY\_TAG |
|                                | UPDATE |          ACTIVITY\_TYPE\_UPDATE\_PRIVATE\_KEY\_TAG |
|                                | DELETE |              ACTIVITY\_TYPE\_DISABLE\_PRIVATE\_KEY |
|                                | DELETE |         ACTIVITY\_TYPE\_DELETE\_PRIVATE\_KEY\_TAGS |
|                                | DELETE |              ACTIVITY\_TYPE\_DELETE\_PRIVATE\_KEYS |
|                                | EXPORT |               ACTIVITY\_TYPE\_EXPORT\_PRIVATE\_KEY |
|                                | IMPORT |         ACTIVITY\_TYPE\_INIT\_IMPORT\_PRIVATE\_KEY |
|                                | IMPORT |               ACTIVITY\_TYPE\_IMPORT\_PRIVATE\_KEY |
|                                | SIGN   |             ACTIVITY\_TYPE\_SIGN\_RAW\_PAYLOAD\_V2 |
|                                | SIGN   |                ACTIVITY\_TYPE\_SIGN\_RAW\_PAYLOADS |
|                                | SIGN   |              ACTIVITY\_TYPE\_SIGN\_TRANSACTION\_V2 |
| **USER**                       | CREATE |                  ACTIVITY\_TYPE\_CREATE\_USERS\_V2 |
|                                | CREATE |                  ACTIVITY\_TYPE\_CREATE\_USER\_TAG |
|                                | CREATE |           ACTIVITY\_TYPE\_CREATE\_API\_ONLY\_USERS |
|                                | UPDATE |                       ACTIVITY\_TYPE\_UPDATE\_USER |
|                                | UPDATE |                  ACTIVITY\_TYPE\_UPDATE\_USER\_TAG |
|                                | DELETE |                      ACTIVITY\_TYPE\_DELETE\_USERS |
|                                | DELETE |                 ACTIVITY\_TYPE\_DELETE\_USER\_TAGS |
| **CREDENTIAL**                 | CREATE |              ACTIVITY\_TYPE\_CREATE\_API\_KEYS\_V2 |
|                                | CREATE |         ACTIVITY\_TYPE\_CREATE\_AUTHENTICATORS\_V2 |
|                                | DELETE |                  ACTIVITY\_TYPE\_DELETE\_API\_KEYS |
|                                | DELETE |             ACTIVITY\_TYPE\_DELETE\_AUTHENTICATORS |
|                                | CREATE |           ACTIVITY\_TYPE\_CREATE\_OAUTH\_PROVIDERS |
|                                | DELETE |           ACTIVITY\_TYPE\_DELETE\_OAUTH\_PROVIDERS |
| **PAYMENT\_METHOD**            | UPDATE |           ACTIVITY\_TYPE\_SET\_PAYMENT\_METHOD\_V2 |
|                                | DELETE |            ACTIVITY\_TYPE\_DELETE\_PAYMENT\_METHOD |
| **SUBSCRIPTION**               | CREATE |            ACTIVITY\_TYPE\_ACTIVATE\_BILLING\_TIER |
| **CONFIG**                     | UPDATE |           ACTIVITY\_TYPE\_UPDATE\_ALLOWED\_ORIGINS |
| **RECOVERY**                   | CREATE |        ACTIVITY\_TYPE\_INIT\_USER\_EMAIL\_RECOVERY |
| **AUTH**                       | CREATE |                    ACTIVITY\_TYPE\_EMAIL\_AUTH\_V2 |
|                                | CREATE |                    ACTIVITY\_TYPE\_INIT\_OTP\_AUTH |
|                                | CREATE |                          ACTIVITY\_TYPE\_OTP\_AUTH |
|                                | CREATE |                              ACTIVITY\_TYPE\_OAUTH |
|                                | CREATE |   ACTIVITY\_TYPE\_CREATE\_READ\_WRITE\_SESSION\_V2 |
| **OTP**                        | CREATE |                          ACTIVITY\_TYPE\_INIT\_OTP |
|                                | VERIFY |                        ACTIVITY\_TYPE\_VERIFY\_OTP |

## Appendix

### Root quorum activities

There are a select few activities that are not governed by policies, but rather by an organization's [root quorum](/concepts/users/root-quorum). These activities are: `ACTIVITY\_TYPE\_UPDATE\_ROOT\_QUORUM`, `ACTIVITY\_TYPE\_SET\_ORGANIZATION\_FEATURE`, `ACTIVITY\_TYPE\_REMOVE\_ORGANIZATION\_FEATURE`. For example, if a policy is added that allows a specific non-root user to perform `ACTIVITY\_TYPE\_SET\_ORGANIZATION\_FEATURE` activities, these requests will still fail as they are subject specifically to root quorum.

### Ethereum

Our Ethereum policy language (accessible via `eth.tx`) allows for the granular governance of signing Ethereum (EVM-compatible) transactions. Our policy engine exposes a [fairly standard set of properties](https://ethereum.org/en/developers/docs/transactions/#typed-transaction-envelope) belonging to a transaction.

See the [Ethereum policy examples](/concepts/policies/examples#ethereum-evm) for sample scenarios.

### Solana

Similarly, our Solana policy language (accessible via `solana.tx`) allows for control over signing Solana transactions. Note that there are some fundamental differences between the architecture of the two types of transactions, hence the resulting differences in policy structure. Notably, within our policy engine, a Solana transaction contains a list of Transfers, currently corresponding to native SOL transfers. Each transfer within a transaction is considered a separate entity. Here are some approaches you might take to govern native SOL transfers:

* *All* transfers need to match the policy condition. Useful for allowlists ([example](/concepts/policies/examples#allow-solana-transactions-that-include-a-transfer-with-only-one-specific-recipient))
* *Just one* transfer needs to match the policy condition. Useful for blocklists ([example](/concepts/policies/examples#deny-all-solana-transactions-transferring-to-an-undesired-address))
* Only match if there is a *single* transfer in the transaction, *and* that transfer meets the criteria ([example](/concepts/policies/examples#allow-solana-transactions-that-have-exactly-one-transfer-with-one-specific-recipient)). This is the most secure approach, and thus most restrictive.

See the [Solana policy examples](/concepts/policies/examples#solana) for sample scenarios.

### Tron

Our Tron policy language (accessible via `tron.tx`) allows for policy control over signing Tron transactions. Our policy language supports the standard fields in a Tron transaction: [https://developers.tron.network/docs/tron-protocol-transaction](https://developers.tron.network/docs/tron-protocol-transaction). To reference a Contract within a Transaction you should use `tron.tx.contract[0].field_name` in your policy where field\_name is some field of the contract used in your transaction. While Tron only currently supports 1 contract per transaction this could change in the future, and were ready for it if it does! The policy engine currently supports the following Tron contract types:

* TransferContract (TRX transfers)
* TriggerSmartContract (Smart contract, including, but not limited to TRC-20, invocations)

See the [Tron policy examples](/concepts/policies/examples#tron) for sample scenarios.


# Policy overview
Source: https://docs.turnkey.com/concepts/policies/overview

Our policy engine is the foundation for flexible controls and permissions within your organization. This page provides an overview of how to author policies.

## Policy structure

Our policies are defined using **JSON**. The `effect` determines if an activity should be allowed or denied based on the evaluation of the `consensus` and `condition` fields.

`consensus` and `condition` are composed of ergonomic expressions written in our [policy language](/concepts/policies/language) that must evaluate to a `bool`. `consensus` determines which user(s) may take an action (e.g. a given user ID). `condition` determines the conditions under which the policy applies (e.g. signing with a specific wallet). These fields can be used alone or together.

#### See below for an example policy that allows a single user to send transactions to a single address

```json
{
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '4b894565-fa11-42fc-b813-5bf4ea3d53f9')",
  "condition": "eth.tx.to == '<ALLOWED_ADDRESS>'"
}
```

## Policy evaluation

All policies defined within an Organization are evaluated on each request. The image below describes how an activity outcome is determined when resolving multiple policies. The rule follows the below steps:

<Steps>
  <Step>
    If a quorum of root users takes the action, the final outcome is
    `OUTCOME_ALLOW`
  </Step>

  <Step>
    Else if any applicable policy has `EFFECT_DENY`, the final outcome is `OUTCOME_DENY`. This is also referred to as "explicit deny."
  </Step>

  <Step>
    Else if at least one applicable policy has `EFFECT_ALLOW`, then the final
    outcome is `OUTCOME_ALLOW`
  </Step>

  <Step>
    Else the final outcome is `OUTCOME_DENY`. This is also referred to as
    "implicit deny." In cases of conflicts, `EFFECT_DENY` always wins.
  </Step>
</Steps>

Stated differently:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/concepts/policies/img/diagrams/policy_overview.png" alt="policy overview" />
</Frame>

Almost all actions on Turnkey are implicitly denied by default. There are a few exceptions, however:

* Root users bypass any policies.
* All users have implicit GET (read) permissions in their own Organization and any associated Sub-Organizations.
* All users have implicit permission to change their own credentials.
* All users have implicit permission to approve an activity if they were included in consensus (i.e., a user specified as part of the consensus required to approve a SIGN\_TRANSACTION activity does not need separate, explicit permission to sign transactions).

To learn more about our Policies, checkout our Policy Language [here](/concepts/policies/language).


# Policy quickstart
Source: https://docs.turnkey.com/concepts/policies/quickstart

This guide will help you add an additional user to your Turnkey organization and set permissions for that user through Policies. Specifically, we will create an API-only user with permissions to sign transactions to an allowlisted address.

This assumes that you previously completed the [Sign a transaction](/getting-started/quickstart) guide, and thus have already set up:

* Your Turnkey organization
* An API key for the Root User
* A Wallet with an Ethereum account

## Create your new users

New users in your Turnkey organization can be created by navigating to the "Users" tab and clicking "Add User".

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/concepts/policies/df58484-Screen_Shot_2023-02-17_at_9.42.29_AM.png" alt="Screen Shot 2023-02-17 at 9.42.29 AM.png" />
</Frame>

In the create user flow, you have the option to grant API key or web access to your new user. For this example, we're going to create an API-only user.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/concepts/policies/71a66d5-Screen_Shot_2023-02-21_at_6.17.11_PM.png" alt="Screen Shot 2023-02-21 at 6.17.11 PM.png" />
</Frame>

Under access types, select "API key". Enter the user name "Policy Test". This will be an API-only user, and therefore an email is not required. Click continue and create a new API key to associate with the user using the following command:

```bash
turnkey generate api-key --organization $ORGANIZATION_ID --key-name policy_test
```

This will create 2 files, "policy\_test.public" and "policy\_test.private". Copy the contents of the ".public" file and paste it into "API public key". Finish the create user flow and authenticate. Your new user will appear in the Users table. Note down the user ID as you will use it in the next step.

## Create policies for your new users.

Next we will create a policy to grant permissions to the new user. Navigate to the "Policies" tab and click on "Add new policy".

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/concepts/policies/e5cba15-small-Screen_Shot_2023-05-10_at_1.29.00_PM.png" alt="Screen Shot 2023-05-10 at 1.29.00 PM.png" />
</Frame>

Choose a name and note to describe your new policy. Next, enter the following policy, making sure to replace `<ALLOWED_ADDRESS>` with an Ethereum address of your choosing and `<USER_ID>` with the user ID of your recently created API user.

```json
{
  "effect": "EFFECT_ALLOW",
  "consensus": "approvers.any(user, user.id == '<USER_ID>')",
  "condition": "eth.tx.to == '<ALLOWED_ADDRESS>'"
}
```

## Test your policies

Generate sample transactions using our [transaction tool](https://build.tx.xyz). **You'll want to create two transactions**: one transaction to the address you selected in your whitelist policy above, and one to any other address.

Next, try signing these two different transactions by replacing `<YOUR_TRANSACTION>` in the code snippet below. As a reminder, this guide assumes you've completed the [Quickstart](/getting-started/quickstart) guide, and have set `$ORGANIZATION_ID` as an environment variable.

```json
turnkey request --path /public/v1/submit/sign_transaction --body '{
    "timestampMs": "'"$(date +%s)"'000",
    "type": "ACTIVITY_TYPE_SIGN_TRANSACTION_V2",
    "organizationId": "'"$ORGANIZATION_ID"'",
    "parameters": {
      "signWith": "<YOUR_ETH_ADDRESS>",
      "type": "TRANSACTION_TYPE_ETHEREUM",
      "unsignedTransaction": "<YOUR_TRANSACTION>"
    }
}' --key-name policy_test
```

You'll see that the activity to allowlisted address comes back as `COMPLETED`, while the activity to the non-allowlisted address comes back as `FAILED`. You've successfully set your first policy!

## Extra credit

* Try out some of our [policy examples](/concepts/policies/examples)
* Check out the [policy overview](/concepts/policies/overview)
* Learn how to author policies with our [policy language](/concepts/policies/overview)


# Smart contract interfaces — ABIs & IDLs
Source: https://docs.turnkey.com/concepts/policies/smart-contract-interfaces

This page provides an overview of the Policy Engine's support for parsing calls to Smart Contracts on Ethereum and Programs on Solana by uploading the JSON respresentation of the respective ABI (Ethereum) or IDL (Solana)

## Using ABIs and IDLs to control transaction signing:

With the introduction of Turnkey's smart contract interface functionality, our policy engine includes enhanced support for uploading Ethereum ABIs and Solana IDLs, empowering your organization to build more sophisticated and context-aware policies. By parsing transaction call data through these standardized interfaces, the policy engine can accurately interpret and enforce rules based on the specific function calls, arguments, and data structures used in smart contract interactions. This enables granular control over wallet operations, such as restricting access to certain contract methods and validating transaction parameters—across both Ethereum and Solana ecosystems.

The following guide will walk you through uploading a specific ABI or IDL, and then crafting a policy that targets specific contract call arguments.

For an example usage flow, please navigate to the [Usage Walkthrough](#usage-walkthrough) section.

### Ethereum

#### ABI Format

Ethereum ABIs are represented in JSON format as an array of objects, each describing a function, constructor, event, or error. Each object contains specific fields that fully describe the callable interface or event signature. See [ABI documentation reference](https://docs.ethers.org/v5/api/utils/abi/formats/) for more.

**Example ABI**

```json
[
  {
    "type": "function",
    "name": "transfer",
    "inputs": [
      {
        "name": "_to",
        "type": "address"
      },
      {
        "name": "_amount",
        "type": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "Transfer",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true
      },
      {
        "name": "to",
        "type": "address",
        "indexed": true
      },
      {
        "name": "value",
        "type": "uint256",
        "indexed": false
      }
    ],
    "anonymous": false
  }
]
```

#### Policy Formats

For Ethereum, if an ABI corresponding to a contract has been uploaded, then ABI related policies for transactions calling that contract will be available under the following namespaces:

* **function\_name**: This field contains the string representation of the name of the function as defined in the ABI
* **function\_signature**: This field contains the bytes making up the function signature
* **contract\_call\_args**: This field contains all the arguments in a mapping of arg name to argument

**NOTE:** The contract\_call\_args field, at the first level, uses a `MapKey` access pattern. All arguments are named and are accessed using the syntax as such:

```json
{
    "condition": "eth.tx.contract_call_args['arg_name'] == 1"
}
```

### Solana

For Turnkey's Solana IDL support, we accept IDLs formatted according to [Anchor's IDL language](https://www.anchor-lang.com/docs) standardization. While other standards do exist, most commonly used IDLs that aren't Solana's own native IDLs, adhere to the Anchor IDL format, and there exist tools like [native-to-anchor](https://github.com/acheroncrypto/native-to-anchor) which can help create anchor formatted IDLs for native solana programs.

#### Turnkey Formatting requirements

**NOTE**: this is just included for reference and troubleshooting, most Anchor IDLs should work straight out of the box. Also, some older formats of IDLs are supported (such as using the optional boolean `signer` instead of `isSigner`, or the optional boolean `writable` instead of `isMut`) – the format detailed below is the most widely used format, for reference.

**Instructions Array**

*The instructions array is a list of objects, each defining an instruction callable by the program.*

* **instructions** (array of objects)
  * **name** (string): Name of the instruction.
  * **discriminator** (optional): Unique identifier for the instruction (optional).
  * **accounts** (array of objects): List of accounts required by the instruction.
    * **isMut** (boolean): Whether the account is mutable.
    * **isSigner** (boolean): Whether the account is a signer.
    * **isOptional** (boolean): Whether the account is optional.
    * **name** (string): Name of the account.
  * **args** (array of objects): Arguments required by the instruction.
    * **name** (string): Name of the argument.
    * **type** (IdlType enum): Data type of the argument.

**Types Array**

*The types array defines custom data structures used by the program.*

* **types** (array of objects)
  * **name** (string): Name of the custom type.
  * **type** (object)
    * **kind** (string enum): The kind of type (e.g., "struct").
    * **fields** (array of objects): Fields within the type.
      * **name** (string): Name of the field.
      * **type** (IdlType enum): Data type of the field.

**NOTE:** discriminators are optional because anchor has a default method of generating the discriminators deterministically from the instruction names. If your uploaded IDL does not include instruction discriminators, we will internally generate them as per this standard. See [Anchor Discriminator Reference](https://www.anchor-lang.com/docs/basics/idl#discriminators) for more.

**Example IDL**

```json
{
  "instructions": [
    {
      "name": "initialize",
      "accounts": [
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true,
          "isOptional": false
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        }
      ]
    }
  ],
  "types": [
    {
      "name": "MyStruct",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "value",
            "type": "u64"
          }
        ]
      }
    }
  ]
}
```

**Supported Arg Types**

Solana IDLs support various different types of arguments to instructions. The following argument types are supported for Solana IDL parsing and call data parsing.

**IdlType**

* **Fixed arrays:** Array\<IdlType>
* **Booleans:** Bool
* **Byte strings:** Bytes
* **Float types:** F32, F64
* **Signed Integer Types:** I8, I16, I32, I64, I128
* **Unsigned Integer Types:** U8, U16, U32, U64, U128
* **Solana Addresses:** PublicKey
* **Vectors:** Vec\<IdlType>
* **Strings:** String
* **Optional Types:** Option\<IdlType>
* **Custom Defined Types:** DefinedType

The most notable here are **Defined Types.** Defined types in IDLs refer to custom types—such as structs and enums—that are created by the Solana program developer and used as argument types in instructions or as fields in accounts. The following defined types are currently supported:

* Enum
* Struct
* Alias

**Where to get IDLs from**

Solana IDL JSON objects, as formatted for use with Turnkey, can be obtained by the following methods:

* **Explorer Links**
  * Solscan:
    * [Example Solscan Link to Program IDL (Jupiter)](https://solscan.io/account/JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4#anchorProgramIdl)
    * [Example Solana.Explorer Link to Program IDL (Jupiter)](https://explorer.solana.com/address/JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4/anchor-program)
* [Anchor CLI:](https://www.anchor-lang.com/docs/references/cli)
  * Using the command: `anchor idl <program_account_string>`

#### Policy Formats

On the Solana side, if an IDL corresponding to a program has been uploaded, then IDL related policies for instructions calling that program will be available in each instruction under the `parsed_instruction_data` namespace. The subfields will be as follows:

* **instruction\_name:** Name of the instruction that is being called in call data
* **discriminator:** the bytes at the beginning of the instruction call data that signifies which instruction is being called
* **named\_accounts:** a mapping of account names (as defined in the IDL) to the actual accounts that were entered to this instruction
* **program\_call\_args:** all program arguments required by this instruction call

**Note:** The program\_call\_args field, at the first level, uses a `MapKey` access pattern. All arguments are named and are accessed using the syntax as such:

```json
{
    "condition": "solana.tx.instructions[0].parsed_instruction_data.program_call_args['arg_name'] == 1"
}
```

**Example Usage**

Let's say that the IDL for Jupiter has been uploaded, as found [here](https://explorer.solana.com/address/JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4/anchor-program)

Here's an example policy related to its `route` instruction:

```json
{ 
   "effect": "EFFECT_ALLOW", 
   "condition": "solana.tx.instructions.any(i, i.program_key == 'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4' && i.parsed_instruction_data.instruction_name == 'route' && i.parsed_instruction_data.program_call_args['in_amount'] == 995500000)"
}
```

### Usage Walkthrough

Let's walk through an example flow of how to explicitly reference smart contract arguments in policies by uploading the ABI for the smart contract which you will be invoking in your transactions. Let's take the Wrapped ETH (WETH) smart contract as an example. Its ABI can be found [here](https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2#code), and we've included the JSON down below:

```json
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"guy","type":"address"},{"name":"wad","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"src","type":"address"},{"name":"dst","type":"address"},{"name":"wad","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"dst","type":"address"},{"name":"wad","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"deposit","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"src","type":"address"},{"indexed":true,"name":"guy","type":"address"},{"indexed":false,"name":"wad","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"src","type":"address"},{"indexed":true,"name":"dst","type":"address"},{"indexed":false,"name":"wad","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"dst","type":"address"},{"indexed":false,"name":"wad","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"src","type":"address"},{"indexed":false,"name":"wad","type":"uint256"}],"name":"Withdrawal","type":"event"}]
```

We'll first navigate to the Security tab of your [Turnkey dashboard](https://app.turnkey.com/dashboard/welcome):

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/concepts/policies/img/diagrams/dashboard_welcome.png" alt="dashboard welcome" />
</Frame>

You'll then see a section on Smart Contract Interfaces:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/concepts/policies/img/diagrams/smart_contract_interfaces.png" alt="smart contract interfaces" />
</Frame>

Upon clicking the Create interface button, you can enter in your Smart Contract Interface details:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/concepts/policies/img/diagrams/create_interface_empty.png" alt="create interface empty" />
</Frame>

Finally, you can confirm the details:

NOTE: It's important to make sure that the `Address` section of the smart contract interface creation is populated with the correct Address. It is case insensitive with Ethereum, but case sensitive with Solana.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/concepts/policies/img/diagrams/create_interface_review.png" alt="create interface review" />
</Frame>

For the purposes of this guide, we'll be targeting the `transfer` function call. It has two arguments: `wad` (uint256) and `dst` (address), corresponding to the amount and destination, respectively. We can now next construct a policy like the following:

```json
{
  "effect": "EFFECT_ALLOW",
  "condition": "eth.tx.contract_call_args['wad'] < 1000000000000000000 && eth.tx.contract_call_args['dst'] == '0x08d2b0a37F869FF76BACB5Bab3278E26ab7067B7'"
}
```

In plain English, this policy requires that the transaction has a wad of less than 1 ETH, and that the `dst` is a specific address (our testnet warchest).

We can create this policy via the same Security tab:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/concepts/policies/img/diagrams/create_policy.png" alt="create policy" />
</Frame>

After entering the policy details, we can review and approve the activity:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/concepts/policies/img/diagrams/create_policy_review.png" alt="create policy review" />
</Frame>

In addition to contract call arguments, you can also explicitly specify the function name and function signature corresponding to a transaction. Given we're currently using a `transfer` call, we can enforce it within a policy via the following:

```json
{
  "effect": "EFFECT_ALLOW",
  "condition": "eth.tx.function_name == 'transfer' && eth.tx.function_signature == '0xa9059cbb'"
}
```

Note that the `0x` prefix is necessary when writing a policy against function signatures. Generally, you can find function signatures on an explorer like Etherscan. In this case, the function signature for WETH's `transfer` can be found [here](https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2#writeContract).

Note that these two operations, creating a new Smart Contract Interface and a Policy, can be performed programmatically as well. Here's are two respective sample snippets that use our [`@turnkey/sdk-server`](https://www.npmjs.com/package/@turnkey/sdk-server) package:

```ts
// Create Smart Contract Interface
import { Turnkey as TurnkeySDKServer } from "@turnkey/sdk-server";

...

const turnkeyClient = new TurnkeySDKServer({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

const abi = []; // your ABI here

const { smartContractInterfaceId } = await turnkeyClient.apiClient().createSmartContractInterface({
    label: "WETH mainnet",
    notes: "For WETH mainnet transfers",
    type: "SMART_CONTRACT_INTERFACE_TYPE_ETHEREUM",
    smartContractAddress: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
    smartContractInterface: JSON.stringify(abi),
  });
```

```ts
// Create Policy
import { Turnkey as TurnkeySDKServer } from "@turnkey/sdk-server";

...

const turnkeyClient = new TurnkeySDKServer({
    apiBaseUrl: "https://api.turnkey.com",
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
    defaultOrganizationId: process.env.ORGANIZATION_ID!,
  });

const { policyId } = await turnkeyClient.apiClient().createPolicy({
    policyName: "Limit WETH transfers",
    condition: "eth.tx.contract_call_args['wad'] < 1000000000000000000 && eth.tx.contract_call_args['dst'] == '0x08d2b0a37F869FF76BACB5Bab3278E26ab7067B7'",
    effect: "EFFECT_ALLOW",
    notes: "Specify WETH amount and destination",
  });
```

**References**

* [Native to Anchor](https://github.com/acheroncrypto/native-to-anchor): Tool that creates Anchor IDLs for native solana programs
* [Anchor Framework Github (Solana Foundation)](https://github.com/solana-foundation/anchor/tree/master?tab=readme-ov-file): Github reference for Anchor

**FAQ:**

* Q: Is there a size limit on ABIs or IDLs?
* A: Yes, we enforce a limit of 200kb. If your ABI/IDL exceeds that, we recommend minifying the JSON string (to get rid of whitespaces or extra characters). This can be done programmatically via a command similar to `JSON.stringify()`, or a webtool like [https://codebeautify.org/jsonminifier](https://codebeautify.org/jsonminifier) .


# Resource limits
Source: https://docs.turnkey.com/concepts/resource-limits

Learn more about how to structure your implementation to avoid resource limits.

**Turnkey is scalable to millions of users and millions of transactions.**\
\
However, we have limits on the number of resources within a **single organization** to avoid performance slowdowns and overly complex permission models. You can scale your organizational resources beyond these limits via sub-organizations. **You can create an unlimited number of sub-organizations within a single organization.**\
\
Currently, the resource limits within a single organization are as follows:

| Resource                       | Maximum parent org allowance | Maximum sub-org allowance |
| :----------------------------- | :--------------------------: | :-----------------------: |
| Sub-Organizations              |           unlimited          |             0             |
| HD Wallet Accounts             |           unlimited          |         unlimited         |
| HD Wallets                     |              100             |            100            |
| Private keys                   |             1,000            |           1,000           |
| Users                          |              100             |            100            |
| Policies                       |              100             |            100            |
| Invitations                    |              100             |            100            |
| Tags                           |              100             |             10            |
| Authenticators per user        |              10              |             10            |
| API keys per user (long-lived) |              10              |             10            |
| API keys per user (expiring)   |              10              |             10            |
| OAuth providers per user       |              10              |             10            |

Note that if you create an expiring API key that would exceed the limit above, Turnkey automatically deletes one of your existing keys using the following priority:

1. Expired API keys are deleted first
2. If no expired keys exist, the oldest unexpired key is deleted

If you are approaching any of these limits in your implementation and require support, reach out to the Turnkey team ([help@turnkey.com](mailto:help@turnkey.com)).


# Sub-organizations
Source: https://docs.turnkey.com/concepts/sub-organizations

Using Turnkey's flexible infrastructure, you can programmatically create and manage sub-organizations for your end-users. Sub-organizations aren't subject to size limits: you can create as many sub-organizations as needed. The parent organization has **read-only** visibility into all of its sub-organizations, and activities performed in sub-organizations roll up to the parent for billing purposes.

We envision sub-organizations being very useful to model your end-users if you're a business using Turnkey for key management. Let's explore how.

## Creating sub-organizations

Creating a new sub-organization is an activity performed by the parent organization. The activity itself takes the following attributes as inputs:

* organization name
* a list of root users
* a root quorum threshold
* \[optional] a wallet (note: in versions prior to V4, this was a private key)

Root users can be programmatic or human, with one or many credentials attached.

## Using sub-organizations

[Sub-Organizations as Wallets](/embedded-wallets/sub-organizations-as-wallets) explains how you might want to use this primitive as a way to model end-user controlled wallets, or custodial wallets. If you have another use-case in mind, or questions/feedback on this page, reach out to [welcome@turnkey.com](mailto:welcome@turnkey.com)!

## Deleting sub-organizations

To delete a sub-organization, you can use the [delete sub-organization activity](/api-reference/organizations/delete-sub-organization).
Before proceeding, ensure that all private keys and wallets within the sub-organization have been exported to prevent any loss of funds.
Alternatively, you can set the `deleteWithoutExport` parameter to `true` to bypass this requirement.
By default, the `deleteWithoutExport` parameter is set to `false`.

<Note>
  This activity must be initiated by a root user in the sub-organization that is
  to be deleted. A parent org cannot delete a sub-organization without its
  participation.
</Note>


# Introduction to users
Source: https://docs.turnkey.com/concepts/users/introduction

Turnkey users are resources within organizations or sub-organizations that can submit activities to Turnkey via a valid credential (e.g., API key, passkey).

These requests can be made either by making direct API calls or through the Turnkey Dashboard. Users must have at least one valid credential (one of API key, passkey), with upper limits on credentials defined here in our [resource limits](/concepts/resource-limits). Users can also have associated “tags” which are logical groupings that can be referenced in policies. Users can only submit activities within their given organization — they cannot take action across organizations.

A User's attributes are:

* UUID: a globally unique ID (e.g. `fc6372d1-723d-4f7e-8554-dc3a212e4aec`), used as a unique identifier for a User in the context of Policies or User Tags, or Quorums.
* Name and email
* Authenticators: a list of authenticators (see below for information)
* API key: a list of API keys (see below for information)
* User tags: a list of User Tag UUIDs

A **user belongs to one organization**, and one organization can have many (**up to 100**) users. If you need to create more users, consider using Sub-Organizations.


# Wallets
Source: https://docs.turnkey.com/concepts/wallets

A [hierarchical deterministic (HD) wallet](https://learnmeabitcoin.com/technical/hd-wallets) is a collection of cryptographic private/public key pairs that share a common seed. A wallet is used to generate accounts.

```json
{
  "walletId": "eb98ae4c-07eb-4117-9b2d-8a453c0e1e64",
  "walletName": "default"
}
```

#### Configuration

Wallet seeds are generated with a default mnemonic length of 12 words. The [BIP-39 specification](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki) supports mnemonic lengths of 12, 15, 18, 21, and 24 words. To enhance your Wallet's security, you may consider opting for a longer mnemonic length. This optional `mnemonicLength` field can be set when creating a Wallet. It's important to note that once the Wallet seed is generated, the mnemonic is permanent and cannot be altered.

## Accounts

An account contains the directions for deriving a cryptographic key pair and corresponding address from a Wallet. In practice, this looks like:

* The Wallet seed and Account curve are used to create a root key pair
* The Account path format and path are used to derive an extended key pair from the root key pair
* The Account address format is used to derive the address from the extended public key

```json
{
  "address": "0x7aAE6F67798D1Ea0b8bFB5b64231B2f12049DB5e",
  "addressFormat": "ADDRESS_FORMAT_ETHEREUM",
  "curve": "CURVE_SECP256K1",
  "path": "m/44'/60'/0'/0/0",
  "pathFormat": "PATH_FORMAT_BIP32",
  "walletId": "eb98ae4c-07eb-4117-9b2d-8a453c0e1e64"
}
```

**The account address is used to sign with the underlying extended private key.**

#### HD wallet default paths

HD wallets use standardized derivation paths to generate multiple accounts from a single seed. These paths follow a specific structure that allows for consistent address generation across different wallet implementations. Here are common default paths for some of the ecosystems supported by Turnkey:

* Ethereum: `m/44'/60'/0'/0/0`
* Cosmos: `m/44'/118'/0'/0/0`
* Solana: `m/44'/501'/0'/0'`

For a complete list of coin types and possible HD paths, refer to the [SLIP-0044 specification](https://github.com/satoshilabs/slips/blob/master/slip-0044.md).

#### Address formats and curves

See below for specific address formats that you can currently derive on Turnkey:

| Type     | Address Format                            | Curve            | Default HD Path    |
| -------- | ----------------------------------------- | ---------------- | ------------------ |
| n/a      | ADDRESS\_FORMAT\_COMPRESSED               | CURVE\_SECP256K1 | m/0'/0             |
| n/a      | ADDRESS\_FORMAT\_COMPRESSED               | CURVE\_ED25519   | m/0'/0             |
| n/a      | ADDRESS\_FORMAT\_UNCOMPRESSED             | CURVE\_SECP256K1 | m/0'/0             |
| Ethereum | ADDRESS\_FORMAT\_ETHEREUM                 | CURVE\_SECP256K1 | m/44'/60'/0'/0/0   |
| Cosmos   | ADDRESS\_FORMAT\_COSMOS                   | CURVE\_SECP256K1 | m/44'/118'/0'/0/0  |
| Solana   | ADDRESS\_FORMAT\_SOLANA                   | CURVE\_ED25519   | m/44'/501'/0'/0    |
| Tron     | ADDRESS\_FORMAT\_TRON                     | CURVE\_SECP256K1 | m/44'/195'/0'/0/0  |
| Sui      | ADDRESS\_FORMAT\_SUI                      | CURVE\_ED25519   | m/44'/784'/0'/0/0  |
| Aptos    | ADDRESS\_FORMAT\_APTOS                    | CURVE\_ED25519   | m/44'/637'/0'/0'/0 |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_MAINNET\_P2PKH  | CURVE\_SECP256K1 | m/44'/0'/0'/0/0    |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_MAINNET\_P2SH   | CURVE\_SECP256K1 | m/49'/0'/0'/0/0    |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_MAINNET\_P2WPKH | CURVE\_SECP256K1 | m/84'/0'/0'/0/0    |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_MAINNET\_P2WSH  | CURVE\_SECP256K1 | m/48'/0'/0'/2'/0/0 |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_MAINNET\_P2TR   | CURVE\_SECP256K1 | m/86'/0'/0'/0/0    |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_TESTNET\_P2PKH  | CURVE\_SECP256K1 | m/44'/1'/0'/0/0    |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_TESTNET\_P2SH   | CURVE\_SECP256K1 | m/49'/1'/0'/0/0    |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_TESTNET\_P2WPKH | CURVE\_SECP256K1 | m/84'/1'/0'/0/0    |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_TESTNET\_P2WSH  | CURVE\_SECP256K1 | m/48'/1'/0'/2'/0/0 |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_TESTNET\_P2TR   | CURVE\_SECP256K1 | m/86'/1'/0'/0/0    |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_SIGNET\_P2PKH   | CURVE\_SECP256K1 | m/44'/1'/0'/0/0    |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_SIGNET\_P2SH    | CURVE\_SECP256K1 | m/49'/1'/0'/0/0    |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_SIGNET\_P2WPKH  | CURVE\_SECP256K1 | m/84'/1'/0'/0/0    |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_SIGNET\_P2WSH   | CURVE\_SECP256K1 | m/48'/1'/0'/2'/0/0 |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_SIGNET\_P2TR    | CURVE\_SECP256K1 | m/86'/1'/0'/0/0    |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_REGTEST\_P2PKH  | CURVE\_SECP256K1 | m/44'/1'/0'/0/0    |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_REGTEST\_P2SH   | CURVE\_SECP256K1 | m/49'/1'/0'/0/0    |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_REGTEST\_P2WPKH | CURVE\_SECP256K1 | m/84'/1'/0'/0/0    |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_REGTEST\_P2WSH  | CURVE\_SECP256K1 | m/48'/1'/0'/2'/0/0 |
| Bitcoin  | ADDRESS\_FORMAT\_BITCOIN\_REGTEST\_P2TR   | CURVE\_SECP256K1 | m/86'/1'/0'/0/0    |
| Sei      | ADDRESS\_FORMAT\_SEI                      | CURVE\_ED25519   | m/44'/118'/0'/0/0  |
| Stellar  | ADDRESS\_FORMAT\_XLM                      | CURVE\_ED25519   | m/44'/148'/0'/0'/0 |
| Dogecoin | ADDRESS\_FORMAT\_DOGE\_MAINNET            | CURVE\_SECP256K1 | m/44'/3'/0'/0/0    |
| Dogecoin | ADDRESS\_FORMAT\_DOGE\_TESTNET            | CURVE\_SECP256K1 | m/44'/1'/0'/0/0    |
| TON      | ADDRESS\_FORMAT\_TON\_V3R2                | CURVE\_ED25519   | m/44'/607'/0'/0/0  |
| TON      | ADDRESS\_FORMAT\_TON\_V4R2                | CURVE\_ED25519   | m/44'/607'/0'/0/0  |
| XRP      | ADDRESS\_FORMAT\_XRP                      | CURVE\_SECP256K1 | m/44'/144'/0'/0/0  |
| FLARE    | ADDRESS\_FORMAT\_XRP                      | CURVE\_SECP256K1 | m/44'/144'/0'/0/0  |

#### Where can I learn more?

In addition to the guide mentioned above on [HD Wallets](https://learnmeabitcoin.com/technical/hd-wallets), there is also a page specifically on [Derivation Paths](https://learnmeabitcoin.com/technical/derivation-paths).

#### What if I don't see the address format for my network?

You can use `ADDRESS_FORMAT_COMPRESSED` to generate a public key which can be used to sign with (only sign raw payloads supported).

#### What is the difference between sign transaction and sign raw payload ?

[SignRawPayload](https://docs.turnkey.com/api-reference/activities/sign-raw-payload): network-agnostic, curve-based signing of messages.
[SignTransaction](https://docs.turnkey.com/api-reference/activities/sign-transaction): network-specific transaction signing, including [transaction parsing](https://docs.turnkey.com/networks/overview#:~:text=Tier%204%3A%20Transaction%20parsing%20and%20policy%20creation) and compatibility with our policy engine.

#### What if I don't see the curve for my network?

Contact us at [hello@turnkey.com](mailto:hello@turnkey.com).

## Delete wallets

To delete wallets you can call the [delete wallets activity](/api-reference/wallets/delete-wallets). Before deleting a wallet it must have been exported to prevent loss of funds, or you can pass in the `deleteWithoutExport` parameter with the value `true` to override this. The `deleteWithoutExport` parameter, if not passed in, is default `false`. Note that this activity must be initiated by the wallet owner.

## Private keys

Turnkey also supports raw private keys, but we recommend using Wallets since they offer several advantages:

* Wallets can be used across various cryptographic curves
* Wallets can generate millions of addresses for various digital assets
* Wallets can be represented by a checksummed, mnemonic phrase making them easier to backup and recover

## Export keys

Exporting on Turnkey enables you or your end users to export a copy of a Wallet or Private Key from our system at any time. While most Turnkey users opt to keep Wallets within Turnkey's secure infrastructure, the export functionality means you are never locked into Turnkey, and gives you the freedom to design your own backup processes as you see fit. Check out our [Export Wallet guide](/wallets/export-wallets) to allow your users to securely export their wallets.

## Import keys

Importing on Turnkey enables you or your end users to import a Wallet or Private Key to our system. Check out our [Import Wallet guide](/wallets/import-wallets) to allow your users to securely import their wallets.

## Delete keys

To delete private keys you can call the [delete private keys activity](/api-reference/private-keys/delete-private-keys). Before deleting a private key it must have been exported to prevent loss of funds, or you can pass in the `deleteWithoutExport` parameter with the value `true` to override this. The `deleteWithoutExport` parameter, if not passed in, is default `false`. Note that this activity must be initiated by the private key owner.


# Use Turnkey wallets with Morpho
Source: https://docs.turnkey.com/cookbook/morpho



## Overview

[Morpho Vaults](https://docs.morpho.org/build/earn/getting-started) are smart contracts that allow users to deposit assets into yield-generating vaults built on top of Morpho's lending protocol.

We'll walk through the steps of using Turnkey to sign some common transactions to Morpho's Steakhouse USDC Vault on Base Mainnet.
The flow is also going to show Turnkey's policy engine in action by restricting the signing operations only to the specific Morpho contracts.
The working example can be found [here](https://github.com/tkhq/sdk/tree/main/examples/with-morpho).

## Getting started

The first step is to set up your Turnkey organization and account. By following the [Quickstart guide](/getting-started/quickstart), you should have:

* A root user with a public/private API key pair within the Turnkey parent organization
* An organization ID

The next step is to create another user within the organization with a different API key and remove it from the root quorum. You can do this from the Turnkey [dashboard](https://app.turnkey.com/dashboard/security/updateRootQuorum) or [API](https://docs.turnkey.com/api-reference/activities/update-root-quorum).
Here's a simple [script](https://github.com/tkhq/sdk/blob/main/examples/kitchen-sink/src/sdk-server/updateRootQuorum.ts) that shows how to update the root quorum using @turnkey/sdk-server.

Finally, make sure you have a wallet with an Ethereum account created within this organization and have it funded with some ETH and USDC on Base Mainnet.

## Setting up the policy for the non-root user

Now, we want to use the non-root user for signing transactions to Morpho and restrict it to only be able to interact with the USDC and Morpho vault smart contracts.
We'll define a new API client that would use the organization root user to create the required policy:

```tsx
const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPrivateKey: process.env.TURNKEY_API_PRIVATE_KEY!,
    apiPublicKey: process.env.TURNKEY_API_PUBLIC_KEY!,
    defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID!,
}).apiClient();

const userId = '<The id of the non-root user that you'll be using to sign the Morpho related transactions>';

const MORPHO_VAULT_ADDRESS = 0xbeeF010f9cb27031ad51e3333f9aF9C6B1228183;
const USDC_ADDRESS = 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913;

const policyName = "Allow API key user to only call the MORPHO_VAULT_ADDRESS and USDC_ADDRESS";
const effect = "EFFECT_ALLOW";
const consensus = `approvers.any(user, user.id == '${userId}')`;
const condition = `eth.tx.to in ['USDC_ADDRESS', 'MORPHO_VAULT_ADDRESS']`;
const notes = "";

const { policyId } = await turnkeyClient.createPolicy({
    policyName,
    condition,
    consensus,
    effect,
    notes,
});
```

## Set up the Turnkey signer

We'll be using `@turnkey/viem` to create a Turnkey custom signer which implements the signing APIs expected by the `viem` client. Notice that the Turnkey API client is going to use the non-root user API key now as using a root user will bypass the policy engine evaluation.

```tsx
import { base } from "viem/chains";
import { createAccount } from "@turnkey/viem";
import { Turnkey as TurnkeyServerSDK } from "@turnkey/sdk-server";
import {
    createWalletClient,
    http,
    type Account,
    erc20Abi,
    createPublicClient,
    parseAbi,
    parseUnits,
} from "viem";

 const turnkeyClient = new TurnkeyServerSDK({
    apiBaseUrl: process.env.TURNKEY_BASE_URL!,
    apiPrivateKey: process.env.NONROOT_API_PRIVATE_KEY!,
    apiPublicKey: process.env.NONROOT_API_PUBLIC_KEY!,
    defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID!,
});

const turnkeyAccount = await createAccount({
    client: turnkeyClient.apiClient(),
    organizationId: process.env.TURNKEY_ORGANIZATION_ID!,
    signWith: process.env.SIGN_WITH!,
});

const client = createWalletClient({
    account: turnkeyAccount as Account,
    chain: base,
    transport: http(
      `https://base-mainnet.infura.io/v3/${process.env.INFURA_API_KEY!}`,
    ),
});

// Use the standard viem client for non-signing operations
const publicClient = createPublicClient({
    transport: http(
      `https://base-mainnet.infura.io/v3/${process.env.INFURA_API_KEY!}`,
    ),
    chain: base,
});
```

## Approve the vault to spend USDC and deposit USDC into the vault

```tsx
 // Approve the vault to spend for 10 USDC, use maxUint256 if you want the max token approval
const { request: approveReq } = await publicClient.simulateContract({
    abi: erc20Abi,
    address: USDC_ADDRESS as `0x${string}`,
    functionName: "approve",
    chain: base,
    args: [MORPHO_VAULT_ADDRESS as `0x${string}`, parseUnits("10", 6)],
    account: client.account,
});

const approveHash = await client.writeContract(approveReq);

console.log("Approve transaction:", `https://basescan.org/tx/${approveHash}`);

// Deposit USDC into vault
const vaultAbi = parseAbi([
    "function deposit(uint256 assets, address receiver) external returns (uint256 shares)",
]);

const { request: depositReq } = await publicClient.simulateContract({
    abi: vaultAbi,
    address: MORPHO_VAULT_ADDRESS as `0x${string}`,
    functionName: "deposit",
    args: [parseUnits("0.5", 6), (turnkeyAccount as Account).address],
    account: turnkeyAccount as Account,
});
const depositHash = await client.writeContract(depositReq);

console.log("Deposit transaction:", `https://basescan.org/tx/${depositHash}`);
```

## Check user share balance and vault data

In order to see how much the user can withdraw we can call the `balanceOf` function if the Vault contract.

```tsx
 const balanceAbi = parseAbi([
    "function balanceOf(address account) external view returns (uint256)",
    "function decimals() external view returns (uint8)",
]);

const decimals = await publicClient.readContract({
    address: MORPHO_VAULT_ADDRESS as `0x${string}`,
    abi: balanceAbi,
    functionName: "decimals",
});

const rawBalance = await publicClient.readContract({
    address: MORPHO_VAULT_ADDRESS as `0x${string}`,
    abi: balanceAbi,
    functionName: "balanceOf",
    args: [turnkeyAccount.address],
});

// Format to human-readable
const readableBalance = formatUnits(rawBalance, decimals);
console.log(`User vault balance: ${readableBalance} shares`);
```

You can also call the Morpho GraphQL API and fetch the vault live data:

```tsx
const query = `
    query {
      vaultByAddress(
        address: "${MORPHO_VAULT_ADDRESS}"
        chainId: ${BASE_CHAIN_ID}
      ) {
        state {
          sharePriceUsd
          apy
        }
        asset {
          priceUsd
        }
      }
    }
  `;

const response = await fetch("https://api.morpho.org/graphql", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ query }),
});

const json = await response.json();

console.log("Vault data:", JSON.stringify(json.data, null, 2));
```

## Withdraw from the vault or redeem the whole amount

Call the `withdraw` function if you want a specific amount:

```tsx
 const withdrawAbi = parseAbi([
    "function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares)",
]);
const { request: withdrawReq } = await publicClient.simulateContract({
    abi: withdrawAbi,
    address: MORPHO_VAULT_ADDRESS as `0x${string}`,
    functionName: "withdraw",
    args: [
      parseUnits("0.1", 6),
      (turnkeyAccount as Account).address,
      (turnkeyAccount as Account).address,
    ],
    account: turnkeyAccount as Account,
});
const withdrawHash = await client.writeContract(withdrawReq);

console.log("Withdraw transaction:", `https://basescan.org/tx/${withdrawHash}`);
```

Or `redeem` for the full shares amount:

```tsx
const balanceAbi = parseAbi([
    "function balanceOf(address account) external view returns (uint256)",
]);

const rawBalance = await publicClient.readContract({
    address: MORPHO_VAULT_ADDRESS as `0x${string}`,
    abi: balanceAbi,
    functionName: "balanceOf",
    args: [turnkeyAccount.address],
});

// Redeem all user shares
const redeemAbi = parseAbi([
    "function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets)",
]);
const { request: redeemReq } = await publicClient.simulateContract({
    abi: redeemAbi,
    address: MORPHO_VAULT_ADDRESS as `0x${string}`,
    functionName: "redeem",
    args: [
      rawBalance,
      (turnkeyAccount as Account).address,
      (turnkeyAccount as Account).address,
    ],
    account: turnkeyAccount as Account,
});
const redeemHash = await client.writeContract(redeemReq);

console.log("redeem tx:", `https://basescan.org/tx/${redeemHash}`);
```


# Errors
Source: https://docs.turnkey.com/developer-reference/api-overview/errors

An error returned by the Turnkey API might look something like this:

```bash
Turnkey error 3: organization mismatch: request is targeting organization ("USER SUB ORG"), but voters are in organization ("OUR MAIN ORG")
```

Within this error message there are a few different parts that are worth breaking down. First the GRPC Error code. This looks like this:

```bash
Turnkey error 3:
```

This GRPC error wraps what we call a Turnkey Error which looks something like:

```bash
organization mismatch: request is targeting organization ("USER SUB ORG"), but voters are in organization ("OUR MAIN ORG")
```

What is more important to you as a developer is the TurnkeyError. This will give you information about what error occurred and how you can handle it. In fact, you should **not** perform error handling based on the GRPC code. These codes are meant to be used internally and will eventually be removed from our error responses. More on that [here](#grpc-error-codes). This page enumerates all errors that might be received while using the Turnkey API and also provides information about causes for these errors and helpful troubleshooting tips.

## All Error Codes for Actions

The below table enumerates all errors across different actions that can be taken using the API. It contains both the GRPC codes as well as the HTTP codes corresponding with each error as well as the displayed error message. More on GRPC error codes below this table. Click on the message to view a details explanation of possible causes and trouble shooting tips for that specific error

| GRPC Code         | HTTP Code | Message                                                                                                                                                                                                                                                                                                                                                 |
| :---------------- | :-------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| InvalidArgument   | 400       | [malformed organization ID provided](#malformed-organization-id-provided)                                                                                                                                                                                                                                                                               |
| InvalidArgument   | 400       | [bad request body](#bad-request-body)                                                                                                                                                                                                                                                                                                                   |
| InvalidArgument   | 400       | [failed to load organizations](#failed-to-load-organizations)                                                                                                                                                                                                                                                                                           |
| InvalidArgument   | 400       | [policy label must be unique](#policy-label-must-be-unique)                                                                                                                                                                                                                                                                                             |
| InvalidArgument   | 400       | [invalid policy consensus](#invalid-policy-consensus)                                                                                                                                                                                                                                                                                                   |
| InvalidArgument   | 400       | [invalid policy condition](#invalid-policy-condition)                                                                                                                                                                                                                                                                                                   |
| InvalidArgument   | 400       | [quorum threshold must be non-zero integer](#quorum-threshold-must-be-non-zero-integer)                                                                                                                                                                                                                                                                 |
| InvalidArgument   | 400       | [quorum users missing](#quorum-users-missing)                                                                                                                                                                                                                                                                                                           |
| InvalidArgument   | 400       | [invalid api key expiration](#invalid-api-key-expiration)                                                                                                                                                                                                                                                                                               |
| InvalidArgument   | 400       | [missing parameter: user authenticator attestation](#missing-parameter-user-authenticator-attestation)                                                                                                                                                                                                                                                  |
| InvalidArgument   | 400       | [invalid authenticator attestation](#invalid-authenticator-attestation)                                                                                                                                                                                                                                                                                 |
| InvalidArgument   | 400       | [missing parameter: user authenticator attestation auth data](#missing-parameter-user-authenticator-attestation-auth-data)                                                                                                                                                                                                                              |
| InvalidArgument   | 400       | [missing wallet params](#missing-wallet-params)                                                                                                                                                                                                                                                                                                         |
| InvalidArgument   | 400       | [invalid path format](#invalid-path-format)                                                                                                                                                                                                                                                                                                             |
| InvalidArgument   | 400       | [invalid path](#invalid-path)                                                                                                                                                                                                                                                                                                                           |
| InvalidArgument   | 400       | [invalid address format](#invalid-address-format)                                                                                                                                                                                                                                                                                                       |
| InvalidArgument   | 400       | [invalid curve](#invalid-curve)                                                                                                                                                                                                                                                                                                                         |
| InvalidArgument   | 400       | [curve required](#curve-required)                                                                                                                                                                                                                                                                                                                       |
| InvalidArgument   | 400       | [invalid payload encoding](#invalid-payload-encoding)                                                                                                                                                                                                                                                                                                   |
| InvalidArgument   | 400       | [invalid hash function](#invalid-hash-function)                                                                                                                                                                                                                                                                                                         |
| InvalidArgument   | 400       | [invalid magic link template](#invalid-magic-link-template)                                                                                                                                                                                                                                                                                             |
| InvalidArgument   | 400       | [failed to get email template contents](#failed-to-get-email-template-contents)                                                                                                                                                                                                                                                                         |
| InvalidArgument   | 400       | [failed to unmarshal template variables](#failed-to-unmarshal-template-variables)                                                                                                                                                                                                                                                                       |
| Unauthenticated   | 401       | [no valid authentication signature found for request](#no-valid-authentication-signature-found-for-request)                                                                                                                                                                                                                                             |
| Unauthenticated   | 401       | [could not find public key in organization](#could-not-find-public-key-in-organization)                                                                                                                                                                                                                                                                 |
| Unauthenticated   | 401       | [failed while looking up public key in parent organization](#failed-while-looking-up-public-key-in-parent-organization)                                                                                                                                                                                                                                 |
| Unauthenticated   | 401       | [could not find public key in organization or its parent organization](#could-not-find-public-key-in-organization-or-its-parent-organization)                                                                                                                                                                                                           |
| Unauthenticated   | 401       | [could not verify WebAuthN signature](#could-not-verify-webauthn-signature)                                                                                                                                                                                                                                                                             |
| Unauthenticated   | 401       | [credential ID could not be found in organization or its parent organization](#credential-id-could-not-be-found-in-organization-or-its-parent-organization)                                                                                                                                                                                             |
| Unauthenticated   | 401       | [public key could not be found in organization or its parent organization](#public-key-could-not-be-found-in-organization-or-its-parent-organization)                                                                                                                                                                                                   |
| Unauthenticated   | 401       | [more than one suborg associated with a credential ID](#more-than-one-suborg-associated-with-a-credential-id)                                                                                                                                                                                                                                           |
| Unauthenticated   | 401       | [more than one suborg associated with a public key](#more-than-one-suborg-associated-with-a-public-key)                                                                                                                                                                                                                                                 |
| Unauthenticated   | 401       | [could not verify api key signature](#could-not-verify-api-key-signature)                                                                                                                                                                                                                                                                               |
| Unauthenticated   | 401       | [expired api key](#expired-api-key)                                                                                                                                                                                                                                                                                                                     |
| Unauthenticated   | 401       | [malformed activity stamp](#malformed-activity-stamp)                                                                                                                                                                                                                                                                                                   |
| Unauthenticated   | 401       | [could not extract webauthn stamp](#could-not-extract-webauthn-stamp)                                                                                                                                                                                                                                                                                   |
| Unauthenticated   | 401       | [could not extract api key stamp](#could-not-extract-api-key-stamp)                                                                                                                                                                                                                                                                                     |
| Unauthenticated   | 401       | [cannot authenticate public API activity request without a stamp (X-Stamp/X-Stamp-Webauthn header)](#cannot-authenticate-public-api-activity-request-without-a-stamp-x-stampx-stamp-webauthn-header)                                                                                                                                                    |
| PermissionDenied  | 403       | [request not authorized](#request-not-authorized)                                                                                                                                                                                                                                                                                                       |
| PermissionDenied  | 403       | [api operations disabled](#api-operations-disabled)                                                                                                                                                                                                                                                                                                     |
| PermissionDenied  | 403       | [authentication failed](#authentication-failed)                                                                                                                                                                                                                                                                                                         |
| NotFound          | 404       | [webauthn authenticator not found in organization](#webauthn-authenticator-not-found-in-organization)                                                                                                                                                                                                                                                   |
| NotFound          | 404       | [webauthn authenticator not found in organization or parent organization](#webauthn-authenticator-not-found-in-organization-or-parent-organization)                                                                                                                                                                                                     |
| NotFound          | 404       | [no organization found with the given ID](#no-organization-found-with-the-given-id)                                                                                                                                                                                                                                                                     |
| NotFound          | 404       | [No activity found with fingerprint. Consensus activities must target an existing activity by fingerprint](#no-activity-found-with-fingerprint-consensus-activities-must-target-an-existing-activity-by-fingerprint)                                                                                                                                    |
| ResourceExhausted | 429       | [user has exceeded maximum authenticators](#user-has-exceeded-maximum-authenticators)                                                                                                                                                                                                                                                                   |
| ResourceExhausted | 429       | [user has exceeded maximum long-lived api keys](#user-has-exceeded-maximum-long-lived-api-keys)                                                                                                                                                                                                                                                         |
| ResourceExhausted | 429       | [user has exceeded maximum short-lived api keys](#user-has-exceeded-maximum-short-lived-api-keys)                                                                                                                                                                                                                                                       |
| ResourceExhausted | 429       | [this organization cannot execute activities because it is over its allotted quota. Please reach out to the Turnkey team (help@turnkey.com) for more information.](#this-organization-cannot-execute-activities-because-it-is-over-its-allotted-quota-please-reach-out-to-the-turnkey-team-helpturnkeycom-for-more-information)                         |
| ResourceExhausted | 429       | [this sub-organization cannot execute activities because its parent is over its allotted quota. Please reach out to the Turnkey team (help@turnkey.com) for more information.](#this-sub-organization-cannot-execute-activities-because-its-parent-is-over-its-allotted-quota-please-reach-out-to-the-turnkey-team-helpturnkeycom-for-more-information) |
| ResourceExhausted | 429       | [this organization cannot execute activities because it has been rate limited. Please reach out to the Turnkey team (help@turnkey.com) for more information.](#this-organization-cannot-execute-activities-because-it-has-been-rate-limited-please-reach-out-to-the-turnkey-team-helpturnkeycom-for-more-information)                                   |
| ResourceExhausted | 429       | [this sub-organization cannot execute activities because its parent has been rate limited. Please reach out to the Turnkey team (help@turnkey.com) for more information.](#this-sub-organization-cannot-execute-activities-because-its-parent-has-been-rate-limited-please-reach-out-to-the-turnkey-team-helpturnkeycom-for-more-information)           |
| Internal          | 500       | [internal server error](#internal-server-error)                                                                                                                                                                                                                                                                                                         |

## GRPC Error Codes

Turnkey uses GRPC internally to communicate with our internal services whenever an API request is made. Due to this some errors will be wrapped with GRPC error messages. These error codes are listed below for your convenience, however these will not remain in Turnkey error messages forever and you should **not** do error handling based on these codes as these could be removed at any time. In the following example `Turnkey error 3:` represents a grpc error (error code 3, INVALID\_ARGUMENT) wrapping a Turnkey error.

Example

```bash
Turnkey error 3: organization mismatch: request is targeting organization ("USER SUB ORG"), but voters are in organization ("OUR MAIN ORG")
```

### GRPC Status Codes Reference

| Code                 | Number | Description|
| -------------------- | ------ ||
| OK                   | 0      | Not an error; returned on success|
| CANCELLED            | 1      | The operation was cancelled, typically by the caller|
| UNKNOWN              | 2      | Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error|
| INVALID\_ARGUMENT    | 3      | The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name|
| DEADLINE\_EXCEEDED   | 4      | The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long|
| NOT\_FOUND           | 5      | Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used|
| ALREADY\_EXISTS      | 6      | The entity that a client attempted to create (e.g., file or directory) already exists|
| PERMISSION\_DENIED   | 7      | The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions.                                                                                                                                                                                                                                                                                                                                                                                                                                                   |
| RESOURCE\_EXHAUSTED  | 8      | Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space|
| FAILED\_PRECONDITION | 9      | The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level (e.g., when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence). (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. E.g., if an "rmdir" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. |
| ABORTED              | 10     | The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`|
| OUT\_OF\_RANGE       | 11     | The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range \[0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done.                                                                                                                                                                                  |
| UNIMPLEMENTED        | 12     | The operation is not implemented or is not supported/enabled in this service|
| INTERNAL             | 13     | Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors|
| UNAVAILABLE          | 14     | The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations|
| DATA\_LOSS           | 15     | Unrecoverable data loss or corruption|
| UNAUTHENTICATED      | 16     | The request does not have valid authentication credentials for the operation|

Source: [https://grpc.io/docs/guides/status-codes/](https://grpc.io/docs/guides/status-codes/)

## Troubleshooting

### no organization found with the given ID

Common causes:

* An unknown organization ID was passed in a request made to the Turnkey API

Troubleshooting tips:

* Confirm that you are using the proper Organization ID. All Turnkey resources are identified with a UUID, so confirm you are not passing a different resource's UUID as the organization ID in your request.

### malformed organization ID provided

Common causes:

* An improperly formatted organization ID UUID was passed in a request made to the Turnkey API

Troubleshooting tips:

* Confirm the the UUID conforms to the UUID standard `XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX`

### bad request body

Common causes:

* A malformed request body was passed in a request made to the Turnky API

Troubleshooting tips:

* A typical activity request has the `type`, `timestampMS`, and `organizationId` parameters at the top level and then a `parameters` parameter with more specific parameters based on the request type. For example a CREATE\_WALLET activity request body might look something like this:

```json
{
  "type": "ACTIVITY_TYPE_CREATE_WALLET",
  "timestampMs": "<string>",
  "organizationId": "string",
  "parameters": {
    "walletName": "string",
    "accounts": [
      {
        "curve": "CURVE_SECP256K1",
        "pathFormat": "PATH_FORMAT_BIP32",
        "path": "string",
        "addressFormat": "ADDRESS_FORMAT_UNCOMPRESSED"
      }
    ],
    "mnemonicLength": 0
  }
}
```

* A get resource request body might look slightly different with less fields. An example of a GET\_WALLET request body looks something like this:

```json
{
  "organizationId": "string",
  "walletId": "string"
}
```

### api operations disabled

Common causes:

* Turnkey has disabled API operations globally.

Troubleshooting tips:

* This situation will only happen in the most extreme case and should not be something you need to worry about.

### this organization cannot execute activities because it is over its allotted quota. Please reach out to the Turnkey team ([help@turnkey.com](mailto:help@turnkey.com)) for more information.

Common causes:

* You have exceeded your monthly signing quota. The first 25 signatures a month are free for "free" users.
* You have reached a resource limit on a particular resource. You can find out about our resource limits [here](/concepts/resource-limits).

Troubleshooting tips:

* If you need to increase your signature limit take a look at our [pricing page](https://www.turnkey.com/pricing) and contact us at [help@turnkey.com](mailto:help@turnkey.com)!
* Resource limits are imposed globally and cannot be increased, speak with our team at [help@turnkey.com](mailto:help@turnkey.com) to understand how to better integrate Turnkey with your system to utilize Turnkey to its highest potential.

### this sub-organization cannot execute activities because its parent is over its allotted quota. Please reach out to the Turnkey team ([help@turnkey.com](mailto:help@turnkey.com)) for more information.

Common causes:

* You have exceeded your monthly signing quota. The first 25 signatures a month are free for "free" users.
* You have reached a resource limit on a particular resource. You can find out about our resource limits [here](/concepts/resource-limits).

Troubleshooting tips:

* If you need to increase your signature limit take a look at our [pricing page](https://www.turnkey.com/pricing) and contact us at [help@turnkey.com](mailto:help@turnkey.com)!
* Resource limits are imposed globally and cannot be increased, speak with our team at [help@turnkey.com](mailto:help@turnkey.com) to understand how to better integrate Turnkey with your system to utilize Turnkey to its highest potential.

### this organization cannot execute activities because it has been rate limited. Please reach out to the Turnkey team ([help@turnkey.com](mailto:help@turnkey.com)) for more information.

Common causes:

* You have exceeded your rate limit. We need to maintain a per-customer rate limit to ensure that the service we provide to all of our customers service can be exceptional.

Troubleshooting tips:

* If you are interested in increasing your rate limit reach out to us at [help@turnkey.com](mailto:help@turnkey.com)!

### this sub-organization cannot execute activities because its parent has been rate limited. Please reach out to the Turnkey team ([help@turnkey.com](mailto:help@turnkey.com)) for more information.

Common causes:

* You have exceeded your rate limit. We need to maintain a per-customer rate limit to ensure that the service we provide to all of our customers service can be exceptional.

Troubleshooting tips:

* If you are interested in increasing your rate limit reach out to us at [help@turnkey.com](mailto:help@turnkey.com)!

### request not authorized

Common causes:

* A user that created a request is not allowed to complete the action that was requested.
* For example a parent-organization trying to create a wallet within a sub-organization that does not have a delegated access API key.

Troubleshooting tips:

* Confirm that you are using the correct credentials for the request you are making.
* Confirm that all necessary [policies](/concepts/policies/overview) are in place so that the action that is requested can be performed.

### no valid authentication signature found for request

Common causes:

* No signature, or [stamp](/developer-reference/api-overview/stamps), is attached to a request. All requests made to Turnkey's api must be stamped so that Turnkey can authenticate and authorize the user who performed the request.

Troubleshooting tips:

* Take a look at the page on [stamps](/developer-reference/api-overview/stamps) to get some information about stamps, what they are, and how they are created.
* At a base level our SDK's abstract away the complicated stamping process for you. [Here](https://github.com/tkhq/sdk/tree/main/examples) are some example projects with our JS/TS SDK to get you started!

### could not find public key in organization

Common causes:

* The public key corresponding to the signature in a stamp is not found in the organization the request is targeting. This means that a request was formatted properly, but the authenticator used to create the request is not associated with the organization that the request was made for.

Troubleshooting tips:

* Ensure that you have added the proper authenticators to the organization you are targeting.
* Ensure that you are targeting the proper organization.

### failed while looking up public key in parent organization

Common causes:

* The public key corresponding to the signature in a stamp is not found in the organization the request is targeting. This means that a request was formatted properly, but the authenticator used to create the request is not associated with the organization that the request was made for.

Troubleshooting tips:

* Ensure that you have added the proper authenticators to the organization you are targeting.
* Ensure that you are targeting the proper organization.

### could not find public key in organization or its parent organization

Common causes:

* The public key corresponding to the signature in a stamp is not found in the organization the request is targeting. This means that a request was formatted properly, but the authenticator used to create the request is not associated with the organization that the request was made for.

Troubleshooting tips:

* Ensure that you have added the proper authenticators to the organization you are targeting.
* Ensure that you are targeting the proper organization.

### could not verify WebAuthN signature

Common causes:

* The signature used to create a stamp for a request cannot be verified for the organization the request is targeting. Again this means the request is formatted properly, but the authenticator used to create the request is not associated with the organization that the request was made for.

Troubleshooting tips:

* Ensure that you have added the proper authenticators to the organization you are targeting.
* Ensure that you are targeting the proper organization.

### credential ID could not be found in organization or its parent organization

Common causes:

* Turnkey cannot translate a public key obtained from a stamp that was created with a WebAuthn authenticator to a parent organization or one of its corresponding sub-organizations that the request was made for.

Troubleshooting tips:

* Ensure that you have added the proper authenticators to the organization you are targeting.
* Ensure that you are targeting the proper organization.

### public key could not be found in organization or its parent organization

Common causes:

* Turnkey cannot translate a public key obtained from a stamp to a parent organization or one of its corresponding sub-organizations that the request was made for.

Troubleshooting tips:

* Ensure that you have added the proper authenticators to the organization you are targeting.
* Ensure that you are targeting the proper organization.

### more than one suborg associated with a credential ID

Common causes:

* This error occurs for requests like [whoami](/api-reference/sessions/who-am-i). In particular this request tries to go backwards from the stamp to the public key then to a corresponding sub-orgnaization under a parent organization. If there are multiple sub-organizations with the same public key corresponding to an authenticator it is unknown who is initiating that particular request without more context.

Troubleshooting tips:

* Inlcude the sub-organization ID in the whoami request body.
* Avoid including the same authenticator in multiple sub-organizations

### more than one suborg associated with a public key

Common causes:

* This error occurs for requests like [whoami](/api-reference/sessions/who-am-i). In particular this request tries to go backwards from the stamp to the public key then to a corresponding sub-orgnaization under a parent organization. If there are multiple sub-organizations with the same public key it is unknown who is initiating that particular request without more context.

Troubleshooting tips:

* Inlcude the sub-organization ID in the whoami request body.
* Avoid including the same authenticator in multiple sub-organizations

### could not verify api key signature

Common causes:

* The signature used to create a stamp for a request cannot be verified for the organization the request is targeting. This means the request is formatted properly, but the api-key used to create the request is not associated with the organization that the request was made for.

Troubleshooting tips:

* Ensure that you have added the proper api-keys to the organization you are targeting.
* Ensure that you are targeting the proper organization.

### expired api key

Common causes:

* The API key used for the request has expired

Troubleshooting tips:

* Create a new API key to use for the request
* Create an API key that doesn't expire

### malformed activity stamp

Common causes:

* The stamp attached to a request is not formatted properly.

Troubleshooting tips:

* Take a look at the page on [stamps](/developer-reference/api-overview/stamps) to get some information about stamps, what they are, and how they are created.
* At a base level our SDK's abstract away the complicated stamping process for you. [Here](https://github.com/tkhq/sdk/tree/main/examples) are some example projects with our JS/TS SDK to get you started!

### could not extract webauthn stamp

Common causes:

* A stamp is not attached to a request.

Troubleshooting tips:

* Take a look at the page on [stamps](/developer-reference/api-overview/stamps) to get some information about stamps, what they are, and how they are created.
* At a base level our SDK's abstract away the complicated stamping process for you. [Here](https://github.com/tkhq/sdk/tree/main/examples) are some example projects with our JS/TS SDK to get you started!

### could not extract api key stamp

Common causes:

* A stamp is not attached to a request.

Troubleshooting tips:

* Take a look at the page on [stamps](/developer-reference/api-overview/stamps) to get some information about stamps, what they are, and how they are created.
* At a base level our SDK's abstract away the complicated stamping process for you. [Here](https://github.com/tkhq/sdk/tree/main/examples) are some example projects with our JS/TS SDK to get you started!

### cannot authenticate public API activity request without a stamp (X-Stamp/X-Stamp-Webauthn header)

Common causes:

* A stamp is not attached to a request.

Troubleshooting tips:

* Take a look at the page on [stamps](/developer-reference/api-overview/stamps) to get some information about stamps, what they are, and how they are created.
* At a base level our SDK's abstract away the complicated stamping process for you. [Here](https://github.com/tkhq/sdk/tree/main/examples) are some example projects with our JS/TS SDK to get you started!

### webauthn authenticator not found in organization

Common causes:

* The signature used to create a stamp for a request cannot be verified for the organization the request is targeting. This means the request is formatted properly, but the webauthn authenticator used to create the request is not associated with the organization that the request was made for.

Troubleshooting tips:

* Ensure that you have added the proper authenticator to the organization you are targeting.
* Ensure that you are targeting the proper organization.

### webauthn authenticator not found in organization or parent organization

Common causes:

* The signature used to create a stamp for a request cannot be verified for the organization the request is targeting. This means the request is formatted properly, but the webauthn authenticator used to create the request is not associated with the organization that the request was made for.

Troubleshooting tips:

* Ensure that you have added the proper authenticator to the organization you are targeting.
* Ensure that you are targeting the proper organization.

### invalid payload encoding

Common causes:

* This error is specific to the [sign\_raw\_payload](/api-reference/signing/sign-raw-payload) endpoint. A valid encoding needs to be passed so that Turnkey can properly sign the requested message.

Troubleshooting tips:

* Use a valid encoding scheme from the following: `PAYLOAD_ENCODING_HEXADECIMAL`, `PAYLOAD_ENCODING_TEXT_UTF8`

### invalid hash function

Common causes:

* This error is specific to the [sign\_raw\_payload](/api-reference/signing/sign-raw-payload) endpoint. A valid hash function needs to be passed so that Turnkey can properly hash and sign the requested message.

Troubleshooting tips:

* Use a valid hash function scheme from the following: `HASH_FUNCTION_NO_OP`, `HASH_FUNCTION_SHA256`, `HASH_FUNCTION_KECCAK256`, `HASH_FUNCTION_NOT_APPLICABLE`
* More information about `HASH_FUNCTION_NO_OP` [here](/faq#what-does-hash_function_no_op-mean)
* More information about `HASH_FUNCTION_NOT_APPLICABLE` [here](/faq#what-is-hash_function_not_applicable-and-how-does-it-differ-from-hash_function_no_op)

### invalid magic link template

Common causes:

* The email template provided for specific activities is invalid.

Troubleshooting tips:

* Read more about [bespoke email templates](/embedded-wallets/sub-organization-auth#bespoke-email-templates)
* Reach out to Turnkey at [help@turnkey.com](mailto:help@turnkey.com)!

### failed to get email template contents

Common causes:

* There was an error getting the email template for an associated activity

Troubleshooting tips:

* Reach out to Turnkey at [help@turnkey.com](mailto:help@turnkey.com)!

### failed to unmarshal template variables

Common causes:

* There are invalid template variables used in your email template.

Troubleshooting tips:

* Read more about [bespoke email templates](/embedded-wallets/sub-organization-auth#bespoke-email-templates)
* Reach out to Turnkey at [help@turnkey.com](mailto:help@turnkey.com)!

### authentication failed

Common causes:

* Turnkey was unable to authenticate the user based on the stamp provided.

Troubleshooting tips:

* Ensure that all proper authenticators and api-keys have been added to the organization.
* Read more about how to create a stamp for a request [here](/developer-reference/api-overview/stamps)

### failed to load organizations

Common causes:

* A request is targeting an unknown organization ID.

Troubleshooting tips:

* Ensure that the passed organization ID in the request is valid.

### policy label must be unique

Common causes:

* A new policy that is to be created shares the same name as a different policy. Policy names must be unique, and names in general must be unique per resource, so that they can be properly identified.

Troubleshooting tips:

* Change the label/name that will be used for the new policy.
* Delete the old policy.
* Update the old policy to have a new name.

### invalid policy consensus

Common causes:

* An invalid consensus expression is passed.

Troubleshooting tips:

* Read more about policy structure [here](/concepts/policies/overview#policy-structure)

### invalid policy condition

Common causes:

* An invalid condition expression is passed.

Troubleshooting tips:

* Read more about policy structure [here](/concepts/policies/overview#policy-structure)

### quorum threshold must be non-zero integer

Common causes:

* Quorum is the required amount of approvals by [root quorum members](/concepts/users/root-quorum) needed for an action to take place within an organization.

Troubleshooting tips:

* When creating a sub-organization or updating the root quroum amount, use a non-zero positive integer.

### quorum users missing

Common causes:

* A user marked as part of the root quorum is missing from the set of users within an organization. This is a validation error that can occur when trying to delete a user that is part of the root quorum.

Troubleshooting tips:

* Before deleting the user, remove them from the root quroum using [Update Root Quorum](/api-reference/organizations/update-root-quorum)

### invalid api key expiration

Common causes:

* An invalid expiration time was passed in for an api key's expiration time parameter when using [Create API Key](/api-reference/api-keys/create-api-keys)

Troubleshooting tips:

* The `expirationSeconds` parameter is passed as string of seconds of how long the key should last. Any non-positive non-integer string will be considered invalid.

### missing parameter: user authenticator attestation

Common causes:

* An attestation parameter is not passed when performing a request regarding an authenticator. For example [Create Authenticators](/api-reference/authenticators/create-authenticators)

Troubleshooting tips:

* The attestation generated by the authenticator includes a new key pair, the challenge, and device metadata that is signed, read more about attestations [here](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion).
* An example of getting the correct parameters needed to use the Create Authenticators endpoint can be found within our [react-components](https://github.com/tkhq/sdk/blob/main/examples/react-components/src/app/dashboard/page.tsx#L246-L276) SDK example

### invalid authenticator attestation

Common causes:

* An attestation parameter is not valid when performing a request regarding an authenticator. For example [Create Authenticators](/api-reference/authenticators/create-authenticators)

Troubleshooting tips:

* The attestation generated by the authenticator includes a new key pair, the challenge, and device metadata that is signed, read more about attestations [here](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion).
* An example of getting the correct parameters needed to use the Create Authenticators endpoint can be found within our [react-components](https://github.com/tkhq/sdk/blob/main/examples/react-components/src/app/dashboard/page.tsx#L246-L276) SDK example

### missing parameter: user authenticator attestation auth data

Common causes:

* The attestation auth data parameter is not valid when performing a request regarding an authenticator. For example [Create Authenticators](/api-reference/authenticators/create-authenticators). This parameter is obtained as part of the attestation object.

Troubleshooting tips:

* An example of getting the correct parameters needed to use the Create Authenticators endpoint can be found within our [react-components](https://github.com/tkhq/sdk/blob/main/examples/react-components/src/app/dashboard/page.tsx#L246-L276) SDK example

### user has exceeded maximum authenticators

Common causes:

* Turnkey allows up to 10 authenticators per user. This is a hard resource limit. More information on resource limits [here](/concepts/resource-limits).

Troubleshooting Tips:

* Delete any unnecessary authenticators attached to a user.
* Create a new user within the same organization and attach the authenicator to that user.

### user has exceeded maximum long-lived api keys

Common causes:

* Turnkey allows up to 10 long-lived api keys per user. This is a hard resource limit. More information on resource limits [here](/concepts/resource-limits).

Troubleshooting Tips:

* Delete any unnecessary long-lived API keys attached to a user.
* Create a new user within the same organization and attach the API key to that user.

### user has exceeded maximum short-lived api keys

Common causes:

* Turnkey allows up to 10 short-lived api keys per user. This is a hard resource limit. More information on resource limits [here](/concepts/resource-limits). Short-lived API keys will automatically be deleted from an organization when they are expired.

Troubleshooting Tips:

* Delete any unnecessary short-lived API keys attached to a user.
* Create a new user within the same organization and attach the API key to that user.

### missing wallet params

Common causes:

* Some wallet/wallet account parameters have been omitted when creating a sub-organization

Troubleshooting tips:

* Include all of the required parameters when creating a wallet during sub-organization creation. More info on the parameters [here](/api-reference/organizations/create-sub-organization).

### invalid path format

Common causes:

* This error occurs when an invalid path format parameter is passed to a request like [Create Wallet Accounts](/api-reference/wallets/create-wallet-accounts).

Troubleshooting tips:

* For now the path format must be: `PATH_FORMAT_BIP32`.

### invalid path

Common causes:

* An invalid path parameter is passed to a request like [Create Wallet Accounts](/api-reference/wallets/create-wallet-accounts). Paths cannot be reused within the same HD wallet.

Troubleshooting tips:

* The path is a string that is used to derive a new account within an HD wallet. A list of default paths per address format can be found [here](/concepts/wallets#hd-wallet-default-paths)
* Paths cannot be reused within the same HD wallet.

### invalid address format

Common causes:

* An invalid address format parameter is passed to a request like [Create Wallet Accounts](/api-reference/wallets/create-wallet-accounts).

Troubleshooting tips:

* Turnkey offers a wide range of support for many ecosystems. A list of valid address formats can be found in the table [here](/concepts/wallets#address-formats-and-curves).
* More about Turnkey and general ecosystem support can be found [here](/networks/framework).

### invalid curve

Common causes:

* An invalid curve parameter is passed to a request like [Create Wallet Accounts](/api-reference/wallets/create-wallet-accounts).

Troubleshooting tips:

* Before ecosystem level integrations Turnkey offers support on a curve level. This makes us extendable to any ecosystem that is based on a curve we support. A list of valid curve parameters can be found in the table [here](/concepts/wallets#address-formats-and-curves).
* More about Turnkey and general ecosystem support can be found [here](/networks/framework).

### curve required

Common causes:

* The curve parameter is not passed to a request like [Create Wallet Accounts](/api-reference/wallets/create-wallet-accounts).

Troubleshooting tips:

* Before ecosystem level integrations Turnkey offers support on a curve level. This makes us extendable to any ecosystem that is based on a curve we support. A list of valid curve parameters can be found in the table [here](/concepts/wallets#address-formats-and-curves).
* More about Turnkey and general ecosystem support can be found [here](/networks/framework).

### failed to parse transaction

Common causes:

* The unsignedTransaction payload cannot be decoded by the policy engine, it might have not been serlialized properly.

Troubleshooting tips:

* Try to decode the payload independently and see if it returns the expected result.
* We've noticed that for EIP1559 transaction types, the go-ethereum [MarshalBinary()](https://pkg.go.dev/github.com/ethereum/go-ethereum/core/types#Transaction.MarshalBinary) function will include the R, S, V values which should not be present within the serialized payload. Try to reconstruct the RLP payload manually without the R, S, V values, see the example below:

<Accordion defaultOpen={false} title="main.go">
  ```go
  package main

  import (
  "encoding/hex"
  "fmt"
  "log"
  "math/big"

  "github.com/ethereum/go-ethereum/common"
  "github.com/ethereum/go-ethereum/core/types"
  "github.com/ethereum/go-ethereum/rlp"
  )

  func main() {
  to := common.HexToAddress("0x...")

  txData := &types.DynamicFeeTx{
  	ChainID:    big.NewInt(1),
  	Nonce:      0,
  	GasTipCap:  big.NewInt(12344),
  	GasFeeCap:  big.NewInt(10010000000),
  	Gas:        100000,
  	To:         &to,
  	Value:      big.NewInt(1),
  	Data:       hexDecode("<tx_data>"),
  	AccessList: types.AccessList{}, // Optional
  }

  // RLP-encode only the fields included in the unsigned tx
  unsignedRLP := encodeUnsignedDynamicFeeTx(txData)

  // Prepend EIP-1559 type byte (0x02)
  serializedUnsigned := append([]byte{types.DynamicFeeTxType}, unsignedRLP...)

  fmt.Printf("Unsigned serialized tx: 0x%x\n", serializedUnsigned)

  }

  func encodeUnsignedDynamicFeeTx(tx *types.DynamicFeeTx) []byte {
  rlpInput := []interface{}{
  	tx.ChainID,
  	tx.Nonce,
  	tx.GasTipCap,
  	tx.GasFeeCap,
  	tx.Gas,
  	tx.To,
  	tx.Value,
  	tx.Data,
  	tx.AccessList,
  }
  out, err := rlp.EncodeToBytes(rlpInput)
  if err != nil {
  	log.Fatalf("failed to encode RLP: %v", err)
  }
  return out
  }

  func hexDecode(input string) []byte {
  b, err := hex.DecodeString(input)
  if err != nil {
  	log.Fatal(err)
  }
  return b
  }
  ```
</Accordion>

### No activity found with fingerprint. Consensus activities must target an existing activity by fingerprint

Common causes:

* This error occurs during the [Approve/Reject Activity](/api-reference/consensus/approve-activity) activity. The fingerprint parameter must be a fingerprint of a valid activity.

Troubleshooting tips:

* Confirm that a valid fingerprint of an activity that requires approval or rejection is passed as part of this activity.

### internal server error

Common causes:

* This error is thrown for a variety of internal server errors that are not due to user error. These activities will have an error id passed with them like: `internal server error (9fbfda54-7141-4192-ae72-8bac3512149a)` that can be used for troubleshooting.

Troubleshooting tips:

* Retry the activity. This could be a fluke case and the following activity could pass without failure.
* If you think there is problem or if your service is degraded, please reach out to Turnkey [help@turnkey.com](mailto:help@turnkey.com) and provide the error id in the error message.


# Introduction
Source: https://docs.turnkey.com/developer-reference/api-overview/intro

Turnkey's API is a remote procedure call (RPC) API.

## RPC/HTTP

We chose RPC-over-HTTP for convenience and ease-of-use. Most of our users should be able to integrate with our API without a major re-architecture of their existing systems.

Many client libraries are available to make requests to a RPC/HTTP API, across many languages. Turnkey will provide SDKs for the most popular programming languages. For other languages, a RPC/HTTP API ensures there is an easy integration path available via raw http clients.

## POST-only

If you look at the [API reference](/api-reference/overview) you'll notice that all API calls to Turnkey are HTTP POST requests. Requests contain a POST body and a header with a digital signature over the POST body. We call this digital signature a [Stamp](/developer-reference/api-overview/stamps).

Requests must be stamped by registered user credentials and verified by Turnkey's secure enclaves before they are processed. This ensures cryptographic integrity end-to-end which eliminates the ability for any party to modify a user's request.

### Queries and Submissions

Turnkey's API is divided into 2 broad categories: queries and submissions.

* Queries are read requests (e.g. `get_users`, `list_users`)
* Submissions are requests to execute a workload (e.g. `create_policy`, `sign_transaction`, `delete_user`)

## Dive Deeper

* Creating your first [Stamp](/developer-reference/api-overview/stamps)
* Fetching data with [Queries](/developer-reference/api-overview/queries)
* Executing workloads with [Submissions](/developer-reference/api-overview/submissions)


# Queries
Source: https://docs.turnkey.com/developer-reference/api-overview/queries

Queries are read requests to Turnkey's API. Query URL paths are prefixed with `/public/v1/query`. Queries are not subject to enforcement of the policy engine. All users within an organization can read any data within the organization.

Additionally, parent organizations have the ability to query data for all of their sub-organizations.


# Stamps
Source: https://docs.turnkey.com/developer-reference/api-overview/stamps

Every request made to Turnkey must include a signature over the POST body attached as a HTTP header. Our secure enclave applications use this signature to verify the integrity and authenticity of the request.

### API Keys

To create a valid, API key stamped request follow these steps:

<Steps>
  <Step>
    Sign the JSON-encoded POST body with your API key to produce a `signature` (DER-encoded)
  </Step>

  <Step>
    Hex encode the `signature`
  </Step>

  <Step>
    Create a JSON-encoded stamp:

    * `publicKey`: the public key of API key, note that only P-256 keys (API\_KEY\_CURVE\_P256) are currenlty supported
    * `signature`: the signature produced by the API key
    * `scheme`: `SIGNATURE_SCHEME_TK_API_P256`
  </Step>

  <Step>
    Base64URL encode the stamp
  </Step>

  <Step>
    Attach the encoded string to your request as a `X-Stamp` header
  </Step>

  <Step>
    Submit the stamped request to Turnkey's API
  </Step>
</Steps>

### WebAuthn

To create a valid, Webauthn authenticator stamped request follow these steps:

<Steps>
  <Step>
    Compute the webauthn challenge by hashing the POST body bytes (JSON encoded) with SHA256. For example, if the POST body is `{"organization_id": "1234", "type": "ACTIVITY_TYPE_CREATE_API_KEYS", "params": {"for": "example"}`, the webauthn challenge is the string `7e8b4653fc7e51dc119cea031942f4693b4742ceca4dda269b925802b38b2147`
  </Step>

  <Step>
    Include the challenge amongst WebAuthn signing options. Refer to the existing stamper implementations in the [following section](#stampers)) for examples

    * Note that if you need to pass the challenge as bytes, you'll need to utf8-encode the challenge string (in JS, the challenge bytes will be `TextEncoder().encode("7e8b4653fc7e51dc119cea031942f4693b4742ceca4dda269b925802b38b2147")`)
    * Additional note for React Native contexts: the resulting string should then additionally be base64-encoded. See [implementation](https://github.com/tkhq/sdk/blob/b52db566e79a65eec8d8e7066053d6a3ac5f3943/packages/react-native-passkey-stamper/src/util.ts#L5-L10)
  </Step>

  <Step>
    Create a JSON-encoded stamp:

    * `credentialId`: the id of the webauthn authenticator
    * `authenticatorData`: the authenticator data produced by Webauthn assertion
    * `clientDataJson`: the client data produced by the Webauthn assertion
    * `signature`: the signature produced by the Webauthn assertion
  </Step>

  <Step>
    Attach the JSON-encoded stamp to your request as a `X-Stamp-Webauthn` header

    * Header names are case-insensitive (so `X-Stamp-Webauthn` and `X-Stamp-WebAuthn` are considered equivalent)

    * Unlike API key stamps, the format is just JSON; no base64URL encoding necessary! For example: `X-Stamp-Webauthn: {"authenticatorData":"UaQZ...","clientDataJson":"eyJ0...","credentialId":"Grf...","signature":"MEQ..."}`
  </Step>

  <Step>
    Submit the stamped request to Turnkey's API. If you would like your client request to be proxied through a backend, refer to the patterns mentioned [here](/authentication/passkeys/integration#proxying-signed-requests). An example application that uses this pattern can be found at wallet.tx.xyz (code [here](https://github.com/tkhq/demo-embedded-wallet/))
  </Step>
</Steps>

### Stampers

Our [JS SDK](https://github.com/tkhq/sdk) and [CLI](https://github.com/tkhq/tkcli) abstract request stamping for you. If you choose to use an independent client, you will need to implement this yourself. For reference, check out our implementations:

<CardGroup>
  <Card title="API Key Stamper" href="https://github.com/tkhq/sdk/blob/main/packages/api-key-stamper" icon="github" iconType="solid" horizontal />

  <Card title="WebAuthn Stamper" href="https://github.com/tkhq/sdk/blob/main/packages/webauthn-stamper" icon="github" iconType="solid" horizontal />

  <Card title="React Native Stamper" href="https://github.com/tkhq/sdk/tree/main/packages/react-native-passkey-stamper" icon="github" iconType="solid" horizontal />

  <Card title="iFrame Stamper" href="https://github.com/tkhq/sdk/tree/main/packages/iframe-stamper" icon="github" iconType="solid" horizontal />

  <Card title="Telegram Cloud Storage Stamper" href="https://github.com/tkhq/sdk/tree/main/packages/telegram-cloud-storage-stamper" icon="github" iconType="solid" horizontal />

  <Card title="IndexedDb Stamper" href="https://github.com/tkhq/sdk/tree/main/packages/indexed-db-stamper" icon="github" iconType="solid" horizontal />

  <Card title="CLI" href="https://github.com/tkhq/tkcli/blob/main/src/cmd/turnkey/pkg/request.go" icon="github" iconType="solid" horizontal />

  <Card title="Wallet Stamper" href="https://github.com/tkhq/sdk/tree/main/packages/wallet-stamper" icon="github" iconType="solid" horizontal />
</CardGroup>

Our CLI has a `--no-post` option to generate stamps without sending anything over the network. This is a useful tool should you have trouble with debugging stamping-related logic. A sample command might look something like:

```json
turnkey request --no-post --host api.turnkey.com --path /api/v1/sign --body '{"payload": "hello from TKHQ"}'
{
   "curlCommand": "curl -X POST -d'{\"payload\": \"hello from TKHQ\"}' -H'X-Stamp: eyJwdWJsaWNLZXkiOiIwMzI3YTUwMDMyZTZmMDYzMWQ1NjA1YjZhZGEzMmI3NzkwNzRmMzQ2ZTgxYjY4ZTEyODAxNjQwZjFjOWVlMDNkYWUiLCJzaWduYXR1cmUiOiIzMDQ0MDIyMDM2MjNkZWZkNjE4ZWIzZTIxOTk3MDQ5NjQwN2ViZTkyNDQ3MzE3ZGFkNzVlNDEyYmQ0YTYyNjdjM2I1ZTIyMjMwMjIwMjQ1Yjc0MDg0OGE3MmQwOGI2MGQ2Yzg0ZjMzOTczN2I2M2RiM2JjYmFkYjNiZDBkY2IxYmZiODY1NzE1ZDhiNSIsInNjaGVtZSI6IlNJR05BVFVSRV9TQ0hFTUVfVEtfQVBJX1AyNTYifQ' -v 'https://api.turnkey.com/api/v1/sign'",
   "message": "{\"payload\": \"hello from TKHQ\"}",
   "stamp": "eyJwdWJsaWNLZXkiOiIwMzI3YTUwMDMyZTZmMDYzMWQ1NjA1YjZhZGEzMmI3NzkwNzRmMzQ2ZTgxYjY4ZTEyODAxNjQwZjFjOWVlMDNkYWUiLCJzaWduYXR1cmUiOiIzMDQ0MDIyMDM2MjNkZWZkNjE4ZWIzZTIxOTk3MDQ5NjQwN2ViZTkyNDQ3MzE3ZGFkNzVlNDEyYmQ0YTYyNjdjM2I1ZTIyMjMwMjIwMjQ1Yjc0MDg0OGE3MmQwOGI2MGQ2Yzg0ZjMzOTczN2I2M2RiM2JjYmFkYjNiZDBkY2IxYmZiODY1NzE1ZDhiNSIsInNjaGVtZSI6IlNJR05BVFVSRV9TQ0hFTUVfVEtfQVBJX1AyNTYifQ"
}
```


# Submissions
Source: https://docs.turnkey.com/developer-reference/api-overview/submissions

Submissions are requests to securely execute a workload. Submission URL paths are prefixed with `/public/v1/submit`. Submissions requests, if valid, produce an `Activity`.

### Activities

Activities typically create, modify, or utilize a resource within Turnkey and are subject to consensus or condition enforcement via the policy engine. Activities are executed optimistically synchronous. This means that if we can process the request synchronously, we will. Otherwise, we'll fallback to asynchronous processing. Your services or applications should account for this by checking the response for the activity state:

* If `activity.status == ACTIVITY_STATUS_COMPLETED`, `activity.result` field will be populated with a successful response.
* If `activity.status == ACTIVITY_STATUS_FAILED`, `activity.failure` field will be populated with a failure reason.
* If `activity.status == ACTIVITY_STATUS_CONSENSUS_NEEDED`, additional signatures are required to process the request.
* If `activity.status == ACTIVITY_STATUS_PENDING`, the request is processing asynchronously.

You can get activity status updates by:

* Re-submitting the request. See the notes on idempotency below.
* Polling `get_activity` with the `activity.id`

### Idempotency

The submission API is idempotent. For each request, the POST body is hashed into a fingerprint. Any two requests with the same fingerprint are considered the same request. If you resubmit the request, you'll get the same activity. If you want a new activity, you should modify the request timestamp `timestampMs` to produce a new fingerprint.


# Using LLMs
Source: https://docs.turnkey.com/developer-reference/using-llms



### Using AI to integrate Turnkey

Turnkey documentation is now AI-enhanced. Whether you're using ChatGPT, Claude, or a custom LLM integration,
we've made it easy to feed Turnkey docs directly into your models—and even easier to surface relevant answers programmatically or in your dev tools.

#### LLM Feed Files

To help LLMs stay current on how Turnkey works, we expose two continuously updated files for ingestion:

* [`llms.txt`](https://docs.turnkey.com/llms.txt) - A concise, high-signal list of top-level docs pages, great for smaller models or quick context building.
* [`llms-full.txt`](https://docs.turnkey.com/llms-full.txt) - A more exhaustive listing that includes nearly all pages, ideal for full-context indexing.

You can regularly ingest these URLs into your custom GPTs or other LLM apps to ensure Turnkey-specific questions are grounded in accurate technical detail.

#### Search Turnkey Docs with Mintlify MCP

You can integrate our documentation with any Mintlify MCP-compatible client to perform contextual searches without leaving your development environment.

To install and register the Turnkey MCP server, run:

```bash
npx @mintlify/mcp@latest add turnkey-0e7c1f5b
```

On execution, you will see output similar to:

```
🛠  Installing Tools:

   search
   Search across the Turnkey documentation to fetch relevant context for a given query

✔  Created new MCP server at ~/.mcp/turnkey-0e7c1f5b

?  Select MCP client: › Use arrow keys to select. Return to submit.
❯   Cursor
    Windsurf
    Claude Desktop
    All

To start the server, run:
```

```bash
node ~/.mcp/turnkey-0e7c1f5b/src/index.js
```

**Supported MCP Clients:**

* Cursor
* Windsurf
* Claude Desktop
* All

#### Chat With Our Docs (Contextual Deep Links)

We've enabled Mintlify's `contextual` feature across Turnkey's docs:

* You can copy any Turnkey docs page as Markdown for reuse or embedding.
* Even better: you can launch a chat session with Claude or ChatGPT preloaded with that specific page's context.

This is perfect for troubleshooting, code generation, or just diving deeper into a topic with AI assistance.

To enable this, we're using Mintlify's contextual param:\
[Learn more here.](https://mintlify.com/docs/settings/global#param-contextual)


# Activity Webhooks
Source: https://docs.turnkey.com/developer-reference/webhooks

Webhooks provide a powerful mechanism to receive real-time notifications about activity requests in your Turnkey organization. Additionally, you'll be able to receive all activity requests for both the parent organization and all its child organizations. This functionality can be enabled via the organization feature capabilities of our platform, as detailed in the section on [organization features](/concepts/organizations#features).

This guide is designed to walk you through the process of setting up webhooks, from environment preparation to verification of successful event capturing.

## Prerequisites

Before diving into webhook configuration, ensure you have completed the necessary preliminary steps outlined in our [Quickstart Guide](/getting-started/quickstart#create-your-turnkey-organization). This guide will assist you in setting up a new organization and installing the Turnkey CLI. Note: We'll create a new API Key for testing webhooks below.

## Environment Setup

Begin by setting the necessary environment variables:

```bash
ORGANIZATION_ID=<your-organization-id>KEY_NAME=webhook-test
```

### API Key Generation

Generate a new API key using the Turnkey CLI with the following command:

```bash
turnkey generate api-key --organization $ORGANIZATION_ID --key-name $KEY_NAME
```

### Ngrok Installation and Setup

Ngrok is a handy tool that allows you to expose your local server to the internet. Follow these steps to set it up:

<Steps>
  <Step>Download Ngrok from [their website](https://ngrok.com/download).</Step>

  <Step>
    Follow the provided instructions to install Ngrok and configure your auth
    token.
  </Step>
</Steps>

### Local Server Setup

Open a new terminal window and set up a local server to listen for incoming webhook events:

```bash
nc -l 8000
```

### Ngrok Tunneling

In another terminal, initiate Ngrok to forward HTTP requests to your local server:

```bash
ngrok http 8000
```

Here's an output of the above command:

```bash
Session Status                online
Account                       Satoshi Nakamoto (Plan: Free)
Update                        update available (version 3.7.0, Ctrl-U to update)
Version                       3.6.0
Region                        United States (us)
Latency                       22ms
Web Interface                 http://127.0.0.1:4041
Forwarding                    https://04b2-121-74-183-35.ngrok-free.app -> http://localhost:8000

Connections                   ttl     opn     rt1     rt5     p50     p90
                              0       0       0.00    0.00    0.00    0.00
```

Save the ngrok URL as an environment variable:

```bash
WEBHOOK_URL=https://04•••35.ngrok-free.app # Replace with the URL provided by ngrok
```

### Verifying Ngrok Setup

To ensure Ngrok is correctly forwarding requests, perform a test using curl:

```bash
curl -X POST $WEBHOOK_URL -d "{}"
```

Example output:

```bash
POST / HTTP/1.1
Host:04b2-121-74-183-35.ngrok-free.app
User-Agent: curl/8.4.0
Content-Length: 2
Accept: */*
Content-Type: application/x-www-form-urlencoded
X-Forwarded-For: 195.88.127.47
X-Forwarded-Host: 04b2-121-74-183-35.ngrok-free.app
X-Forwarded-Proto: https
Accept-Encoding: gzip
{}
```

After executing this command, you should see the request appear in the terminal where `nc` is running. Terminate the `nc` session by pressing CTRL+C and restart it by rerunning the `nc` command.

## Configuring the Webhook URL

Set your webhook URL using the Turnkey CLI with the following command:

```bash
turnkey request --path /public/v1/submit/set_organization_feature --body '{
  "timestampMs": "'"$(date +%s)"'000",
  "type": "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE",
  "organizationId": "'"$ORGANIZATION_ID"'",
  "parameters": {
    "name": "FEATURE_NAME_WEBHOOK",
    "value": "'"$WEBHOOK_URL"'"
  }
}' --key-name=$KEY_NAME
```

### Testing Your Webhook

Assuming the previous request executed successfully it's time to test out your webhook! In order to verify that your webhook is correctly configured and receiving data, we can simply execute the previous turnkey request command again which creates a new activity request that will be captured by your webhook. Monitor the terminal with `nc` running to observe the incoming webhook data.

## Conclusion

By following these steps, you should now have a functioning webhook setup that captures all activity requests for your organization and its sub-organizations. If you encounter any issues or have feedback about this feature, reach out on [slack](https://join.slack.com/t/clubturnkey/shared_invite/zt-31v4yhgw6-PwBzyNsWCCBTk2xft3EoHQ)!


# Add an Additional Passkey
Source: https://docs.turnkey.com/embedded-wallets/code-examples/add-credential

This guide demonstrates how to add a new credential (specifically, a passkey) to an existing wallet using the Turnkey SDK.

### Initialize the Passkey Client

Begin by initializing the Turnkey SDK by passing in a config object containing:

* `rpId`: The [Relying Party](https://developer.mozilla.org/en-US/docs/Glossary/Relying_party) Identifier, which is the effective domain of your application.
* `apiBaseUrl`: The base URL of the Turnkey API: `https://api.turnkey.com`
* `defaultOrganizationId`: Your parent organization ID, which you can find in the [Turnkey dashboard](https://app.turnkey.com/dashboard).

<Accordion title="What's the purpose of the rpId?">
  The `rpId` is used in WebAuthn to uniquely identify the server that the passkey is associated with. The `rpId` is typically the effective domain of the web application, which is the domain portion of the URL without any subdomains. For example, if your application is hosted at `app.example.com`, the `rpId` would typically be `example.com`. This ensures that credentials are scoped to the correct domain and cannot be used by other domains, enhancing security.
</Accordion>

<Tabs>
  <Tab title="Next.js">
    First, wrap your application with the `TurnkeyProvider` in your `app/layout.tsx` file:

    ```ts app/layout.tsx
    import { TurnkeyProvider } from "@turnkey/sdk-react";

    export default function RootLayout({
      children,
    }: {
      children: React.ReactNode;
    }) {
      return (
        <html lang="en">
          <body>
            <TurnkeyProvider
              config={{
                // The domain of your application
                rpId: process.env.NEXT_PUBLIC_TURNKEY_RP_ID,
                apiBaseUrl: process.env.NEXT_PUBLIC_TURNKEY_API_BASE_URL,
                defaultOrganizationId:
                  process.env.NEXT_PUBLIC_ORGANIZATION_ID,
              }}
            >
              {children}
            </TurnkeyProvider>
          </body>
        </html>
      );
    }
    ```

    Then, create a new file `app/add-passkey.tsx` where we'll implement the passkey functionality:

    ```tsx app/add-passkey.tsx
    "use client";

    import { useState } from "react";
    import { useTurnkey } from "@turnkey/sdk-react";

    export default function AddPasskey() {
      const { passkeyClient } = useTurnkey();

      // We'll add more functionality here in the following steps

      return <div>{/* We'll add UI elements here */}</div>;
    }
    ```
  </Tab>

  <Tab title="TypeScript">
    Create a new file `src/add-passkey.ts`:

    ```ts src/add-passkey.ts
    import { Turnkey } from "@turnkey/sdk-browser";

    // Initialize the Turnkey SDK with your organization credentials
    const turnkey = new Turnkey({
      rpId: process.env.TURNKEY_RP_ID, // Your relying party ID
      apiBaseUrl: process.env.TURNKEY_API_BASE_URL, // Turnkey API base URL
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID, // Your parent organization ID
    });

    // Initialize the Passkey Client
    const passkeyClient = turnkey.passkeyClient();

    // We'll add more functionality here in the following steps
    ```
  </Tab>
</Tabs>

### Authenticate the User

Now that that the Passkey Client is initialized, we'll call the `login` function which will prompt the user to authenticate with their passkey. Additionally, this function will set the current user in local storage upon successful authentication, which will be used later when creating an additional authenticator.

<Info>
  The user object which gets stored in local storage is defined as follows:

  ```
  export interface User {
    userId: string;
    username: string;
    organization: SubOrganization;
    readOnlySession?: ReadOnlySession;
  }
  ```
</Info>

<Tabs>
  <Tab title="Next.js">
    ```tsx app/add-passkey.tsx
    // ... previous code

    export default function AddPasskey() {
      // We'll need the base Turnkey client to get the current user
      const { passkeyClient, turnkey } = useTurnkey();

      // ... previous code

      const getUser = async () => {
        // Get the current user from local storage,
        // we'll need the `userId` to create the authenticator in the next step
        const user = await turnkey?.getCurrentUser();
        if (user) {
          console.log("User retrieved successfully");
        }
        // return the user to be used in the next step
        return user;
      };

      return (
        <div>
          <button onClick={login}>Login</button>
        </div>
      );
    }
    ```
  </Tab>

  <Tab title="TypeScript">
    ```ts src/add-passkey.ts
    // ... previous code

    const login = async () => {
      const response = await passkeyClient.login();
      if (response.organizationId) {
        console.log("User authenticated successfully");
      } else {
        console.log("User authentication failed");
      }
    };
    ```
  </Tab>
</Tabs>

### Get the current user

Before creating a new passkey, we'll get the current user. This function will retrieve the user from local storage, which was set after calling the `login` function. We'll need the `userId` to create the authenticator in the final step.

<Tabs>
  <Tab title="Next.js">
    ```ts app/add-passkey.tsx
    // ... previous code

    export default function AddPasskey() {
      // We'll need the base Turnkey client to get the current user
      const { passkeyClient, turnkey } = useTurnkey();

      // ... previous code

      const getUser = async () => {
        // Get the current user from local storage,
        // we'll need the `userId` to create the authenticator in the next step
        const user = await turnkey?.getCurrentUser();
        if (user) {
          console.log("User retrieved successfully");
        }
        // return the user to be used in the next step
        return user;
      };

      return (
        <div>
          <button onClick={login}>Login</button>
        </div>
      );
    }
    ```
  </Tab>

  <Tab title="TypeScript">
    ```ts src/add-passkey.ts
    // ... previous code

    const getCurrentUser = async () => {
      // Get the current user from local storage,
      // we'll need the `userId` to create the authenticator in the next step
      const user = await turnkey?.getCurrentUser();
      if (user) {
        console.log("User retrieved successfully");
      }
      // return the user to be used in the next step
      return user;
    };
    ```
  </Tab>
</Tabs>

### Create User Passkey

Now that you have authenticated the user, you can call the `createUserPasskey` function to create a new user passkey credential. Calling this method will prompt the user to create a passkey, which will be securely stored by their browser. This credential will be associated with the user's account and used for future authentication. Once the credential is created, we'll use it in the next step to create a new authenticator for the user.

<Note>
  The credential includes an encoded challenge and attestation. The encoded challenge ensures the request is fresh and legitimate, while the attestation verifies the authenticity of the device creating the credential. For more information on how passkeys work, including details on the challenge and attestation objects, you can refer to the [Passkeys Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API#passkeys).
</Note>

<Tabs>
  <Tab title="Next.js">
    ```tsx app/add-passkey.tsx
    // ... previous code

    export default function AddPasskey() {
      const { passkeyClient } = useTurnkey();

      // ... previous code

      // We'll pass the user object returned from `getUser` to this function
      const createNewPasskey = async (user: User) => {
        const credential = await passkeyClient?.createUserPasskey({
          publicKey: {
            // This is the name of the passkey that will be displayed to the user
            rp: {
              name: "Wallet Passkey",
            },
            user: {
              // We can use the username as the name and display name
              name: user.username,
              displayName: user.username,
            },
          },
        });

        // we'll use this credential in the next step to create a new authenticator
        return credential;
      };

      return (/* ... */);
    }
    ```
  </Tab>

  <Tab title="TypeScript">
    ```ts src/add-passkey.ts
    // ... previous code

    // We'll pass the user object returned from `getUser` to this function
    const createNewPasskey = async (user: User) => {
      const credential = await passkeyClient?.createUserPasskey({
        publicKey: {
          // This is the name of the passkey that will be displayed to the user
          rp: {
            name: "Wallet Passkey",
          },
          user: {
            // We can use the username as the name and display name
            name: user.username,
            displayName: user.username,
          },
        },
      });
      // we'll use this credential in the next step to create a new authenticator
      return credential;
    };
    ```
  </Tab>
</Tabs>

### Add the credential to the wallet

Now that you have created a new user passkey credential, we'll use this credential to create a new passkey authenticator for the user. We'll need the userId to create the authenticator, so we'll get the current user first. This value comes from local storage which was set in the previous step when the user successfully authenticated via the `login` function.

<Tabs>
  <Tab title="Next.js">
    ```tsx app/add-passkey.tsx
    // ... previous code

    export default function AddPasskey() {
      const { passkeyClient, turnkey } = useTurnkey();

      // ... previous code

      const addPasskey = async () => {
        const user = await getUser();
        const credential = await createNewPasskey(user);

        const authenticatorsResponse = await passkeyClient.createAuthenticators({
          authenticators: [
            {
              authenticatorName: "New Passkey Authenticator",
              challenge: credential.encodedChallenge,
              attestation: credential.attestation,
            },
          ],
          userId: user.userId,
        });

        // Check if the authenticator was created successfully
        if (authenticatorsResponse?.activity.id) {
          console.log("Authenticator created successfully");
        }
      };

      return (
        <div>
          {/* Add a button to add the passkey to the wallet */}
          <button onClick={addPasskey}>AddPasskey</button>
          <button onClick={login}>Login</button>
        </div>
      );
    }
    ```

    <Accordion title="Complete  add-passkey.tsx component">
      ```tsx app/add-passkey.tsx
      "use client";

      import { useState } from "react";
      import { useTurnkey } from "@turnkey/sdk-react";

      export default function AddPasskey() {
      const { passkeyClient, turnkey } = useTurnkey();

      const login = async () => {
        const response = await passkeyClient?.login();
        if (response.organizationId) {
          console.log("User authenticated successfully");
        } else {
          console.log("User authentication failed");
        }
      };

      const getUser = async () => {
        const user = await turnkey?.getCurrentUser();
        if (user) {
          console.log("User retrieved successfully");
        }
        return user;
      };

      const createNewPasskey = async (user: User) => {
        const credential = await passkeyClient?.createUserPasskey({
          publicKey: {
            rp: {
              name: "Wallet Passkey",
            },
            user: {
              name: user.username,
              displayName: user.username,
            },
          },
        });

        return credential;
      };

      const addPasskey = async () => {
        const user = await getUser();
        const credential = await createNewPasskey(user);

        const authenticatorsResponse = await passkeyClient.createAuthenticators({
          authenticators: [
            {
              authenticatorName: "New Passkey Authenticator",
              challenge: credential.encodedChallenge,
              attestation: credential.attestation,
            },
          ],
          userId: user.userId,
        });

        if (authenticatorsResponse?.activity.id) {
          console.log("Authenticator created successfully");
        }
      };

      return (
        <div>
          <button onClick={addPasskey}>AddPasskey</button>
          <button onClick={login}>Login</button>
        </div>
      );
      }
      ```
    </Accordion>
  </Tab>

  <Tab title="TypeScript">
    ```ts src/add-passkey.ts
    // ... previous code

    const addPasskey = async () => {
      const user = await getUser();
      const credential = await createNewPasskey(user);

      // Check if the credential was created successfully
      if (!credential) {
        console.log("Credential not created");
        return;
      }

      const authenticatorsResponse = await passkeyClient.createAuthenticators({
        authenticators: [
          {
            authenticatorName: "New Passkey Authenticator",
            challenge: credential.encodedChallenge,
            attestation: credential.attestation,
          },
        ],
        userId: user.userId,
      });

      // Check if the authenticator was created successfully
      if (authenticatorsResponse?.activity.id) {
        console.log("Authenticator created successfully");
      }
    };
    ```
  </Tab>
</Tabs>

### Optional: Read/Write Sessions

In some cases, you may want to create a read/write session for the user to reduce the number of passkey prompts. This session can be used instead of the passkey to sign requests to Turnkey's API to improve the user experience.

In the this tutorial we used the passkey to authenticate the request to create a new authenticator. The result is that the user will be prompted 3 times:

1. To login
2. To create the new passkey
3. To authenticate the request to create a new authenticator

By creating a read/write session, we can reduce the number of passkey prompts to 2:

1. To login and create a session
2. To authenticate the request to create a new authenticator

To create a read/write session, we simply replace `passkeyClient.login()` with `passkeyClient.loginWithReadwriteSession()`:

```ts src/add-passkey.ts
// ... previous code

const login = async () => {
  const response = await passkeyClient.loginWithReadwriteSession();
  // ... previous code
};
```

Assuming the login is successful, a read/write session object will be stored in local storage. We'll use the stored session in conjunction with the iframe client to authenticate the create authenticator request.

<Tabs>
  <Tab title="Next.js">
    We'll use the active client returned from the `useTurnkey` hook which will be initialized with the read/write session. The rest of the code remains the same.

    ```tsx app/add-passkey.tsx
    // ... previous code

    export default function AddPasskey() {
      const { getActiveClient, turnkey } = useTurnkey();

      // ... previous code

      const addPasskey = async () => {
        const user = await getUser();
        const credential = await createNewPasskey(user);

        // Get the active client which returns the iframe client initialized with the read/write session
        const activeClient = await getActiveClient();

        // Since we're using the read/write session this won't prompt the user
        const authenticatorsResponse = await activeClient.createAuthenticators({
          // ...
        });

        // ... rest of the code remains the same
      };

      return (/* ... */);
    }
    ```
  </Tab>

  <Tab title="TypeScript">
    ##### 1. Initialize the iframe client

    We'll create a new function to initialize the iframe client and inject the read/write session.

    ```ts src/add-passkey.ts
    // ... previous code

    const getIframeClient = async () => {
      const iframeContainerId = "turnkey-auth-container-id";

      const authIframeClient = await turnkey.iframeClient(
        document.getElementById(iframeContainerId),
      );

      const readWriteSession = await turnkey?.getReadWriteSession();

      if (readWriteSession) {
        const injected = await authIframeClient?.injectCredentialBundle(
          readWriteSession.authBundle,
        );
      }

      return authIframeClient;
    };
    ```

    <Info>
      When using the TypeScript SDK, you'll need to ensure that the HTML element exists somewhere in the rendered DOM.

      ```
      <div id="turnkey-auth-iframe-container-id" />
      ```
    </Info>

    ##### 2. Update the `addPasskey` function

    We'll update the `addPasskey` function to use the iframe client to authenticate the request to create a new authenticator.

    ```ts src/add-passkey.ts
    // ... previous code

    const addPasskey = async () => {
      // ... previous code

      const iframeClient = await getIframeClient();

      const authenticatorsResponse = await iframeClient.createAuthenticators({
        // ...
      });
      // ... rest of the code remains the same
    };
    ```
  </Tab>
</Tabs>

## Conclusion

In this guide, we've walked through the process of adding a new credential to an existing wallet using the Turnkey SDK. By following these steps, you can improve the usability of your application by allowing users to create multiple authentication methods. This flexibility enables users to add a hardware security device like a Yubikey, or a native passkey via providers like iCloud keychain or 1Password, enhancing their overall experience with your application.

For a complete example, check out our [demo embedded wallet](https://github.com/tkhq/demo-embedded-wallet/blob/main/src/components/add-passkey.tsx).


# Authenticate a User with Email
Source: https://docs.turnkey.com/embedded-wallets/code-examples/authenticate-user-email



<Steps>
  <Step title="Initialize Turnkey">
    ```JavaScript
    import { Turnkey } from "@turnkey/sdk-browser";

    const turnkey = new Turnkey({
      apiBaseUrl: "https://api.turnkey.com",
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
    });
    ```
  </Step>

  <Step title="Initialize the Iframe Client">
    Note that the iframe client must be initialized with the dom element where the iframe will be injected. If you are using the [react-sdk](/sdks/react) you can import the `iframeClient` from the `useTurnkey()` hook without this step and the iframe dom element will be managed for you. Note that the `iframeClient` must be initialized before calling `emailAuth` because you need the `iframePublicKey` as a parameter to the `emailAuth` call.

    ```JavaScript
    import { Turnkey, TurnkeySDKBrowserConfig } from "@turnkey/sdk-browser";

    const turnkeyConfig: TurnkeySDKBrowserConfig = {...};
    const turnkey = new Turnkey(turnkeyConfig);

    const iframeContainerId = "turnkey-auth-iframe-container-id";

    // ensure the HTML element exists somewhere in the rendered DOM
    <div id={iframeContainerId} />

    const iframeClient = await turnkey.iframeClient(document.getElementById(iframeContainerId))
    ```
  </Step>

  <Step title="Call emailAuth from your backend">
    ```JavaScript
    await turnkey.serverSign(
      "emailAuth",
      [{
        email: <userEmail>,
        targetPublicKey: iframeClient.iframePublicKey,
        organizationId: <userSubOrganizationId>
      }]
    )
    ```

    If you need to lookup the user `subOrganizationId` by email, you can call the `getSubOrgIds` method with the `filterType` parameter set to `"EMAIL"`

    ```JavaScript
    const subOrgIds = await turnkey.serverSign(
      "getSubOrgIds",
      [{
        filterType: "EMAIL",
        filterValue: <userEmail>
      }]
    )

    const userSubOrganizationId = subOrgIds.organizationIds[0];
    ```
  </Step>

  <Step title="Inject the emailed credentialBundle into the iframe to authenticate the user">
    ```JavaScript
    const authenticationResponse =
      await iframeClient.injectCredentialBundle(credentialBundle);
    if (authenticationResponse) {
      // user is authenticated and can perform actions from the `iframeClient`
      await iframeClient.login();
      navigate("/authenticated-route");
    } else {
      // credential bundle does not match emailed credential
      navigate("/not-authenticated-route");
    }
    ```
  </Step>

  <Step title="Make read requests on behalf of the authenticated user from the currentUserSession">
    ```JavaScript
    const currentUserSession = await turnkey.currentUserSession();
    const walletsResponse = await currentUserSession.getWallets();
    const walletName = walletsResponse.wallets[0].walletName;
    ```
  </Step>

  <Step title="Call the `iframeClient` directly for write requests">
    ```JavaScript
    import { DEFAULT_ETHEREUM_ACCOUNTS } from "@turnkey/sdk-browser";
    const newWalletResponse = await iframeClient.createWallet({
      walletName: "New Wallet for User",
      accounts: DEFAULT_ETHEREUM_ACCOUNTS,
    });
    ```
  </Step>
</Steps>


# Authenticate a User with a Passkey Credential
Source: https://docs.turnkey.com/embedded-wallets/code-examples/authenticate-user-passkey



<Steps>
  <Step title="Initialize the Passkey Client">
    ```tsx
    import { Turnkey } from "@turnkey/sdk-browser";

    const turnkey = new Turnkey({
      apiBaseUrl: "https://api.turnkey.com",
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
    });
    const passkeyClient = turnkey.passkeyClient();
    ```
  </Step>

  <Step title="Call the login function">
    ```tsx
    const response = await passkeyClient.login();
    if (response.organizationId) {
      navigate("/authenticated-route");
    } else {
      navigate("/not-authenticated-route");
    }
    ```
  </Step>

  <Step title="Make read requests on behalf of the authenticated user from the currentUserSession">
    ```tsx
    const currentUserSession = await turnkey.currentUserSession();
    const walletsResponse = await currentUserSession.getWallets();
    const walletName = walletsResponse.wallets[0].walletName;
    ```
  </Step>

  <Step title="Call the passkeyClient directly for write requests">
    This will always prompt a user to confirm the action with their passkey credential

    ```tsx
    import { DEFAULT_ETHEREUM_ACCOUNTS } from "@turnkey/sdk-browser";
    const newWalletResponse = await passkeyClient.createWallet({
      walletName: "New Wallet for User",
      accounts: DEFAULT_ETHEREUM_ACCOUNTS,
    });
    ```
  </Step>
</Steps>


# Create a User Passkey Session
Source: https://docs.turnkey.com/embedded-wallets/code-examples/create-passkey-session

A passkey session is an expiring session enabled by an initial passkey authentication. You could think of this as a "lightning mode" of sorts: creating a passkey session allows users to authenticate subsequent requests touch-free. Under the hood, this is powered by our [indexedDbStamper](/sdks/advanced/indexed-db-stamper). These sessions are enabled by creating a short-lived embedded API key in the browser, stored in localStorage, and cryptographically scoped to a public key generated by IndexedDB.

By calling `loginWithPasskey()`, the SDK stores the session and active client in localStorage. The signing key material remains securely stored in the browser’s IndexedDB and is never extractable. Turnkey uses this public key to scope and encrypt the session to the appropriate user.

## Steps using `@turnkey/sdk-react`

This process is made seamless by leveraging our [React package](/sdks/react). Read on for a non-React implementation below.

<Steps>
  <Step title="Initialize the React Provider">
    ```js
    import { TurnkeyProvider } from "@turnkey/sdk-react";

    const turnkeyConfig = {
      apiBaseUrl: "https://api.turnkey.com",
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
      rpId: process.env.RPID,
    };

    ...

    <div className="App">
      <TurnkeyProvider config={turnkeyConfig}>
        {/* Your app components */}
      </TurnkeyProvider>
    </div>
    ```
  </Step>

  <Step title="Login with a Passkey and Create a Session">
    ```js
    import { useTurnkey } from "@turnkey/sdk-react";

    const { passkeyClient, indexedDbClient } = useTurnkey();

    await indexedDbClient.init();
    const publicKey = await indexedDbClient.getPublicKey();

    await passkeyClient.loginWithPasskey({
      publicKey,
      sessionType: "SESSION_TYPE_READ_WRITE", // or "SESSION_TYPE_READ_ONLY"
      expirationSeconds: 900,
    });
    ```
  </Step>

  <Step title="Use the session to make requests">
    ```js
    const { getActiveClient } = useTurnkey();
    const client = await getActiveClient();

    const whoami = await client.getWhoami({
      organizationId: <your-org-id>,
    });
    ```

    `getActiveClient()` returns the currently active client (e.g. IndexedDb-backed), refreshing automatically if needed.
  </Step>
</Steps>

## Alternative Steps (non-React)

<Steps>
  <Step title="Initialize the Passkey and IndexedDB Clients">
    ```js
    import { Turnkey } from "@turnkey/sdk-browser";

    const turnkey = new Turnkey({
      apiBaseUrl: "https://api.turnkey.com",
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
    });

    const passkeyClient = turnkey.passkeyClient();
    const indexedDbClient = turnkey.indexedDbClient();

    await indexedDbClient.init();
    ```
  </Step>

  <Step title="Login with a Passkey and Create a Session">
    ```js
    const publicKey = await indexedDbClient.getPublicKey();

    await passkeyClient.loginWithPasskey({
      publicKey,
      sessionType: "SESSION_TYPE_READ_WRITE", // or "SESSION_TYPE_READ_ONLY"
      expirationSeconds: 900,
    });
    ```
  </Step>

  <Step title="Use the session to make requests">
    ```js
    const whoami = await turnkey.getWhoami({
      organizationId: <your-org-id>,
    });
    ```

    Once `loginWithPasskey` completes, the session is stored in localStorage and all requests are signed using the IndexedDb-backed keypair.
  </Step>
</Steps>


# Create a Sub-Org with a Passkey User
Source: https://docs.turnkey.com/embedded-wallets/code-examples/create-sub-org-passkey

In this guide, we'll walk through the process of creating a new end user with a passkey.

## Overview

Generally, these new users will take the form of a [Turnkey Sub-Organization](/concepts/sub-organizations). This process involves using the following Turnkey SDK packages:

1. [`@turnkey/sdk-server`](https://www.npmjs.com/package/@turnkey/sdk-server): Used on the server-side to leverage the parent organization's public/private API key pair to create the new user's sub-organization.
2. [`@turnkey/sdk-browser`](https://www.npmjs.com/package/@turnkey/sdk-browser): Used on the client-side to complete the email recovery process by adding an end-user passkey.
3. [`@turnkey/sdk-react`](https://www.npmjs.com/package/@turnkey/sdk-react): Used for Next.js applications to initialize the Turnkey SDK.

The process of creating a new sub-organization is split between client-side and server-side operations to prevent exposing the parent organization's private API key.

<Note>
  For a refresher on the relationship between your application's end users and Turnkey Sub-Organizations, see [this page](/embedded-wallets/overview#how-it-works) for more.
</Note>

## Implementation

### Initialize the Turnkey SDK on the Browser

<Tabs>
  <Tab title="Next.js">
    Wrap the root layout of your application with the `TurnkeyProvider` providing the required configuration options. This allows you to use the Turnkey client throughout your app via the `useTurnkey()` hook.

    ```tsx app/layout.tsx
    import { TurnkeyProvider } from "@turnkey/sdk-react";

    export default function RootLayout({
      children,
    }: {
      children: React.ReactNode;
    }) {
      return (
        <html>
          <body>
            <TurnkeyProvider
              config={{
                rpId: process.env.NEXT_PUBLIC_TURNKEY_RP_ID,
                apiBaseUrl: process.env.NEXT_PUBLIC_TURNKEY_API_BASE_URL,
                defaultOrganizationId:
                  process.env.NEXT_PUBLIC_ORGANIZATION_ID,
              }}
            >
              {children}
            </TurnkeyProvider>
          </body>
        </html>
      );
    }
    ```

    <Note>
      The `NEXT_PUBLIC_ORGANIZATION_ID` should be set to the parent organization ID which can be found in the [Turnkey Dashboard](https://app.turnkey.com/dashboard).

      The `NEXT_PUBLIC_TURNKEY_RP_ID` should be set to your application's desired relying party ID; this is typically your domain, or localhost if developing locally. See [this page](/authentication/passkeys/options#rp) for more details.
    </Note>
  </Tab>

  <Tab title="TypeScript">
    ```tsx src/turnkey.ts
    import { Turnkey } from "@turnkey/sdk-browser";

    // Initialize the Turnkey SDK with your organization ID and API base URL
    const turnkeyBrowser = new Turnkey({
      rpId: process.env.TURNKEY_RP_ID,
      apiBaseUrl: "https://api.turnkey.com",
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
    });
    ```

    <Note>
      The `TURNKEY_ORGANIZATION_ID` should be set to the parent organization ID which can be found in the [Turnkey Dashboard](https://app.turnkey.com/dashboard).

      The `TURNKEY_RP_ID` should be set to your application's desired relying party ID; this is typically your domain, or localhost if developing locally. See [this page](/authentication/passkeys/options#rp) for more details.
    </Note>
  </Tab>
</Tabs>

### Initialize the Passkey Client

Next, we'll initialize the `passkeyClient`, which will enable your application to interact with passkeys.

<Tabs>
  <Tab title="Next.js">
    We add the `"use client"` directive to the Recovery component to as react hooks can only be used client-side.

    ```tsx app/create-suborg.tsx
    "use client";

    import { useTurnkey } from "@turnkey/sdk-react";

    export default function CreateSubOrganization() {
      const { passkeyClient } = useTurnkey();

      return <div>{/* ... rest of the code */}</div>;
    }
    ```
  </Tab>

  <Tab title="TypeScript">
    ```tsx src/create-suborg.ts
    import { Turnkey } from "@turnkey/sdk-browser";

    // Initialize the Turnkey SDK with your organization credentials
    const turnkey = new Turnkey({
      rpId: process.env.TURNKEY_RP_ID, // Your relying party ID
      apiBaseUrl: process.env.TURNKEY_API_BASE_URL, // Turnkey API base URL
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID, // Your parent organization ID
    });

    // Initialize the Passkey Client
    const passkeyClient = turnkey.passkeyClient();

    // We'll add more functionality here in the following steps
    ```
  </Tab>
</Tabs>

### Create User Passkey

In order to create a new passkey for a user, you can call the `createUserPasskey` SDK function. Calling this method will prompt the user to create a passkey, which will be securely stored by their browser. This credential will be associated with the user's account (sub-organization) and used for future authentication. Once the credential is created, we'll use it in the next step to create a new sub-organization that corresponds to the user.

<Note>
  The result of `createUserPasskey` includes an encoded challenge and attestation. The encoded challenge ensures the request is fresh and legitimate, while the attestation verifies the authenticity of the device creating the credential. For more information on how passkeys work, including details on the challenge and attestation objects, you can refer to the [Passkeys Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API#passkeys).
</Note>

<Tabs>
  <Tab title="Next.js">
    ```tsx app/create-suborg.tsx
    // ... previous code

    export default function CreateSubOrganization() {
      const { passkeyClient } = useTurnkey();

      const createNewPasskey = async () => {
        const credential = await passkeyClient?.createUserPasskey({
          publicKey: {
            // This is the name of the passkey that will be displayed to the user
            rp: {
              name: "Wallet Passkey",
            },
            user: {
              // We can use the username as the name and display name
              name: "Default User Name",
              displayName: "Default User Name",
            },
          },
        });

        // we'll use this credential in the next step to create a new sub-organization
        return credential;
      };

      // ... rest of the code

      return (/* ... */);
    }
    ```
  </Tab>

  <Tab title="TypeScript">
    ```tsx src/create-suborg.ts
    // ... previous code

    const createNewPasskey = async () => {
      const credential = await passkeyClient?.createUserPasskey({
        publicKey: {
          // This is the name of the passkey that will be displayed to the user
          rp: {
            name: "Wallet Passkey",
          },
          user: {
            // We can use the username as the name and display name
            name: "Default User Name",
            displayName: "Default User Name",
          },
        },
      });

      // we'll use this credential in the next step to create a new sub-organization
      return credential;
    };
    ```
  </Tab>
</Tabs>

### Initialize the Turnkey SDK on the Server

Initialize the Turnkey SDK on the **server-side** using the `@turnkey/sdk-server` package. This allows you to use the parent organization's public/private API key pair to create sub-organizations.

<Tabs>
  <Tab title="Next.js">
    For Next.js, add the `"use server"` directive at the top of the file where you're initializing the Turnkey server client. This will ensure that the function is executed on the server-side and will have access to the server-side environment variables e.g. your parent organization's public/private API key pair. For more information on Next.js server actions, see the Next.js documentation on [Server Actions and Mutations](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).

    ```tsx app/actions.ts
    "use server";

    import { Turnkey } from "@turnkey/sdk-server";

    // Initialize the Turnkey Server Client on the server-side
    const turnkeyServer = new Turnkey({
      apiBaseUrl: "https://api.turnkey.com",
      apiPrivateKey: process.env.TURNKEY_API_PRIVATE_KEY,
      apiPublicKey: process.env.TURNKEY_API_PUBLIC_KEY,
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
    }).apiClient();
    ```
  </Tab>

  <Tab title="TypeScript">
    ```tsx src/turnkey.ts
    import { Turnkey } from "@turnkey/sdk-server";

    // Initialize the Turnkey Server Client on the server-side
    const turnkeyServer = new Turnkey({
      apiBaseUrl: "https://api.turnkey.com",
      apiPrivateKey: process.env.TURNKEY_API_PRIVATE_KEY,
      apiPublicKey: process.env.TURNKEY_API_PUBLIC_KEY,
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
    }).apiClient();
    ```
  </Tab>
</Tabs>

### Create a Function for Sub-Org Creation

Next we'll create a new function called `createSubOrganization` that will be used to create a new sub-organization from the server-side. This method will be called from the client-side with the end-user's details.

<Tabs>
  <Tab title="Next.js">
    We export the `createSubOrganization` server action to be called from the client-side.

    ```tsx app/actions.tsx
    import { DEFAULT_ETHEREUM_ACCOUNTS } from "@turnkey/sdk-browser";

    // ... previous code

    type TAttestation = {
      credentialId: string;
      clientDataJson: string;
      attestationObject: string;
      transports: (
        | "AUTHENTICATOR_TRANSPORT_BLE"
        | "AUTHENTICATOR_TRANSPORT_INTERNAL"
        | "AUTHENTICATOR_TRANSPORT_NFC"
        | "AUTHENTICATOR_TRANSPORT_USB"
        | "AUTHENTICATOR_TRANSPORT_HYBRID"
      )[];
    };

    export const createSubOrganization = async (
      email: string,
      credential: string,
      attestation: string,
    ) => {
      const createSubOrgResponse = await turnkeyServer.createSubOrganization({
        subOrganizationName: "My New Suborg",
        rootUsers: [
          {
            userName: "Default User Name",
            userEmail: email,
            apiKeys: [],
            authenticators: [
              {
                authenticatorName: "Default Passkey",
                challenge: challenge,
                attestation: attestation,
              },
            ],
            oauthProviders: [],
          },
        ],
        rootQuorumThreshold: 1,
        wallet: {
          walletName: "Default Wallet",
          accounts: DEFAULT_ETHEREUM_ACCOUNTS,
        },
      });

      return createSubOrgResponse;
    };
    ```
  </Tab>

  <Tab title="TypeScript">
    ```tsx src/turnkey-server.ts
    /// ... previous code

    type TAttestation = {
      credentialId: string;
      clientDataJson: string;
      attestationObject: string;
      transports: (
        | "AUTHENTICATOR_TRANSPORT_BLE"
        | "AUTHENTICATOR_TRANSPORT_INTERNAL"
        | "AUTHENTICATOR_TRANSPORT_NFC"
        | "AUTHENTICATOR_TRANSPORT_USB"
        | "AUTHENTICATOR_TRANSPORT_HYBRID"
      )[];
    };

    export const createSubOrganization = async (
      email: string,
      credential: string,
      attestation: string,
    ) => {
      const createSubOrgResponse = await turnkeyServer.createSubOrganization({
        subOrganizationName: "My New Suborg",
        rootUsers: [
          {
            userName: "Default User Name",
            userEmail: email,
            apiKeys: [],
            authenticators: [
              {
                authenticatorName: "Default Passkey",
                challenge: challenge,
                attestation: attestation,
              },
            ],
            oauthProviders: [],
          },
        ],
        rootQuorumThreshold: 1,
        wallet: {
          walletName: "Default Wallet",
          accounts: DEFAULT_ETHEREUM_ACCOUNTS,
        },
      });

      return createSubOrgResponse;
    };
    ```
  </Tab>
</Tabs>

### Complete Create Sub-Organization

At this stage, we create the sub-organization using the **server-side** function we created in the previous step.

<Tabs>
  <Tab title="Next.js">
    <Steps>
      <Step title="Import the server action">
        ```tsx app/create-suborg.tsx
        import { createSubOrganization } from "./actions";
        ```
      </Step>

      <Step title="Call createSubOrganization with the end-user's details">
        ```tsx app/create-suborg.tsx
        // ...

        import { useForm } from "react-hook-form";

        type TSubOrgFormData = {
          email: string;
        };

        export default function CreateSubOrganization() {
          // ...

          // Use form handler for suborg creation
          const { register: subOrgFormRegister, handleSubmit: subOrgFormSubmit } =
            useForm<TSubOrgFormData>();

          // Maintain state
          const [createSubOrganizationResponse, setCreateSubOrganizationResponse] =
            useState(null);

          const createSubOrg = async (data: TSubOrgFormData) => {
            const { encodedChallenge: challenge, attestation } =
              await createNewPasskey();

            const createSubOrganizationResponse = await createSubOrganization(
              data.email,
              challenge,
              attestation,
            );

            setCreateSubOrganizationResponse(createSubOrganizationResponse);
          };

          return (
            <div>
              {createSubOrganizationResponse ? (
                <h2>You've created a sub-organization!</h2>
              ) : (
                <form onSubmit={subOrgFormSubmit(createSubOrg)}>
                  <label>
                    Email
                    <input {...subOrgFormRegister("email")} placeholder="User Email" />
                  </label>
                  <input type="submit" value="Create new sub-organization" />
                </form>
              )}
            </div>
          );
        }
        ```

        <Accordion title="create-suborg.tsx">
          ```tsx
          "use client";

          import { useState } from "react";
          import { useTurnkey } from "@turnkey/sdk-react";
          import { useForm } from "react-hook-form";

          // Import the createSubOrganization server action
          import { createSubOrganization } from "./actions";

          type TSubOrgFormData = {
          email: string;
          };

          type TAttestation = {
          credentialId: string;
          clientDataJson: string;
          attestationObject: string;
          transports: (
            | "AUTHENTICATOR_TRANSPORT_BLE"
            | "AUTHENTICATOR_TRANSPORT_INTERNAL"
            | "AUTHENTICATOR_TRANSPORT_NFC"
            | "AUTHENTICATOR_TRANSPORT_USB"
            | "AUTHENTICATOR_TRANSPORT_HYBRID"
          )[];
          };

          export default function CreateSubOrganization() {
          const { passkeyClient } = useTurnkey();

          // Use form handler for suborg creation
          const { register: subOrgFormRegister, handleSubmit: subOrgFormSubmit } =
            useForm<TSubOrgFormData>();

          // Maintain state
          const [createSubOrganizationResponse, setCreateSubOrganizationResponse] =
            useState(null);

          const createNewPasskey = async () => {
            const credential = await passkeyClient?.createUserPasskey({
              publicKey: {
                // This is the name of the passkey that will be displayed to the user
                rp: {
                  name: "Wallet Passkey",
                },
                user: {
                  // We can use the username as the name and display name
                  name: "Default User Name",
                  displayName: "Default User Name",
                },
              },
            });

            // we'll use this credential in the next step to create a new sub-organization
            return credential;
          };

          const createSubOrg = async (data: TSubOrgFormData) => {
            const { encodedChallenge: challenge, attestation } =
              await createNewPasskey();

            const createSubOrganizationResponse = await createSubOrganization(
              data.email,
              challenge,
              attestation,
            );

            setCreateSubOrganizationResponse(createSubOrganizationResponse);
          };

          return (
            <div>
              {createSubOrganizationResponse ? (
                <h2>You've created a sub-organization!</h2>
              ) : (
                <form onSubmit={subOrgFormSubmit(createSubOrg)}>
                  <label>
                    Email
                    <input {...subOrgFormRegister("email")} placeholder="User Email" />
                  </label>
                  <input type="submit" value="Create new sub-organization" />
                </form>
              )}
            </div>
          );
          }
          ```
        </Accordion>
      </Step>
    </Steps>
  </Tab>

  <Tab title="Next.js">
    <Steps>
      <Step title="Import the server action">
        ```tsx app/create-suborg.tsx
        import { createSubOrganization } from "./turnkey-server";
        ```
      </Step>

      <Step title="Call createSubOrganization with the end-user's details">
        ```tsx src/turnkey.ts
        import { createSubOrganization } from "./turnkey-server";

        // ... rest of the code

        const createSubOrganizationResponse = await createSubOrganization(
          email,
          attestation,
          challenge,
        );
        ```
      </Step>
    </Steps>
  </Tab>
</Tabs>

## Examples

A few mini examples where sub-orgs are created with passkeys, see the following:

<CardGroup cols={1}>
  <Card title="https://github.com/tkhq/sdk/tree/main/examples/with-solana-passkeys" href="https://github.com/tkhq/sdk/tree/main/examples/with-solana-passkeys" icon="github" iconType="solid" horizontal />

  <Card title="https://github.com/tkhq/sdk/tree/main/examples/with-eth-passkeys-galore" href="https://github.com/tkhq/sdk/tree/main/examples/with-eth-passkeys-galore" icon="github" iconType="solid" horizontal />

  <Card title="https://github.com/tkhq/sdk/tree/main/examples/with-federated-passkeys" href="https://github.com/tkhq/sdk/tree/main/examples/with-federated-passkeys" icon="github" iconType="solid" horizontal />
</CardGroup>


# Create a User with Email Only
Source: https://docs.turnkey.com/embedded-wallets/code-examples/create-user-email

This example demonstrates how to create a sub organization using just an end-user's email: passkeys not required! Note that this flow does not require emails to be verified.

<Steps>
  <Step title="Initialize Turnkey">
    ```JavaScript
    import { Turnkey } from "@turnkey/sdk-browser";

    const turnkey = new Turnkey({
      apiBaseUrl: "https://api.turnkey.com",
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
    });
    ```
  </Step>

  <Step title="Configure the Sub Organization for the User">
    ```JavaScript
    import { DEFAULT_ETHEREUM_ACCOUNTS } from "@turnkey/sdk-browser;"

    const subOrganizationConfig = {
      subOrganizationName: <subOrganizationName>,
      rootUsers: [{
        userName: <userEmail>,
        userEmail: <userEmail>,
        apiKeys: [],
        authenticators: [],
        oauthProviders: []
      }],
      rootQuorumThreshold: 1,
      wallet: {
        walletName: <walletName>,
        accounts: DEFAULT_ETHEREUM_ACCOUNTS
      }
    };
    ```
  </Step>

  <Step title="Call createSubOrganization from your backend">
    ```JavaScript
    await turnkey.serverSign("createSubOrganization", [subOrganizationConfig]);
    ```

    This is all that is needed to create a user without any authentication credential other than their email address, in the [login](/embedded-wallets/code-examples/authenticate-user-email) flow you can see how to then authenticate the user after their `subOrganization` is created.
  </Step>
</Steps>


# Recover a User with Email
Source: https://docs.turnkey.com/embedded-wallets/code-examples/email-recovery

In this guide, we'll walk through the process of recovering a user using their email.

<Note>
  Email Recovery is a legacy flow, now superseded by [Email Auth](/embedded-wallets/code-examples/authenticate-user-email), which can used to implement recovery flows and more.
</Note>

## Overview

This process involves using the following Turnkey SDK packages:

1. [`@turnkey/sdk-server`](https://www.npmjs.com/package/@turnkey/sdk-server): Used on the server-side to leverage the parent organization's public/private API key pair for initializing the email recovery.
2. [`@turnkey/sdk-browser`](https://www.npmjs.com/package/@turnkey/sdk-browser): Used on the client-side to complete the email recovery process by adding an end-user passkey.
3. [`@turnkey/sdk-react`](https://www.npmjs.com/package/@turnkey/sdk-react): Used for Next.js applications to initialize the Turnkey SDK.

The email recovery process is split between client-side and server-side operations to prevent exposing the parent organization's private API key.

For an in-depth understanding of the email recovery process at Turnkey, refer to our docs on [email recovery](/authentication/email#recovery-flow).

## Implementation

### Initialize the Turnkey SDKs

Begin by initializing the Turnkey SDK with your organization ID and the Turnkey API's base URL on the **client-side**.

<Tabs>
  <Tab title="Next.js">
    Wrap the root layout of your application with the `TurnkeyProvider` providing the required configuration options. This allows you to use the Turnkey client throughout your app via the `useTurnkey()` hook.

    ```tsx app/layout.tsx
    import { TurnkeyProvider } from "@turnkey/sdk-react";

    export default function RootLayout({
      children,
    }: {
      children: React.ReactNode;
    }) {
      return (
        <html>
          <body>
            <TurnkeyProvider
              config={{
                rpId: process.env.NEXT_PUBLIC_TURNKEY_RP_ID,
                apiBaseUrl: "https://api.turnkey.com",
                defaultOrganizationId:
                  process.env.NEXT_PUBLIC_ORGANIZATION_ID,
              }}
            >
              {children}
            </TurnkeyProvider>
          </body>
        </html>
      );
    }
    ```

    <Note>
      The `NEXT_PUBLIC_ORGANIZATION_ID` should be set to the parent organization ID which can be found in the [Turnkey Dashboard](https://app.turnkey.com/dashboard).

      The `NEXT_PUBLIC_TURNKEY_RP_ID` should be set to your application's desired relying party ID; this is typically your domain, or localhost if developing locally. See [this page](/authentication/passkeys/options#rp) for more details.
    </Note>
  </Tab>

  <Tab title="TypeScript">
    ```tsx src/turnkey.ts
    import { Turnkey } from "@turnkey/sdk-browser";

    // Initialize the Turnkey SDK with your organization ID and API base URL
    const turnkeyBrowser = new Turnkey({
      rpId: process.env.TURNKEY_RP_ID,
      apiBaseUrl: "https://api.turnkey.com",
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
    });
    ```

    <Note>
      The `TURNKEY_ORGANIZATION_ID` should be set to the parent organization ID which can be found in the [Turnkey Dashboard](https://app.turnkey.com/dashboard).

      The `TURNKEY_RP_ID` should be set to your application's desired relying party ID; this is typically your domain, or localhost if developing locally. See [this page](/authentication/passkeys/options#rp) for more details.
    </Note>
  </Tab>
</Tabs>

#### Server-side Initialization

Initialize the Turnkey SDK on the **server-side** using the `@turnkey/sdk-server` package. This allows you to use the parent organization's public/private API key pair to initialize the email recovery process securely.

<Tabs>
  <Tab title="Next.js">
    For Next.js, add the `"use server"` directive at the top of the file where you're initializing the Turnkey server client. This will ensure that the function is executed on the server-side and will have access to the server-side environment variables e.g. your parent organization's public/private API key pair. For more information on Next.js server actions, see the Next.js documentation on [Server Actions and Mutations](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).

    ```tsx app/actions.ts
    "use server";

    import { Turnkey } from "@turnkey/sdk-server";

    // Initialize the Turnkey Server Client on the server-side
    const turnkeyServer = new Turnkey({
      apiBaseUrl: "https://api.turnkey.com",
      apiPrivateKey: process.env.TURNKEY_API_PRIVATE_KEY,
      apiPublicKey: process.env.TURNKEY_API_PUBLIC_KEY,
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
    }).apiClient();
    ```
  </Tab>

  <Tab title="TypeScript">
    ```tsx src/turnkey.ts
    import { Turnkey } from "@turnkey/sdk-server";

    // Initialize the Turnkey Server Client on the server-side
    const turnkeyServer = new Turnkey({
      apiBaseUrl: "https://api.turnkey.com",
      apiPrivateKey: process.env.TURNKEY_API_PRIVATE_KEY,
      apiPublicKey: process.env.TURNKEY_API_PUBLIC_KEY,
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
    }).apiClient();
    ```
  </Tab>
</Tabs>

#### Initialize the Iframe Client

Next, we'll initialize the `iframeClient` which will create a secure iframe within your application. The `iframeClient` must be initialized before beginning the user recovery process, as we'll need the iframe's public key as a parameter for the `initEmailRecovery` method.

<Tabs>
  <Tab title="Next.js">
    We add the `"use client"` directive to the Recovery component to as react hooks can only be used client-side.

    ```tsx app/recovery.tsx
    "use client";

    import { useTurnkey } from "@turnkey/sdk-react";

    export default function Recovery() {
      const { authIframeClient } = useTurnkey();

      return <div>{/* ... rest of the code */}</div>;
    }
    ```
  </Tab>

  <Tab title="TypeScript">
    ```ts src/turnkey.ts
    const iframeContainerId = "turnkey-recovery-iframe-container-id";

    const authIframeClient = await turnkey.iframeClient(
      document.getElementById(iframeContainerId),
    );
    ```

    When using the TypeScript SDK, you'll need to ensure that the HTML element exists somewhere in the rendered DOM.

    ```html index.html
    <div id="turnkey-recovery-iframe-container-id" />
    ```
  </Tab>
</Tabs>

### Create a Recovery Function

Next we'll create a new function called `initEmailRecovery` that will be used to initialize the email recovery process on the server-side. This method will be called from the client-side with the user's email and the target public key from the iframe client. Calling the `initEmailRecovery` method will trigger an email sent to the user containing a credential bundle which will be used to authenticate the authIframeClient in the next step.

<Tabs>
  <Tab title="Next.js">
    We export the `initEmailRecovery` server action to be called from the client-side.

    ```tsx app/actions.ts
    // ... previous code

    export const initEmailRecovery = async ({
      email,
      targetPublicKey,
    }: {
      email: string;
      targetPublicKey: string;
    }) => {
      const recoveryResponse = await turnkeyServer.initUserEmailRecovery({
        email,
        targetPublicKey,
      });
      return recoveryResponse;
    };
    ```
  </Tab>

  <Tab title="TypeScript">
    ```tsx src/turnkey-server.ts
    export const initEmailRecovery = async ({
      email,
      targetPublicKey,
    }: {
      email: string;
      targetPublicKey: string;
    }) => {
      const recoveryResponse = await turnkeyServer.initUserEmailRecovery({
        email,
        targetPublicKey,
      });
      return recoveryResponse;
    };
    ```
  </Tab>
</Tabs>

### Initialize Email Recovery

At this stage, we initialize the email recovery process using the **server-side** function we created in the previous step. The user will need to paste the credential bundle they receive in their email into your app, which is then used to authenticate the `authIframeClient` via the `injectCredentialBundle` method.

<Tabs>
  <Tab title="Next.js">
    <Steps>
      <Step title="Import the server action">
        ```tsx app/recovery.tsx
        import { initEmailRecovery } from "./actions";
        ```
      </Step>

      <Step title="Add an input field for the user's email">
        ```tsx app/recovery.tsx
        // ...

        export default function Recovery() {
          // ...

          // Create a state variable for the user's email
          const [email, setEmail] = useState("");

          return (
            <div>
              <input
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                type="text"
              />
            </div>
          );
        }
        ```
      </Step>

      <Step title="Create a function to initiate the recovery process">
        ```tsx app/recovery.tsx
        //...

        export default function Recovery() {
          // ...

          // We'll use this later to conditionally render the input for the credential bundle
          const [initRecoveryResponse, setInitRecoveryResponse] = useState(null);

          const initRecovery = async (email: string) => {
            // Call the initEmailRecovery server action
            const response = await initEmailRecovery({
              email,
              targetPublicKey: authIframeClient?.iframePublicKey,
            });
            if (response) {
              setInitRecoveryResponse(response);
            }
          };

          return (
            <div>
              {/* <input ... /> */}
              <button onClick={() => initRecovery(email)}>Init Recovery</button>
            </div>
          );
        }
        ```
      </Step>

      <Step title="Add an input for the credential bundle">
        ```tsx app/recovery.tsx
        //...

        export default function Recovery() {
          // ...
          const [initRecoveryResponse, setInitRecoveryResponse] = useState(null);
          const [credentialBundle, setCredentialBundle] = useState("");

          return (
            <div>
              {/* If we have initiated the recovery process we'll render an input
              for the user to paste their credential bundle they received in their email */}
              {initRecoveryResponse ? (
                <input
                  value={credentialBundle}
                  onChange={(e) => setCredentialBundle(e.target.value)}
                  type="text"
                />
              ) : (
                <input
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  type="text"
                />
              )}
              <button onClick={() => initRecovery(email)}>Init Recovery</button>
            </div>
          );
        }
        ```

        <Accordion title="recovery.tsx">
          ```ts
          "use client";

          import { useState } from "react";
          import { useTurnkey } from "@turnkey/sdk-react";

          // Import the initEmailRecovery server action
          import { initEmailRecovery } from "./actions";

          export default function Recovery() {
            const { authIframeClient } = useTurnkey();

            // Create a state variable for the user's email
            const [email, setEmail] = useState("");
            const [initRecoveryResponse, setInitRecoveryResponse] = useState(null);
            const [credentialBundle, setCredentialBundle] = useState("");

            const initRecovery = async (email: string) => {
              // Call the initEmailRecovery server action
              const response = await initEmailRecovery({
                email,
                targetPublicKey: authIframeClient?.iframePublicKey,
              });
              if (response) {
                setInitRecoveryResponse(response);
              }
            };

            return (
              <div>
                {/* If we have initiated the recovery process we'll render an input
                for the user to paste their credential bundle they received in their email */}
                {initRecoveryResponse ? (
                  <input
                    value={credentialBundle}
                    onChange={(e) => setCredentialBundle(e.target.value)}
                    type="text"
                  />
                ) : (
                  <input
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    type="text"
                  />
                )}
                <button onClick={() => initRecovery(email)}>Init Recovery</button>
              </div>
            );
          }
          ```
        </Accordion>
      </Step>
    </Steps>
  </Tab>

  <Tab title="TypeScript">
    ```tsx src/turnkey.ts
    import { initEmailRecovery } from "./turnkey-server";

    // ... rest of the code

    const initRecoveryResponse = await initEmailRecovery({
      email,
      targetPublicKey: authIframeClient?.iframePublicKey,
    });

    // Inject the recovery bundle into the iframe client
    // The recovery bundle is the credential bundle that the user will receive in their email
    // The application will need to provide a way for the user to input this recovery bundle
    // by pasting it into the UI
    await authIframeClient.injectCredentialBundle(credentialBundle);
    ```
  </Tab>
</Tabs>

### Create User Passkey

Next, we'll create a new passkey for the user and associate it with the email that was used in the recovery process. Assuming that the user has successfully received and entered their credential bundle, we generate a passkey to be used authenticate Turnkey requests.

<Tabs>
  <Tab title="Next.js">
    <Steps>
      <Step title="Add a function to complete the recovery process">
        We'll add a new function called `completeRecovery` that will create a new passkey for the user which will be used in the final recovery step.

        ```ts app/recovery.tsx
        //...export default function Recovery() {  //...  // We'll use //...

        export default function Recovery() {
          //...

          // We'll use the useTurnkey hook to get the turnkey instance
          const { authIframeClient, turnkey } = useTurnkey();

          const completeRecovery = async () => {
            const passkeyClient = await turnkey.passkeyClient();

            const passkeyResponse = await passkeyClient?.createUserPasskey({
              publicKey: {
                user: {
                  name: email,
                  displayName: email,
                },
              },
            });
          };

          return <div>{/* ... */}</div>;
        }
        ```
      </Step>

      <Step title="Add a button to call the completeRecovery function">
        ```tsx app/recovery.tsx
        //...

        export default function Recovery() {
          //...
          const completeRecovery = async () => {/* ... */*/};

          return (
            <div>
              {/* ... */}

              {/* If we have the credential bundle, we'll render a button to complete the recovery process */}
              {credentialBundle ? (
                <button onClick={() => completeRecovery(credentialBundle)}>
                  Complete Recovery
                </button>
              ) : (
                <button onClick={() => initRecovery(email)}>Init Recovery</button>
              )}
            </div>
          );
        }
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="TypeScript">
    ```ts src/turnkey.ts
    const completeRecovery = async () => {
      const passkeyClient = await turnkey.passkeyClient();

      const passkeyResponse = await passkeyClient?.createUserPasskey({
        publicKey: {
          user: {
            name: email,
            displayName: email,
          },
        },
      });
    };
    ```
  </Tab>
</Tabs>

### Complete Email Recovery

Finally, we complete the email recovery process by passing the `encodedChallenge` and `attestation` from the passkey we previously created to the `recoverUser` method. This method will complete the email recovery process and if successful, will return a response containing the authenticator ID of the new passkey authenticator.

<Tabs>
  <Tab title="Next.js">
    ```ts app/recovery.tsx

    //...

    export default function Recovery() {
      // We'll use the useTurnkey hook to get the turnkey instance
      const { authIframeClient, turnkey } = useTurnkey();

      const [initRecoveryResponse, setInitRecoveryResponse] = useState(null);

      const completeRecovery = async () => {
        const passkeyClient = await turnkey.passkeyClient();

        const passkeyResponse = await passkeyClient?.createUserPasskey({
          publicKey: {
            user: {
              name: email,
              displayName: email,
            },
          },
        });

        // If we have the encodedChallenge and attestation, we can complete the recovery process
        if (passkeyResponse?.encodedChallenge && passkeyResponse?.attestation) {
          const response = await authIframeClient!.recoverUser({
            organizationId: initRecoveryResponse?.activity.organizationId,
            userId: initRecoveryResponse.userId,
            authenticator: {
              // This should be set by the user to name their authenticator
              authenticatorName: "User Passkey",
              challenge: passkeyResponse.encodedChallenge,
              attestation: passkeyResponse.attestation,
            },
          });
          if (response) {
            console.log("User recovered successfully");
          }
        }
      };

      return (
        <div>
          {/* ... */}

          {/* If we have the credential bundle, we'll render a button to complete the recovery process */}
          {credentialBundle ? (
            <button onClick={() => completeRecovery(credentialBundle)}>
              Complete Recovery
            </button>
          ) : (
            <button onClick={() => initRecovery(email)}>Init Recovery</button>
          )}
        </div>
      );
    }
    ```

    <Accordion title="Complete recovery.tsx component">
      ```ts app/recovery.tsx
      "use client";

      import { useState } from "react";
      import { useTurnkey } from "@turnkey/sdk-react";

      // Import the initEmailRecovery server action
      import { initEmailRecovery } from "./actions";

      export default function Recovery() {
        const { authIframeClient, turnkey } = useTurnkey();

        // Create a state variable for the user's email
        const [email, setEmail] = useState("");
        const [initRecoveryResponse, setInitRecoveryResponse] = useState(null);
        const [credentialBundle, setCredentialBundle] = useState("");

        const initRecovery = async (email: string) => {
          // Call the initEmailRecovery server action
          const response = await initEmailRecovery({
            email,
            targetPublicKey: authIframeClient?.iframePublicKey,
          });
          if (response) {
            setInitRecoveryResponse(response);
          }
        };

        const completeRecovery = async () => {
          const passkeyClient = await turnkey.passkeyClient();

          const passkeyResponse = await passkeyClient?.createUserPasskey({
            publicKey: {
              user: {
                name: email,
                displayName: email,
              },
            },
          });

          // If we have the encodedChallenge and attestation, we can complete the recovery process
          if (passkeyResponse?.encodedChallenge && passkeyResponse?.attestation) {
            const response = await authIframeClient!.recoverUser({
              organizationId: initRecoveryResponse?.activity.organizationId,
              userId: initRecoveryResponse.userId,
              authenticator: {
                // This should be set by the user to name their authenticator
                authenticatorName: "User Passkey",
                challenge: passkeyResponse.encodedChallenge,
                attestation: passkeyResponse.attestation,
              },
            });
            if (response) {
              console.log("User recovered successfully");
            }
          }
        };

        return (
          <div>
            {initRecoveryResponse ? (
              <input
                value={credentialBundle}
                onChange={(e) => setCredentialBundle(e.target.value)}
                type="text"
              />
            ) : (
              <input
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                type="text"
              />
            )}
            {credentialBundle ? (
              <button onClick={() => completeRecovery(credentialBundle)}>
                Complete Recovery
              </button>
            ) : (
              <button onClick={() => initRecovery(email)}>Init Recovery</button>
            )}
          </div>
        );
      }
      ```
    </Accordion>
  </Tab>

  <Tab title="TypeScript">
    ```ts src/turnkey.ts
    const completeRecovery = async () => {
      const passkeyClient = await turnkey.passkeyClient();

      const passkeyResponse = await passkeyClient?.createUserPasskey({
        publicKey: {
          user: {
            name: email,
            displayName: email,
          },
        },
      });

      // If we have the encodedChallenge and attestation, we can complete the recovery process
      if (passkeyResponse?.encodedChallenge && passkeyResponse?.attestation) {
        const response = await authIframeClient!.recoverUser({
          organizationId: initRecoveryResponse?.activity.organizationId,
          userId: initRecoveryResponse.userId,
          authenticator: {
            // This should be set by the user to name their authenticator
            authenticatorName: "User Passkey",
            challenge: passkeyResponse.encodedChallenge,
            attestation: passkeyResponse.attestation,
          },
        });
        if (response) {
          console.log("User recovered successfully");
        }
      }
    };
    ```
  </Tab>
</Tabs>

## Conclusion

In this guide, we've walked through the process of recovering a user using their email using the Turnkey SDKs. By following these steps, you can implement email recovery in your application, providing users with a reliable way to regain access to their accounts or to onboard new users using only their email address.
To remind, this is a legacy flow, if you intend to implement a fresh recovery mechanism please use [Email Auth](/embedded-wallets/code-examples/authenticate-user-email), which supports all activities, including adding new authenticators.


# Export Wallet or Private Key
Source: https://docs.turnkey.com/embedded-wallets/code-examples/export

This is a guide to exporting your wallet or private key from Turnkey. For more information about the security of this flow, check out [Enclave secure channels](/security/enclave-secure-channels).

## Implementation guides

Follow along with the Turnkey CLI, Embedded iframe, NodeJS, and Local Storage guides.

### CLI

Install the latest version of Turnkey CLI to access the new import functionality. You can find detailed instructions for installation [here](https://github.com/tkhq/tkcli).

#### Steps

<Steps>
  <Step title="Export a wallet (Turnkey activity)">
    ```bash
    turnkey wallets export --name "New Wallet" -k <your Turnkey API key name> --organization <your organization ID> --export-bundle-output <path to your export bundle> --host api.turnkey.com
    ```

    * The `--export-bundle-output` flag (required) is the desired output file path for the “encrypted bundle” that will be returned by Turnkey. This bundle contains the encrypted key material.
  </Step>

  <Step title="Decrypt the bundle">
    ```bash
    turnkey decrypt --export-bundle-input <path to your export bundle> --organization <your organization ID> --signer-quorum-key 04bce6666ca6c12e0e00a503a52c301319687dca588165b551d369496bd1189235bd8302ae5e001fde51d1e22baa1d44249f2de9705c63797316fc8b7e3969a665 --encryption-key-name <your local encryption key>

    >> "<redacted mnemonic>"
    ```

    * The `--export-bundle-input` flag (required) is the filepath for the “encrypted bundle” (from the previous step) that will be decrypted.
    * The `--plaintext-output` flag (optional) is a filepath for the decrypted plaintext to be written to.
    * The `--signer-quorum-key` flag (optional) is the public key of Turnkey's signer enclave. This is a static value.
    * The `--encryption-key-name` flag (optional) is a local encryption key. This is required for import and export using the CLI. A new one can be generated using `turnkey generate encryption-key`. See `turnkey generate --help` for more details.

    Congrats! You've exported your wallet 🎉
  </Step>
</Steps>

#### Private Key support

<Steps>
  <Step title="Export a private key (Turnkey activity)">
    ```bash
    turnkey private-keys export --name "New Private Key" --encryption-key-name <your local encryption key> --organization <your organization ID> --export-bundle-output <path to your export bundle> --host api.turnkey.com
    ```

    * The `--export-bundle-output` flag (required) is the desired output file path for the “encrypted bundle” that will be returned by Turnkey. This bundle contains the encrypted key material.
  </Step>

  <Step title="Decrypt the bundle">
    ```bash
    turnkey decrypt --export-bundle-input <path to your export bundle> --organization <your organization ID> --signer-quorum-key 04bce6666ca6c12e0e00a503a52c301319687dca588165b551d369496bd1189235bd8302ae5e001fde51d1e22baa1d44249f2de9705c63797316fc8b7e3969a665 --encryption-key-name <your local encryption key>

    >> "<redacted private key>"
    ```

    * The `--export-bundle-input` flag (required) is the file path for the “encrypted bundle” (from the previous step) that will be decrypted.
    * The `--plaintext-output` flag (optional) is a filepath for the decrypted plaintext to be written to.
    * The `--signer-quorum-key` flag (optional) is the public key of Turnkey's signer enclave. This is a static value.
    * The `--solana-address` flag (optional) is the solana address corresponding to the private key you're exporting. This will export the private key in a format compatible with most solana wallets (e.g. phantom). If unset, the resulting private key will be plain hex.
    * The `--encryption-key-name` flag (optional) is a local encryption key. This is required for import and export using the CLI. A new one can be generated using `turnkey generate encryption-key`. See `turnkey generate --help` for more details.

    Congrats! You've exported your private key 🎉
  </Step>
</Steps>

#### Wallet Account support

<Steps>
  <Step title="Export a wallet account (Turnkey activity)">
    ```bash
    turnkey wallets accounts export --address "<wallet account address>" -k <your API key name> --organization <your organization ID> --export-bundle-output <path to your export bundle> --host api.turnkey.com
    ```

    * The `--export-bundle-output` flag (required) is the desired output file path for the “encrypted bundle” that will be returned by Turnkey. This bundle contains the encrypted key material.
  </Step>

  <Step title="Decrypt the bundle">
    ```bash
    turnkey decrypt --export-bundle-input <path to your export bundle> --organization <your organization ID> --signer-quorum-key 04bce6666ca6c12e0e00a503a52c301319687dca588165b551d369496bd1189235bd8302ae5e001fde51d1e22baa1d44249f2de9705c63797316fc8b7e3969a665 --encryption-key-name <your local encryption key>

    >> "<redacted private key>"
    ```

    * The `--export-bundle-input` flag (required) is the file path for the “encrypted bundle” (from the previous step) that will be decrypted.
    * The `--plaintext-output` flag (optional) is a filepath for the decrypted plaintext to be written to.
    * The `--signer-quorum-key` flag (optional) is the public key of Turnkey's signer enclave. This is a static value.
    * The `--solana-address` flag (optional) is the solana address corresponding to the private key you're exporting. This will export the private key in a format compatible with most solana wallets (e.g. phantom). If unset, the resulting private key will be plain hex.
    * The `--encryption-key-name` flag (optional) is a local encryption key. This is required for import and export using the CLI. A new one can be generated using `turnkey generate encryption-key`. See `turnkey generate --help` for more details.

    Congrats! You've exported your private key 🎉
  </Step>
</Steps>

### Embedded iframe

* We have released open-source code to create target encryption keys and decrypt exported wallet mnemonics. We've deployed a static HTML page hosted on `export.turnkey.com` meant to be embedded as an iframe element (see the code [here](https://github.com/tkhq/frames)). This ensures the mnemonics are encrypted to keys that the user has access to, but that your organization does not (because they live in the iframe, on a separate domain).
* We have also built a package to help you insert this iframe and interact with it in the context of export: [`@turnkey/iframe-stamper`](https://www.npmjs.com/package/@turnkey/iframe-stamper)

In the rest of this guide we'll assume you are using these helpers.

#### Steps

Here's a diagram summarizing the wallet export flow step-by-step
([direct link](/assets/files/wallet_export_steps-5bb19c72eb9596fab8db3b1dcc52e60a.png)):

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/embedded-wallets/code-examples/img/wallet_export_steps.png" alt="wallet export steps" />
</Frame>

Let's review these steps in detail:

<Steps>
  <Step>
    When a user on your application clicks "export", display a new export UI. We recommend setting this export UI as a new hosted page of your application that contains language explaining the security best practices users should follow once they've successfully exported their wallet. Remember: once the wallet has been exported, Turnkey can no longer ensure its security.

    While the UI is in a loading state, your application uses [`@turnkey/iframe-stamper`](https://www.npmjs.com/package/@turnkey/iframe-stamper) to insert a new iframe element:

    ```ts
    const iframeStamper = new IframeStamper({
    iframeUrl: "https://export.turnkey.com",
    // Configure how the iframe element is inserted on the page
    iframeContainer: yourContainer,
    iframeElementId: "turnkey-iframe",
    });

    // Inserts the iframe in the DOM. This creates the new encryption target key
    const publicKey = await iframeStamper.init();

    // Set state to not display iframe
    let displayIframe = "none";

    return (
    // The iframe element can be hidden until the wallet is exported
    <div style={{ display: displayIframe }} />
    );
    ```
  </Step>

  <Step>
    Your code receives the iframe public key. Your application prompts the user to
    sign a new `EXPORT_WALLET` activity with the wallet ID and the iframe public
    key in the parameters.
  </Step>

  <Step>
    Your application polls for the activity response, which contains an export bundle. Remember: this export bundle is an encrypted mnemonic which can only be decrypted within the iframe.

    Need help setting up async polling? Checkout our guide and helper [here](https://github.com/tkhq/sdk/tree/main/packages/http#withasyncpolling-helper).
  </Step>

  <Step>
    Your application injects the export bundle into the iframe for decryption and displays the iframe upon success:

    ```ts
    // Inject export bundle into iframe
    let success = await iframeStamper.injectWalletExportBundle(exportBundle);

    if (success !== true) {
      throw new Error("unexpected error while injecting export bundle");
    }

    // If successfully injected, update the state to display the iframe
    iframeDisplay = "block";
    ```

    Export is complete! The iframe now displays a sentence of words separated by spaces.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/embedded-wallets/code-examples/img/wallet_export_mnemonic.png" alt="wallet mnemonic" />
    </Frame>

    The exported wallet will remain stored within Turnkey’s infrastructure. In your Turnkey dashboard, the exported user Wallet will be flagged as “Exported”.
  </Step>
</Steps>

#### Export as Private Keys

Turnkey also supports exporting Wallet Accounts and Private Keys as private keys.

##### Wallet Accounts

Follow the same steps above for exporting Wallets as mnemonics, but instead use the `EXPORT_WALLET_ACCOUNT` activity and the `injectKeyExportBundle` method from the [`@turnkey/iframe-stamper`](https://www.npmjs.com/package/@turnkey/iframe-stamper). You can pass an optional `keyFormat` parameter to `injectKeyExportBundle()` that will apply either hexadecimal or Solana-specific formatting to the private key that is exported in the iframe. The default key format is `HEXADECIMAL`, which is used by MetaMask, MyEtherWallet, Phantom, Ledger, and Trezor for Ethereum keys. For Solana keys, you will need to pass the `SOLANA` key format.

##### Private Keys

Follow the same steps above for exporting Wallets as mnemonics, but instead use the `EXPORT_PRIVATE_KEY` activity and the `injectKeyExportBundle` method from the [`@turnkey/iframe-stamper`](https://www.npmjs.com/package/@turnkey/iframe-stamper). You can pass an optional `keyFormat` parameter to `injectKeyExportBundle()` that will apply either hexadecimal or Solana-specific formatting to the private key that is exported in the iframe. The default key format is `HEXADECIMAL`, which is used by MetaMask, MyEtherWallet, Phantom, Ledger, and Trezor for Ethereum keys. For Solana keys, you will need to pass the `SOLANA` key format.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/embedded-wallets/code-examples/img/private_key_export.png" alt="private key export" />
</Frame>

At the end of a successful private key export, the iframe displays a private key.

### NodeJS

A full example Node script can be found here: [https://github.com/tkhq/sdk/tree/main/examples/export-in-node](https://github.com/tkhq/sdk/tree/main/examples/export-in-node)

#### Steps

<Steps>
  <Step title="Initialize a new Turnkey client">
    ```ts
    import { Turnkey } from "@turnkey/sdk-server";
    import { generateP256KeyPair, decryptExportBundle } from "@turnkey/crypto";

    ...

    const turnkeyClient = new Turnkey({
        apiBaseUrl: "https://api.turnkey.com",
        apiPublicKey: process.env.API_PUBLIC_KEY!,
        apiPrivateKey: process.env.API_PRIVATE_KEY!,
        defaultOrganizationId: process.env.ORGANIZATION_ID!,
      });
    ```
  </Step>

  <Step title="Generate a new P256 Keypair — this will serve as the target that Turnkey will encrypt key material to">
    ```ts
    const keyPair = generateP256KeyPair();
    const privateKey = keyPair.privateKey;
    const publicKey = keyPair.publicKeyUncompressed;
    ```
  </Step>

  <Step title="Call export (Turnkey activity)">
    ```ts
    const exportResult = await turnkeyClient.apiClient().exportWallet({
      walletId: walletId,
      targetPublicKey: publicKey,
    });
    ```
  </Step>

  <Step title="Decrypt encrypted bundle">
    ```ts
    const decryptedBundle = await decryptExportBundle({
      exportBundle: exportResult.exportBundle,
      embeddedKey: privateKey,
      organizationId,
      returnMnemonic: true,
    });
    ```

    Congrats! You've exported your wallet 🎉

    The process is largely similar for both private keys and individual wallet accounts.
  </Step>
</Steps>

#### Private Key support

<Steps>
  <Step title="Initialize a new Turnkey client">
    ```ts
    import { Turnkey } from "@turnkey/sdk-server";
    import { generateP256KeyPair, decryptExportBundle } from "@turnkey/crypto";

    ...

    const turnkeyClient = new Turnkey({
        apiBaseUrl: "https://api.turnkey.com",
        apiPublicKey: process.env.API_PUBLIC_KEY!,
        apiPrivateKey: process.env.API_PRIVATE_KEY!,
        defaultOrganizationId: process.env.ORGANIZATION_ID!,
      });
    ```
  </Step>

  <Step title="Generate a new P256 Keypair — this will serve as the target that Turnkey will encrypt key material to">
    ```ts
    const keyPair = generateP256KeyPair();
    const privateKey = keyPair.privateKey;
    const publicKey = keyPair.publicKeyUncompressed;
    ```
  </Step>

  <Step title="Call export (Turnkey activity)">
    ```ts
    const exportResult = await turnkeyClient.apiClient().exportPrivateKey({
      privateKeyId: privateKeyId,
      targetPublicKey: publicKey,
    });
    ```
  </Step>

  <Step title="Decrypt encrypted bundle">
    ```ts
    const decryptedBundle = await decryptExportBundle({
      exportBundle: exportResult.exportBundle,
      embeddedKey: privateKey,
      organizationId,
      returnMnemonic: false,
      keyFormat: "HEXADECIMAL", // optionally specify a key format. Defaults to hexadecimal, but use `SOLANA` to export a private key for use in Solana wallets
    });
    ```

    Congrats! You've exported your private key 🎉
  </Step>
</Steps>

#### Wallet Account support

<Steps>
  <Step title="Initialize a new Turnkey client">
    ```ts
    import { Turnkey } from "@turnkey/sdk-server";
    import { generateP256KeyPair, decryptExportBundle } from "@turnkey/crypto";

    ...

    const turnkeyClient = new Turnkey({
        apiBaseUrl: "https://api.turnkey.com",
        apiPublicKey: process.env.API_PUBLIC_KEY!,
        apiPrivateKey: process.env.API_PRIVATE_KEY!,
        defaultOrganizationId: process.env.ORGANIZATION_ID!,
      });
    ```
  </Step>

  <Step title="Generate a new P256 Keypair — this will serve as the target that Turnkey will encrypt key material to">
    ```ts
    const keyPair = generateP256KeyPair();
    const privateKey = keyPair.privateKey;
    const publicKey = keyPair.publicKeyUncompressed;
    ```
  </Step>

  <Step title="Call export (Turnkey activity)">
    ```ts
    const exportResult = await turnkeyClient.apiClient().exportWalletAccount({
      address: address, // your specific wallet account address
      targetPublicKey: publicKey,
    });
    ```
  </Step>

  <Step title="Decrypt encrypted bundle">
    ```ts
    const decryptedBundle = await decryptExportBundle({
      exportBundle: exportResult.exportBundle,
      embeddedKey: privateKey,
      organizationId,
      returnMnemonic: false,
      keyFormat: "HEXADECIMAL", // optionally specify a key format. Defaults to hexadecimal, but use `SOLANA` to export a private key for use in Solana wallets
    });
    ```

    Congrats! You've exported your wallet account 🎉
  </Step>
</Steps>

### Local Storage

If you do not have access to an iframe (e.g. in a mobile context) or would prefer not to use an iframe, using Local Storage is an alternative method. Note that there are security considerations here due to the fact that anyone in control of your domain can access Local Storage variables.

#### Steps

<Steps>
  <Step title="Initialize Turnkey client">
    ```ts
    import { Turnkey } from "@turnkey/sdk-browser";
    import { generateP256KeyPair, decryptExportBundle } from "@turnkey/crypto";

    ...

    const turnkey = new Turnkey({
      apiBaseUrl: "https://api.turnkey.com",
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
    });
    const passkeyClient = turnkey.passkeyClient();
    ```
  </Step>

  <Step title="Generate a new P256 Keypair — this will serve as the target that Turnkey will encrypt key material to">
    ```ts
    const embeddedKeyPair = generateP256KeyPair();
    const embeddedPrivateKey = keyPair.privateKey;
    const embeddedPublicKey = keyPair.publicKeyUncompressed;
    ```
  </Step>

  <Step title="Save the private key in Local Storage">
    ```ts
    // Storage keys
    const STORAGE_KEYS = {
      EMBEDDED_PRIVATE_KEY: "@turnkey/embedded_private_key",
      EMBEDDED_PUBLIC_KEY: "@turnkey/embedded_public_key",
    };

    await LocalStorage.setItem(
      STORAGE_KEYS.EMBEDDED_PRIVATE_KEY,
      embeddedPrivateKey
    );

    // Note that the public key can always be derived separately via the `getPublicKey` from `@turnkey/crypto`
    await LocalStorage.setItem(STORAGE_KEYS.EMBEDDED_PUBLIC_KEY, embeddedPublicKey);
    ```
  </Step>

  <Step title="Call export (Turnkey activity)">
    4. Call export (Turnkey activity), using the embedded key as the target key for the `exportWallet` activity:

    ```ts
    const exportResult = await passkeyClient.exportWallet({
      walletId, // desired wallet ID
      targetPublicKey: embeddedPublicKey,
    });
    ```
  </Step>

  <Step title="Decrypt encrypted bundle">
    ```ts
    const decryptedBundle = await decryptExportBundle({
      exportBundle: exportResult.exportBundle,
      embeddedKey: embeddedPrivateKey,
      organizationId, // your organization ID (this may be a suborg)
      returnMnemonic: true,
    });
    ```
  </Step>

  <Step title=" Remove embedded key from Local Storage. This is recommended because (1) this key doesn't have to be persistent in the first place, and (2) reduces the risk of pattern detection.">
    ```ts
    await LocalStorage.removeItem(
      STORAGE_KEYS.EMBEDDED_PRIVATE_KEY,
      embeddedPrivateKey
    );
    await LocalStorage.removeItem(
      STORAGE_KEYS.EMBEDDED_PUBLIC_KEY,
      embeddedPublicKey
    );
    ```

    Congrats! You've exported your wallet 🎉

    The process is largely similar for both private keys and individual wallet accounts.
  </Step>
</Steps>

#### Private Key support

<Steps>
  <Step title="Initialize Turnkey client">
    ```ts
    import { Turnkey } from "@turnkey/sdk-browser";
    import { generateP256KeyPair, decryptExportBundle } from "@turnkey/crypto";

    ...

    const turnkey = new Turnkey({
      apiBaseUrl: "https://api.turnkey.com",
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
    });
    const passkeyClient = turnkey.passkeyClient();
    ```
  </Step>

  <Step title="Generate a new P256 Keypair — this will serve as the target that Turnkey will encrypt key material to">
    ```ts
    const keyPair = generateP256KeyPair();
    const privateKey = keyPair.privateKey;
    const publicKey = keyPair.publicKeyUncompressed;
    ```
  </Step>

  <Step title="Save the private key in Local Storage">
    ```ts
    // Storage keys
    const STORAGE_KEYS = {
      EMBEDDED_PRIVATE_KEY: "@turnkey/embedded_private_key",
      EMBEDDED_PUBLIC_KEY: "@turnkey/embedded_public_key",
    };

    await LocalStorage.setItem(STORAGE_KEYS.EMBEDDED_PRIVATE_KEY, privateKey);

    // Note that the public key can always be derived separately via the `getPublicKey` from `@turnkey/crypto`
    await LocalStorage.setItem(STORAGE_KEYS.EMBEDDED_PUBLIC_KEY, publicKey);
    ```
  </Step>

  <Step title="Call export (Turnkey activity)">
    ```ts
    const exportResult = await passkeyClient.exportPrivateKey({
      privateKeyId, // desired private key ID
      targetPublicKey: publicKey,
    });
    ```
  </Step>

  <Step title="Decrypt encrypted bundle">
    ```ts
    const decryptedBundle = await decryptExportBundle({
      exportBundle: exportResult.exportBundle,
      embeddedKey: privateKey,
      organizationId, // your organization ID (this may be a suborg)
      returnMnemonic: false, // N/A as we're working with a private key, not a wallet
      keyFormat: "HEXADECIMAL", // optionally specify a key format. Defaults to hexadecimal, but use `SOLANA` to export a private key for use in Solana wallets
    });
    ```
  </Step>

  <Step title="Remove embedded key from Local Storage. This is recommended because (1) this key doesn't have to be persistent in the first place, and (2) reduces the risk of pattern detection.">
    ```ts
    await LocalStorage.removeItem(
      STORAGE_KEYS.EMBEDDED_PRIVATE_KEY,
      embeddedPrivateKey
    );
    await LocalStorage.removeItem(
      STORAGE_KEYS.EMBEDDED_PUBLIC_KEY,
      embeddedPublicKey
    );
    ```

    Congrats! You've exported your private key 🎉
  </Step>
</Steps>

#### Wallet Account support

<Steps>
  <Step title="Initialize Turnkey client">
    ```ts
    import { Turnkey } from "@turnkey/sdk-browser";
    import { generateP256KeyPair, decryptExportBundle } from "@turnkey/crypto";

    ...

    const turnkey = new Turnkey({
      apiBaseUrl: "https://api.turnkey.com",
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
    });
    const passkeyClient = turnkey.passkeyClient();
    ```
  </Step>

  <Step title="Generate a new P256 Keypair — this will serve as the target that Turnkey will encrypt key material to">
    ```ts
    const keyPair = generateP256KeyPair();
    const privateKey = keyPair.privateKey;
    const publicKey = keyPair.publicKeyUncompressed;
    ```
  </Step>

  <Step title="Save the private key in Local Storage">
    ```ts
    // Storage keys
    const STORAGE_KEYS = {
      EMBEDDED_PRIVATE_KEY: "@turnkey/embedded_private_key",
      EMBEDDED_PUBLIC_KEY: "@turnkey/embedded_public_key",
    };

    await LocalStorage.setItem(STORAGE_KEYS.EMBEDDED_PRIVATE_KEY, privateKey);

    // Note that the public key can always be derived separately via the `getPublicKey` from `@turnkey/crypto`
    await LocalStorage.setItem(STORAGE_KEYS.EMBEDDED_PUBLIC_KEY, publicKey);
    ```
  </Step>

  <Step title="Call export (Turnkey activity)">
    4. Call export (Turnkey activity), using the embedded key as the target key for the `exportWalletAccount` activity:

    ```ts
    const exportResult = await passkeyClient.exportWalletAccount({
      address, // your specific wallet account address
      targetPublicKey: publicKey,
    });
    ```
  </Step>

  <Step title="Decrypt encrypted bundle">
    ```ts
    const decryptedBundle = await decryptExportBundle({
      exportBundle: exportResult.exportBundle,
      embeddedKey: privateKey,
      organizationId, // your organization ID (this may be a suborg)
      returnMnemonic: false, // N/A as we're working with a wallet account, not a wallet
      keyFormat: "HEXADECIMAL", // optionally specify a key format. Defaults to hexadecimal, but use `SOLANA` to export a private key for use in Solana wallets
    });
    ```
  </Step>

  <Step title="Remove embedded key from Local Storage. This is recommended because (1) this key doesn't have to be persistent in the first place, and (2) reduces the risk of pattern detection.">
    ```ts
    await LocalStorage.removeItem(
      STORAGE_KEYS.EMBEDDED_PRIVATE_KEY,
      embeddedPrivateKey
    );
    await LocalStorage.removeItem(
      STORAGE_KEYS.EMBEDDED_PUBLIC_KEY,
      embeddedPublicKey
    );
    ```

    Congrats! You've exported your wallet account 🎉
  </Step>
</Steps>

## UI customization

Everything is customizable in the import iframe except the sentence of mnemonic words, which is minimally styled: the text is left-aligned and the padding and margins are zero. Here's an example of how you can configure the styling of the iframe.

```ts
const iframeCss = `
  iframe {
      box-sizing: border-box;
      width: 400px;
      height: 120px;
      border-radius: 8px;
      border-width: 1px;
      border-style: solid;
      border-color: rgba(216, 219, 227, 1);
      padding: 20px;
  }
`;

return (
  <div style={{ display: iframeDisplay }} id="your-container">
    <style>{iframeCss}</style>
  </div>
);
```

## Solana notes

Solana paths do not include an `index`. Creating a wallet account with an index specified could lead to unexpected behavior when exporting and importing into another wallet.

When importing into a multichain wallet such as Phantom, see [this guide](https://help.phantom.app/hc/en-us/articles/12988493966227-What-derivation-paths-does-Phantom-wallet-support#:~:text=The%20addresses%20are%20grouped%20into,'%2F0'%2F0%2F0.) on matching private keys across Solana, Ethereum, and Polygon.

When exporting, if you export with the `hexadecimal` format, you can easily convert to base58 (Phantom-compatible) with a script like the following:

```javascript
var web3 = require('@solana/web3.js')
var bs58 = require('bs58')

const uint8arrayToHexString = (buffer) => {
  return [...buffer].map((x) => x.toString(16).padStart(2, "0")).join("");
};

const uint8arrayFromHexString = (hexString) =>
  new Uint8Array(hexString.match(/../g).map((h) => parseInt(h, 16)));

const privateKey = "<your turnkey-provided exported private key (without 0x)>"
const address = "<your solana address>"

const base58DecodedAddress = bs58.decode(address)
const base58DecodedAddressHex = uint8arrayToHexString(base58decodedAddress)
const uintarr = uint8arrayFromHexString(`${privateKey}${base58decodedAddressHex}`)

const imported = web3.Keypair.fromSecretKey(uintarr);
console.log('imported wallet', imported) // verify import

const privateKeyString = bs58.encode(uintarr);

// NOTE: this log is for demonstration purposes only.
// This key material is extremely sensitive and should be handled with care.
console.log('phantom-importable private key string', privateKeyString)
```


# Import Wallet or Private Key
Source: https://docs.turnkey.com/embedded-wallets/code-examples/import

This is a guide to importing your wallet or private key into Turnkey. For more information about the security of this flow, check out [Enclave secure channels](/security/enclave-secure-channels).

## Implementation guides

Follow along with the Turnkey CLI, Embedded iframe, NodeJS, and Local Storage guides.

### CLI

Install the latest version of Turnkey CLI to access the new import functionality. You can find detailed instructions for installation [here](https://github.com/tkhq/tkcli).

#### Steps

<Steps>
  <Step title="Generate an encryption key">
    ```bash
    turnkey generate encryption-key \
    --organization $ORGANIZATION_ID \
    --user $USER_ID \
    --encryption-key-name demo-encryption-key
    ```

    * The `--user` flag (required) is the id of the user importing the private key; this is required because the underlying encryption keys used for import are scoped to each user.
    * The `--encryption-key-name` flag is to specify a name for the encryption key. Note that an encryption key !== Turnkey API key; an encryption key is used exclusively for secure activities like import and export.
  </Step>

  <Step title="Initialize import">
    ```bash
    turnkey wallets init-import \
    --user $USER_ID \
    --import-bundle-output "./import_bundle.txt" \
    --key-name demo-api-key
    ```

    * The `--import-bundle-output` (required) flag is the desired output file path for the “import bundle” that will be received from Turnkey. The “import bundle” contains the ephemeral public key generated by the Turnkey signer enclave for the specified user. The private key plaintext is encrypted to this public key in Step 2.
    * Reminder: The `--key-name` flag specifies the name of API key with which to interact with the Turnkey API service. This should be the name of a previously created key. If you do not have one, visit the quickstart guide for help creating one.
  </Step>

  <Step title="Encrypt without saving plaintext to filesystem. This can be done offline:">
    ```bash
    turnkey encrypt \
    --user $USER_ID \
    --import-bundle-input "./import_bundle.txt" \
    --plaintext-input /dev/fd/3 3<<<"$MNEMONIC_1" \
    --encrypted-bundle-output "./encrypted_bundle.txt" \
    --encryption-key-name demo-encryption-key
    ```

    * The `--import-bundle-input` flag (required) is the desired input file path for the “import bundle”.
    * The `--plaintext-input` flag is the desired input file path for the private key plaintext. You can pass a filename here or feed the plaintext string directly into the standard input as shown above.
    * The `--encrypted-bundle-output` (required) flag is the desired output file path for the “encrypted bundle” that will be sent to Turnkey in Step 3. The “encrypted bundle” contains the ephemeral public key generated by the CLI as part of the shared secret computation with the Turnkey signer enclave. It also contains the ciphertext, which is the plaintext input encrypted by the Turnkey signer’s ephemeral public key.
  </Step>

  <Step title="Import private key">
    ```bash
    turnkey wallets import \
    --user $USER_ID \
    --name "demo key"  \
    --encrypted-bundle-input "./encrypted_bundle.txt" \
    --key-name demo-api-key
    ```

    * The `--encrypted-bundle-input` (required) flag is the desired input file path for the “encrypted bundle” that will be sent to Turnkey.
    * Options are listed [here](/concepts/wallets) for the `--curve` and `--address-format` flags.
  </Step>
</Steps>

#### Private Key support

Turnkey CLI also supports importing private keys. Follow the same steps as importing a wallet via CLI but use the `turnkey private-keys` commands instead. In Step 2 (`encrypt`), pass a `--key-format` flag for key-specific formatting; the options for private keys are:

* `hexadecimal`: Used for Ethereum. Examples: `0x13eff5b3f9c63eab5d53cff5149f01606b69325496e0e98b53afa938d890cd2e, 13eff5b3f9c63eab5d53cff5149f01606b69325496e0e98b53afa938d890cd2e`
* `solana`: Used for Solana. It’s a base58-encoding of the concatenation of the private key and public key bytes. Example: `2P3qgS5A18gGmZJmYHNxYrDYPyfm6S3dJgs8tPW6ki6i2o4yx7K8r5N8CF7JpEtQiW8mx1kSktpgyDG1xuWNzfsM`

```bash
turnkey encrypt \
--import-bundle-input "./import_bundle.txt" \
--plaintext-input /dev/fd/3 3<<<"$RAW_KEY_1" \
--key-format “hexadecimal” \
--encrypted-bundle-output "./encrypted_bundle.txt"
```

### Embedded iframe

* We have released open-source code to create target encryption keys and encrypt wallet mnemonics for import. We've deployed a static HTML page hosted on `import.turnkey.com` meant to be embedded as an iframe element (see the code [here](https://github.com/tkhq/frames)). This ensures the mnemonics and keys are encrypted to keys that the user has access to, but that your organization does not (because they live in the iframe, on a separate domain).
* We have also built a package to help you insert this iframe and interact with it in the context of import: [`@turnkey/iframe-stamper`](https://www.npmjs.com/package/@turnkey/iframe-stamper)

In the rest of this guide we'll assume you are using these helpers.

#### Steps

Here's a diagram summarizing the wallet import flow step-by-step ([direct link](/assets/files/wallet_import_steps-6c4753c1e726e1632ce475bc838388c2.png)):

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/embedded-wallets/code-examples/img/wallet_import_steps.png" alt="wallet import steps" />
</Frame>

Let's review these steps in detail:

<Steps>
  <Step>
    When a user on your application clicks "import", display a new import UI. We recommend setting this import UI as a new hosted page of your application that contains the iframe element that the user will enter their mnemonic into and an import button.

    While the UI is in a loading state, your application uses [`@turnkey/iframe-stamper`](https://www.npmjs.com/package/@turnkey/iframe-stamper) to insert a new iframe element:

    ```js
    const iframeStamper = new IframeStamper({
      iframeUrl: "https://import.turnkey.com",
      // Configure how the iframe element is inserted on the page
      iframeContainer: yourContainer,
      iframeElementId: "turnkey-iframe",
    });

    // Inserts the iframe in the DOM.
    await iframeStamper.init();

    // Set state to not display iframe
    let displayIframe = "none";

    return (
      // The iframe element does not need to be displayed yet
      <div style={{ display: displayIframe }} />
    );
    ```
  </Step>

  <Step>
    Your application prompts the user to sign a new `INIT_IMPORT_WALLET` activity with the ID of the user importing the wallet.
  </Step>

  <Step>
    Your application polls for the activity response, which contains an import bundle.

    Need help setting up async polling? Checkout our guide and helper [here](https://github.com/tkhq/sdk/tree/main/packages/http#withasyncpolling-helper).
  </Step>

  <Step>
    Your application injects the import bundle into the iframe and displays the iframe upon success:

    ```js
    // Inject import bundle into iframe
    let success = await iframeStamper.injectImportBundle(importBundle);

    if (success !== true) {
      throw new Error("unexpected error while injecting import bundle");
    }

    // If successfully injected, update the state to display the iframe
    iframeDisplay = "block";
    ```
  </Step>

  <Step>
    When a user clicks on the import button on your web page, your application can extract the encrypted mnemonic bundle from the iframe:

    ```js
    // Extract the encrypted bundle from the iframe
    let encryptedBundle =
      await iframeStamper.extractWalletEncryptedBundle(importBundle);
    ```

    Your applications passes the encrypted bundle as a parameter in a new `IMPORT_WALLET` activity and prompts the user to sign it.

    Import is complete!

    In your Turnkey dashboard, the imported user Wallet will be flagged as “Imported”.
  </Step>
</Steps>

### NodeJS

A full example Node script can be found here: [https://github.com/tkhq/sdk/tree/main/examples/import-in-node](https://github.com/tkhq/sdk/tree/main/examples/import-in-node)

#### Steps

<Steps>
  <Step title="Initialize a new Turnkey client">
    ```ts
    import { Turnkey } from "@turnkey/sdk-server";
    import {
      encryptPrivateKeyToBundle,
      encryptWalletToBundle,
    } from "@turnkey/crypto";

    ...

    const turnkeyClient = new Turnkey({
        apiBaseUrl: "https://api.turnkey.com",
        apiPublicKey: process.env.API_PUBLIC_KEY!,
        apiPrivateKey: process.env.API_PRIVATE_KEY!,
        defaultOrganizationId: process.env.ORGANIZATION_ID!,
      });
    ```
  </Step>

  <Step title="Initialize the import process (Turnkey activity)">
    ```ts
    const initResult = await turnkeyClient.apiClient().initImportWallet({
      userId,
    });
    ```
  </Step>

  <Step title="Encrypt wallet to bundle">
    ```ts
    const walletBundle = await encryptWalletToBundle({
      mnemonic,
      importBundle: initResult.importBundle,
      userId,
      organizationId,
    });
    ```
  </Step>

  <Step title="Import wallet (Turnkey activity)">
    ```ts
    const walletImportResult = await turnkeyClient.apiClient().importWallet({
      userId: userId,
      walletName: "Your imported wallet!",
      encryptedBundle: walletBundle,
      accounts: [], // these are the wallet accounts you'd like to derive; after all, you've just imported a HD wallet! See https://learnmeabitcoin.com/technical/hd-wallets for more
    });
    ```

    Congrats! You've imported your wallet 🎉
  </Step>
</Steps>

#### Private Key support

The process for importing a private key instead of wallet is largely similar, but has a key difference in that you must specify the format of your imported private key:

<Steps>
  <Step title="Initialize a new Turnkey client">
    ```js
    import { Turnkey } from "@turnkey/sdk-server";
    import {
      encryptPrivateKeyToBundle,
      encryptWalletToBundle,
    } from "@turnkey/crypto";

    ...

    const turnkeyClient = new Turnkey({
        apiBaseUrl: "https://api.turnkey.com",
        apiPublicKey: process.env.API_PUBLIC_KEY!,
        apiPrivateKey: process.env.API_PRIVATE_KEY!,
        defaultOrganizationId: process.env.ORGANIZATION_ID!,
      });
    ```
  </Step>

  <Step title="Initialize the import process (Turnkey activity)">
    ```js
    const initResult = await turnkeyClient.apiClient().initImportPrivateKey({
      userId,
    });
    ```
  </Step>

  <Step title="Encrypt private key to bundle">
    ```js
    const privateKeyBundle = await encryptPrivateKeyToBundle({
      privateKey,
      keyFormat,
      importBundle: initResult.importBundle,
      userId,
      organizationId,
    });
    ```
  </Step>

  <Step title="Import private key (Turnkey activity)">
    ```js
    const privateKeyImportResult = await turnkeyClient
      .apiClient()
      .importPrivateKey({
        userId: userId,
        privateKeyName: "Your imported private key!",
        encryptedBundle: privateKeyBundle,
        curve: keyFormat == "SOLANA" ? "CURVE_ED25519" : "CURVE_SECP256K1",
        addressFormats:
          keyFormat == "SOLANA"
            ? ["ADDRESS_FORMAT_SOLANA"]
            : ["ADDRESS_FORMAT_ETHEREUM"],
      });
    ```

    Congrats! You've imported your private key 🎉
  </Step>
</Steps>

### Local Storage

If you do not have access to an iframe (e.g. in a mobile context) or would prefer not to use an iframe, you can opt to use other environment-agnostic methods to perform import using Turnkey libraries. So while this section is called Local Storage (for consistency with the [Export](/embedded-wallets/code-examples/export) guide), nothing is stored in Local Storage; instead, the relevant `encrypt{Wallet, PrivateKey}ToBundle` method uses an [ephemeral key](https://github.com/tkhq/sdk/blob/6b3ea14d1184c5394449ecaad2b0f445e373823f/packages/crypto/src/crypto.ts#L62-L70).

#### Steps

<Steps>
  <Step title="Initialize Turnkey client">
    ```ts
    import { Turnkey } from "@turnkey/sdk-browser";
    import { generateP256KeyPair, encryptWalletToBundle } from "@turnkey/crypto";

    ...

    const turnkey = new Turnkey({
      apiBaseUrl: "https://api.turnkey.com",
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
    });
    const passkeyClient = turnkey.passkeyClient();
    ```
  </Step>

  <Step title="Initialize the import process (Turnkey activity)">
    ```ts
    const initResult = await passkeyClient.initImportWallet({
      userId, // your user ID
    });
    ```
  </Step>

  <Step title="Encrypt wallet to bundle">
    ```ts
    const walletBundle = await encryptWalletToBundle({
      mnemonic,
      importBundle: initResult.importBundle,
      userId, // your user ID
      organizationId, // your organization ID
    });
    ```
  </Step>

  <Step title="Import wallet (Turnkey activity)">
    ```ts
    const walletImportResult = await passkeyClient.importWallet({
      userId, // your user ID
      walletName: "Your imported wallet!", // your desired name for the resulting imported wallet
      encryptedBundle: walletBundle,
      accounts: [], // these are the wallet accounts you'd like to derive; after all, you've just imported a HD wallet! See https://learnmeabitcoin.com/technical/hd-wallets for more
    });
    ```

    Congrats! You've imported your wallet 🎉

    The process for importing a private key instead of wallet is largely similar, but has a key difference in that you must specify the format of your imported private key:
  </Step>
</Steps>

#### Private Key support

<Steps>
  <Step title="Initialize Turnkey client">
    ```ts
    import { Turnkey } from "@turnkey/sdk-browser";
    import { generateP256KeyPair, encryptPrivateKeyToBundle } from "@turnkey/crypto";

    ...

    const turnkey = new Turnkey({
      apiBaseUrl: "https://api.turnkey.com",
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
    });
    const passkeyClient = turnkey.passkeyClient();
    ```
  </Step>

  <Step title="Initialize the import process (Turnkey activity)">
    ```
    const initResult = await passkeyClient.initImportPrivateKey({
      userId, // your user ID
    });
    ```
  </Step>

  <Step title="Encrypt private key to bundle">
    ```ts
    const privateKeyBundle = await encryptPrivateKeyToBundle({
      privateKey, // your private key string
      keyFormat, // your desired key format. See the Private Key notes section for more
      importBundle: initResult.importBundle,
      userId, // your user ID
      organizationId, // your organization ID
    });
    ```
  </Step>

  <Step title="Import private key (Turnkey activity)">
    ```ts
    const privateKeyImportResult = await passkeyClient.importPrivateKey({
      userId,
      privateKeyName: "Your imported private key!", // your desired name for the resulting imported private key
      encryptedBundle: privateKeyBundle,
      curve: keyFormat == "SOLANA" ? "CURVE_ED25519" : "CURVE_SECP256K1",
      addressFormats:
        keyFormat == "SOLANA"
          ? ["ADDRESS_FORMAT_SOLANA"]
          : ["ADDRESS_FORMAT_ETHEREUM"],
    });
    ```

    Congrats! You've imported your private key 🎉
  </Step>
</Steps>

## Private Key notes

Turnkey also supports importing Private Keys. Follow the same steps above for importing Wallets as mnemonics, but instead use the `INIT_IMPORT_PRIVATE_KEY` and `IMPORT_PRIVATE_KEY` activities and the `extractKeyEncryptedBundle` method from the [`@turnkey/iframe-stamper`](https://www.npmjs.com/package/@turnkey/iframe-stamper). You can pass an optional `keyFormat` to `extractKeyEncryptedBundle(keyFormat)` that will apply either `Hexadecimal` or `Solana` formatting to the private key that is entered in the iframe. The default key format is `hexadecimal`, which is used by MetaMask, MyEtherWallet, Phantom, Ledger, and Trezor for Ethereum keys. For Solana keys, you will need to pass the `solana` key format.

## UI customization

Everything is customizable in the import iframe except the sentence of mnemonic words, which is minimally styled: the text is left-aligned and the padding and margins are zero. Here's an example of how you can configure the styling of the iframe.

```css
const iframeCss = `
  iframe {
      box-sizing: border-box;
      width: 400px;
      height: 120px;
      border-radius: 8px;
      border-width: 1px;
      border-style: solid;
      border-color: rgba(216, 219, 227, 1);
      padding: 20px;
  }
`;

return (
  <div style={{ display: iframeDisplay }} id="your-container">
    <style>{iframeCss}</style>
  </div>
);
```


# Signing Transactions
Source: https://docs.turnkey.com/embedded-wallets/code-examples/signing-transactions

This is a guide to signing transactions in the browser context. While these snippets leverage Ethers, it can be swapped out for other signers in the Viem or Solana contexts. See [here](https://github.com/tkhq/sdk/tree/main/examples/with-eth-passkeys-galore) for an example with both Ethers and Viem in the passkey + browser context, and [here](https://github.com/tkhq/sdk/tree/main/examples/with-solana-passkeys) for a similar example with Solana.

## Steps using `@turnkey/sdk-react`

This process is made the most seamless by leveraging our [React package](/sdks/react). Read on for a non-React implementation.

<Steps>
  <Step title="Initialize the React Provider">
    ```js
    import { TurnkeyProvider } from "@turnkey/sdk-react";
    const turnkeyConfig = {
      apiBaseUrl: "https://api.turnkey.com",
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID, // prefix with NEXT_PUBLIC for NextJS
      rpId: process.env.RPID, // your application's domain
      iframeUrl: "https://auth.turnkey.com"
    }

    ...

    <div className="App">
      <TurnkeyProvider config={turnkeyConfig}>
      // Rest of app ...
      </TurnkeyProvider>
    </div>
    ```
  </Step>

  <Step title="Initialize an Ethers Provider and Turnkey Signer using the Passkey Client">
    ```js
    import { ethers } from "ethers";
    import { TurnkeySigner } from "@turnkey/ethers";

    import { useTurnkey } from "@turnkey/sdk-react";
    const { turnkey, passkeyClient } = useTurnkey();

    const provider = new ethers.JsonRpcProvider(<provider api url>);
    const currentUser = await turnkey.getCurrentUser();
    const turnkeySigner = new TurnkeySigner({
      client: passkeyClient,
      organizationId: currentUser.organization.organizationId,
      signWith: "<wallet address to sign with>"
    })
    const connectedSigner = turnkeySigner.connect(provider);
    ```
  </Step>

  <Step title="Call `sendTransaction` with the Turnkey Signer">
    ```js
    const transactionRequest = {
      to: "<destination address>",
      value: ethers.parseEther("<amount to send>"),
      type: 2,
    };
    const sendTransaction = await connectedSigner.sendTransaction(transactionRequest);
    ```
  </Step>
</Steps>

## Alternative Steps (non-React)

<Steps>
  <Step title="Initialize the Passkey Client">
    ```js
    import { Turnkey } from "@turnkey/sdk-browser";

    const turnkey = new Turnkey({
      apiBaseUrl: "https://api.turnkey.com",
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
    });
    const passkeyClient = turnkey.passkeyClient();
    ```
  </Step>

  <Step title="Initialize an Ethers Provider and Turnkey Signer">
    ```
    import { ethers } from "ethers";
    import { TurnkeySigner } from "@turnkey/ethers";

    const provider = new ethers.JsonRpcProvider(<provider api url>);
    const currentUser = await turnkey.getCurrentUser(); // assumes user details have been stored in LocalStorage via `login()`
    const turnkeySigner = new TurnkeySigner({
      client: passkeyClient,
      organizationId: currentUser.organization.organizationId,
      signWith: "<wallet address to sign with>"
    })
    const connectedSigner = turnkeySigner.connect(provider);
    ```
  </Step>

  <Step title="Call sendTransaction with the Turnkey Signer">
    ```js
    const transactionRequest = {
      to: "<destination address>",
      value: ethers.parseEther("<amount to send>"),
      type: 2,
    };
    const sendTransaction =
      await connectedSigner.sendTransaction(transactionRequest);
    ```
  </Step>
</Steps>


# Wallet Authentication
Source: https://docs.turnkey.com/embedded-wallets/code-examples/wallet-auth

In this guide, we'll explore how to leverage the `WalletClient` in the Turnkey SDK to authenticate requests to Turnkey's API using either Solana or Ethereum wallets.

## Initialize

Begin by initializing the Turnkey SDK by passing in a config object containing:

* `apiBaseUrl`: The base URL of the Turnkey API: `https://api.turnkey.com`.
* `defaultOrganizationId`: Your parent organization ID, which you can find in the [Turnkey dashboard](https://app.turnkey.com/dashboard).
* `wallet`: The wallet interface used to sign requests. In this example, we'll use the `EthereumWallet` interface.

```ts config.ts
import { EthereumWallet } from '@turnkey/wallet-stamper';

export const turnkeyConfig = {
  // Turnkey API base URL
  apiBaseUrl: 'https://api.turnkey.com',
  // Your parent organization ID
  defaultOrganizationId: process.env.NEXT_PUBLIC_ORGANIZATION_ID!,
  // The wallet interface used to sign requests
  wallet: new EthereumWallet(),
};
```

First, wrap your application with the `TurnkeyProvider` in your `app/layout.tsx` file.
As this file is required by Next.js to be a server component, we need to define a `TurnkeyClientProvider` client component.

```tsx app/TurnkeyClientProvider.tsx
'use client';

import { TurnkeyProvider } from '@turnkey/sdk-react';

import { turnkeyConfig } from './config';

export function TurnkeyClientProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  return <TurnkeyProvider config={turnkeyConfig}>{children}</TurnkeyProvider>;
}
```

```tsx app/layout.tsx
import './globals.css';
import '@turnkey/sdk-react/styles';

import { TurnkeyClientProvider } from './TurnkeyClientProvider';

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        <TurnkeyClientProvider>{children}</TurnkeyClientProvider>
      </body>
    </html>
  );
}
```

Then, create a new page component `app/page.tsx` where we'll implement the wallet authentication functionality:

<Tabs>
  <Tab title="Next.js">
    ```tsx app/page.tsx
    "use client";

    import { useState } from "react";
    import { useTurnkey } from "@turnkey/sdk-react";

    export default function WalletAuth() {
      const { walletClient } = useTurnkey();

    // We'll add more functionality here in the following steps

    return <div>{/* We'll add UI elements here */}</div>;
    }

    ```
  </Tab>

  <Tab title="TypeScript">
    Create a new file `src/wallet-auth.ts` where we'll implement the wallet authentication functionality:

    ```ts src/wallet-auth.ts
    import { Turnkey } from "@turnkey/sdk-browser";
    import { EthereumWallet } from "@turnkey/wallet-stamper";
    import { turnkeyConfig } from "./config";

    // Initialize the Turnkey SDK with the config object defined above
    const turnkey = new Turnkey(turnkeyConfig);

    // Initialize the Wallet Client with the EthereumWallet interface
    const walletClient = turnkey.walletClient(new EthereumWallet());

    // We'll add more functionality here in the following steps
    ```
  </Tab>
</Tabs>

## Sign Up

In this section, we'll guide you through the process of implementing a sign-up flow using an Ethereum wallet for authentication. The sign-up process involves creating a new sub-organization within your existing organization. This requires authentication of the parent organization using its public/private key pair. Additionally, we'll cover how to verify if a user already has an associated sub-organization before proceeding.

### Server-side

Initialize the Turnkey SDK on the **server-side** using the `@turnkey/sdk-server` package. This setup enables you to authenticate requests to Turnkey's API using the parent organization's public/private API key pair. This is required to create new sub-organizations on behalf of a user.

<Tabs>
  <Tab title="Next.js">
    For Next.js, add the `"use server"` directive at the top of the file where you're initializing the Turnkey server client. This will ensure that the function is executed on the server-side and will have access to the server-side environment variables e.g. your parent organization's public/private API key pair. For more information on Next.js server actions, see the Next.js documentation on [Server Actions and Mutations](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).

    ```tsx app/actions.ts
    'use server';

    import { Turnkey } from '@turnkey/sdk-server';
    import { turnkeyConfig } from './config';

    const { apiBaseUrl, defaultOrganizationId } = turnkeyConfig;

    // Initialize the Turnkey Server Client on the server-side
    const turnkeyServer = new Turnkey({
      apiPrivateKey: process.env.TURNKEY_API_PRIVATE_KEY!,
      apiPublicKey: process.env.TURNKEY_API_PUBLIC_KEY!,
      apiBaseUrl,
      defaultOrganizationId,
    }).apiClient();
    ```
  </Tab>

  <Tab title="TypeScript">
    ```ts src/wallet-auth-server.ts
    import { Turnkey } from "@turnkey/sdk-server";
    import { turnkeyConfig } from "./config";

    const { apiBaseUrl, defaultOrganizationId } = turnkeyConfig;

    // Initialize the Turnkey Server Client on the server-side
    const turnkeyServer = new Turnkey({
    apiPrivateKey: process.env.TURNKEY_API_PRIVATE_KEY,
    apiPublicKey: process.env.TURNKEY_API_PUBLIC_KEY,
    apiBaseUrl,
    defaultOrganizationId,
    }).apiClient();

    ```
  </Tab>
</Tabs>

### Check for Existing User

Before signing up a new user, we can try and retrieve the user's sub-organization ID using the public key associated with the Ethereum or Solana account they want to authenticate with. If a sub-organization is found, we can proceed with authentication; otherwise, we assume the user is signing up.

We'll use the `getPublicKey` method on the `WalletClient` instance which will retrieve the public key from the user's wallet.

<Info>
  The main distinction between signing with an Ethereum Wallet and a Solana Wallet lies in how the public key is obtained. For Solana, the public key can be directly derived from the wallet. In contrast, with Ethereum, the secp256k1 public key isn't directly accessible. Instead, you need to first obtain a signature from the user and then recover the public key from that signature. This requires an additional step of signing a message with the user's Ethereum wallet before we can retrieve the public key.
</Info>

We'll define this function in the server-side code we initialized earlier.

<Tabs>
  <Tab title="Next.js">
    ```ts app/actions.ts
    "use server";

    // ...

    export const getSubOrg = async (publicKey: string) => {
      try {
        const { organizationIds } = await turnkeyServer.getSubOrgIds({
          organizationId: turnkeyConfig.defaultOrganizationId,
          filterType: "PUBLIC_KEY",
          filterValue: publicKey,
        });

        return organizationIds[0] ?? null;
      } catch (err: any) {
          return null;
      }
    };
    ```
  </Tab>

  <Tab title="TypeScript">
    ```ts src/wallet-auth-server.ts
    'use server';

    // ...

    export const getSubOrg = async (publicKey: string) => {
      try {
        const { organizationIds } = await turnkeyServer.getSubOrgIds({
          organizationId: turnkeyConfig.defaultOrganizationId,
          filterType: 'PUBLIC_KEY',
          filterValue: publicKey,
        });

        return organizationIds[0] ?? null;
      } catch (err: any) {
        return null;
      }
    };
    ```
  </Tab>
</Tabs>

Next, we'll add the client-side functionality to the `app/page.tsx` file we created earlier importing the `getSubOrg` function we defined in our server action. We'll use the `getSubOrg` function in the login method to check if a user already has a sub-organization.

<Tabs>
  <Tab title="Next.js">
    ```tsx app/page.tsx
    'use client';

    import { useState } from 'react';
    import { useTurnkey } from '@turnkey/sdk-react';
    // Import the getSubOrg function we defined earlier
    import { getSubOrg } from './actions';

    export default function WalletAuth() {
      const { walletClient } = useTurnkey();

    const login = async () => {
    // Get the public key of the wallet, for Ethereum wallets this will trigger a prompt for the user to sign a message
    const publicKey = await walletClient?.getPublicKey();

        if (!publicKey) {
          throw new Error('No public key found');
        }

        const subOrgId = await getSubOrg(publicKey);
        if (!subOrgId) {
          // User does not have a sub-organization, proceed with sign-up
        }
        // User has a sub-organization, proceed with login

    };

    return (
    <div>
    <button onClick={login}>Sign In</button>
    </div>
    );
    }

    ```
  </Tab>

  <Tab title="TypeScript">
    ```ts src/wallet-auth.ts
    import { getSubOrg } from './wallet-auth-server';
    // ...
    const walletClient = turnkey.walletClient(new EthereumWallet());

    export const login = async () => {
      // Get the public key of the wallet, for Ethereum wallets this will trigger a prompt for the user to sign a message
      const publicKey = await walletClient?.getPublicKey();

      if (!publicKey) {
        throw new Error('No public key found');
      }

      const subOrgId = await getSubOrg(publicKey);
      if (!subOrgId) {
        // User does not have a sub-organization, proceed with sign-up
      }
      // User has a sub-organization, proceed with login
    };
    ```
  </Tab>
</Tabs>

### Create Sub-Organization

Next, we'll define a method to create a sub-organization for new user sign-ups.

For more information, refer to the [Sub-Organizations](/concepts/sub-organizations) guide.

<Tabs>
  <Tab title="Next.js">
    We'll define another server action `createSubOrg` to create a sub-organization for new user sign-ups.

    ```ts app/actions.ts
    'use server';

    // ...

    // Import the default Ethereum accounts helper
    import { DEFAULT_ETHEREUM_ACCOUNTS } from '@turnkey/sdk-browser';

    export const createSubOrg = async (
      publicKey: string,
      curveType: 'API_KEY_CURVE_ED25519' | 'API_KEY_CURVE_SECP256K1'
    ) => {
      const apiKeys = [
        {
          apiKeyName: `Wallet Auth - ${publicKey}`,
          // The public key of the wallet that will be added as an API key and used to stamp future requests
          publicKey,
          // We set the curve type to 'API_KEY_CURVE_ED25519' for solana wallets
          // If using an Ethereum wallet, set the curve type to 'API_KEY_CURVE_SECP256K1'
          curveType,
        },
      ];

      const subOrg = await turnkeyServer.createSubOrganization({
        // The parent organization ID
        organizationId: turnkeyConfig.defaultOrganizationId,
        subOrganizationName: 'New Sub Org',
        rootUsers: [
          {
            // Replace with user provided values if desired
            userName: 'New User',
            userEmail: 'wallet@domain.com',
            apiKeys,
            authenticators: [],
            oauthProviders: [],
          },
        ],
        rootQuorumThreshold: 1,
        wallet: {
          walletName: 'Default Wallet',
          // This is used to create a new Ethereum wallet for the sub-organization
          accounts: DEFAULT_ETHEREUM_ACCOUNTS,
        },
      });

      return subOrg;
    };
    ```

    Then, we'll import and use this `createSubOrg` function within the login method. The curve type is set to `API_KEY_CURVE_SECP256K1` since we're using an Ethereum wallet in this example.

    ```tsx app/page.tsx
    'use client';
    import { getSubOrg, createSubOrg } from './actions';
    // ...

    export default function WalletAuth() {
      const { walletClient } = useTurnkey();

      const login = async () => {
        // Get the public key of the wallet, for Ethereum wallets this will trigger a prompt for the user to sign a message
        const publicKey = await walletClient?.getPublicKey();

        if (!publicKey) {
          throw new Error('No public key found');
        }

        const subOrgId = await getSubOrg(publicKey);
        if (!subOrgId) {
          const subOrgResponse = await createSubOrg(
            publicKey,
            'API_KEY_CURVE_SECP256K1'
          );
          const subOrg = subOrgResponse?.subOrganizationId ?? null;

          if (!subOrg) throw new Error('Failed to create sub-organization');
        }
        // In the next step we'll sign in the user
      };

      return (
        <div>
          <button onClick={login}>Sign In</button>
        </div>
      );
    }
    ```
  </Tab>

  <Tab title="TypeScript">
    We'll define another server-side function `createSubOrg`, to create a sub-organization for new user sign-ups.

    ```ts src/wallet-auth-server.ts
    // ...

    // Import the default Ethereum accounts helper
    import { DEFAULT_ETHEREUM_ACCOUNTS } from '@turnkey/sdk-browser';

    export const createSubOrg = async (
      publicKey: string,
      curveType: 'API_KEY_CURVE_ED25519' | 'API_KEY_CURVE_SECP256K1'
    ) => {
      const apiKeys = [
        {
          apiKeyName: `Wallet Auth - ${publicKey}`,
          // The public key of the wallet that will be added as an API key and used to stamp future requests
          publicKey,
          // We set the curve type to 'API_KEY_CURVE_ED25519' for solana wallets
          // If using an Ethereum wallet, set the curve type to 'API_KEY_CURVE_SECP256K1'
          curveType,
        },
      ];

      const subOrg = await turnkeyServer.createSubOrganization({
        // The parent organization ID
        organizationId: turnkeyConfig.defaultOrganizationId,
        subOrganizationName: 'New Sub Org',
        rootUsers: [
          {
            // Replace with user provided values if desired
            userName: 'New User',
            userEmail: 'wallet@domain.com',
            apiKeys,
            authenticators: [],
            oauthProviders: [],
          },
        ],
        rootQuorumThreshold: 1,
        wallet: {
          walletName: 'Default Wallet',
          // This is used to create a new Ethereum wallet for the sub-organization
          accounts: DEFAULT_ETHEREUM_ACCOUNTS,
        },
      });

      return subOrg;
    };
    ```

    Then, we'll import and use this `createSubOrg` function within the login method. The curve type is set to `API_KEY_CURVE_SECP256K1` since we're using an Ethereum wallet in this example.

    ```ts src/wallet-auth.ts
    import { getSubOrg, createSubOrg } from './wallet-auth-server';
    // ...
    const walletClient = turnkey.walletClient(new EthereumWallet());

    export const login = async () => {
      // Get the public key of the wallet, for Ethereum wallets this will trigger a prompt for the user to sign a message
      const publicKey = await walletClient?.getPublicKey();

      if (!publicKey) {
        throw new Error('No public key found');
      }

      const subOrgId = await getSubOrg(publicKey);
      if (!subOrgId) {
        const subOrgResponse = await createSubOrg(
          publicKey,
          'API_KEY_CURVE_SECP256K1'
        );
        const subOrg = subOrgResponse?.subOrganizationId ?? null;

        if (!subOrg) throw new Error('Failed to create sub-organization');
      }
      // In the next step we'll sign in the user
    };
    ```
  </Tab>
</Tabs>

## Sign In

At this point, we have a working sign-up flow. Next, we'll implement the signing in functionality by creating a read-write session, retrieving the user's wallets and adding a new one.

Create a read-write session for the user by calling the `loginWithWallet` method on the `WalletClient` instance which will use a newly generated `indexedDb` API key. This will save a read-write session token to the `localStorage` to authenticate future read-write requests.

<Tabs>
  <Tab title="Next.js">
    ```tsx app/page.tsx
    'use client';

    import { useState } from 'react';
    import { useTurnkey } from '@turnkey/sdk-react';
    import { getSubOrg, createSubOrg } from './actions';
    import { SessionType } from '@turnkey/sdk-types';
    import { DEFAULT_ETHEREUM_ACCOUNTS } from '@turnkey/sdk-browser';

    export default function WalletAuth() {
      const [wallets, setWallets] = useState<any[]>([]);
      const [session, setSession] = useState<any | null>(null);
      const { walletClient, indexedDbClient, turnkey } = useTurnkey();

      const login = async () => {
        try {
          // Get the public key of the wallet, for Ethereum wallets this will trigger a prompt for the user to sign a message
          const publicKey = await walletClient?.getPublicKey();
          if (!publicKey) throw new Error('No public key found');

          if (!walletClient) {
            throw new Error('Wallet client not initialized');
          }

          const subOrgId = await getSubOrg(publicKey);

          if (!subOrgId) {
            const subOrgResponse = await createSubOrg(
              publicKey,
              'API_KEY_CURVE_SECP256K1'
            );
            const subOrg = subOrgResponse?.subOrganizationId ?? null;

            if (!subOrg) throw new Error('Failed to create sub-organization');
            console.log('Sub-Organization created:', subOrg);
          }

          if (!indexedDbClient) throw new Error('IndexedDb client not available');

          // Reset the indexedDb key pair and session before each login
          // Note that session reset is important when switching between multiple wallets within the same browser
          await turnkey?.logout();
          await client?.clear();
          await indexedDbClient.resetKeyPair();
          const pubKey = await indexedDbClient.getPublicKey();

          await walletClient!.loginWithWallet({
            sessionType: SessionType.READ_WRITE, // use SessionType.READ_ONLY for read-only sessions
            publicKey: pubKey!,
          });

          console.log('Login successful');

          const session = await turnkey?.getSession();
          setSession(session);

          const subOrganizationId = session!.organizationId;

          // get existing suborg wallets
          const wallets = await indexedDbClient.getWallets({
            organizationId: subOrgId!,
          });
          setWallets(wallets.wallets);

          // create a new wallet with an Ethereum wallet account
          const newWalletResponse = await indexedDbClient.createWallet({
            walletName: 'New Wallet 1',
            accounts: DEFAULT_ETHEREUM_ACCOUNTS,
          });
          console.log('Created new wallet:', newWalletResponse);

          const updatedWallets = await indexedDbClient.getWallets({
            organizationId: subOrganizationId,
          });

          setWallets(updatedWallets.wallets);
        } catch (err) {
          console.error('Login error:', err);
        }
      };

      return (
        <div className="max-w-md mx-auto bg-white rounded-lg shadow-md p-6">
            <h2 className="text-xl font-bold mb-4 text-gray-800">
              Turnkey Wallet Auth
            </h2>

            {/* If logged in: Show wallets */}
            {session && wallets.length > 0 && (
              <div className="space-y-4 mb-6">
                <h3 className="text-lg font-semibold text-gray-700">🧾 Wallets</h3>
                {wallets.map((wallet) => (
                  <div
                    key={wallet.walletId}
                    className="border border-gray-200 rounded-md p-3 bg-gray-50 text-sm"
                  >
                    <div className="font-medium text-gray-800">
                      {wallet.walletName}
                    </div>
                    <div className="text-gray-500 text-xs">
                      Wallet ID: {wallet.walletId}
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* If not logged in: Show Sign In */}
            {walletClient && !session && (
              <button
                onClick={login}
                className="w-full sm:w-auto bg-gray-700 hover:bg-gray-800 text-white font-semibold py-2 px-4 rounded-md transition"
              >
                Sign In
              </button>
            )}
          </div>
        </div>
      );
    }
    ```
  </Tab>

  <Tab title="TypeScript">
    ```ts src/wallet-auth.ts
    import { Turnkey } from '@turnkey/sdk-browser';
    import { EthereumWallet } from '@turnkey/wallet-stamper';
    import { turnkeyConfig } from './config';
    import { getSubOrg, createSubOrg } from './wallet-auth-server';
    import { SessionType } from '@turnkey/sdk-types';
    import { DEFAULT_ETHEREUM_ACCOUNTS } from '@turnkey/sdk-browser';

    // Initialize the Turnkey SDK with the config object defined above
    const turnkey = new Turnkey(turnkeyConfig);

    // Initialize the Wallet Client with the EthereumWallet interface
    const walletClient = turnkey.walletClient(new EthereumWallet());

    export const login = async () => {
      try {
        // Get the public key of the wallet, for Ethereum wallets this will trigger a prompt for the user to sign a message
        const publicKey = await walletClient?.getPublicKey();

        if (!publicKey) {
          throw new Error('No public key found');
        }

        if (!walletClient) {
          throw new Error('Wallet client not initialized');
        }

        const subOrgId = await getSubOrg(publicKey);
        if (!subOrgId) {
          const subOrgResponse = await createSubOrg(
            publicKey,
            'API_KEY_CURVE_SECP256K1'
          );
          const subOrg = subOrgResponse?.subOrganizationId ?? null;

          if (!subOrg) throw new Error('Failed to create sub-organization');
          console.log('Sub-Organization created:', subOrg);
        }

        // Initialize the indexedDbClient
        const client = await turnkey.indexedDbClient();

        if (!client) {
          throw new Error('indexedDbClient not initialized');
        }

        // Reset the indexedDb key pair and session before each login
        // Note that session reset is important when switching between multiple wallets within the same browser
        await turnkey?.logout();
        await client?.clear();
        await client!.resetKeyPair();
        const pubKey = await client!.getPublicKey();

        await walletClient!.loginWithWallet({
          sessionType: SessionType.READ_WRITE, // use SessionType.READ_ONLY for read-only sessions
          publicKey: pubKey!,
        });

        console.log('Login successful');

        const session = await turnkey?.getSession();

        const subOrganizationId = session!.organizationId;

        // get existing suborg wallets
        const wallets = await client.getWallets({
          organizationId: subOrgId!,
        });

        // create a new wallet with an Ethereum wallet account
        const newWalletResponse = await client.createWallet({
          walletName: 'New Wallet 1',
          accounts: DEFAULT_ETHEREUM_ACCOUNTS,
        });
        console.log('Created new wallet:', newWalletResponse);

        const updatedWallets = await client.getWallets({
          organizationId: subOrganizationId,
        });
      } catch (err) {
        console.error('Login error:', err);
      }
    };
    ```
  </Tab>
</Tabs>

## Sign in with a Solana wallet

As with Solana wallets there's not standard API like `personal_sign` for Ethereum, we'll need to build a couple of things:

* Use the Turnkey `SolanaWalletInterface` to build our own `SolanaWallet()` function that would get the public key and sign a message. Create this new `SolanaWalletFactory.ts` component:

```tsx app/SolanaWalletFactory.ts
// This wrapper implements SolanaWalletInterface for WalletStamper
import { WalletType, SolanaWalletInterface } from "@turnkey/wallet-stamper";

export function SolanaWallet(wallet: {
  publicKey: { toBytes(): Uint8Array } | null;
  signMessage?: (msg: Uint8Array) => Promise<Uint8Array>;
}): SolanaWalletInterface {
  return {
    type: WalletType.Solana,

    async getPublicKey() {
      if (!wallet.publicKey) throw new Error("No public key");
      return Buffer.from(wallet.publicKey.toBytes()).toString("hex");
    },

    async signMessage(message: string) {
      if (!wallet.signMessage) {
        throw new Error("Wallet does not support signMessage");
      }
      const encoded = new TextEncoder().encode(message);
      const signature = await wallet.signMessage(encoded);
      return Buffer.from(signature).toString("hex");
    },
  };
}
```

* Use the Solana wallet-addapter to detect and connect the installed wallets. Create this SolanaWalletProvider.tsx component:

```tsx app/SolanaWalletProvider.tsx
"use client";

import { FC, ReactNode } from "react";
import { ConnectionProvider, WalletProvider } from "@solana/wallet-adapter-react";
import { WalletModalProvider } from "@solana/wallet-adapter-react-ui";
import { WalletAdapterNetwork } from "@solana/wallet-adapter-base";

export const SolanaWalletContextProvider: FC<{ children: ReactNode }> = ({ children }) => {
  const network = WalletAdapterNetwork.Mainnet;

  const endpoint = "https://api.mainnet-beta.solana.com";

  return (
    <ConnectionProvider endpoint={endpoint}>
      <WalletProvider wallets={[]} autoConnect> // you can add adapters for walllets not auto-detected here
        <WalletModalProvider>{children}</WalletModalProvider>
      </WalletProvider>
    </ConnectionProvider>
  );
};
```

Update the layout.tsx file:

```tsx app/layout.tsx
import "./globals.css";
import "@solana/wallet-adapter-react-ui/styles.css";
import { SolanaWalletContextProvider } from "./SolanaWalletProvider";

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <SolanaWalletContextProvider>
          {children}
        </SolanaWalletContextProvider>
      </body>
    </html>
  );
}
```

Update the config.ts file to include Solana:

```ts config.ts
import { EthereumWallet } from "@turnkey/wallet-stamper";
import { SolanaWallet } from "./SolanaWalletFactory";

export const turnkeyConfig = {
  apiBaseUrl: "https://api.turnkey.com",
  defaultOrganizationId: process.env.NEXT_PUBLIC_ORGANIZATION_ID!,
};

export const turnkeyEthereumConfig = {
  ...turnkeyConfig,
  wallet: new EthereumWallet(),
};

// Factory function for Solana
export function createSolanaConfig(wallet: Parameters<typeof SolanaWallet>[0]) {
  return {
    ...turnkeyConfig,
    wallet: SolanaWallet(wallet),
  };
}
```

Now let's put everything together:

```tsx app/page.tsx expandable
'use client';

import { useWallet } from '@solana/wallet-adapter-react';
import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';
import { Turnkey } from '@turnkey/sdk-browser';
import { getSubOrg, createSubOrg } from './actions';
import { useCallback, useEffect, useState } from 'react';
import { DEFAULT_ETHEREUM_ACCOUNTS } from '@turnkey/sdk-browser';
import { SessionType } from '@turnkey/sdk-types';
import { SolanaWallet } from "./SolanaWalletFactory";
import { createSolanaConfig } from "./config";

export default function WalletAuth() {
  const wallet = useWallet();
  const [mounted, setMounted] = useState(false);
  const [session, setSession] = useState<any | null>(null);
  const [wallets, setWallets] = useState<any[]>([]);

  useEffect(() => {
    setMounted(true);
  }, []);

  const login = useCallback(async () => {
    try {
      if (!wallet.connected || !wallet.publicKey) {
        throw new Error('Wallet not connected');
      }
      
      const turnkeyConfig = createSolanaConfig(wallet);
      const turnkey = new Turnkey(turnkeyConfig);
      const walletClient = turnkey.walletClient(SolanaWallet(wallet));

      // Get the injected wallet public key
      const publicKey = await walletClient?.getPublicKey();

      const subOrgId = await getSubOrg(publicKey);
      if (!subOrgId) {
        const subOrgResponse = await createSubOrg(
          publicKey,
          'API_KEY_CURVE_ED25519'
        );
        const subOrg = subOrgResponse?.subOrganizationId ?? null;

        if (!subOrg) throw new Error('Failed to create sub-organization');
        console.log('Sub-Organization created:', subOrg);
      }

      // Initialize the indexedDbClient
      const client = await turnkey.indexedDbClient();

      if (!client) {
        throw new Error('indexedDbClient not initialized');
      }

      // Reset the indexedDb key pair and session before each login
      // Note that session reset is important when switching between multiple wallets within the same browser
      await turnkey?.logout();
      await client?.clear();
      await client!.resetKeyPair();
      
      // Get the indexedDbClient public key
      const pubKey = await client!.getPublicKey();

      await walletClient!.loginWithWallet({
        sessionType: SessionType.READ_WRITE, // use SessionType.READ_ONLY for read-only sessions
        publicKey: pubKey!,
      });

      console.log('Login successful');

      const session = await turnkey?.getSession();
      setSession(session);

      const subOrganizationId = session!.organizationId;

      // Get existing suborg wallets
      const wallets = await client.getWallets({
        organizationId: subOrgId!,
      });
      setWallets(wallets.wallets);

      // Create a new wallet with an Ethereum wallet account
      const newWalletResponse = await client.createWallet({
        walletName: 'New Wallet 1',
        accounts: DEFAULT_ETHEREUM_ACCOUNTS,
      });

      const updatedWallets = await client.getWallets({
        organizationId: subOrganizationId,
      });
      setWallets(updatedWallets.wallets);
    } catch (err) {
      console.error('Login error:', err);
    }
  }, [wallet]);

  if (!mounted) return null;

  return (
    <div className="max-w-md mx-auto bg-white rounded-lg shadow-md p-6 space-y-4">
      <h2 className="text-xl font-bold mb-4 text-gray-800">
        Turnkey Solana Wallet Auth
      </h2>

      {session && wallets.length > 0 && (
        <div className="space-y-4 mb-6">
          <h3 className="text-lg font-semibold text-gray-700">🧾 Wallets</h3>
          {wallets.map((wallet) => (
            <div
              key={wallet.walletId}
              className="border border-gray-200 rounded-md p-3 bg-gray-50 text-sm"
            >
              <div className="font-medium text-gray-800">
                {wallet.walletName}
              </div>
              <div className="text-gray-500 text-xs">
                Wallet ID: {wallet.walletId}
              </div>
            </div>
          ))}
        </div>
      )}

      {!session && (
        <>
          {!wallet.connected && <WalletMultiButton />}

          {wallet.connected && (
            <div className="flex flex-wrap gap-2">
              <button
                onClick={login}
                className="bg-purple-700 hover:bg-purple-800 text-white font-semibold py-2 px-4 rounded-md transition"
              >
                Sign In
              </button>
              <WalletMultiButton />
            </div>
          )}
        </>
      )}
    </div>
  );
}
```

## Examples

You can find examples of how to implement the above functionality using the indexedDbClient and more in the following repositories:

<CardGroup>
  <Card title="Demo Embedded Wallet Kit" href="https://github.com/tkhq/demo-ewk" icon="github" iconType="solid" horizontal />

  <Card title="Wallet stamper" href="https://github.com/tkhq/sdk/tree/main/examples/with-wallet-stamper" icon="github" iconType="solid" horizontal />
</CardGroup>


# Features
Source: https://docs.turnkey.com/embedded-wallets/features/overview



<CardGroup>
  <Card title="Embedded wallet kit (EWK)" href="/reference/embedded-wallet-kit" icon="wallet" iconType="duotone" horizontal arrow={false} />

  <Card title="Authentication" href="/authentication/overview" icon="lock" iconType="duotone" horizontal />

  <Card title="Delegated access" href="/concepts/policies/delegated-access" icon="door-closed" iconType="duotone" horizontal />

  {" "}

  <Card title="Policy engine" href="/concepts/policies/overview" icon="gears" iconType="duotone" horizontal />

  {" "}

  <Card title="Multichain support" href="/products/embedded-wallets/features/multi-chain-support" icon="diagram-project" iconType="duotone" horizontal />

  {" "}

  <Card title="Pre-generated wallets" href="/wallets/pregenerated-wallets" icon="wallet" iconType="duotone" horizontal />

  {" "}

  <Card title="Sessions" href="/authentication/sessions" icon="clock" iconType="duotone" horizontal />

  {" "}

  <Card title="Gas sponsorship" href="/products/embedded-wallets/features/gas-sponsorship" icon="gas-pump" iconType="duotone" horizontal />

  <Card title="Account abstraction wallets" href="/reference/aa-wallets" icon="users-gear" iconType="duotone" horizontal />

  <Card title="Import wallets and keys" href="/wallets/import-wallets" icon="file-import" iconType="duotone" horizontal />

  <Card title="Export wallets and keys" href="/wallets/export-wallets" icon="file-export" iconType="duotone" horizontal />

  <Card title="Claim links" href="/wallets/claim-links" icon="link" iconType="duotone" horizontal />

  <Card title="Wagmi" href="/wallets/wagmi" icon="plug" iconType="duotone" horizontal />

  <Card title="Fiat Onramp" href="/wallets/fiat-on-ramp" icon="money-bill-transfer" iconType="duotone" horizontal />
</CardGroup>


# Overview
Source: https://docs.turnkey.com/embedded-wallets/overview



export const SquareCard = ({icon, label, className = "", ...props}) => {
  return <a href={props.href} className=" not-prose font-normal group ring-0 ring-transparent overflow-hidden cursor-pointer ">
      <div className={`flex flex-col items-center ${className}`} {...props}>
        <div className="flex items-center p-5 justify-center rounded-lg border border-zinc-950/10 dark:border-white/10 bg-white dark:bg-transparent">
          {icon}
        </div>
        <span className="mt-2 text-sm text-zinc-950/80 dark:text-white/80 font-medium capitalize group-hover:border-zinc-950/10 group-hover:text-primary">
          {label}
        </span>
      </div>
    </a>;
};

export const Logo = ({id, className = "", fill = "", ...props}) => {
  if (id === "react") {
    return <svg xmlns="http://www.w3.org/2000/svg" viewBox="-11.5 -10.23174 23 20.46348" className={className} {...props}>
        <title>React Logo</title>
        <circle cx="0" cy="0" r="2.05" fill="#61dafb" />
        <g stroke="#61dafb" strokeWidth="1" fill="none">
          <ellipse rx="11" ry="4.2" />
          <ellipse rx="11" ry="4.2" transform="rotate(60)" />
          <ellipse rx="11" ry="4.2" transform="rotate(120)" />
        </g>
      </svg>;
  }
  if (id === "react-native") {
    return <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -12.5 256 256" className={className} {...props}>
        <title>React Native Logo</title>
        <path fill="#4e4e4e" d="M121.309004,84.6732585 C123.402504,81.5874152 125.694292,81.1950171 127.553451,81.1950171 C129.41261,81.1950171 132.509843,81.5874152 134.604162,84.6732585 C151.106348,107.339593 178.345607,152.492 198.439108,185.798721 C211.542532,207.519499 221.6069,224.201947 223.671721,226.324944 C231.422996,234.294992 242.053551,229.327949 248.230809,220.287799 C254.312201,211.387762 256.000111,205.138399 256.000111,198.471155 C256.000111,193.930186 167.895315,30.0714244 159.022317,16.4322117 C150.48936,3.31359639 147.710044,0 133.105527,0 L122.176721,0 C107.615631,0 105.511479,3.31359639 96.9777022,16.4322117 C88.1055238,30.0714244 0.0001105152,193.930186 0.0001105152,198.471155 C0.0001105152,205.138399 1.68839227,211.387762 7.76991495,220.287799 C13.9471241,229.327949 24.5775965,234.294992 32.3286259,226.324944 C34.3936934,224.201947 44.4580605,207.519499 57.5616485,185.798721 C77.654822,152.492 104.806818,107.339593 121.309004,84.6732585 Z" />
      </svg>;
  }
  if (id === "android-kotlin") {
    return <svg xmlns="http://www.w3.org/2000/svg" viewBox="-147 -70 294 345" className={className} {...props}>
        <title>Android Kotlin Logo</title>
        <g fill="#a4c639">
          <use stroke="#FFF" strokeWidth="14.4" xlinkHref="#b" />
          <use xlinkHref="#a" transform="scale(-1,1)" />
          <g id="a" stroke="#FFF" strokeWidth="7.2">
            <rect rx="6.5" transform="rotate(29)" height="86" width="13" y="-86" x="14" />
            <rect id="c" rx="24" height="133" width="48" y="41" x="-143" />
            <use y="97" x="85" xlinkHref="#c" />
          </g>
          <g id="b">
            <ellipse cy="41" rx="91" ry="84" />
            <rect rx="22" height="182" width="182" y="20" x="-91" />
          </g>
        </g>
        <g stroke="#FFF" strokeWidth="7.2" fill="#FFF">
          <path d="m-95 44.5h190" />
          <circle cx="-42" r="4" />
          <circle cx="42" r="4" />
        </g>
      </svg>;
  }
  if (id === "ios-swift") {
    return <svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
        <title>iOS Swift Logo</title>
        <path d="M59.3867 16.4501C59.3832 15.8528 59.3766 15.2558 59.3601 14.6578C59.3253 13.357 59.2484 12.0444 59.0172 10.7575C58.7826 9.4506 58.3991 8.2354 57.7947 7.0482C57.2014 5.8823 56.4258 4.8154 55.5006 3.8902C54.5756 2.965 53.5087 2.1895 52.3423 1.5959C51.1561 0.9922 49.9407 0.6088 48.635 0.3742C47.3474 0.1423 46.0348 0.0659 44.733 0.0307C44.1353 0.0145 43.5382 0.0077 42.9407 0.004C42.2315 0 41.5218 0 40.8128 0H25.0912H18.5781C17.8684 0 17.1595 0 16.4505 0.0041C15.8528 0.0078 15.255 0.0146 14.6582 0.0308C14.3328 0.0396 14.0067 0.051 13.6804 0.0667C12.7016 0.1139 11.7213 0.2004 10.7561 0.3743C9.77684 0.5503 8.84824 0.8099 7.94484 1.1834C7.64374 1.3078 7.34534 1.445 7.04874 1.5959C6.17394 2.0411 5.35494 2.5886 4.61004 3.2248C4.36174 3.4369 4.12164 3.6588 3.89044 3.8901C2.96504 4.8153 2.18944 5.8822 1.59614 7.0481C0.991738 8.2353 0.608738 9.4505 0.373938 10.7574C0.142938 12.0443 0.0661381 13.3569 0.0311381 14.6577C0.0147381 15.2557 0.00783811 15.8527 0.00393811 16.45C-0.000561889 17.1594 3.81111e-05 17.8689 3.81111e-05 18.5781V28.26V40.8125C3.81111e-05 41.5224 -0.000661889 42.2312 0.00393811 42.9411C0.00783811 43.5384 0.0147381 44.1354 0.0311381 44.7324C0.0661381 46.0339 0.142838 47.3468 0.373938 48.6331C0.608738 49.9396 0.991738 51.1559 1.59614 52.3428C2.18944 53.509 2.96504 54.5756 3.89044 55.5004C4.81514 56.426 5.88234 57.2014 7.04884 57.7954C8.23514 58.3992 9.45044 58.7821 10.7564 59.0167C12.0432 59.2483 13.3568 59.3253 14.6583 59.3601C15.2551 59.376 15.8529 59.3831 16.4506 59.3865C17.1596 59.3916 17.8685 59.3909 18.5782 59.3909H40.8128C41.5218 59.3909 42.2315 59.3916 42.9406 59.3865C43.5381 59.3831 44.1352 59.376 44.7329 59.3601C46.0347 59.3253 47.3473 59.2482 48.6349 59.0167C49.9406 58.7821 51.156 58.3991 52.3422 57.7954C53.5086 57.2015 54.5755 56.426 55.5005 55.5004C56.4257 54.5755 57.2014 53.509 57.7946 52.3428C58.399 51.1559 58.7825 49.9397 59.0171 48.6331C59.2483 47.3468 59.3252 46.0339 59.36 44.7324C59.3764 44.1354 59.383 43.5385 59.3866 42.9411C59.3912 42.2312 59.3908 41.5224 59.3908 40.8125V18.5781C59.3909 17.8689 59.3912 17.1594 59.3867 16.4501Z" fill="#F05138" />
        <path d="M47.0605 36.6607C47.0591 36.6589 47.0578 36.6576 47.0563 36.6559C47.122 36.4323 47.1898 36.2101 47.2473 35.9809C49.7123 26.16 43.6962 14.549 33.5157 8.43555C37.977 14.4834 39.9496 21.8088 38.197 28.215C38.0407 28.7864 37.8528 29.3348 37.6451 29.8678C37.4197 29.7197 37.1357 29.5516 36.7543 29.3413C36.7543 29.3413 26.6274 23.0886 15.6515 12.0291C15.3635 11.7388 21.5043 20.8061 28.4734 28.169C25.19 26.3263 16.0396 19.6686 10.2468 14.3667C10.9585 15.5536 11.805 16.6965 12.7355 17.7968C17.573 23.9317 23.8817 31.5012 31.4398 37.3137C26.1294 40.5635 18.6257 40.8162 11.1546 37.3171C9.30673 36.4511 7.56953 35.4062 5.96143 34.219C9.12393 39.2775 13.9946 43.6419 19.9227 46.1898C26.9922 49.2279 34.0223 49.0219 39.2583 46.2396L39.2542 46.2456C39.2781 46.2305 39.3085 46.214 39.3333 46.1987C39.5483 46.0831 39.7617 45.9654 39.9704 45.8411C42.4861 44.5353 47.4551 43.2105 50.1222 48.3999C50.7754 49.6699 52.1634 42.9395 47.0605 36.6607Z" fill="white" />
      </svg>;
  }
  if (id === "unity") {
    return <svg width="326" height="368" viewBox="0 0 326 368" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
        <title>Unity Logo</title>
        <path d="M325.729 258.325V86.6778L177.07 0.854004V66.7544L235.308 100.471C237.607 102.003 237.607 105.069 235.308 105.835L166.342 145.682C164.043 147.214 161.744 146.448 160.212 145.682L91.2463 105.835C88.9475 105.069 88.9475 101.237 91.2463 100.471L149.484 66.7544V0.854004L0.0585938 86.6778V258.325L56.7636 225.375V157.942C56.7636 155.643 59.8287 154.111 61.3613 154.877L130.327 194.724C132.626 196.256 133.392 197.789 133.392 200.088V279.781C133.392 282.08 130.327 283.613 128.794 282.846L70.5567 249.13L13.8517 282.08L162.511 368.67L311.17 282.846L254.465 249.896L196.227 283.613C193.928 285.145 191.629 283.613 191.629 280.547V200.854C191.629 198.555 193.162 196.256 194.695 195.49L263.66 155.643C265.959 154.111 268.258 155.643 268.258 158.708V226.141L325.729 258.325Z" fill="#4C4C4C" />
        <path d="M162.511 368.67L311.17 282.846L254.465 249.896L196.227 283.613C193.928 285.145 191.629 283.613 191.629 280.547V200.854C191.629 198.555 193.162 196.256 194.695 195.49L263.66 155.643C265.959 154.111 268.258 155.643 268.258 158.708V226.141L324.963 259.092V86.6777L162.511 180.931L162.511 368.67Z" fill="black" />
        <path d="M177.07 0.854004V66.7544L235.308 100.471C237.607 102.003 237.607 105.069 235.308 105.835L166.342 145.682C164.043 147.214 161.744 146.448 160.212 145.682L91.2463 105.835C88.9475 105.069 88.9475 101.237 91.2463 100.471L149.484 66.7544V0.854004L0.0585938 86.6778L162.511 180.931L324.963 86.6777L177.07 0.854004Z" fill="#808080" />
        <path d="M129.561 283.613L71.323 249.896L14.618 282.846L163.277 368.67V180.931L0.0585938 86.6778V258.325L56.7636 225.375V157.942C56.7636 155.643 59.8287 154.111 61.3613 154.877L130.327 194.724C132.626 196.256 133.392 197.789 133.392 200.088V279.781C134.158 282.846 131.859 285.145 129.561 283.613Z" fill="#4C4C4C" />
      </svg>;
  }
  if (id === "flutter") {
    return <svg width="214" height="264" viewBox="0 0 214 264" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
  <title>Flutter Logo</title>
  <path d="M132.28 0.0900002L213.95 0L76.9301 136.95L41.2201 172.46L0.590088 131.78L132.28 0.0900002ZM131.52 122.37C132.58 120.97 134.53 121.66 136.01 121.48L213.88 121.5L142.91 192.4L102.07 151.81L131.52 122.37Z" fill="#44D1FD" />
  <path d="M61.3601 192.47L102.07 151.81L142.91 192.4L143.08 192.58L102.08 233.2L61.3601 192.47Z" fill="#1FBCFD" />
  <path d="M102.08 233.2L143.08 192.58L213.91 263.48C187.23 263.54 160.56 263.46 133.89 263.52C132.37 263.86 131.43 262.47 130.46 261.61L102.08 233.2Z" fill="#08589C" />
</svg>;
  }
  if (id === "rest-api") {
    return <svg width="609" height="447" viewBox="0 0 609 447" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
        <title>Rest API Logo</title>
        <path d="M47.2 104.2H80.8C90.4 104.2 96.8 105.8 100 109C103.2 112.2 104.8 120.2 104.8 129.8V145.8C104.8 150.6 104.8 155.4 106.4 160.2C106.4 161.8 108 165 108 169.8H146.4V165C143.2 163.4 141.6 160.2 140 155.4C140 152.2 138.4 147.4 138.4 139.4V128.2C138.4 117 136.8 107.4 133.6 102.6C130.4 96.2002 125.6 93.0002 117.6 89.8002C127.2 86.6002 133.6 81.8002 136.8 73.8002C140 65.8002 143.2 57.8002 143.2 49.8002C143.2 43.4002 141.6 37.0002 140 32.2002C138.4 27.4002 135.2 22.6002 132 17.8002C127.2 13.0002 122.4 8.20019 116 6.60019C109.6 3.40019 101.6 1.80017 90.4 1.80017H10.4V168.2H44V104.2H47.2ZM47.2 32.2002H85.6001C92.0001 32.2002 98.4001 33.8002 101.6 35.4002C108 38.6002 111.2 45.0002 111.2 56.2002C111.2 65.8002 108 72.2002 101.6 75.4002C98.4001 77.0002 92.0001 78.6002 85.6001 78.6002H48.8V32.2002H47.2ZM215.2 96.2002H295.2V67.4002H215.2V32.2002H303.2V1.80017H180V169.8H306.4V139.4H215.2V96.2002ZM420 73.8002L391.2 67.4002C380 64.2002 372 62.6002 368.8 61.0002C364 57.8002 360.8 53.0002 360.8 48.2002C360.8 41.8002 364 37.0002 368.8 33.8002C373.6 30.6002 381.6 29.0002 391.2 29.0002C399.2 29.0002 405.6 30.6002 412 33.8002C420 38.6002 424.8 45.0002 424.8 54.6002H458.4C458.4 37.0002 450.4 22.6002 439.2 14.6002C426.4 5.00019 412 0.200195 394.4 0.200195C373.6 0.200195 357.6 5.00019 346.4 14.6002C335.2 24.2002 330.4 37.0002 330.4 51.4002C330.4 67.4002 336.8 80.2002 348 88.2002C354.4 93.0002 367.2 97.8002 384.8 101L402.4 104.2C413.6 105.8 420 109 424.8 112.2C429.6 115.4 432.8 120.2 432.8 125C432.8 134.6 428 141 418.4 144.2C413.6 145.8 405.6 147.4 397.6 147.4C383.2 147.4 373.6 144.2 367.2 137.8C364 134.6 362.4 128.2 360.8 120.2H327.2C327.2 137.8 333.6 150.6 346.4 161.8C359.2 173 376.8 176.2 397.6 176.2C418.4 176.2 436 171.4 447.2 161.8C458.4 152.2 464.8 139.4 464.8 123.4C464.8 109 460 97.8002 450.4 89.8002C442.4 81.8002 432.8 77.0002 420 73.8002ZM474.4 32.2002H524V169.8H559.2V32.2002H608.8V1.80017H474.4V32.2002ZM60 280.2L0.800049 446.6H37.6001L48.8 413H109.6L120.8 446.6H159.2L100 280.2H60ZM58.4 384.2L80.8 318.6L101.6 384.2H58.4ZM252 280.2H180V446.6H215.2V387.4H250.4C268 387.4 282.4 382.6 292 374.6C301.6 366.6 306.4 352.2 306.4 333C306.4 315.4 301.6 301 292 293C280.8 285 268 280.2 252 280.2ZM264.8 352.2C260 355.4 253.6 358.6 245.6 358.6H213.6V309H245.6C253.6 309 260 310.6 264.8 313.8C269.6 317 271.2 323.4 271.2 333C271.2 342.6 269.6 349 264.8 352.2ZM330.4 280.2H365.6V446.6H330.4V280.2Z" fill="#707070" />
      </svg>;
  }
  if (id === 'typescript') {
    return <svg xmlns="http://www.w3.org/2000/svg" fill="none" height="512" viewBox="0 0 512 512" width="512" className={className} {...props}>
          <rect fill="#3178c6" height="512" rx="50" width="512" />
          <rect fill="#3178c6" height="512" rx="50" width="512" />
          <path clip-rule="evenodd" d="m316.939 407.424v50.061c8.138 4.172 17.763 7.3 28.875 9.386s22.823 3.129 35.135 3.129c11.999 0 23.397-1.147 34.196-3.442 10.799-2.294 20.268-6.075 28.406-11.342 8.138-5.266 14.581-12.15 19.328-20.65s7.121-19.007 7.121-31.522c0-9.074-1.356-17.026-4.069-23.857s-6.625-12.906-11.738-18.225c-5.112-5.319-11.242-10.091-18.389-14.315s-15.207-8.213-24.18-11.967c-6.573-2.712-12.468-5.345-17.685-7.9-5.217-2.556-9.651-5.163-13.303-7.822-3.652-2.66-6.469-5.476-8.451-8.448-1.982-2.973-2.974-6.336-2.974-10.091 0-3.441.887-6.544 2.661-9.308s4.278-5.136 7.512-7.118c3.235-1.981 7.199-3.52 11.894-4.615 4.696-1.095 9.912-1.642 15.651-1.642 4.173 0 8.581.313 13.224.938 4.643.626 9.312 1.591 14.008 2.894 4.695 1.304 9.259 2.947 13.694 4.928 4.434 1.982 8.529 4.276 12.285 6.884v-46.776c-7.616-2.92-15.937-5.084-24.962-6.492s-19.381-2.112-31.066-2.112c-11.895 0-23.163 1.278-33.805 3.833s-20.006 6.544-28.093 11.967c-8.086 5.424-14.476 12.333-19.171 20.729-4.695 8.395-7.043 18.433-7.043 30.114 0 14.914 4.304 27.638 12.912 38.172 8.607 10.533 21.675 19.45 39.204 26.751 6.886 2.816 13.303 5.579 19.25 8.291s11.086 5.528 15.415 8.448c4.33 2.92 7.747 6.101 10.252 9.543 2.504 3.441 3.756 7.352 3.756 11.733 0 3.233-.783 6.231-2.348 8.995s-3.939 5.162-7.121 7.196-7.147 3.624-11.894 4.771c-4.748 1.148-10.303 1.721-16.668 1.721-10.851 0-21.597-1.903-32.24-5.71-10.642-3.806-20.502-9.516-29.579-17.13zm-84.159-123.342h64.22v-41.082h-179v41.082h63.906v182.918h50.874z" fill="#fff" fill-rule="evenodd" />
          </svg>;
  }
  if (id === "go") {
    return <svg xmlns="http://www.w3.org/2000/svg" xmlnsXlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 205.4 76.7" style={{
      enableBackground: "new 0 0 205.4 76.7"
    }} xmlSpace="preserve" className={className} {...props}>
        <title>Go Logo</title>
        <style type="text/css">{`.st0{fill:#00ACD7;}`}</style>
        <g>
          <g>
            <g>
              <g>
                <path className="st0" d="M15.5,23.2c-0.4,0-0.5-0.2-0.3-0.5l2.1-2.7c0.2-0.3,0.7-0.5,1.1-0.5h35.7c0.4,0,0.5,0.3,0.3,0.6l-1.7,2.6      c-0.2,0.3-0.7,0.6-1,0.6L15.5,23.2z" />
              </g>
            </g>
          </g>
        </g>
        <g>
          <g>
            <g>
              <g>
                <path className="st0" d="M0.4,32.4c-0.4,0-0.5-0.2-0.3-0.5l2.1-2.7c0.2-0.3,0.7-0.5,1.1-0.5h45.6c0.4,0,0.6,0.3,0.5,0.6l-0.8,2.4      c-0.1,0.4-0.5,0.6-0.9,0.6L0.4,32.4z" />
              </g>
            </g>
          </g>
        </g>
        <g>
          <g>
            <g>
              <g>
                <path className="st0" d="M24.6,41.6c-0.4,0-0.5-0.3-0.3-0.6l1.4-2.5c0.2-0.3,0.6-0.6,1-0.6h20c0.4,0,0.6,0.3,0.6,0.7L47.1,41      c0,0.4-0.4,0.7-0.7,0.7L24.6,41.6z" />
              </g>
            </g>
          </g>
        </g>
        <g>
          <g id="CXHf1q_3_">
            <g>
              <g>
                <path className="st0" d="M128.4,21.4c-6.3,1.6-10.6,2.8-16.8,4.4c-1.5,0.4-1.6,0.5-2.9-1c-1.5-1.7-2.6-2.8-4.7-3.8       c-6.3-3.1-12.4-2.2-18.1,1.5c-6.8,4.4-10.3,10.9-10.2,19c0.1,8,5.6,14.6,13.5,15.7c6.8,0.9,12.5-1.5,17-6.6       c0.9-1.1,1.7-2.3,2.7-3.7c-3.6,0-8.1,0-19.3,0c-2.1,0-2.6-1.3-1.9-3c1.3-3.1,3.7-8.3,5.1-10.9c0.3-0.6,1-1.6,2.5-1.6       c5.1,0,23.9,0,36.4,0c-0.2,2.7-0.2,5.4-0.6,8.1c-1.1,7.2-3.8,13.8-8.2,19.6c-7.2,9.5-16.6,15.4-28.5,17       c-9.8,1.3-18.9-0.6-26.9-6.6c-7.4-5.6-11.6-13-12.7-22.2c-1.3-10.9,1.9-20.7,8.5-29.3c7.1-9.3,16.5-15.2,28-17.3       c9.4-1.7,18.4-0.6,26.5,4.9c5.3,3.5,9.1,8.3,11.6,14.1C130,20.6,129.6,21.1,128.4,21.4z" />
              </g>
              <g>
                <path className="st0" d="M161.5,76.7c-9.1-0.2-17.4-2.8-24.4-8.8c-5.9-5.1-9.6-11.6-10.8-19.3c-1.8-11.3,1.3-21.3,8.1-30.2       c7.3-9.6,16.1-14.6,28-16.7c10.2-1.8,19.8-0.8,28.5,5.1c7.9,5.4,12.8,12.7,14.1,22.3c1.7,13.5-2.2,24.5-11.5,33.9       c-6.6,6.7-14.7,10.9-24,12.8C166.8,76.3,164.1,76.4,161.5,76.7z M185.3,36.3c-0.1-1.3-0.1-2.3-0.3-3.3       c-1.8-9.9-10.9-15.5-20.4-13.3c-9.3,2.1-15.3,8-17.5,17.4c-1.8,7.8,2,15.7,9.2,18.9c5.5,2.4,11,2.1,16.3-0.6       C180.5,51.3,184.8,44.9,185.3,36.3z" />
              </g>
            </g>
          </g>
        </g>
      </svg>;
  }
  if (id === "rust") {
    return <svg xmlns="http://www.w3.org/2000/svg" xmlnsXlink="http://www.w3.org/1999/xlink" version="1.1" width="300" height="200" viewBox="0 0 300 200" fill="none" className={className} {...props}>
  
      <g clip-path="url(#clip0_1_60)">
      <path d="M149.557 89.5213C119.349 89.5213 91.9026 93.1471 71.5833 99.0556V149.527C91.9026 155.436 119.349 159.062 149.557 159.062C184.132 159.062 215.085 154.312 235.876 146.827V101.757C215.085 94.2709 184.132 89.5213 149.557 89.5213ZM267.016 130.53L263.475 123.207C263.493 122.929 263.508 122.651 263.508 122.371C263.508 114.069 254.86 106.418 240.311 100.292V144.451C247.1 141.593 252.607 138.402 256.546 134.968C255.387 139.621 251.422 149.035 248.261 155.656C243.066 165.125 241.185 173.367 241.426 173.776C241.58 174.033 243.352 171.303 245.965 166.88C252.048 158.228 263.573 141.711 265.876 137.504C268.485 132.734 267.016 130.53 267.016 130.53ZM37.8609 122.855C37.8609 124.454 38.183 126.029 38.8047 127.574L36.6841 131.342C36.6841 131.342 34.9852 133.543 37.9767 138.185C40.6154 142.278 53.8325 158.301 60.8084 166.691C63.8049 170.993 65.8363 173.643 66.0142 173.387C66.2943 172.98 64.1514 164.904 58.2006 155.69C55.4239 150.741 52.1075 144.185 50.1171 139.342C55.6743 142.854 62.945 146.039 71.5833 148.78V96.9315C50.767 103.535 37.8609 112.71 37.8609 122.855Z" fill="#A52B00" />
      <path d="M145.791 12.8178L138.87 24.3578L135.496 24.6525L126.502 14.691C126.098 14.1723 125.552 13.7824 124.929 13.5688C124.307 13.3553 123.636 13.3275 122.998 13.4888C122.365 13.656 121.782 13.9704 121.295 14.4062C120.808 14.842 120.431 15.3869 120.196 15.9961L115.655 28.8365C114.582 29.0709 113.537 29.415 112.534 29.8633L101.814 21.7495C100.811 21.0829 99.2789 20.8397 98.1871 21.3121C97.5824 21.5999 97.0529 22.0238 96.6403 22.5507C96.2276 23.0775 95.9431 23.6927 95.8092 24.348L93.5997 37.9276L90.7157 39.4993L78.8963 33.9326C78.3091 33.611 77.6395 33.4704 76.9723 33.5287C76.3051 33.587 75.6702 33.8414 75.1478 34.26C74.0725 34.9195 73.4375 36.2948 73.3649 37.6209L73.8122 51.3456L71.3522 53.4459L58.6215 50.4098C57.2603 49.9631 55.9811 50.4519 54.9386 51.4857C54.4896 51.9727 54.1644 52.5602 53.9903 53.1988C53.8162 53.8374 53.7983 54.5084 53.9381 55.1554L56.993 68.4637C56.2644 69.3003 55.5847 70.1781 54.9571 71.0926L41.6897 70.5545C41.0333 70.5063 40.3771 70.65 39.8013 70.9682C39.2254 71.2864 38.7549 71.7652 38.4473 72.3461C37.796 73.5342 37.5523 75.0638 38.2294 76.3245L43.6552 88.6716L42.0269 91.642L29.1929 93.8942C28.529 93.9814 27.9003 94.2439 27.3719 94.6546C26.8435 95.0653 26.4345 95.6094 26.1871 96.2307C25.9676 96.8735 25.8849 97.555 25.9442 98.2316C26.0035 98.9082 26.2035 99.565 26.5314 100.16L34.2954 111.172L34.1572 111.749L12.3781 134.768C12.3781 134.768 9.20124 137.308 13.8985 143.497C18.1389 148.783 40.0229 170.063 51.5845 181.308C54.0496 184.603 56.9114 187.582 60.1052 190.18C60.6183 189.569 57.8258 179.255 48.2766 167.268C40.9039 156.411 31.3197 139.713 33.4212 137.833C33.4212 137.833 35.9702 134.593 41.2416 132.247C41.0378 132.077 41.0378 132.077 41.2416 132.247C41.2416 132.247 149.678 182.168 250.19 133.04C261.712 130.903 268.674 137.082 268.674 137.082C271.071 138.57 264.83 155.707 259.783 167.083C252.79 179.949 251.784 190.03 252.38 190.355C254.96 187.377 257.146 184.081 258.886 180.548C267.819 168.267 284.455 144.754 287.541 139.017C291.123 132.482 287.553 130.531 287.553 130.531L264.343 113.515L263.755 111.116L271.287 100.088C272.142 99.0705 272.198 97.5573 271.709 96.2802C271.482 95.6688 271.099 95.1269 270.599 94.7078C270.099 94.2887 269.498 94.0068 268.855 93.8898L255.815 91.635L254.428 88.7394L259.751 76.2077C260.064 75.5853 260.198 74.8882 260.137 74.1943C260.076 73.5004 259.824 72.8371 259.407 72.2784C258.746 71.2048 257.556 70.5546 256.244 70.6692L243.059 71.0666L240.939 68.4237L243.931 55.1528C244.074 54.5102 244.068 53.8434 243.914 53.2034C243.76 52.5633 243.461 51.9669 243.04 51.4597C242.591 50.946 242.01 50.5642 241.359 50.3553C240.709 50.1463 240.013 50.1182 239.348 50.2739L226.596 53.4616C225.733 52.764 224.911 52.0174 224.134 51.2256L224.453 37.6226C224.463 36.9635 224.322 36.3108 224.041 35.7144C223.759 35.1181 223.345 34.5939 222.829 34.1821C222.292 33.7678 221.643 33.5241 220.966 33.4824C220.289 33.4406 219.615 33.6029 219.031 33.9482L207.242 39.5029L204.267 37.8774L202.149 24.4872C202.062 23.8243 201.799 23.1967 201.388 22.6692C200.976 22.1417 200.431 21.7334 199.809 21.4863C199.222 21.1647 198.552 21.0242 197.885 21.0825C197.218 21.1407 196.583 21.3952 196.06 21.8137L185.422 29.7191L182.324 28.8583L177.803 16.0552C177.585 15.4164 177.207 14.844 176.705 14.3927C176.202 13.9414 175.592 13.6264 174.933 13.4777C174.265 13.3557 173.576 13.4079 172.934 13.6291C172.292 13.8503 171.717 14.2332 171.266 14.7407L162.324 24.7604L159.072 24.2902L152.212 12.8226C151.901 12.241 151.442 11.7516 150.881 11.4034C150.32 11.0553 149.677 10.8607 149.017 10.8391C147.688 10.7666 146.442 11.6297 145.791 12.8178Z" fill="url(#paint0_linear_1_60)" />
      <path d="M112.926 162.529C112.511 162.176 112.294 161.966 112.294 161.966L147.811 159.062C118.839 120.906 95.6291 151.301 93.1587 154.7V162.529H112.926ZM186.876 162.118C187.291 161.765 187.508 161.555 187.508 161.555L153.377 159.062C182.362 119.339 204.174 150.89 206.644 154.288V162.118H186.876Z" fill="black" />
      <path d="M241.473 124.234C241.473 124.234 237.611 139.655 213.443 155.873L206.718 157.468C206.718 157.468 184.813 117.587 153.787 162.52C153.787 162.52 163.441 156.936 189.341 163.783C189.341 163.783 177.423 181.995 153.454 181.397C153.454 181.397 176.424 208.981 211.445 169.167C211.445 169.167 248.464 154.876 251.46 124.234H241.473Z" fill="url(#paint1_linear_1_60)" />
      <path d="M169.503 104.468C169.503 104.468 180.338 92.6234 191.174 104.468C191.174 104.468 199.688 120.261 191.174 128.157C191.174 128.157 177.242 139.213 169.503 128.157C169.503 128.157 160.215 119.471 169.503 104.468Z" fill="black" />
      <path d="M182.047 108.862C182.047 113.474 179.324 117.213 175.966 117.213C172.607 117.213 169.884 113.474 169.884 108.862C169.884 104.25 172.607 100.51 175.966 100.51C179.324 100.51 182.047 104.25 182.047 108.862Z" fill="white" />
      <path d="M121.141 101.233C121.141 101.233 139.728 93.0177 144.801 111.355C144.801 111.355 150.115 132.729 129.538 133.936C129.538 133.936 103.298 128.89 121.141 101.233Z" fill="black" />
      <path d="M130.477 109.164C130.477 113.92 127.668 117.778 124.204 117.778C120.741 117.778 117.933 113.92 117.933 109.164C117.933 104.407 120.741 100.551 124.204 100.551C127.668 100.551 130.477 104.407 130.477 109.164Z" fill="white" />
      <path d="M93.2686 171.601C127.216 215.064 143.296 180.163 143.296 180.163C124.238 178.022 110.719 165.358 110.719 165.358C133.588 162.445 146.81 162.207 146.81 162.207C116.198 121.895 91.3628 158.402 91.3628 158.402C85.169 156.142 78.7965 147.521 74.0916 139.554L55.0932 133.965C76.9502 171.066 93.2686 171.601 93.2686 171.601Z" fill="url(#paint2_linear_1_60)" />
      </g>
      <defs>
      <linearGradient id="paint0_linear_1_60" x1="155.668" y1="198.802" x2="139.325" y2="11.6856" gradientUnits="userSpaceOnUse">
      <stop stop-color="#F74C00" />
      <stop offset="0.33" stop-color="#F74C00" />
      <stop offset="1" stop-color="#F49600" />
      </linearGradient>
      <linearGradient id="paint1_linear_1_60" x1="202.457" y1="190.703" x2="202.457" y2="124.234" gradientUnits="userSpaceOnUse">
      <stop stop-color="#CC3A00" />
      <stop offset="0.15" stop-color="#CC3A00" />
      <stop offset="0.74" stop-color="#F74C00" />
      <stop offset="1" stop-color="#F74C00" />
      </linearGradient>
      <linearGradient id="paint2_linear_1_60" x1="100.951" y1="193.421" x2="100.951" y2="133.965" gradientUnits="userSpaceOnUse">
      <stop stop-color="#CC3A00" />
      <stop offset="0.15" stop-color="#CC3A00" />
      <stop offset="0.74" stop-color="#F74C00" />
      <stop offset="1" stop-color="#F74C00" />
      </linearGradient>
      <clipPath id="clip0_1_60">
      <rect width="299" height="199" fill="white" transform="translate(0.719086 0.602844)" />
      </clipPath>
      </defs>
    </svg>;
  }
  if (id === "python") {
    return <svg width="112" height="113" viewBox="0 0 112 113" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
        <title>Python Logo</title>
        <path d="M55.5247 0.410099C50.9411 0.431397 46.5638 0.822317 42.7122 1.50385C31.366 3.50835 29.306 7.70395 29.306 15.4413V25.6601H56.1185V29.0663H29.306H19.2435C11.451 29.0663 4.62773 33.7501 2.49349 42.6601C0.0316724 52.8731 -0.0775229 59.2461 2.49349 69.9101C4.39942 77.8479 8.95104 83.5038 16.7435 83.5038H25.9622V71.2538C25.9622 62.4039 33.6194 54.5976 42.7122 54.5976H69.4935C76.9484 54.5976 82.8997 48.4594 82.8997 40.9726V15.4413C82.8997 8.17501 76.7698 2.71657 69.4935 1.50385C64.8875 0.737124 60.1084 0.388801 55.5247 0.410099Z" fill="url(#paint0_linear_1445_68)" />
        <path d="M86.2434 29.0664V40.9727C86.2434 50.2034 78.4175 57.9727 69.4934 57.9727H42.7122C35.3763 57.9727 29.3059 64.2511 29.3059 71.5977V97.1289C29.3059 104.395 35.6245 108.669 42.7122 110.754C51.1995 113.25 59.3384 113.701 69.4934 110.754C76.2436 108.8 82.8997 104.866 82.8997 97.1289V86.9102H56.1184V83.5039H82.8997H96.3059C104.098 83.5039 107.002 78.0685 109.712 69.9102C112.511 61.5113 112.392 53.4344 109.712 42.6602C107.786 34.9027 104.108 29.0664 96.3059 29.0664Z" fill="url(#paint1_linear_1445_68)" />
        <defs>
          <linearGradient id="paint0_linear_1445_68" x1="0.605957" y1="0.409179" x2="62.4326" y2="53.0941" gradientUnits="userSpaceOnUse">
            <stop stopColor="#5A9FD4" />
            <stop offset="1" stopColor="#306998" />
          </linearGradient>
          <linearGradient id="paint1_linear_1445_68" x1="70.5366" y1="97.9573" x2="48.3555" y2="66.875" gradientUnits="userSpaceOnUse">
            <stop stopColor="#FFD43B" />
            <stop offset="1" stopColor="#FFE873" />
          </linearGradient>
        </defs>
      </svg>;
  }
  if (id === 'ruby') {
    return <svg width="125" height="120" viewBox="0 0 125 120" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M34.0031 107.33C61.4691 111.08 88.4471 114.763 115.961 118.518C106.587 102.912 97.4541 87.705 88.2481 72.374L34.0031 107.33ZM123.713 20.947C121.292 24.583 118.866 28.216 116.448 31.854C108.144 44.347 99.8411 56.84 91.5451 69.339C91.0831 70.035 90.4841 70.587 91.1351 71.66C99.1511 84.897 107.104 98.173 115.077 111.437C116.335 113.532 117.607 115.619 119.234 117.629C120.846 85.436 122.457 53.242 124.068 21.049L123.713 20.947ZM14.2841 62.22C14.6591 62.575 15.5951 62.782 16.0311 62.567C23.7201 58.788 31.4581 55.093 38.9791 51.003C41.4321 49.67 43.3181 47.28 45.4311 45.342C52.4281 38.925 59.4141 32.495 66.3971 26.064C66.8241 25.669 67.3301 25.287 67.5851 24.789C70.0931 19.887 72.5581 14.96 75.1101 9.89102C72.0671 8.74701 69.1821 7.62801 66.2611 6.61001C65.8651 6.47201 65.2411 6.74601 64.8121 6.98501C58.0511 10.762 51.1631 14.338 44.6171 18.457C41.3421 20.518 38.6741 23.555 35.7741 26.2C31.1001 30.466 26.4321 34.742 21.8261 39.082C20.6041 40.234 19.4901 41.55 18.5381 42.936C15.3881 47.523 12.3321 52.176 9.13612 56.961C10.9221 58.808 12.5461 60.574 14.2841 62.22ZM42.3861 55.949C38.5611 72.108 34.7591 88.176 30.8301 104.772C49.2531 92.901 67.2511 81.304 85.1301 69.785C70.9021 65.18 56.7201 60.589 42.3861 55.949ZM119.017 21.103C103.451 23.704 88.2571 26.242 72.8671 28.813C78.1091 41.564 83.2461 54.059 88.5291 66.909C98.7501 51.55 108.769 36.499 119.017 21.103ZM43.0281 52.644C57.0451 57.194 70.7831 61.654 84.9201 66.244C79.6701 53.454 74.6001 41.111 69.4251 28.507C60.6101 36.566 51.9271 44.506 43.0281 52.644ZM14.8631 71.643C9.89212 83.526 5.09012 95.005 0.201117 106.691C9.59712 106.413 18.7051 106.144 28.1261 105.866C23.7031 94.454 19.3671 83.266 14.8631 71.643ZM28.4561 97.739L28.8021 97.663C32.1551 83.722 35.5561 69.877 38.9791 55.391C31.3431 59.36 24.0591 63.145 16.5761 67.035C20.3951 76.961 24.4671 87.432 28.4561 97.739ZM113.383 18.842C108.924 17.661 104.465 16.476 100.004 15.303C93.5921 13.617 87.1751 11.952 80.7671 10.251C79.9661 10.038 79.3871 9.89902 78.9161 10.864C76.6511 15.504 74.3161 20.109 72.0151 24.732C71.9441 24.875 71.9591 25.06 71.9041 25.419C85.7901 23.315 99.5831 21.224 113.374 19.134L113.383 18.842ZM87.5141 8.28802L123.857 18.342C121.773 12.403 119.84 6.89602 117.852 1.23202L87.5671 7.94701L87.5141 8.28802ZM31.5371 110.007C27.0361 109.488 22.4151 109.965 17.8501 110.044C14.1001 110.107 10.3501 110.25 6.60012 110.367C6.21412 110.379 5.82912 110.457 5.44412 110.873C36.4471 113.739 67.4491 116.605 98.4511 119.473L98.5141 119.059C88.5761 117.702 78.6371 116.345 68.6991 114.989C56.3151 113.298 43.9521 111.438 31.5371 110.007ZM0.814117 95.994C4.80912 86.724 8.78712 77.448 12.7981 68.185C13.1991 67.256 13.1681 66.625 12.3831 65.877C10.7051 64.28 9.14612 62.559 7.31212 60.651C4.83312 72.891 2.41512 84.828 -0.00488281 96.764L0.266117 96.891C0.451117 96.594 0.677117 96.313 0.814117 95.994ZM79.5541 5.84101C86.2911 4.10301 93.1261 2.74402 99.9211 1.22802C100.361 1.12902 100.791 0.984015 101.224 0.860015L101.157 0.528015C91.5861 1.81502 82.0161 3.10302 71.9631 4.45602C74.7041 5.65302 76.8161 6.54701 79.5541 5.84101Z" fill="#D91404" />
      </svg>;
  }
  return null;
};

With Embedded Wallets, you can create custom wallet experiences that are seamlessly integrated into your product, without compromising on security. Whether you need custodial or non-custodial wallets, our infrastructure provides the foundation for building innovative, user-friendly crypto products.

### Why Embedded Wallets?

Embedded Wallets give you the freedom to design and control the entire user experience, while offloading the complexity and risk of private key management to Turnkey.

With Embedded Wallets, you can:

* Leverage pre-built UI components to speed up your integration
* Easily create a variety of wallets for your users
* Authenticate users via email, phone number, biometrics, social logins, etc
* Determine delegated access and co-owernership controls
* Access out-of-the-box support for multiple chains and assets
* Sign multiple transactions without additional approvals
* Access simple integrations for gas sponsorship and smart contract wallets

### Custodial vs non-custodial

Turnkey's Embedded Wallets are built on top of Sub-Organizations.
Each wallet is represented by a sub-organization, which can be configured with different security settings and access controls.

* For custodial wallets, your application holds the master key and can initiate transactions on behalf of users.
* For non-custodial wallets, users hold their own private keys and must approve each transaction,
  using one of their configured [authentication](/authentication/overview) methods.

Below, we'll dive into how we set each of these up but first, let's make sure you're familiar with
the Embedded Wallets concepts and architecture.

### Embedded Wallets Quickstart

If you haven't yet, get started quickly using Turnkey's Account/Embedded Wallets Setup. You'll learn how to:

* Create an Account
* Get Your Organization ID
* Create an API Key
* Set up Turnkey's React SDK in a Next.js application
* Configure authentication with email sign-in
* Implement message signing functionality using a user's Turnkey wallet
* Handle user sessions and wallet interactions

Get started [here](/getting-started/embedded-wallet-quickstart) and come back when you're ready.

### Integrating Embedded Wallets

Now that you've gotten started, this guide walks through 3 ways to use sub-organizations as
Embedded Wallets for your users. We first show that it can be used to create non-custodial wallets,
or end-user controlled wallets. Then we explain how you can create custodial wallets, and lastly shared custody wallets.

#### Non-Custodial Wallets

In this example wallet implementation, you will create a segregated sub-organization for each end-user, and leverage [passkeys](/authentication/passkeys/introduction) as cryptographic proof of ownership to ensure only the end-user has the ability to approve signing. Your application will construct transactions on behalf of the end-user, and then surface the relevant Turnkey activity request client-side for end-user approval.

Note that Turnkey is not a customer authentication platform. This gives you the flexibility to create the user experience you envision. Typically, Turnkey integrators implement their own standard end-user authentication flows for login, then employ passkeys behind that login for transaction signing.

If you'd like to see a live example, head over to our [✨Demo Embedded Wallet✨](https://wallet.tx.xyz/), and follow along with the code [here](https://github.com/tkhq/demo-embedded-wallet).

**Before you start**

Make sure you've set up your primary Turnkey organization with at least one API user for programmatic user onboarding.
Check out our [Quickstart guide](/getting-started/quickstart) if you need help getting started.

<Steps>
  <Step title="Create a sub-organization">
    After the end-user is logged in, your application prompts the user for passkey creation on the application domain. Our JavaScript SDK has a helper for this: `getWebAuthnAttestation`. See [this example](https://github.com/tkhq/sdk/tree/main/examples/with-federated-passkeys).

    Your application then uses an API-only user to create a new sub-organization on behalf of the end-user with a `CREATE_SUB_ORGANIZATION` activity. In the example below, the new sub-organization has one root user controlled by the end user's passkey, and an associated Ethereum wallet:

    ```js
    {
      "type": "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4",
      "timestampMs": "<time-in-ms>",
      "organizationId": "<your-organization-id>",
      "parameters": {
        "subOrganizationName": "<sub-org-name>",
        "rootUsers": [
          {
            "userName": "<end-user-name>",
            "userEmail": "<email>(optional)",
            "authenticators": [
              {
                "authenticatorName": "<passkey-name>",
                "challenge": "<webauthn-challenge>",
                "attestation": {
                  "credentialId": "<credential-id>",
                  "clientDataJson": "<client-data-json>",
                  "attestationObject": "<attestation-object>",
                  "transports": ["AUTHENTICATOR_TRANSPORT_HYBRID"]
                }
              }
            ],
            "apiKeys": []
          }
        ],
        "rootQuorumThreshold": 1,
        "wallet": {
          "walletName": "Default Wallet",
          "accounts": [
            {
              "curve": "CURVE_SECP256K1",
              "pathFormat": "PATH_FORMAT_BIP32",
              "path": "m/44'/60'/0'/0/0",
              "addressFormat": "ADDRESS_FORMAT_ETHEREUM"
            }
          ]
        }
      }
    }
    ```

    The response will contain the new sub-organization ID as well as details about its associated Ethereum wallet:

    ```js
    {
      "subOrganizationId": "<your-new-sub-org>", // the organization_id that the end-user must use when signing requests
      "wallet": {
        "walletId": "<your-new-wallet>", // the wallet ID used to generate more accounts
        "addresses": "<your-new-addresses>" // the addresses you can now sign with
      }
    }
    ```

    Note: root users created with sub-organizations can have both API keys and authenticators (e.g. passkeys). In this example we only expect passkeys. See [Sub-Organizations as shared wallets](#sub-organizations-as-shared-wallets) for a use case which requires both.

    With this setup each end-user now has sole control over their sub-organization and any resources created within it. Your application cannot take any actions on resources within the sub-organization without explicit cryptographic authorization from the end-user in the form of a passkey signature.

    It's important to note that the initial activity to create a sub-organization has to be authorized by an API key of a user in your main Turnkey organization. Otherwise, anyone would be able to create sub-organizations in your organization! Here's an [example](https://github.com/tkhq/sdk/blob/a2bfbf3cbd6040902bbe4c247900ac560be42925/examples/with-federated-passkeys/src/pages/index.tsx#L88-L116) where the initial registration is done, and posted to a NextJS backend. The NextJS backend inserts the attestation and signs the `CREATE_SUB_ORGANIZATION_V4` activity [here](https://github.com/tkhq/sdk/blob/ba360baeb60d80276f7faeca602b99190fe5affe/examples/with-federated-passkeys/src/pages/api/createSubOrg.ts#L27-L106).
  </Step>

  <Step title="Wallet creation">
    While the **first wallet creation is already done** (our `CREATE_SUB_ORGANIZATION` activity accepts a `wallet` parameter!), your end-users can derive more accounts or create more wallets after the fact by using their passkeys to sign a `CREATE_WALLET` activity.

    We've abstracted getting WebAuthn signatures and creating signed Turnkey requests behind typed methods (e.g. `createWallet`).

    Our `TurnkeyClient` (from [`@turnkey/http`](https://www.npmjs.com/package/@turnkey/http)) can be initialized with a `WebauthnStamper` (from [`@turnkey/webauthn-stamper`](https://www.npmjs.com/package/@turnkey/webauthn-stamper)):

    ```js
    import { WebauthnStamper } from "@turnkey/webauthn-stamper";
    import { TurnkeyClient } from "@turnkey/http";

    const stamper = new WebAuthnStamper({
      rpId: "your-domain.com",
    });

    // New HTTP client able to sign with passkeys!
    const httpClient = new TurnkeyClient(
      { baseUrl: "https://api.turnkey.com" },
      stamper
    );

    // Signs and sends a request to Turnkey
    await httpClient.createWallet({
      type: "ACTIVITY_TYPE_CREATE_WALLET",
      organizationId: "<user sub-organization>",
      timestampMs: String(Date.now()),
      parameters: {
        walletName: "New Wallet",
        accounts: [
          {
            curve: "CURVE_SECP256K1",
            pathFormat: "PATH_FORMAT_BIP32",
            path: "m/44'/60'/0'/0/0",
            addressFormat: "ADDRESS_FORMAT_ETHEREUM",
          },
        ],
      },
    });
    ```

    In the snippet above we send the activity directly to Turnkey's backend. Our SDK also comes with abstractions to create a `signedRequest`, which contain all the components needed to forward it to Turnkey: URL, body, and a stamp header (with name and value properties). Use `httpClient.stampCreateWallet` to get a signed request. Your backend server can then proxy it to Turnkey.

    Next, we can derive additional accounts (addresses) given a single HD wallet. The shape of the request is as follows:

    ```js
      {
        "type": "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS",
        "timestampMs": "<time-in-ms>",
        "organizationId": "<your-organization-id>",
        "parameters": {
          "walletId": "<your-wallet-id>",
          "accounts": [
            {
              "curve": "CURVE_SECP256K1",
              "pathFormat": "PATH_FORMAT_BIP32",
              "path": "m/44'/60'/0'/0/0",
              "addressFormat": "ADDRESS_FORMAT_ETHEREUM"
            }
          ]
        }
      }
    ```
  </Step>

  <Step title="Transaction signing">
    The end-user must provide a signature over each `SIGN_TRANSACTION` activity with their passkey. In your application, a user action (for example tapping a "Withdraw Rewards" button) might trigger the flow. The details of this transaction should be presented to the user for confirmation, followed by a passkey prompt to sign the Turnkey activity. An activity to sign a transaction looks like the following:

    The end-user must provide a signature over each `SIGN_TRANSACTION` activity with their passkey. In your application, a user action (for example tapping a "Withdraw Rewards" button) might trigger the flow. The details of this transaction should be presented to the user for confirmation, followed by a passkey prompt to sign the Turnkey activity. An activity to sign a transaction looks like the following:

    ```js
    {
      "type": "ACTIVITY_TYPE_SIGN_TRANSACTION_V2",
      "timestampMs": "<time-in-ms>",
      "organizationId": "<sub-organization-id>",
      "parameters": {
        "signWith": "<wallet account address, private key id, or private key address>",
        "type": "TRANSACTION_TYPE_ETHEREUM",
        "unsignedTransaction": "<unsigned-transaction>"
      }
    }
    ```

    Turnkey returns a signed transaction in the activity result which your application can broadcast using any provider you'd like.
  </Step>
</Steps>

#### Custodial Wallets

Most of the steps outlined in the previous section remain unchanged: applications creating custodial wallets should still create segregated sub-organizations for their end-users to avoid limits (we currently have a maximum of 100 users per organization, whereas an organization can have unlimited sub-organizations).

The main difference is in the Root Quorum settings: upon creating a new sub-organization, your business's API key is used to bootstrap each end-user organization. The `CREATE_SUB_ORGANIZATION_V4` activity becomes:

```json
{
"type": "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4",
"timestampMs": "<time-in-ms>",
"organizationId": "<your-organization-id>",
"parameters": {
  "subOrganizationName": "<sub-org-name>",
  "rootUsers": [{
    "userName": "<your-business-user>",
    "userEmail": "<email>(optional)",
    "authenticators": [],
    "apiKeys": [
      "apiKeyName": "<api-key-name>",
      "publicKey": "<your-business-api-public-key>"
    ],
  }],
  "rootQuorumThreshold": 1,
  "wallet": {
    "walletName": "Default ETH Wallet",
    "accounts": [
      {
        "curve": "CURVE_SECP256K1",
        "pathFormat": "PATH_FORMAT_BIP32",
        "path": "m/44'/60'/0'/0/0",
        "addressFormat": "ADDRESS_FORMAT_ETHEREUM",
      },
    ],
  },
}
}
```

(Note the empty `"authenticators"` list!)

Key creation and signatures can also be performed with this root API user, and the end-user doesn't need to be involved in the activity signing process.

Policies can be use to segregate permissions if needed: you could, for example, bootstrap each sub-org with 2 API users: one to create keys and setup the organization policies; the other to sign transactions.

#### Shared Wallets

For the sake of completeness: it is possible to create "shared custody" wallets with the sub-organization primitive. To do this, an application would setup sub-organizations with the following settings:

* Root quorum threshold: 2

* Root users:

  * 1 user representing the end-user (with their Passkey as an authenticator)
  * 1 user representing the business (with an API key attached)

The signing process would then have to involve **both** the user and the business
since the root quorum threshold is 2. To reduce friction for the end-user,
many clients opt to start with a root quorum of 1. This way, you can take
certain actions with your business's API key root user **prior** to updating
the root quorum threshold to 2.

Looking for more support? Check out our Demos, SDKs and Code Examples below!

## Demos

### Demo Embedded Wallet ([code](https://github.com/tkhq/demo-embedded-wallet))

A comprehensive demo showcasing how to build an embedded wallet using Turnkey. This demo uses the [`@turnkey/sdk-browser`](https://www.npmjs.com/package/@turnkey/sdk-browser), [`@turnkey/sdk-react`](https://www.npmjs.com/package/@turnkey/sdk-react) and [`@turnkey/sdk-server`](https://www.npmjs.com/package/@turnkey/sdk-server) packages and includes features such as:

* User authentication with passkeys, email auth, and OAuth
* Creating new wallets and wallet accounts
* Sending and receiving funds
* Importing/Exporting a wallet
* Adding a credential to the wallet

<CardGroup>
  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/demo-embedded-wallet.png" alt="demo embedded wallet login view" />
  </Frame>

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/demo-embedded-wallet-ui.png" alt="demo embedded wallet dashboard view" />
  </Frame>
</CardGroup>

See [https://github.com/tkhq/demo-embedded-wallet](https://github.com/tkhq/demo-embedded-wallet) for the code.

### Demo Consumer Wallet ([code](https://github.com/tkhq/demo-consumer-wallet))

A minimal consumer wallet app powered by Turnkey. Behind the scenes, it uses [`@turnkey/ethers`](https://www.npmjs.com/package/@turnkey/ethers) for signing and WalletConnect (v1) for accessing dapps.

<Frame>
  <video src="https://github.com/tkhq/demo-consumer-wallet/assets/127255904/2c3409df-2d7c-4ec3-9aa8-e2944a0b0e0a" width="100%" height="420" controls />
</Frame>

See [https://github.com/tkhq/demo-consumer-wallet](https://github.com/tkhq/demo-consumer-wallet) for the code.

### Demo Embedded Wallet ([code](https://github.com/tkhq/demo-embedded-wallet), [live link](https://wallet.tx.xyz))

A wallet application showing how users can register and authenticate using passkeys. This demo uses the Turnkey API to create a new [Turnkey Sub-Organization](/concepts/sub-organizations) for each user, create a testnet Ethereum address and send a transaction on Sepolia (ETH testnet).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/demo-embedded-wallet.png" alt="demo embedded wallet screenshot" />
</Frame>

See [https://wallet.tx.xyz](https://wallet.tx.xyz) (and [https://github.com/tkhq/demo-embedded-wallet](https://github.com/tkhq/demo-embedded-wallet) for the code).

### Demo Ethers Passkeys ([code](https://github.com/tkhq/demo-ethers-passkeys))

A simple application demonstrating how to create sub-organizations, create private keys, and sign with the [`@turnkey/ethers`](https://github.com/tkhq/sdk/tree/main/packages/ethers) signer, using passkeys.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/ethers-ui-screenshot.png" alt="ethers ui screenshot" />
</Frame>

See [https://github.com/tkhq/demo-ethers-passkeys](https://github.com/tkhq/demo-ethers-passkeys) for the code.

### Demo Viem Passkeys ([code](https://github.com/tkhq/demo-viem-passkeys))

A similar, simple application demonstrating how to create sub-organizations, create private keys, and sign with the [`@turnkey/viem`](https://github.com/tkhq/sdk/tree/main/packages/viem) signer, using passkeys.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/viem-ui-screenshot.png" alt="viem ui screenshot" />
</Frame>

See [https://github.com/tkhq/demo-viem-passkeys](https://github.com/tkhq/demo-viem-passkeys) for the code.

### Demo Viem Passkeys with Gelato Relay ([code](https://github.com/gelatodigital/gelato-turnkey-passkeys-relay))

This example demonstrates how to leverage Turnkey’s secure key management and Gelato's battle-tested relay infrastructure to enable seamless, sponsored interactions with meta-transactions using the [`@turnkey/viem`](https://github.com/tkhq/sdk/tree/main/packages/viem) signer and [`@gelatonetwork/relay-sdk-viem`](https://github.com/gelatodigital/relay-sdk-viem).

<Frame>
  <div style={{ width: "50%" }}>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/gelato_turnkey.png" alt="gelato turnkey screenshot" />
  </div>
</Frame>

#### How Infinex Leverages Turnkey and Gelato

Infinex, a platform designed to unify the decentralized ecosystem and applications under a single UX layer, eliminates the complexities of navigating fragmented crypto protocols. By integrating **Turnkey** and **Gelato**, Infinex delivers a seamless, secure, and cost-efficient experience for decentralized finance users.

* **Secure Key Management with Turnkey**: Infinex ensures private keys are securely managed within Turnkey’s infrastructure, removing the need for traditional wallet pop-ups. This approach streamlines authentication through passkeys, offering a frictionless and secure user experience.

* **Gasless Transactions with Gelato**: Leveraging Gelato’s Relay (ERC-2771), Infinex enables fully **sponsored transactions**, allowing users to interact with decentralized applications without ever paying gas fees. This enhances accessibility and usability, ensuring that users can participate without holding or managing native blockchain tokens for fees.

The synergy between Turnkey and Gelato allows Infinex to offer an intuitive, cost-free user experience while maintaining the highest standards of security and scalability.

### React Native Demo App ([code](https://github.com/tkhq/react-native-demo-wallet))

A React Native app that demonstrates how to use the Turnkey's JavaScript packages in a mobile environment to authenticate users, create wallets, export wallets, sign messages, and more

<Frame>
  <video controls className="rounded-lg" src="https://github.com/tkhq/react-native-demo-wallet/raw/refs/heads/main/assets/videos/demo_video.mov" width="50%" height="260" />
</Frame>

See [https://github.com/tkhq/react-native-demo-wallet](https://github.com/tkhq/react-native-demo-wallet)
for the code.

### Flutter Demo App ([code](https://github.com/tkhq/dart-sdk/tree/main/examples/flutter-demo-app))

A Flutter app that demonstrates how to use the Turnkey's Flutter packages to authenticate users, create wallets, export wallets, sign messages, and more

<Frame>
  <video className="rounded-lg" src="https://github.com/tkhq/dart-sdk/raw/refs/heads/main/examples/flutter-demo-app/assets/videos/flutter-demo.mov" width="40%" height="auto" controls />
</Frame>

See [https://github.com/tkhq/dart-sdk/tree/main/examples/flutter-demo-app](https://github.com/tkhq/dart-sdk/tree/main/examples/flutter-demo-app)
for the code

### SDKs

<div className="flex gap-4 items-center justify-center">
  <SquareCard icon={<Logo id="react" className="h-8 w-8" />} label="React" href="/sdks/react" />

  <SquareCard icon={<Logo id="react-native" className="h-8 w-8" />} label="React Native" href="/sdks/react-native" />

  <SquareCard icon={<Logo id="ios-swift" className="h-8 w-8" />} label="iOS (Swift)" href="/sdks/swift" />

  <SquareCard icon={<Logo id="flutter" className="h-8 w-8" />} label="Flutter" href="/sdks/flutter" />

  <SquareCard icon={<Logo id="typescript" className="h-8 w-8" />} label="Typescript" href="/sdks/javascript-browser" />
</div>

### Next Steps

Learn more about our powerful features [here](/embedded-wallets/features/overview).


# FAQ
Source: https://docs.turnkey.com/faq



## Authentication and credentials

<AccordionGroup>
  <Accordion title="Can I sign up for Turnkey multiple times with the same email?">
    When you authenticate to the Turnkey dashboard, your email is used to lookup your organization and associated credentials. Currently we do not allow multiple users to be associated with the same email address.
  </Accordion>

  <Accordion title="Why do you require a public / private key pair to access Turnkey API?">
    Asymmetric cryptography offers various security benefits to you:

    * Turnkey *cannot* leak your API private keys, even if compromised, because Turnkey only knows your API public keys.
    * Your API private key stays on the server you generated it for. This means there's a lower risk of key exfiltration compared to other methods where an API key, or API credentials in general, are generated in one place (web browser, company server), transported via a second (copy/paste, email, PDF document) and used in a third place (your server).
  </Accordion>

  <Accordion title="Why do I need to sign the whole POST body?">
    Signing the whole payload is a way for Turnkey to know:

    * That you are in possession of your API key (because we can verify the signature you attach to requests).
    * That the person or program signing is approving the current request (not just any request).

    Concretely, Turnkey needs the following:

    1. **The original request you sent**: this is achieved by simply receiving the HTTP request and its body
    2. **That your API key was used to approve the request**: this is achieved by checking the signature contained in the `X-Stamp` header. For this verification we need the serialized POST body, your API public key, and the signature. This is all contained in the header value.
    3. **That the request is legitimate**: this is achieved by parsing the serialized request to make sure the intent is correct. This happens all the way down in our [Secure Enclaves](/security/secure-enclaves). For example, when you send a request to create a new Private Key, our policy engine parses your original request to independently derive the type of request, the payload to sign, etc. This guards against man-in-the-middle attacks.

    Turnkey would not be able to have its enclaves verify signatures and check the request intent if we didn't have your signature on the whole payload.
  </Accordion>

  <Accordion title="How is a Turnkey API key different from a crypto public / private key?">
    A Turnkey API key is simply a way to authenticate requests to Turnkey. Crypto assets are not tied to it in any way.

    Think about Turnkey API keys as an access-gating mechanism to Turnkey functionality. They're flexible in what they can do (you get to decide this with [Policies](/concepts/policies/overview)!), and revocable if they are lost or compromised.
  </Accordion>

  <Accordion title="What happens if I lose my API key? Do I lose my crypto?">
    Losing your Turnkey API key doesn't mean you'll lose your crypto:

    * By default, your API key is not able to move funds
    * If you've changed policies so that your API key is allowed to unilaterally move funds, you may be at risk. Leverage the Turnkey UI to revoke your API key as soon as possible.

    Talk to our team ([hello@turnkey.com](mailto:hello@turnkey.com)) if you want to get in touch and talk more in-depth.
  </Accordion>

  <Accordion title="How long is a signed activity request valid for?">
    We require a recent timestamp in the `timestampMs` field for each new activity submission.

    Our secure enclaves have their own, independent, secure source of time. We currently require request timestamps to be **less than an hour old**, and **up to 5 minutes in the future**.
  </Accordion>

  <Accordion title="Can I use my existing crypto private key as a Turnkey API key?">
    You can, but it doesn't mean you should. If you use your existing crypto private key as a turnkey API key, you are coupling Turnkey access with your crypto wallet. In essence, the risk profile of this key goes up. It's a bit like re-using passwords across many sites. Turnkey highly recommends creating a fresh public/private key pair if you need programmatic Turnkey access.
  </Accordion>

  <Accordion title="How can I safely rotate API key credentials?">
    While we don't have an off the shelf recipe, one potential approach is:

    * At sub-org creation, create your root user with 2+ API keys. One for day-to-day signing, and the other(s) securely stored.
    * If the day-to-day key is leaked, then you can use one of the secure, additional keys to remove it from all impacted sub-orgs via `ACTIVITY_TYPE_DELETE_API_KEYS`.

    Reach out to our team ([hello@turnkey.com](mailto:hello@turnkey.com)) for additional guidance.
  </Accordion>
</AccordionGroup>

## Limits

<AccordionGroup>
  <Accordion title="Are there limits on how many resources I can create, or activities I can execute?">
    See [resource limits](/concepts/resource-limits).
  </Accordion>

  <Accordion title="Do you have any rate limits in place in your public API?">
    Yes - Turnkey's public API enforces rate limits that vary by plan:

    * **Free:** 1 request per second (RPS)
    * **Pay-as-you-go:** 1 RPS
    * **Pro:** 3 RPS
    * **Enterprise:** 60 RPS

    In addition, there is a **per-suborganization limit of 10 RPS**, regardless of tier. This protects against spam and abuse (e.g., fake user creation).

    Rate limit information is included in the response headers:

    * `ratelimit-limit`: your plan's total RPS limit
    * `ratelimit-remaining`: current quota remaining
    * `x-rate-limit-request-forwarded-for` and `x-rate-limit-request-remote-addr`: echo back request IPs for debugging purposes

    When rate limits are exceeded, an error with HTTP 429 is returned with the following message: `Too many requests. Please wait and try again in a few seconds`.

    This limit is on a **per IP address** basis: if you have multiple servers making requests to the turnkey API under a different IP address, each server is subject to the 60 RPS limit individually.

    Please get in touch with us ([help@turnkey.com](mailto:help@turnkey.com)) if you need this limit adjusted for your use-case.
  </Accordion>
</AccordionGroup>

## Supported functionality

<AccordionGroup>
  <Accordion title="Does Turnkey support Ethereum (EVM)?">
    Yes! See [Ethereum (EVM) support on Turnkey](networks/ethereum) for more information and concrete examples.
  </Accordion>

  <Accordion title="Does Turnkey support Solana (SVM)?">
    Yes! See [Solana (SVM) support on Turnkey](networks/solana) for more information and concrete examples.
  </Accordion>

  <Accordion title="Does Turnkey support Bitcoin?">
    Yes! See [Bitcoin support on Turnkey](networks/bitcoin) for more information and concrete examples.
  </Accordion>

  <Accordion title="Which cryptographic curves do you support?">
    Turnkey currently supports SECP256k1 and Ed25519.
  </Accordion>

  <Accordion title="Which ecosystems and chains do you support?">
    Turnkey's primitive for private keys and wallet is the **cryptographic curve** rather than specific cryptocurrencies. Our approach to supporting assets is tiered, see [this page](networks/framework) for more information.

    We have deeper support for [Ethereum](networks/ethereum), [Solana](networks/solana), and [Bitcoin](networks/bitcoin).

    If there are specific ecosystems or chains you'd like to see us offer deeper support for,
    please let us know by contacting us at [hello@turnkey.com](mailto:hello@turnkey.com), on [X](https://x.com/turnkeyhq/),
    or [on Slack](https://join.slack.com/t/clubturnkey/shared_invite/zt-31v4yhgw6-PwBzyNsWCCBTk2xft3EoHQ).
  </Accordion>

  <Accordion title="Do you support transaction construction and broadcast?">
    Turnkey does not offer native support for transaction construction and broadcast, instead we focus on transaction signing.

    We suggest you use blockchain-specific libraries, like Ethers.js for Ethereum, to construct transactions. We offer simple [scripts](https://github.com/tkhq/sdk/tree/main/examples/with-ethers/) leveraging `ethers.js` to help you with basic transaction construction.

    You can use any blockchain node provider, like Infura or Alchemy, to broadcast your transactions.
  </Accordion>

  <Accordion title="What does `HASH_FUNCTION_NO_OP` mean?">
    In the ECDSA context, messages are hashed before signing. Turnkey can perform this hashing for you, as we support two hash functions: `HASH_FUNCTION_KECCAK256` and `HASH_FUNCTION_SHA256` (for Ethereum and Bitcoin ecosystems respectively). If your message had already been hashed, you should use the `HASH_FUNCTION_NO_OP` option to sign the raw hash, in which case Turnkey will sign the payload as is. `HASH_FUNCTION_NO_OP` also has privacy implications: if a raw hashed message is passed in, Turnkey has no knowledge of the underlying pre-image.

    As an example, in our Viem package, the message is [hashed](https://github.com/tkhq/sdk/blob/673442f025990fde6a37436bed987b42e694a64d/packages/viem/src/index.ts#L201) before [signing](https://github.com/tkhq/sdk/blob/673442f025990fde6a37436bed987b42e694a64d/packages/viem/src/index.ts#L348).
  </Accordion>

  <Accordion title="What is `HASH_FUNCTION_NOT_APPLICABLE` and how does it differ from `HASH_FUNCTION_NO_OP`?">
    Unlike ECDSA, in which a message is hashed as a separate step *before* signing, when using Ed25519, hashing is performed *during* signature computation, and thus cannot be skipped (for more details on the standard, see [RFC 8032](https://datatracker.ietf.org/doc/html/rfc8032#section-5.1): `“Ed25519 is EdDSA instantiated with: …H(x) = SHA-512"`). As a result, we have a special `HASH_FUNCTION_NOT_APPLICABLE` option for when you use ed25519/EdDSA.

    An example for this case can be found in our [Solana signer](https://github.com/tkhq/sdk/blob/d9ed2aefc92d298826a40e821f959b019ea1936f/packages/solana/src/index.ts#L64).
  </Accordion>
</AccordionGroup>

## Guidance

<AccordionGroup>
  <Accordion title="Do you have a status page?">
    Yes, we report critical incidents at [turnkey-status.com](https://www.turnkey-status.com/).
  </Accordion>

  <Accordion title="How do you recommend testing the Turnkey API and functionality safely?">
    Typically we recommend that you create "test" organizations to test the API and functionality freely. When you are ready to go to production, use a "main" organization used for production only.

    To do this you can use email aliases: if `firstname@domain.com` is your email, you can sign up for a new Turnkey organization with `firstname+test@domain.com` to have a test playground.

    If you need many test organizations or if you have specific questions, our team is happy to help you get set up.
  </Accordion>

  <Accordion title="How do pricing and billing work?">
    Turnkey is priced per signature, i.e. any transaction or raw payload successfully signed by a private key created on Turnkey. Turnkey offers 25 free signatures each month. To execute more than 25 transactions in a given month, you are required to have a credit card on file or active enterprise plan on your account. To upgrade your plan, navigate to Account Settings from the menu in the top right-hand corner in the Turnkey dashboard and follow the instructions.

    For more information about pricing and billing, check out the [pricing page](https://www.turnkey.com/pricing).
  </Accordion>

  <Accordion title="Where else can I get help with my Turnkey implementation?">
    Join our slack community [here](https://join.slack.com/t/clubturnkey/shared_invite/zt-31v4yhgw6-PwBzyNsWCCBTk2xft3EoHQ) to get support with your integration, share product feedback, and connect with other crypto builders. Or, reach out directly to [help@turnkey.com.](mailto:help@turnkey.com.) Teams that are looking for more in-depth integration support can upgrade to an Enterprise plan via [hello@turnkey.com](mailto:hello@turnkey.com).
  </Accordion>

  <Accordion title="What is your data deletion policy?">
    To request the deletion of your parent organization from our records, please email us at [privacy@turnkey.com](mailto:privacy@turnkey.com).
  </Accordion>

  <Accordion title="Is my country supported?">
    Turnkey is not currently available to users in any countries currently subject to US OFAC sanctions.
  </Accordion>

  <Accordion title="Where can I learn more about Turnkey's internal architecture?">
    Check out our whitepaper, available at [whitepaper.turnkey.com](https://whitepaper.turnkey.com)! It covers our foundations and architecture in great detail.
  </Accordion>
</AccordionGroup>


# Embedded wallets quickstart
Source: https://docs.turnkey.com/getting-started/embedded-wallet-quickstart

Turnkey's embedded wallets enable you to integrate secure, custom wallet experiences directly into your product. With features like advanced security, seamless authentication, and flexible UX options, you can focus on building great products while we handle the complexities of private key management.

## Prerequisites

This guide assumes you've completed the steps to create an account, organization, and API keypair as described in the [Account Setup](/getting-started/quickstart) section.

## Installation

Create a new Next.js app via `npx create-next-app@latest`. Or install into an existing project.

<CodeGroup>
  ```bash npm
  npm install @turnkey/sdk-react
  ```

  ```bash pnpm
  pnpm add @turnkey/sdk-react
  ```

  ```bash yarn
  yarn add @turnkey/sdk-react
  ```
</CodeGroup>

<Info>
  **Technical Requirements**

  **Next.js App Router Required**

  `@turnkey/sdk-react` requires the Next.js App Router architecture as it leverages React Server Components and Server Actions to handle authentication on your behalf. The SDK automatically manages the "use client" and "use server" directives. The Pages Router is not supported.

  **React 19 Users**

  If you're using Next.js 15 with React 19 you may encounter an installation error with `@turnkey/sdk-react`. Consider:

  * Downgrading React to `18.x.x`
  * Using `npm install --force` or `--legacy-peer-deps`

  You may learn more about this [here](https://ui.shadcn.com/docs/react-19).
</Info>

## Setup

<Steps>
  <Step title="Environment">
    The following environment variables are necessary to use the Turnkey SDK.

    ```bash .env
    NEXT_PUBLIC_ORGANIZATION_ID=<your turnkey org id>
    TURNKEY_API_PUBLIC_KEY=<your api public key>
    TURNKEY_API_PRIVATE_KEY=<your api private key>
    NEXT_PUBLIC_BASE_URL=https://api.turnkey.com
    ```

    <Info>
      **Note**: These environment variable names must be used exactly as shown.
      The SDK depends on them internally for server actions and authentication.
    </Info>
  </Step>

  <Step title="Configure">
    Fill in with your Organization ID and API Base URL.

    ```tsx src/app/layout.tsx
    const config = {
      apiBaseUrl: "https://api.turnkey.com",
      defaultOrganizationId: process.env.NEXT_PUBLIC_ORGANIZATION_ID,
    };
    ```
  </Step>

  <Step title="Provider">
    Wrap your layout with the `TurnkeyProvider` component, and import styles from sdk-react.

    ```tsx src/app/layout.tsx
    import "./globals.css";
    import { TurnkeyProvider } from "@turnkey/sdk-react";
    import "@turnkey/sdk-react/styles"; // required to render auth component styles properly

    const config = {
      apiBaseUrl: "https://api.turnkey.com",
      defaultOrganizationId: process.env.NEXT_PUBLIC_ORGANIZATION_ID!,
    };

    export default function RootLayout({ children }: { children: React.ReactNode }) {
      return (
        <html lang="en">
          <body>
            <TurnkeyProvider config={config}>
            {children}
            </TurnkeyProvider>
          </body>
        </html>
      );
    }
    ```

    <Info>
      **React 19 Users**

      `@turnkey/sdk-react` is built with React 18. If you're using React 19 you'll find a type mismatch on the children type.

      To fix this, you can use the `@ts-ignore` directive to suppress the error.

      src/app/layout.tsx

      ```
      <TurnkeyProvider config={config}>  {/* @ts-ignore */}  {children}</TurnkeyProvider>
      ```

      We're actively working towards React 19 compatibility.
    </Info>
  </Step>
</Steps>

## Authenticate

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/img/quickstart/auth-component.png" alt="Auth Component" />
</Frame>

The auth component contains the UI and logic to handle the authentication flow.

<Steps>
  <Step title="Configure">
    For simplicity, this app will only support email authentication. We have other guides on additional authentication methods. Additionally, you can customize the order in which the auth methods are displayed.

    ```tsx src/app/page.tsx
    "use client";

    export default function Home() {
      // The auth methods to display in the UI
      const config = {
        authConfig: {
          emailEnabled: true,
          // Set the rest to false to disable them
          passkeyEnabled: false,
          phoneEnabled: false,
          appleEnabled: false,
          facebookEnabled: false,
          googleEnabled: false,
          walletEnabled: false,
        },
        // The order of the auth methods to display in the UI
        configOrder: ["email" /* "passkey", "phone", "socials" */],
      };

      return <div></div>;
    }
    ```

    <Accordion title="Auth Config Options">
      ```
      type AuthConfig = {
        emailEnabled: boolean;
        passkeyEnabled: boolean;
        phoneEnabled: boolean;
        appleEnabled: boolean;
        googleEnabled: boolean;
        facebookEnabled: boolean;
        walletEnabled: boolean;
      };
      ```
    </Accordion>
  </Step>

  <Step title="Import">
    Import the auth component into your app and pass in the config object.

    ```tsx src/app/page.tsx
    "use client";

    import { Auth } from "@turnkey/sdk-react";

    export default function Home() {
      const config = {
        authConfig: {
          emailEnabled: true,
          passkeyEnabled: false,
          phoneEnabled: false,
          appleEnabled: false,
          facebookEnabled: false,
          googleEnabled: false,
          walletEnabled: false,
        },
        configOrder: ["email"],
      };

      return (
        <div>
          <Auth {...config} />
        </div>
      );
    }
    ```
  </Step>

  <Step title="Handlers">
    Define two functions to handle the "success" and "error" states. Initially, the `onError` function will set an `errorMessage` state variable which will be used to display an error message to the user. The `onAuthSuccess` function will route the user to the dashboard after successful authentication.

    A new [sub-organization](/concepts/sub-organizations) and [wallet](/concepts/wallets) is created for each new user during the authentication flow.

    ```tsx src/app/page.tsx
    "use client";

    import { useState } from "react";
    import { Auth } from "@turnkey/sdk-react";

    export default function Home() {
      const [errorMessage, setErrorMessage] = useState("");
      const router = useRouter();

      const onAuthSuccess = async () => {
        // We'll add the dashboard route in the next step
        router.push("/dashboard");
      };

      const onError = (errorMessage: string) => {
        setErrorMessage(errorMessage);
      };

      // Add the handlers to the config object
      const config = {
        // ...
        onAuthSuccess: onAuthSuccess,
        onError: onError,
      };

      return (
        <div>
          <Auth {...config} />
        </div>
      );
    }
    ```
  </Step>

  <Step title="Dashboard: User Session">
    Add a dashboard route to the app where the user will be able to view their account and sign messages.

    ```tsx src/app/dashboard/page.tsx
    export default function Dashboard() {
      return <div>Dashboard</div>;
    }
    ```

    Since the app is wrapped with the `TurnkeyProvider` component, the `useTurnkey` hook is available to all child components. Calling `turnkey.getSession()` will return the current user's session information from local storage.

    Add a state variable to store the user:

    ```tsx src/app/dashboard/page.tsx
    import { useState, useEffect } from "react";
    import { useTurnkey } from "@turnkey/sdk-react";
    import { Session } from "@turnkey/sdk-types";

    export default function Dashboard() {
      const { turnkey } = useTurnkey();
      const [session, setSession] = useState<Session | null>(null);

      useEffect(() => {
        if (turnkey) {
    			turnkey.getSession().then((session) => {
    				setSession(session ?? null);
    			});
        }
      }, [turnkey]);

      return <div>Dashboard</div>;
    }
    ```

    #### User Session

    ```ts
    export type Session = {
      sessionType: SessionType;
      userId: string;
      organizationId: string;
      expiry: number; // Unix timestamp representing the expiry of the session set by the server
      token: string;  // publicKey used to verify stamped requests (lives in IndexedDB); can temporarily be a read bearer token
    };
    ```
  </Step>
</Steps>

## Sign Message

Turnkey supports signing arbitrary messages with the [`signRawPayload`](/api-reference/signing/sign-raw-payload) method.

The `signRawPayload` method requires these parameters:

* `payload`: The raw unsigned payload to sign
* `signWith`: The signing address (wallet account, private key address, or private key ID)
* `encoding`: The message encoding format
* `hashFunction`: The selected hash algorithm

<Steps>
  <Step title="The Payload">
    For simplicity, a human readable string, `message`, will be the payload to sign. Add a state variable to store the message and an input field to allow the user to enter the message:

    ```tsx src/app/dashboard/page.tsx
    import { useState, useEffect } from "react";

    export default function Dashboard() {
    //...

    const [message, setMessage] = useState("");

    //...

    return (
      <input
        type="text"
        value={message}
        onChange={(e) => setMessage(e.target.value)}
        placeholder="Enter message to sign"
        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
      />
    );
    }
    ```
  </Step>

  <Step title="The Signer">
    Signing messages requires a signer e.g. a Turnkey wallet address to sign with and a payload or message to sign. A new wallet is created for each user during the authentication flow.

    Create a function called `getSignWith`, to get the user's wallet account address which will be used to sign the message.

    Use the `getSession` method from the `useTurnkey` hook to get the user's read-write session:

    ```tsx src/app/dashboard/page.tsx
    import { useState, useEffect } from "react";
    import { useTurnkey } from "@turnkey/sdk-react";
    import { Session } from "@turnkey/sdk-types";

    export default function Dashboard() {
      const { turnkey, indexedDbClient } = useTurnkey();
      const [session, setSession] = useState<Session | null>(null);

      const client = indexedDbClient;

      if (session) {
          // The user's sub-organization id
          const organizationId = session?.organizationId;

          // Get the user's wallets
          const wallets = await client?.getWallets({
            organizationId,
          });

          // Get the first wallet of the user
          const walletId = wallets?.wallets[0].walletId ?? '';

          // Use the `walletId` to get the accounts associated with the wallet
          const accounts = await client?.getWalletAccounts({
            organizationId,
            walletId,
          });

          // find an Ethereum account
          const matchingAccount = accounts?.accounts.find(
            (account) => account.addressFormat === 'ADDRESS_FORMAT_ETHEREUM'
          );

          const signWith = matchingAccount?.address ?? '';

          console.log('signWith:', signWith);

          return signWith;
          
        } else {
          // log out and clear session
        }

      useEffect(/* ... */*/);

      return (/* <div>...</div> */*/);
    }
    ```
  </Step>

  <Step title="The Signing Function">
    Create a function called `signMessage`. This function will:

    * Get the user's wallet account for signing the message
    * Compute the keccak256 hash of the message
    * Call the `signRawPayload` method

    Note: To compute the `keccak256` hash of the message, this example uses the `hashMessage` function from `viem`. However, any other hashing library can be used.

    ```tsx
    const signMessage = async () => {
        try {
          const payload = hashMessage(message);
          const signWith = await getSignWith();
          if (!signWith) {
            throw new Error('Missing signWith value');
          }

          const signature = await client?.signRawPayload({
            payload,
            signWith,
            // The message encoding format
            encoding: 'PAYLOAD_ENCODING_TEXT_UTF8',
            // The hash function used to hash the message
            hashFunction: 'HASH_FUNCTION_KECCAK256',
          });

          if (signature?.r && signature?.s && signature?.v) {
            const fullSignature = `0x${signature.v}${signature.r}${signature.s}`;
            setSignature(fullSignature);
          } else {
            setSignature(null);
            console.warn('Incomplete signature components');
          }
        } catch (err) {
          console.error('Signing failed:', err);
          setSignature('Error signing message');
        }
      };
    ```
  </Step>

  <Step title="Display">
    Add a button to the UI to trigger the `signMessage` function.

    ```tsx src/app/dashboard/page.tsx
    import { useState, useEffect } from "react";
    import { useTurnkey } from "@turnkey/sdk-react";
    import { hashMessage } from "viem";

    export default function Dashboard() {
      //...

      const [message, setMessage] = useState("");

      const signMessage = async () => {
        try {
          const payload = hashMessage(message);
          const signWith = await getSignWith();
          if (!signWith) {
            throw new Error('Missing signWith value');
          }

          const signature = await client?.signRawPayload({
            payload,
            signWith,
            // The message encoding format
            encoding: 'PAYLOAD_ENCODING_TEXT_UTF8',
            // The hash function used to hash the message
            hashFunction: 'HASH_FUNCTION_KECCAK256',
          });

          if (signature?.r && signature?.s && signature?.v) {
            const fullSignature = `0x${signature.v}${signature.r}${signature.s}`;
            setSignature(fullSignature);
          } else {
            setSignature(null);
            console.warn('Incomplete signature components');
          }
        } catch (err) {
          console.error('Signing failed:', err);
          setSignature('Error signing message');
        }
      };

      return (
        <div className="max-w-2xl mx-auto mt-20 p-8 bg-white rounded-xl shadow-lg space-y-6">
            <h2 className="text-2xl font-bold text-gray-800">Sign a Message</h2>

            <input
              type="text"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              placeholder="Enter message to sign"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
            />

            <button
              onClick={signMessage}
              className="w-full bg-gray-600 hover:bg-gray-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors"
            >
              Sign Message
            </button>

            {signature && (
              <div className="bg-gray-100 p-4 rounded-lg border border-gray-300">
                <h3 className="text-lg font-medium text-gray-700 mb-2">
                  Signature
                </h3>
                <code className="block text-sm text-gray-800 break-words">
                  {signature}
                </code>
              </div>
            )}
          </div>
      );
    }
    ```
  </Step>

  <Step title="Handle logout">
    Add a logout button that triggers `handleLogout` and clears the indexedDb stored key and session.

    ```tsx src/app/dashboard/page.tsx
    import { useState, useEffect } from "react";
    import { useTurnkey } from "@turnkey/sdk-react";
    import { hashMessage } from "viem";

    export default function Dashboard() {
      //...

       const handleLogout = async () => {
        try {
          turnkey?.logout();
          indexedDbClient?.clear();
          setSession(null);
          setSignature(null);
          setMessage('');
        
          router.push('/'); // Redirect to the first page
          window.location.href = "/";
        
        } catch (err) {
          console.error('Logout failed:', err);
        }
      };

      //...

      return (
        //...
         {/* Logout Button */}
          <button
            onClick={handleLogout}
            className="absolute top-6 right-6 bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-lg shadow transition-all"
          >
            Logout
          </button>
        //...
      );
    }
    ```
  </Step>
</Steps>

## Recap

In this quickstart guide, you've learned how to:

1. Set up Turnkey's SDK in a Next.js application
2. Configure authentication with email sign-in
3. Create a protected dashboard route
4. Implement message signing functionality using a user's Turnkey wallet
5. Handle user sessions and wallet interactions

<Accordion title="Complete Code">
  ```tsx src/app/page.tsx
  "use client";

  import { useState } from "react";
  import { Auth } from "@turnkey/sdk-react";
  import { useRouter } from "next/navigation";

  export default function Home() {
    const [errorMessage, setErrorMessage] = useState("");
    const router = useRouter();

    const onAuthSuccess = async () => {
      router.push("/dashboard");
    };

    const onError = (errorMessage: string) => {
      setErrorMessage(errorMessage);
    };

    const config = {
      authConfig: {
        emailEnabled: true,
        passkeyEnabled: false,
        phoneEnabled: false,
        appleEnabled: false,
        facebookEnabled: false,
        googleEnabled: false,
        walletEnabled: false,
      },
      configOrder: ["email"],
      onAuthSuccess,
      onError,
    };

    return (
      <div>
        <Auth {...config} />
      </div>
    );
  }
  ```

  ```tsx src/app/dashboard/page.tsx
  'use client';

  import { useState, useEffect } from 'react';
  import { useTurnkey } from '@turnkey/sdk-react';
  import { hashMessage } from 'viem';
  import { useRouter } from 'next/navigation';
  import { Session } from "@turnkey/sdk-types";

  export default function Dashboard() {
    const { turnkey, indexedDbClient } = useTurnkey();
    const [session, setSession] = useState<Session | null>(null);
    const [message, setMessage] = useState('');
    const [signature, setSignature] = useState<string | null>(null);

    const client = indexedDbClient;
    const router = useRouter();

    const handleLogout = async () => {
      try {
        turnkey?.logout();
        indexedDbClient?.clear();
        setSession(null);
        setSignature(null);
        setMessage('');
      
        router.push('/'); // Redirect to the first page
        window.location.href = "/";
      
      } catch (err) {
        console.error('Logout failed:', err);
      }
    };

    const getSignWith = async () => {
      const session = await turnkey?.getSession();

      if (session) {
        // The user's sub-organization id
        const organizationId = session?.organizationId;

        // Get the user's wallets
        const wallets = await client?.getWallets({
          organizationId,
        });

        // Get the first wallet of the user
        const walletId = wallets?.wallets[0].walletId ?? '';

        // Use the `walletId` to get the accounts associated with the wallet
        const accounts = await client?.getWalletAccounts({
          organizationId,
          walletId,
        });

        // find an Ethereum account
        const matchingAccount = accounts?.accounts.find(
          (account) => account.addressFormat === 'ADDRESS_FORMAT_ETHEREUM'
        );

        const signWith = matchingAccount?.address ?? '';

        console.log('signWith:', signWith);

        return signWith;
      } else {
        await handleLogout();
      }
    };

    const signMessage = async () => {
      try {
        const payload = hashMessage(message);
        const signWith = await getSignWith();
        if (!signWith) {
          throw new Error('Missing signWith value');
        }

        const signature = await client?.signRawPayload({
          payload,
          signWith,
          // The message encoding format
          encoding: 'PAYLOAD_ENCODING_TEXT_UTF8',
          // The hash function used to hash the message
          hashFunction: 'HASH_FUNCTION_KECCAK256',
        });

        if (signature?.r && signature?.s && signature?.v) {
          const fullSignature = `0x${signature.v}${signature.r}${signature.s}`;
          setSignature(fullSignature);
        } else {
          setSignature(null);
          console.warn('Incomplete signature components');
        }
      } catch (err) {
        console.error('Signing failed:', err);
        setSignature('Error signing message');
      }
    };

    useEffect(() => {
      if (turnkey) {
  			turnkey.getSession().then((session) => {
  				setSession(session ?? null);
  			});
      }
    }, [turnkey]);

    return (
      <div className="min-h-screen bg-gray-50 p-6 relative">
        {/* Logout Button */}
        <button
          onClick={handleLogout}
          className="absolute top-6 right-6 bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-lg shadow transition-all"
        >
          Logout
        </button>

        {/* Content */}
        <div className="max-w-2xl mx-auto mt-20 p-8 bg-white rounded-xl shadow-lg space-y-6">
          <h2 className="text-2xl font-bold text-gray-800">Sign a Message</h2>

          <input
            type="text"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            placeholder="Enter message to sign"
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
          />

          <button
            onClick={signMessage}
            className="w-full bg-gray-600 hover:bg-gray-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors"
          >
            Sign Message
          </button>

          {signature && (
            <div className="bg-gray-100 p-4 rounded-lg border border-gray-300">
              <h3 className="text-lg font-medium text-gray-700 mb-2">
                Signature
              </h3>
              <code className="block text-sm text-gray-800 break-words">
                {signature}
              </code>
            </div>
          )}
        </div>
      </div>
    );
  }
  ```
</Accordion>

## Next Steps

Learn more about integrating Embedded Wallets and our powerful features [here](/embedded-wallets/overview).


# Examples
Source: https://docs.turnkey.com/getting-started/examples

Turnkey infrastructure is flexible by default. We intentionally prioritize low-level primitives in our product to avoid creating blockers for developers building new kinds of applications on Turnkey.

That said, we have built out several example services and applications to help illustrate the types of functionality that Turnkey can enable.

## Code examples

| Example                                                                                              | Description                                                                                                                                                                              |
| ---------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| [`demo-consumer-wallet`](https://github.com/tkhq/demo-consumer-wallet)                               | A minimal consumer wallet app powered by Turnkey and WalletConnect                                                                                                                       |
| [`demo-embedded-wallet`](https://github.com/tkhq/demo-embedded-wallet)                               | A minimal consumer wallet app powered by Turnkey and passkeys                                                                                                                            |
| [`demo-ethers-passkeys`](https://github.com/tkhq/demo-ethers-passkeys)                               | A NextJS app that demonstrates how to use `@turnkey/ethers` to build a passkey-powered application                                                                                       |
| [`demo-viem-passkeys`](https://github.com/tkhq/demo-viem-passkeys)                                   | A NextJS app that demonstrates how to use `@turnkey/viem` to build a passkey-powered application                                                                                         |
| [`react-native-demo-wallet`](https://github.com/tkhq/react-native-demo-wallet)                       | A React Native app that demonstrates how to use the Turnkey's JavaScript packages in a mobile environment to authenticate users, create wallets, export wallets, sign messages, and more |
| [`flutter-demo-app`](https://github.com/tkhq/dart-sdk/tree/main/examples/flutter-demo-app)           | A Flutter app that demonstrates how to use the Turnkey's Flutter packages to authenticate users, create wallets, export wallets, sign messages, and more                                 |
| [`deployer`](https://github.com/tkhq/sdk/tree/main/examples/deployer/)                               | Compile and deploy a smart contract                                                                                                                                                      |
| [`rebalancer`](https://github.com/tkhq/sdk/tree/main/examples/rebalancer/)                           | A demo application which showcases an example of how to use Turnkey for managing multiple types of keys & users                                                                          |
| [`sweeper`](https://github.com/tkhq/sdk/tree/main/examples/sweeper/)                                 | Sweep funds from one address to a different address                                                                                                                                      |
| [`trading-runner`](https://github.com/tkhq/sdk/tree/main/examples/trading-runner/)                   | A sample application demonstrating a trading operation, using various private keys, users, and policies, powered by Uniswap                                                              |
| [`wallet-export`](https://github.com/tkhq/sdk/tree/main/examples/wallet-export/)                     | A NextJS app that demonstrates how to use `@turnkey/iframe-stamper` to export a wallet as a mnemonic                                                                                     |
| [`with-bitcoin`](https://github.com/tkhq/sdk/tree/main/examples/with-bitcoin)                        | Construct, sign, and broadcast a Bitcoin transaction using Turnkey                                                                                                                       |
| [`with-ethers`](https://github.com/tkhq/sdk/tree/main/examples/with-ethers/)                         | Create a new Ethereum address, then sign and broadcast a transaction using the Ethers signer with Infura                                                                                 |
| [`with-viem`](https://github.com/tkhq/sdk/tree/main/examples/with-viem/)                             | Sign and broadcast a transaction using the Turnkey Custom Account and Infura                                                                                                             |
| [`with-cosmjs`](https://github.com/tkhq/sdk/tree/main/examples/with-cosmjs/)                         | Create a new Cosmos address, then sign and broadcast a transaction on Celestia testnet using the CosmJS signer                                                                           |
| [`with-eip-1193-provider`](https://github.com/tkhq/sdk/tree/main/examples/with-eip-1193-provider/)   | Example using a Turnkey-compatible Ethereum provider that adheres to the EIP-1193 standards                                                                                              |
| [`with-solana`](https://github.com/tkhq/sdk/tree/main/examples/with-solana/)                         | Create a new Solana address, then sign and broadcast a transaction on Solana’s devnet. Also includes SPL token creation + transfer, and Jupiter swaps                                    |
| [`with-gnosis`](https://github.com/tkhq/sdk/tree/main/examples/with-gnosis/)                         | Create new Ethereum addresses, configure a 3/3 Gnosis safe, and create + execute a transaction from it                                                                                   |
| [`with-uniswap`](https://github.com/tkhq/sdk/tree/main/examples/with-uniswap/)                       | Sign and broadcast a Uniswap v3 trade using the Ethers signer with Infura                                                                                                                |
| [`with-nonce-manager`](https://github.com/tkhq/sdk/tree/main/examples/with-nonce-manager/)           | Create a new Ethereum address, then sign and broadcast multiple transactions in a sequential or optimistic manner                                                                        |
| [`with-offline`](https://github.com/tkhq/sdk/tree/main/examples/with-offline/)                       | Sign a Turnkey request in offline context                                                                                                                                                |
| [`with-federated-passkeys`](https://github.com/tkhq/sdk/tree/main/examples/with-federated-passkeys/) | A NextJS app that demonstrates how to use Turnkey to build a federated, webauthn powered authentication flow                                                                             |
| [`delegated-access`](https://github.com/tkhq/sdk/tree/main/examples/delegated-access/)               | Create a Sub-Organization with a typical delegated access setup and validate the applied policy for the delegated account.                                                               |

## Demos built with Turnkey

### Demo embedded wallet ([code](https://github.com/tkhq/demo-embedded-wallet))

A comprehensive demo showcasing how to build an embedded wallet using Turnkey. This demo uses the [`@turnkey/sdk-browser`](https://www.npmjs.com/package/@turnkey/sdk-browser), [`@turnkey/sdk-react`](https://www.npmjs.com/package/@turnkey/sdk-react) and [`@turnkey/sdk-server`](https://www.npmjs.com/package/@turnkey/sdk-server) packages and includes features such as:

* User authentication with passkeys, email auth, and OAuth
* Creating new wallets and wallet accounts
* Sending and receiving funds
* Importing/Exporting a wallet
* Adding a credential to the wallet

<CardGroup cols={2}>
  <Frame>
    ![demo embedded wallet login view](https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/demo-embedded-wallet.png)
  </Frame>

  <Frame>
    ![demo embedded wallet dashboard view](https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/demo-embedded-wallet-ui.png)
  </Frame>
</CardGroup>

See [https://github.com/tkhq/demo-embedded-wallet](https://github.com/tkhq/demo-embedded-wallet) for the code.

### Demo consumer wallet ([code](https://github.com/tkhq/demo-consumer-wallet))

A minimal consumer wallet app powered by Turnkey. Behind the scenes, it uses [`@turnkey/ethers`](https://www.npmjs.com/package/@turnkey/ethers) for signing and WalletConnect (v1) for accessing dapps.

<Frame>
  <video src="https://github.com/tkhq/demo-consumer-wallet/assets/127255904/2c3409df-2d7c-4ec3-9aa8-e2944a0b0e0a" width="100%" height="420" controls />
</Frame>

See [https://github.com/tkhq/demo-consumer-wallet](https://github.com/tkhq/demo-consumer-wallet) for the code.

### Demo embedded wallet ([code](https://github.com/tkhq/demo-embedded-wallet), [live link](https://wallet.tx.xyz))

A wallet application showing how users can register and authenticate using passkeys. This demo uses the Turnkey API to create a new [Turnkey Sub-Organization](/concepts/sub-organizations) for each user, create a testnet Ethereum address and send a transaction on Sepolia (ETH testnet).

<Frame>
  ![demo embedded wallet screenshot](https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/demo-embedded-wallet.png)
</Frame>

See [https://wallet.tx.xyz](https://wallet.tx.xyz) (and [https://github.com/tkhq/demo-embedded-wallet](https://github.com/tkhq/demo-embedded-wallet) for the code).

### Demo ethers passkeys ([code](https://github.com/tkhq/demo-ethers-passkeys))

A simple application demonstrating how to create sub-organizations, create private keys, and sign with the [`@turnkey/ethers`](https://github.com/tkhq/sdk/tree/main/packages/ethers) signer, using passkeys.

<Frame>
  ![ethers ui screenshot](https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/ethers-ui-screenshot.png)
</Frame>

See [https://github.com/tkhq/demo-ethers-passkeys](https://github.com/tkhq/demo-ethers-passkeys) for the code.

### Demo viem passkeys ([code](https://github.com/tkhq/demo-viem-passkeys))

A similar, simple application demonstrating how to create sub-organizations, create private keys, and sign with the [`@turnkey/viem`](https://github.com/tkhq/sdk/tree/main/packages/viem) signer, using passkeys.

<Frame>
  ![viem ui screenshot](https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/viem-ui-screenshot.png)
</Frame>

See [https://github.com/tkhq/demo-viem-passkeys](https://github.com/tkhq/demo-viem-passkeys) for the code.

### Demo viem passkeys with Gelato relay ([code](https://github.com/gelatodigital/gelato-turnkey-passkeys-relay))

This example demonstrates how to leverage Turnkey’s secure key management and Gelato's battle-tested relay infrastructure to enable seamless, sponsored interactions with meta-transactions using the [`@turnkey/viem`](https://github.com/tkhq/sdk/tree/main/packages/viem) signer and [`@gelatonetwork/relay-sdk-viem`](https://github.com/gelatodigital/relay-sdk-viem).

<Frame>
  ![gelato turnkey screenshot](https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/gelato_turnkey.png)
</Frame>

#### How Infinex leverages Turnkey and Gelato

Infinex, a platform designed to unify the decentralized ecosystem and applications under a single UX layer, eliminates the complexities of navigating fragmented crypto protocols. By integrating **Turnkey** and **Gelato**, Infinex delivers a seamless, secure, and cost-efficient experience for decentralized finance users.

* **Secure Key Management with Turnkey**: Infinex ensures private keys are securely managed within Turnkey’s infrastructure, removing the need for traditional wallet pop-ups. This approach streamlines authentication through passkeys, offering a frictionless and secure user experience.
* **Gasless Transactions with Gelato**: Leveraging Gelato’s Relay (ERC-2771), Infinex enables fully **sponsored transactions**, allowing users to interact with decentralized applications without ever paying gas fees. This enhances accessibility and usability, ensuring that users can participate without holding or managing native blockchain tokens for fees.

The synergy between Turnkey and Gelato allows Infinex to offer an intuitive, cost-free user experience while maintaining the highest standards of security and scalability.

### React native demo app ([code](https://github.com/tkhq/react-native-demo-wallet))

A React Native app that demonstrates how to use the Turnkey's JavaScript packages in a mobile environment to authenticate users, create wallets, export wallets, sign messages, and more

<Frame>
  <video src="https://github.com/tkhq/react-native-demo-wallet/raw/refs/heads/main/assets/videos/demo_video.mov" width="100%" height="260" controls />
</Frame>

See [https://github.com/tkhq/react-native-demo-wallet](https://github.com/tkhq/react-native-demo-wallet) for the code.

### Flutter demo app ([code](https://github.com/tkhq/dart-sdk/tree/main/examples/flutter-demo-app))

A Flutter app that demonstrates how to use the Turnkey's Flutter packages to authenticate users, create wallets, export wallets, sign messages, and more

<Frame>
  <video src="https://github.com/tkhq/dart-sdk/raw/refs/heads/main/examples/flutter-demo-app/assets/videos/flutter-demo.mov" width="100%" height="260" controls />
</Frame>

See [https://github.com/tkhq/dart-sdk/tree/main/examples/flutter-demo-app](https://github.com/tkhq/dart-sdk/tree/main/examples/flutter-demo-app) for the code

### Multichain signing (Adamik demo)

This [demo](https://turnkey-multichain.adamik.io/) shows how the Adamik API has integrated Turnkey to securely sign transactions across 60+ blockchains.


# Account setup
Source: https://docs.turnkey.com/getting-started/quickstart

Before diving into the code, let's set up your organization and conjure up an API keypair to unlock the full potential of Turnkey!

## Create an account

Navigate to the [Turnkey Dashboard](https://app.turnkey.com/dashboard/auth/initial) to create an account and setup your organization:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/img/quickstart/create_organization.png" />
</Frame>

## Get your organization ID

Once logged in, open the user dropdown at the top right. Your Organization ID is listed there. Copy it for use in your code or environment variables.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/img/quickstart/org-id.png" />
</Frame>

## Create an API key

The API keypair is used to authenticate requests to Turnkey. We'll create one now.

<Steps>
  <Step title="Navigate to the User Details page.">
    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/img/quickstart/user-details.png" />
    </Frame>
  </Step>

  <Step title="Click &#x22;Create an API key&#x22;">
    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/img/quickstart/create-api-key.png" />
    </Frame>
  </Step>

  <Step title="Choose a key generation method">
    For this guide, we'll use the in-browser method.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/img/quickstart/generate-api-key.png" />
    </Frame>

    Optionally, you may also generate keys using the [Turnkey CLI](/sdks/cli).
  </Step>

  <Step title="Name your keypair">
    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/img/quickstart/name-api-key.png" />
    </Frame>
  </Step>

  <Step title="Approve & Create">
    You'll be prompted to authenticate with the authenticator setup during account creation. Save the private key in a secure location — **it won't be visible after this step**.

    **Important**: Both the public and private keys are required for signing requests to the Turnkey API. Keep these keys secure and out of reach of end-users.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/img/quickstart/approve-create-api-key.png" />
    </Frame>
  </Step>

  <Step title="API Key Created">
    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/getting-started/img/quickstart/api-key-created.png" />
    </Frame>
  </Step>
</Steps>

## Next steps

Now that you've created an organization and API keypair, you're ready to start developing with Turnkey!

<CardGroup>
  <Card title="Embedded wallet" href="/getting-started/embedded-wallet-quickstart" icon="file-lines" iconType="solid" horizontal>
    Build embedded wallets with Turnkey
  </Card>

  <Card title="Transaction automation" href="/getting-started/signing-automation-quickstart" icon="file-lines" iconType="solid" horizontal>
    Automate signing with Turnkey
  </Card>
</CardGroup>


# Transaction automation quickstart
Source: https://docs.turnkey.com/getting-started/signing-automation-quickstart

Turnkey's transaction automation enables you to build secure, programmatic signing workflows directly into your applications. With features like customizable policies, multi-party approvals, and support for any blockchain, you can confidently automate complex signing operations while maintaining enterprise-grade security.

## Prerequisites

This guide assumes you've completed the steps to create an account, organization, and API keypair as described in the [account setup](/getting-started/quickstart) section.

## Installation

Install the Turnkey CLI to get started:

```bash
brew install tkhq/tap/turnkey
```

We use Homebrew for a quick installation process. For a more secure installation that requires no trust in external parties, see our [CLI repository](https://github.com/tkhq/tkcli).

## Transaction signing

<Steps>
  <Step title="Setup">
    Set the `ORGANIZATION_ID` environment variable to your organization ID. This will be used to identify your organization in the API requests.

    ```bash
    export ORGANIZATION_ID=<YOUR_ORGANIZATION_ID>
    ```

    An API keypair is required to authenticate requests to the Turnkey API.

    Create a new key named `quickstart` using the turnkey CLI:

    ```bash
    turnkey generate api-key --organization $ORGANIZATION_ID --key-name quickstart
    ```

    You'll see output like this:

    ```json
    {
      "privateKeyFile": "/home/user/.config/turnkey/keys/quickstart.private",
      "publicKey": "03...72",
      "publicKeyFile": "/home/user/.config/turnkey/keys/quickstart.public"
    }
    ```

    Follow the instructions in this [guide](/sdks/cli#add-your-public-api-key) to add your new public API key to your organization via the dashboard.
  </Step>

  <Step title="Create wallet">
    Wallets are collections of cryptographic key pairs typically used for sending and receiving digital assets. To create one, we need to provide a name:

    ```bash
    turnkey wallets create --name default --key-name quickstart
    ```

    <Note>
      This command requires a key named `quickstart` to exist in your configuration. This key should have been created during the [Quickstart](/getting-started/quickstart) guide. If you haven't created it yet, please complete the initial setup steps first.

      If the key doesn't exist, you'll see an error like this:

      ```json
      {
        "error": "failed to load key bytes \"quickstart\": failed to read from \"/.config/turnkey/keys/quickstart.private\": open /.config/turnkey/keys/quickstart.private: no such file or directory"
      }
      ```

      If the key exists but has not been added to your organization, you'll see an error like this:

      ```json
      {
        "error": "failed to associate the API key with an organization; please manually specify the organization ID"
      }
      ```
    </Note>
  </Step>

  <Step title="Create Ethereum account">
    To create a cryptographic key pair on our new wallet, we need to pass our desired address format:

    ```bash
    turnkey wallets accounts create --wallet default --address-format ADDRESS_FORMAT_ETHEREUM --key-name quickstart
    ```

    This command will produce an Ethereum address (e.g. `0x08cb1216C95149DF66978b574E484869512CE2bF`) that we'll need to sign a transaction. You can see your new Wallet account with:

    ```bash
    turnkey wallets accounts list --wallet default --key-name quickstart
    ```
  </Step>

  <Step title="Sign a transaction">
    Now you can sign an Ethereum transaction with this new address with our [`sign_transaction` endpoint](/api-reference/signing/sign-transaction). Make sure to replace the `unsignedTransaction` below with your own. You can use our [simple transaction generator](https://build.tx.xyz) if you need a quick transaction for testing:

    ```bash
    turnkey request --path /public/v1/submit/sign_transaction --body '{
        "timestampMs": "'"$(date +%s)"'000",
        "type": "ACTIVITY_TYPE_SIGN_TRANSACTION_V2",
        "organizationId": "'"$ORGANIZATION_ID"'",
        "parameters": {
          "type": "TRANSACTION_TYPE_ETHEREUM",
          "signWith": "<Your Ethereum address>",
          "unsignedTransaction": "<Your Transaction>"
        }
    }' --key-name quickstart
    ```

    If you'd like to broadcast your transaction, you can easily do so
    via [Etherscan](https://etherscan.io/pushTx).
  </Step>
</Steps>

## Next steps

Learn more about integrating transaction automation and our powerful
features [here](/signing-automation/overview).


# Overview
Source: https://docs.turnkey.com/home

Welcome to Turnkey!

export const SquareCard = ({icon, label, className = "", ...props}) => {
  return <a href={props.href} className=" not-prose font-normal group ring-0 ring-transparent overflow-hidden cursor-pointer ">
      <div className={`flex flex-col items-center ${className}`} {...props}>
        <div className="flex items-center p-5 justify-center rounded-lg border border-zinc-950/10 dark:border-white/10 bg-white dark:bg-transparent">
          {icon}
        </div>
        <span className="mt-2 text-sm text-zinc-950/80 dark:text-white/80 font-medium capitalize group-hover:border-zinc-950/10 group-hover:text-primary">
          {label}
        </span>
      </div>
    </a>;
};

export const Logo = ({id, className = "", fill = "", ...props}) => {
  if (id === "react") {
    return <svg xmlns="http://www.w3.org/2000/svg" viewBox="-11.5 -10.23174 23 20.46348" className={className} {...props}>
        <title>React Logo</title>
        <circle cx="0" cy="0" r="2.05" fill="#61dafb" />
        <g stroke="#61dafb" strokeWidth="1" fill="none">
          <ellipse rx="11" ry="4.2" />
          <ellipse rx="11" ry="4.2" transform="rotate(60)" />
          <ellipse rx="11" ry="4.2" transform="rotate(120)" />
        </g>
      </svg>;
  }
  if (id === "react-native") {
    return <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -12.5 256 256" className={className} {...props}>
        <title>React Native Logo</title>
        <path fill="#4e4e4e" d="M121.309004,84.6732585 C123.402504,81.5874152 125.694292,81.1950171 127.553451,81.1950171 C129.41261,81.1950171 132.509843,81.5874152 134.604162,84.6732585 C151.106348,107.339593 178.345607,152.492 198.439108,185.798721 C211.542532,207.519499 221.6069,224.201947 223.671721,226.324944 C231.422996,234.294992 242.053551,229.327949 248.230809,220.287799 C254.312201,211.387762 256.000111,205.138399 256.000111,198.471155 C256.000111,193.930186 167.895315,30.0714244 159.022317,16.4322117 C150.48936,3.31359639 147.710044,0 133.105527,0 L122.176721,0 C107.615631,0 105.511479,3.31359639 96.9777022,16.4322117 C88.1055238,30.0714244 0.0001105152,193.930186 0.0001105152,198.471155 C0.0001105152,205.138399 1.68839227,211.387762 7.76991495,220.287799 C13.9471241,229.327949 24.5775965,234.294992 32.3286259,226.324944 C34.3936934,224.201947 44.4580605,207.519499 57.5616485,185.798721 C77.654822,152.492 104.806818,107.339593 121.309004,84.6732585 Z" />
      </svg>;
  }
  if (id === "android-kotlin") {
    return <svg xmlns="http://www.w3.org/2000/svg" viewBox="-147 -70 294 345" className={className} {...props}>
        <title>Android Kotlin Logo</title>
        <g fill="#a4c639">
          <use stroke="#FFF" strokeWidth="14.4" xlinkHref="#b" />
          <use xlinkHref="#a" transform="scale(-1,1)" />
          <g id="a" stroke="#FFF" strokeWidth="7.2">
            <rect rx="6.5" transform="rotate(29)" height="86" width="13" y="-86" x="14" />
            <rect id="c" rx="24" height="133" width="48" y="41" x="-143" />
            <use y="97" x="85" xlinkHref="#c" />
          </g>
          <g id="b">
            <ellipse cy="41" rx="91" ry="84" />
            <rect rx="22" height="182" width="182" y="20" x="-91" />
          </g>
        </g>
        <g stroke="#FFF" strokeWidth="7.2" fill="#FFF">
          <path d="m-95 44.5h190" />
          <circle cx="-42" r="4" />
          <circle cx="42" r="4" />
        </g>
      </svg>;
  }
  if (id === "ios-swift") {
    return <svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
        <title>iOS Swift Logo</title>
        <path d="M59.3867 16.4501C59.3832 15.8528 59.3766 15.2558 59.3601 14.6578C59.3253 13.357 59.2484 12.0444 59.0172 10.7575C58.7826 9.4506 58.3991 8.2354 57.7947 7.0482C57.2014 5.8823 56.4258 4.8154 55.5006 3.8902C54.5756 2.965 53.5087 2.1895 52.3423 1.5959C51.1561 0.9922 49.9407 0.6088 48.635 0.3742C47.3474 0.1423 46.0348 0.0659 44.733 0.0307C44.1353 0.0145 43.5382 0.0077 42.9407 0.004C42.2315 0 41.5218 0 40.8128 0H25.0912H18.5781C17.8684 0 17.1595 0 16.4505 0.0041C15.8528 0.0078 15.255 0.0146 14.6582 0.0308C14.3328 0.0396 14.0067 0.051 13.6804 0.0667C12.7016 0.1139 11.7213 0.2004 10.7561 0.3743C9.77684 0.5503 8.84824 0.8099 7.94484 1.1834C7.64374 1.3078 7.34534 1.445 7.04874 1.5959C6.17394 2.0411 5.35494 2.5886 4.61004 3.2248C4.36174 3.4369 4.12164 3.6588 3.89044 3.8901C2.96504 4.8153 2.18944 5.8822 1.59614 7.0481C0.991738 8.2353 0.608738 9.4505 0.373938 10.7574C0.142938 12.0443 0.0661381 13.3569 0.0311381 14.6577C0.0147381 15.2557 0.00783811 15.8527 0.00393811 16.45C-0.000561889 17.1594 3.81111e-05 17.8689 3.81111e-05 18.5781V28.26V40.8125C3.81111e-05 41.5224 -0.000661889 42.2312 0.00393811 42.9411C0.00783811 43.5384 0.0147381 44.1354 0.0311381 44.7324C0.0661381 46.0339 0.142838 47.3468 0.373938 48.6331C0.608738 49.9396 0.991738 51.1559 1.59614 52.3428C2.18944 53.509 2.96504 54.5756 3.89044 55.5004C4.81514 56.426 5.88234 57.2014 7.04884 57.7954C8.23514 58.3992 9.45044 58.7821 10.7564 59.0167C12.0432 59.2483 13.3568 59.3253 14.6583 59.3601C15.2551 59.376 15.8529 59.3831 16.4506 59.3865C17.1596 59.3916 17.8685 59.3909 18.5782 59.3909H40.8128C41.5218 59.3909 42.2315 59.3916 42.9406 59.3865C43.5381 59.3831 44.1352 59.376 44.7329 59.3601C46.0347 59.3253 47.3473 59.2482 48.6349 59.0167C49.9406 58.7821 51.156 58.3991 52.3422 57.7954C53.5086 57.2015 54.5755 56.426 55.5005 55.5004C56.4257 54.5755 57.2014 53.509 57.7946 52.3428C58.399 51.1559 58.7825 49.9397 59.0171 48.6331C59.2483 47.3468 59.3252 46.0339 59.36 44.7324C59.3764 44.1354 59.383 43.5385 59.3866 42.9411C59.3912 42.2312 59.3908 41.5224 59.3908 40.8125V18.5781C59.3909 17.8689 59.3912 17.1594 59.3867 16.4501Z" fill="#F05138" />
        <path d="M47.0605 36.6607C47.0591 36.6589 47.0578 36.6576 47.0563 36.6559C47.122 36.4323 47.1898 36.2101 47.2473 35.9809C49.7123 26.16 43.6962 14.549 33.5157 8.43555C37.977 14.4834 39.9496 21.8088 38.197 28.215C38.0407 28.7864 37.8528 29.3348 37.6451 29.8678C37.4197 29.7197 37.1357 29.5516 36.7543 29.3413C36.7543 29.3413 26.6274 23.0886 15.6515 12.0291C15.3635 11.7388 21.5043 20.8061 28.4734 28.169C25.19 26.3263 16.0396 19.6686 10.2468 14.3667C10.9585 15.5536 11.805 16.6965 12.7355 17.7968C17.573 23.9317 23.8817 31.5012 31.4398 37.3137C26.1294 40.5635 18.6257 40.8162 11.1546 37.3171C9.30673 36.4511 7.56953 35.4062 5.96143 34.219C9.12393 39.2775 13.9946 43.6419 19.9227 46.1898C26.9922 49.2279 34.0223 49.0219 39.2583 46.2396L39.2542 46.2456C39.2781 46.2305 39.3085 46.214 39.3333 46.1987C39.5483 46.0831 39.7617 45.9654 39.9704 45.8411C42.4861 44.5353 47.4551 43.2105 50.1222 48.3999C50.7754 49.6699 52.1634 42.9395 47.0605 36.6607Z" fill="white" />
      </svg>;
  }
  if (id === "unity") {
    return <svg width="326" height="368" viewBox="0 0 326 368" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
        <title>Unity Logo</title>
        <path d="M325.729 258.325V86.6778L177.07 0.854004V66.7544L235.308 100.471C237.607 102.003 237.607 105.069 235.308 105.835L166.342 145.682C164.043 147.214 161.744 146.448 160.212 145.682L91.2463 105.835C88.9475 105.069 88.9475 101.237 91.2463 100.471L149.484 66.7544V0.854004L0.0585938 86.6778V258.325L56.7636 225.375V157.942C56.7636 155.643 59.8287 154.111 61.3613 154.877L130.327 194.724C132.626 196.256 133.392 197.789 133.392 200.088V279.781C133.392 282.08 130.327 283.613 128.794 282.846L70.5567 249.13L13.8517 282.08L162.511 368.67L311.17 282.846L254.465 249.896L196.227 283.613C193.928 285.145 191.629 283.613 191.629 280.547V200.854C191.629 198.555 193.162 196.256 194.695 195.49L263.66 155.643C265.959 154.111 268.258 155.643 268.258 158.708V226.141L325.729 258.325Z" fill="#4C4C4C" />
        <path d="M162.511 368.67L311.17 282.846L254.465 249.896L196.227 283.613C193.928 285.145 191.629 283.613 191.629 280.547V200.854C191.629 198.555 193.162 196.256 194.695 195.49L263.66 155.643C265.959 154.111 268.258 155.643 268.258 158.708V226.141L324.963 259.092V86.6777L162.511 180.931L162.511 368.67Z" fill="black" />
        <path d="M177.07 0.854004V66.7544L235.308 100.471C237.607 102.003 237.607 105.069 235.308 105.835L166.342 145.682C164.043 147.214 161.744 146.448 160.212 145.682L91.2463 105.835C88.9475 105.069 88.9475 101.237 91.2463 100.471L149.484 66.7544V0.854004L0.0585938 86.6778L162.511 180.931L324.963 86.6777L177.07 0.854004Z" fill="#808080" />
        <path d="M129.561 283.613L71.323 249.896L14.618 282.846L163.277 368.67V180.931L0.0585938 86.6778V258.325L56.7636 225.375V157.942C56.7636 155.643 59.8287 154.111 61.3613 154.877L130.327 194.724C132.626 196.256 133.392 197.789 133.392 200.088V279.781C134.158 282.846 131.859 285.145 129.561 283.613Z" fill="#4C4C4C" />
      </svg>;
  }
  if (id === "flutter") {
    return <svg width="214" height="264" viewBox="0 0 214 264" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
  <title>Flutter Logo</title>
  <path d="M132.28 0.0900002L213.95 0L76.9301 136.95L41.2201 172.46L0.590088 131.78L132.28 0.0900002ZM131.52 122.37C132.58 120.97 134.53 121.66 136.01 121.48L213.88 121.5L142.91 192.4L102.07 151.81L131.52 122.37Z" fill="#44D1FD" />
  <path d="M61.3601 192.47L102.07 151.81L142.91 192.4L143.08 192.58L102.08 233.2L61.3601 192.47Z" fill="#1FBCFD" />
  <path d="M102.08 233.2L143.08 192.58L213.91 263.48C187.23 263.54 160.56 263.46 133.89 263.52C132.37 263.86 131.43 262.47 130.46 261.61L102.08 233.2Z" fill="#08589C" />
</svg>;
  }
  if (id === "rest-api") {
    return <svg width="609" height="447" viewBox="0 0 609 447" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
        <title>Rest API Logo</title>
        <path d="M47.2 104.2H80.8C90.4 104.2 96.8 105.8 100 109C103.2 112.2 104.8 120.2 104.8 129.8V145.8C104.8 150.6 104.8 155.4 106.4 160.2C106.4 161.8 108 165 108 169.8H146.4V165C143.2 163.4 141.6 160.2 140 155.4C140 152.2 138.4 147.4 138.4 139.4V128.2C138.4 117 136.8 107.4 133.6 102.6C130.4 96.2002 125.6 93.0002 117.6 89.8002C127.2 86.6002 133.6 81.8002 136.8 73.8002C140 65.8002 143.2 57.8002 143.2 49.8002C143.2 43.4002 141.6 37.0002 140 32.2002C138.4 27.4002 135.2 22.6002 132 17.8002C127.2 13.0002 122.4 8.20019 116 6.60019C109.6 3.40019 101.6 1.80017 90.4 1.80017H10.4V168.2H44V104.2H47.2ZM47.2 32.2002H85.6001C92.0001 32.2002 98.4001 33.8002 101.6 35.4002C108 38.6002 111.2 45.0002 111.2 56.2002C111.2 65.8002 108 72.2002 101.6 75.4002C98.4001 77.0002 92.0001 78.6002 85.6001 78.6002H48.8V32.2002H47.2ZM215.2 96.2002H295.2V67.4002H215.2V32.2002H303.2V1.80017H180V169.8H306.4V139.4H215.2V96.2002ZM420 73.8002L391.2 67.4002C380 64.2002 372 62.6002 368.8 61.0002C364 57.8002 360.8 53.0002 360.8 48.2002C360.8 41.8002 364 37.0002 368.8 33.8002C373.6 30.6002 381.6 29.0002 391.2 29.0002C399.2 29.0002 405.6 30.6002 412 33.8002C420 38.6002 424.8 45.0002 424.8 54.6002H458.4C458.4 37.0002 450.4 22.6002 439.2 14.6002C426.4 5.00019 412 0.200195 394.4 0.200195C373.6 0.200195 357.6 5.00019 346.4 14.6002C335.2 24.2002 330.4 37.0002 330.4 51.4002C330.4 67.4002 336.8 80.2002 348 88.2002C354.4 93.0002 367.2 97.8002 384.8 101L402.4 104.2C413.6 105.8 420 109 424.8 112.2C429.6 115.4 432.8 120.2 432.8 125C432.8 134.6 428 141 418.4 144.2C413.6 145.8 405.6 147.4 397.6 147.4C383.2 147.4 373.6 144.2 367.2 137.8C364 134.6 362.4 128.2 360.8 120.2H327.2C327.2 137.8 333.6 150.6 346.4 161.8C359.2 173 376.8 176.2 397.6 176.2C418.4 176.2 436 171.4 447.2 161.8C458.4 152.2 464.8 139.4 464.8 123.4C464.8 109 460 97.8002 450.4 89.8002C442.4 81.8002 432.8 77.0002 420 73.8002ZM474.4 32.2002H524V169.8H559.2V32.2002H608.8V1.80017H474.4V32.2002ZM60 280.2L0.800049 446.6H37.6001L48.8 413H109.6L120.8 446.6H159.2L100 280.2H60ZM58.4 384.2L80.8 318.6L101.6 384.2H58.4ZM252 280.2H180V446.6H215.2V387.4H250.4C268 387.4 282.4 382.6 292 374.6C301.6 366.6 306.4 352.2 306.4 333C306.4 315.4 301.6 301 292 293C280.8 285 268 280.2 252 280.2ZM264.8 352.2C260 355.4 253.6 358.6 245.6 358.6H213.6V309H245.6C253.6 309 260 310.6 264.8 313.8C269.6 317 271.2 323.4 271.2 333C271.2 342.6 269.6 349 264.8 352.2ZM330.4 280.2H365.6V446.6H330.4V280.2Z" fill="#707070" />
      </svg>;
  }
  if (id === 'typescript') {
    return <svg xmlns="http://www.w3.org/2000/svg" fill="none" height="512" viewBox="0 0 512 512" width="512" className={className} {...props}>
          <rect fill="#3178c6" height="512" rx="50" width="512" />
          <rect fill="#3178c6" height="512" rx="50" width="512" />
          <path clip-rule="evenodd" d="m316.939 407.424v50.061c8.138 4.172 17.763 7.3 28.875 9.386s22.823 3.129 35.135 3.129c11.999 0 23.397-1.147 34.196-3.442 10.799-2.294 20.268-6.075 28.406-11.342 8.138-5.266 14.581-12.15 19.328-20.65s7.121-19.007 7.121-31.522c0-9.074-1.356-17.026-4.069-23.857s-6.625-12.906-11.738-18.225c-5.112-5.319-11.242-10.091-18.389-14.315s-15.207-8.213-24.18-11.967c-6.573-2.712-12.468-5.345-17.685-7.9-5.217-2.556-9.651-5.163-13.303-7.822-3.652-2.66-6.469-5.476-8.451-8.448-1.982-2.973-2.974-6.336-2.974-10.091 0-3.441.887-6.544 2.661-9.308s4.278-5.136 7.512-7.118c3.235-1.981 7.199-3.52 11.894-4.615 4.696-1.095 9.912-1.642 15.651-1.642 4.173 0 8.581.313 13.224.938 4.643.626 9.312 1.591 14.008 2.894 4.695 1.304 9.259 2.947 13.694 4.928 4.434 1.982 8.529 4.276 12.285 6.884v-46.776c-7.616-2.92-15.937-5.084-24.962-6.492s-19.381-2.112-31.066-2.112c-11.895 0-23.163 1.278-33.805 3.833s-20.006 6.544-28.093 11.967c-8.086 5.424-14.476 12.333-19.171 20.729-4.695 8.395-7.043 18.433-7.043 30.114 0 14.914 4.304 27.638 12.912 38.172 8.607 10.533 21.675 19.45 39.204 26.751 6.886 2.816 13.303 5.579 19.25 8.291s11.086 5.528 15.415 8.448c4.33 2.92 7.747 6.101 10.252 9.543 2.504 3.441 3.756 7.352 3.756 11.733 0 3.233-.783 6.231-2.348 8.995s-3.939 5.162-7.121 7.196-7.147 3.624-11.894 4.771c-4.748 1.148-10.303 1.721-16.668 1.721-10.851 0-21.597-1.903-32.24-5.71-10.642-3.806-20.502-9.516-29.579-17.13zm-84.159-123.342h64.22v-41.082h-179v41.082h63.906v182.918h50.874z" fill="#fff" fill-rule="evenodd" />
          </svg>;
  }
  if (id === "go") {
    return <svg xmlns="http://www.w3.org/2000/svg" xmlnsXlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 205.4 76.7" style={{
      enableBackground: "new 0 0 205.4 76.7"
    }} xmlSpace="preserve" className={className} {...props}>
        <title>Go Logo</title>
        <style type="text/css">{`.st0{fill:#00ACD7;}`}</style>
        <g>
          <g>
            <g>
              <g>
                <path className="st0" d="M15.5,23.2c-0.4,0-0.5-0.2-0.3-0.5l2.1-2.7c0.2-0.3,0.7-0.5,1.1-0.5h35.7c0.4,0,0.5,0.3,0.3,0.6l-1.7,2.6      c-0.2,0.3-0.7,0.6-1,0.6L15.5,23.2z" />
              </g>
            </g>
          </g>
        </g>
        <g>
          <g>
            <g>
              <g>
                <path className="st0" d="M0.4,32.4c-0.4,0-0.5-0.2-0.3-0.5l2.1-2.7c0.2-0.3,0.7-0.5,1.1-0.5h45.6c0.4,0,0.6,0.3,0.5,0.6l-0.8,2.4      c-0.1,0.4-0.5,0.6-0.9,0.6L0.4,32.4z" />
              </g>
            </g>
          </g>
        </g>
        <g>
          <g>
            <g>
              <g>
                <path className="st0" d="M24.6,41.6c-0.4,0-0.5-0.3-0.3-0.6l1.4-2.5c0.2-0.3,0.6-0.6,1-0.6h20c0.4,0,0.6,0.3,0.6,0.7L47.1,41      c0,0.4-0.4,0.7-0.7,0.7L24.6,41.6z" />
              </g>
            </g>
          </g>
        </g>
        <g>
          <g id="CXHf1q_3_">
            <g>
              <g>
                <path className="st0" d="M128.4,21.4c-6.3,1.6-10.6,2.8-16.8,4.4c-1.5,0.4-1.6,0.5-2.9-1c-1.5-1.7-2.6-2.8-4.7-3.8       c-6.3-3.1-12.4-2.2-18.1,1.5c-6.8,4.4-10.3,10.9-10.2,19c0.1,8,5.6,14.6,13.5,15.7c6.8,0.9,12.5-1.5,17-6.6       c0.9-1.1,1.7-2.3,2.7-3.7c-3.6,0-8.1,0-19.3,0c-2.1,0-2.6-1.3-1.9-3c1.3-3.1,3.7-8.3,5.1-10.9c0.3-0.6,1-1.6,2.5-1.6       c5.1,0,23.9,0,36.4,0c-0.2,2.7-0.2,5.4-0.6,8.1c-1.1,7.2-3.8,13.8-8.2,19.6c-7.2,9.5-16.6,15.4-28.5,17       c-9.8,1.3-18.9-0.6-26.9-6.6c-7.4-5.6-11.6-13-12.7-22.2c-1.3-10.9,1.9-20.7,8.5-29.3c7.1-9.3,16.5-15.2,28-17.3       c9.4-1.7,18.4-0.6,26.5,4.9c5.3,3.5,9.1,8.3,11.6,14.1C130,20.6,129.6,21.1,128.4,21.4z" />
              </g>
              <g>
                <path className="st0" d="M161.5,76.7c-9.1-0.2-17.4-2.8-24.4-8.8c-5.9-5.1-9.6-11.6-10.8-19.3c-1.8-11.3,1.3-21.3,8.1-30.2       c7.3-9.6,16.1-14.6,28-16.7c10.2-1.8,19.8-0.8,28.5,5.1c7.9,5.4,12.8,12.7,14.1,22.3c1.7,13.5-2.2,24.5-11.5,33.9       c-6.6,6.7-14.7,10.9-24,12.8C166.8,76.3,164.1,76.4,161.5,76.7z M185.3,36.3c-0.1-1.3-0.1-2.3-0.3-3.3       c-1.8-9.9-10.9-15.5-20.4-13.3c-9.3,2.1-15.3,8-17.5,17.4c-1.8,7.8,2,15.7,9.2,18.9c5.5,2.4,11,2.1,16.3-0.6       C180.5,51.3,184.8,44.9,185.3,36.3z" />
              </g>
            </g>
          </g>
        </g>
      </svg>;
  }
  if (id === "rust") {
    return <svg xmlns="http://www.w3.org/2000/svg" xmlnsXlink="http://www.w3.org/1999/xlink" version="1.1" width="300" height="200" viewBox="0 0 300 200" fill="none" className={className} {...props}>
  
      <g clip-path="url(#clip0_1_60)">
      <path d="M149.557 89.5213C119.349 89.5213 91.9026 93.1471 71.5833 99.0556V149.527C91.9026 155.436 119.349 159.062 149.557 159.062C184.132 159.062 215.085 154.312 235.876 146.827V101.757C215.085 94.2709 184.132 89.5213 149.557 89.5213ZM267.016 130.53L263.475 123.207C263.493 122.929 263.508 122.651 263.508 122.371C263.508 114.069 254.86 106.418 240.311 100.292V144.451C247.1 141.593 252.607 138.402 256.546 134.968C255.387 139.621 251.422 149.035 248.261 155.656C243.066 165.125 241.185 173.367 241.426 173.776C241.58 174.033 243.352 171.303 245.965 166.88C252.048 158.228 263.573 141.711 265.876 137.504C268.485 132.734 267.016 130.53 267.016 130.53ZM37.8609 122.855C37.8609 124.454 38.183 126.029 38.8047 127.574L36.6841 131.342C36.6841 131.342 34.9852 133.543 37.9767 138.185C40.6154 142.278 53.8325 158.301 60.8084 166.691C63.8049 170.993 65.8363 173.643 66.0142 173.387C66.2943 172.98 64.1514 164.904 58.2006 155.69C55.4239 150.741 52.1075 144.185 50.1171 139.342C55.6743 142.854 62.945 146.039 71.5833 148.78V96.9315C50.767 103.535 37.8609 112.71 37.8609 122.855Z" fill="#A52B00" />
      <path d="M145.791 12.8178L138.87 24.3578L135.496 24.6525L126.502 14.691C126.098 14.1723 125.552 13.7824 124.929 13.5688C124.307 13.3553 123.636 13.3275 122.998 13.4888C122.365 13.656 121.782 13.9704 121.295 14.4062C120.808 14.842 120.431 15.3869 120.196 15.9961L115.655 28.8365C114.582 29.0709 113.537 29.415 112.534 29.8633L101.814 21.7495C100.811 21.0829 99.2789 20.8397 98.1871 21.3121C97.5824 21.5999 97.0529 22.0238 96.6403 22.5507C96.2276 23.0775 95.9431 23.6927 95.8092 24.348L93.5997 37.9276L90.7157 39.4993L78.8963 33.9326C78.3091 33.611 77.6395 33.4704 76.9723 33.5287C76.3051 33.587 75.6702 33.8414 75.1478 34.26C74.0725 34.9195 73.4375 36.2948 73.3649 37.6209L73.8122 51.3456L71.3522 53.4459L58.6215 50.4098C57.2603 49.9631 55.9811 50.4519 54.9386 51.4857C54.4896 51.9727 54.1644 52.5602 53.9903 53.1988C53.8162 53.8374 53.7983 54.5084 53.9381 55.1554L56.993 68.4637C56.2644 69.3003 55.5847 70.1781 54.9571 71.0926L41.6897 70.5545C41.0333 70.5063 40.3771 70.65 39.8013 70.9682C39.2254 71.2864 38.7549 71.7652 38.4473 72.3461C37.796 73.5342 37.5523 75.0638 38.2294 76.3245L43.6552 88.6716L42.0269 91.642L29.1929 93.8942C28.529 93.9814 27.9003 94.2439 27.3719 94.6546C26.8435 95.0653 26.4345 95.6094 26.1871 96.2307C25.9676 96.8735 25.8849 97.555 25.9442 98.2316C26.0035 98.9082 26.2035 99.565 26.5314 100.16L34.2954 111.172L34.1572 111.749L12.3781 134.768C12.3781 134.768 9.20124 137.308 13.8985 143.497C18.1389 148.783 40.0229 170.063 51.5845 181.308C54.0496 184.603 56.9114 187.582 60.1052 190.18C60.6183 189.569 57.8258 179.255 48.2766 167.268C40.9039 156.411 31.3197 139.713 33.4212 137.833C33.4212 137.833 35.9702 134.593 41.2416 132.247C41.0378 132.077 41.0378 132.077 41.2416 132.247C41.2416 132.247 149.678 182.168 250.19 133.04C261.712 130.903 268.674 137.082 268.674 137.082C271.071 138.57 264.83 155.707 259.783 167.083C252.79 179.949 251.784 190.03 252.38 190.355C254.96 187.377 257.146 184.081 258.886 180.548C267.819 168.267 284.455 144.754 287.541 139.017C291.123 132.482 287.553 130.531 287.553 130.531L264.343 113.515L263.755 111.116L271.287 100.088C272.142 99.0705 272.198 97.5573 271.709 96.2802C271.482 95.6688 271.099 95.1269 270.599 94.7078C270.099 94.2887 269.498 94.0068 268.855 93.8898L255.815 91.635L254.428 88.7394L259.751 76.2077C260.064 75.5853 260.198 74.8882 260.137 74.1943C260.076 73.5004 259.824 72.8371 259.407 72.2784C258.746 71.2048 257.556 70.5546 256.244 70.6692L243.059 71.0666L240.939 68.4237L243.931 55.1528C244.074 54.5102 244.068 53.8434 243.914 53.2034C243.76 52.5633 243.461 51.9669 243.04 51.4597C242.591 50.946 242.01 50.5642 241.359 50.3553C240.709 50.1463 240.013 50.1182 239.348 50.2739L226.596 53.4616C225.733 52.764 224.911 52.0174 224.134 51.2256L224.453 37.6226C224.463 36.9635 224.322 36.3108 224.041 35.7144C223.759 35.1181 223.345 34.5939 222.829 34.1821C222.292 33.7678 221.643 33.5241 220.966 33.4824C220.289 33.4406 219.615 33.6029 219.031 33.9482L207.242 39.5029L204.267 37.8774L202.149 24.4872C202.062 23.8243 201.799 23.1967 201.388 22.6692C200.976 22.1417 200.431 21.7334 199.809 21.4863C199.222 21.1647 198.552 21.0242 197.885 21.0825C197.218 21.1407 196.583 21.3952 196.06 21.8137L185.422 29.7191L182.324 28.8583L177.803 16.0552C177.585 15.4164 177.207 14.844 176.705 14.3927C176.202 13.9414 175.592 13.6264 174.933 13.4777C174.265 13.3557 173.576 13.4079 172.934 13.6291C172.292 13.8503 171.717 14.2332 171.266 14.7407L162.324 24.7604L159.072 24.2902L152.212 12.8226C151.901 12.241 151.442 11.7516 150.881 11.4034C150.32 11.0553 149.677 10.8607 149.017 10.8391C147.688 10.7666 146.442 11.6297 145.791 12.8178Z" fill="url(#paint0_linear_1_60)" />
      <path d="M112.926 162.529C112.511 162.176 112.294 161.966 112.294 161.966L147.811 159.062C118.839 120.906 95.6291 151.301 93.1587 154.7V162.529H112.926ZM186.876 162.118C187.291 161.765 187.508 161.555 187.508 161.555L153.377 159.062C182.362 119.339 204.174 150.89 206.644 154.288V162.118H186.876Z" fill="black" />
      <path d="M241.473 124.234C241.473 124.234 237.611 139.655 213.443 155.873L206.718 157.468C206.718 157.468 184.813 117.587 153.787 162.52C153.787 162.52 163.441 156.936 189.341 163.783C189.341 163.783 177.423 181.995 153.454 181.397C153.454 181.397 176.424 208.981 211.445 169.167C211.445 169.167 248.464 154.876 251.46 124.234H241.473Z" fill="url(#paint1_linear_1_60)" />
      <path d="M169.503 104.468C169.503 104.468 180.338 92.6234 191.174 104.468C191.174 104.468 199.688 120.261 191.174 128.157C191.174 128.157 177.242 139.213 169.503 128.157C169.503 128.157 160.215 119.471 169.503 104.468Z" fill="black" />
      <path d="M182.047 108.862C182.047 113.474 179.324 117.213 175.966 117.213C172.607 117.213 169.884 113.474 169.884 108.862C169.884 104.25 172.607 100.51 175.966 100.51C179.324 100.51 182.047 104.25 182.047 108.862Z" fill="white" />
      <path d="M121.141 101.233C121.141 101.233 139.728 93.0177 144.801 111.355C144.801 111.355 150.115 132.729 129.538 133.936C129.538 133.936 103.298 128.89 121.141 101.233Z" fill="black" />
      <path d="M130.477 109.164C130.477 113.92 127.668 117.778 124.204 117.778C120.741 117.778 117.933 113.92 117.933 109.164C117.933 104.407 120.741 100.551 124.204 100.551C127.668 100.551 130.477 104.407 130.477 109.164Z" fill="white" />
      <path d="M93.2686 171.601C127.216 215.064 143.296 180.163 143.296 180.163C124.238 178.022 110.719 165.358 110.719 165.358C133.588 162.445 146.81 162.207 146.81 162.207C116.198 121.895 91.3628 158.402 91.3628 158.402C85.169 156.142 78.7965 147.521 74.0916 139.554L55.0932 133.965C76.9502 171.066 93.2686 171.601 93.2686 171.601Z" fill="url(#paint2_linear_1_60)" />
      </g>
      <defs>
      <linearGradient id="paint0_linear_1_60" x1="155.668" y1="198.802" x2="139.325" y2="11.6856" gradientUnits="userSpaceOnUse">
      <stop stop-color="#F74C00" />
      <stop offset="0.33" stop-color="#F74C00" />
      <stop offset="1" stop-color="#F49600" />
      </linearGradient>
      <linearGradient id="paint1_linear_1_60" x1="202.457" y1="190.703" x2="202.457" y2="124.234" gradientUnits="userSpaceOnUse">
      <stop stop-color="#CC3A00" />
      <stop offset="0.15" stop-color="#CC3A00" />
      <stop offset="0.74" stop-color="#F74C00" />
      <stop offset="1" stop-color="#F74C00" />
      </linearGradient>
      <linearGradient id="paint2_linear_1_60" x1="100.951" y1="193.421" x2="100.951" y2="133.965" gradientUnits="userSpaceOnUse">
      <stop stop-color="#CC3A00" />
      <stop offset="0.15" stop-color="#CC3A00" />
      <stop offset="0.74" stop-color="#F74C00" />
      <stop offset="1" stop-color="#F74C00" />
      </linearGradient>
      <clipPath id="clip0_1_60">
      <rect width="299" height="199" fill="white" transform="translate(0.719086 0.602844)" />
      </clipPath>
      </defs>
    </svg>;
  }
  if (id === "python") {
    return <svg width="112" height="113" viewBox="0 0 112 113" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
        <title>Python Logo</title>
        <path d="M55.5247 0.410099C50.9411 0.431397 46.5638 0.822317 42.7122 1.50385C31.366 3.50835 29.306 7.70395 29.306 15.4413V25.6601H56.1185V29.0663H29.306H19.2435C11.451 29.0663 4.62773 33.7501 2.49349 42.6601C0.0316724 52.8731 -0.0775229 59.2461 2.49349 69.9101C4.39942 77.8479 8.95104 83.5038 16.7435 83.5038H25.9622V71.2538C25.9622 62.4039 33.6194 54.5976 42.7122 54.5976H69.4935C76.9484 54.5976 82.8997 48.4594 82.8997 40.9726V15.4413C82.8997 8.17501 76.7698 2.71657 69.4935 1.50385C64.8875 0.737124 60.1084 0.388801 55.5247 0.410099Z" fill="url(#paint0_linear_1445_68)" />
        <path d="M86.2434 29.0664V40.9727C86.2434 50.2034 78.4175 57.9727 69.4934 57.9727H42.7122C35.3763 57.9727 29.3059 64.2511 29.3059 71.5977V97.1289C29.3059 104.395 35.6245 108.669 42.7122 110.754C51.1995 113.25 59.3384 113.701 69.4934 110.754C76.2436 108.8 82.8997 104.866 82.8997 97.1289V86.9102H56.1184V83.5039H82.8997H96.3059C104.098 83.5039 107.002 78.0685 109.712 69.9102C112.511 61.5113 112.392 53.4344 109.712 42.6602C107.786 34.9027 104.108 29.0664 96.3059 29.0664Z" fill="url(#paint1_linear_1445_68)" />
        <defs>
          <linearGradient id="paint0_linear_1445_68" x1="0.605957" y1="0.409179" x2="62.4326" y2="53.0941" gradientUnits="userSpaceOnUse">
            <stop stopColor="#5A9FD4" />
            <stop offset="1" stopColor="#306998" />
          </linearGradient>
          <linearGradient id="paint1_linear_1445_68" x1="70.5366" y1="97.9573" x2="48.3555" y2="66.875" gradientUnits="userSpaceOnUse">
            <stop stopColor="#FFD43B" />
            <stop offset="1" stopColor="#FFE873" />
          </linearGradient>
        </defs>
      </svg>;
  }
  if (id === 'ruby') {
    return <svg width="125" height="120" viewBox="0 0 125 120" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M34.0031 107.33C61.4691 111.08 88.4471 114.763 115.961 118.518C106.587 102.912 97.4541 87.705 88.2481 72.374L34.0031 107.33ZM123.713 20.947C121.292 24.583 118.866 28.216 116.448 31.854C108.144 44.347 99.8411 56.84 91.5451 69.339C91.0831 70.035 90.4841 70.587 91.1351 71.66C99.1511 84.897 107.104 98.173 115.077 111.437C116.335 113.532 117.607 115.619 119.234 117.629C120.846 85.436 122.457 53.242 124.068 21.049L123.713 20.947ZM14.2841 62.22C14.6591 62.575 15.5951 62.782 16.0311 62.567C23.7201 58.788 31.4581 55.093 38.9791 51.003C41.4321 49.67 43.3181 47.28 45.4311 45.342C52.4281 38.925 59.4141 32.495 66.3971 26.064C66.8241 25.669 67.3301 25.287 67.5851 24.789C70.0931 19.887 72.5581 14.96 75.1101 9.89102C72.0671 8.74701 69.1821 7.62801 66.2611 6.61001C65.8651 6.47201 65.2411 6.74601 64.8121 6.98501C58.0511 10.762 51.1631 14.338 44.6171 18.457C41.3421 20.518 38.6741 23.555 35.7741 26.2C31.1001 30.466 26.4321 34.742 21.8261 39.082C20.6041 40.234 19.4901 41.55 18.5381 42.936C15.3881 47.523 12.3321 52.176 9.13612 56.961C10.9221 58.808 12.5461 60.574 14.2841 62.22ZM42.3861 55.949C38.5611 72.108 34.7591 88.176 30.8301 104.772C49.2531 92.901 67.2511 81.304 85.1301 69.785C70.9021 65.18 56.7201 60.589 42.3861 55.949ZM119.017 21.103C103.451 23.704 88.2571 26.242 72.8671 28.813C78.1091 41.564 83.2461 54.059 88.5291 66.909C98.7501 51.55 108.769 36.499 119.017 21.103ZM43.0281 52.644C57.0451 57.194 70.7831 61.654 84.9201 66.244C79.6701 53.454 74.6001 41.111 69.4251 28.507C60.6101 36.566 51.9271 44.506 43.0281 52.644ZM14.8631 71.643C9.89212 83.526 5.09012 95.005 0.201117 106.691C9.59712 106.413 18.7051 106.144 28.1261 105.866C23.7031 94.454 19.3671 83.266 14.8631 71.643ZM28.4561 97.739L28.8021 97.663C32.1551 83.722 35.5561 69.877 38.9791 55.391C31.3431 59.36 24.0591 63.145 16.5761 67.035C20.3951 76.961 24.4671 87.432 28.4561 97.739ZM113.383 18.842C108.924 17.661 104.465 16.476 100.004 15.303C93.5921 13.617 87.1751 11.952 80.7671 10.251C79.9661 10.038 79.3871 9.89902 78.9161 10.864C76.6511 15.504 74.3161 20.109 72.0151 24.732C71.9441 24.875 71.9591 25.06 71.9041 25.419C85.7901 23.315 99.5831 21.224 113.374 19.134L113.383 18.842ZM87.5141 8.28802L123.857 18.342C121.773 12.403 119.84 6.89602 117.852 1.23202L87.5671 7.94701L87.5141 8.28802ZM31.5371 110.007C27.0361 109.488 22.4151 109.965 17.8501 110.044C14.1001 110.107 10.3501 110.25 6.60012 110.367C6.21412 110.379 5.82912 110.457 5.44412 110.873C36.4471 113.739 67.4491 116.605 98.4511 119.473L98.5141 119.059C88.5761 117.702 78.6371 116.345 68.6991 114.989C56.3151 113.298 43.9521 111.438 31.5371 110.007ZM0.814117 95.994C4.80912 86.724 8.78712 77.448 12.7981 68.185C13.1991 67.256 13.1681 66.625 12.3831 65.877C10.7051 64.28 9.14612 62.559 7.31212 60.651C4.83312 72.891 2.41512 84.828 -0.00488281 96.764L0.266117 96.891C0.451117 96.594 0.677117 96.313 0.814117 95.994ZM79.5541 5.84101C86.2911 4.10301 93.1261 2.74402 99.9211 1.22802C100.361 1.12902 100.791 0.984015 101.224 0.860015L101.157 0.528015C91.5861 1.81502 82.0161 3.10302 71.9631 4.45602C74.7041 5.65302 76.8161 6.54701 79.5541 5.84101Z" fill="#D91404" />
      </svg>;
  }
  return null;
};

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/home-page.png" />
</Frame>

Turnkey provides secure, scalable and programmable crypto infrastructure for embedded wallets and onchain transaction automation.

Whether you're building a DeFi platform, a payments app, an AI agent, or anything requiring a private key,
Turnkey's modular components empower you to build fully customizable,
innovative products - offering complete flexibility without limitations.

Seamlessly create in-app wallets, sign millions of transactions at millisecond speed,
create superior end-user experiences and set granular controls without sacrificing security.

Our documentation makes it easy for you to integrate with Turnkey, no matter what you're building.

<iframe className="w-full aspect-video rounded-xl" src="https://drive.google.com/file/d/1tSxWnO4q7pS1ZqX3q7lmp97bRJKprKj7/preview" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen />

<CardGroup cols={4}>
  <Card title="Website" icon="globe" href="https://turnkey.com" iconType="solid" horizontal />

  <Card title="X" icon="x-twitter" href="https://x.com/turnkeyhq" iconType="solid" horizontal />

  <Card title="Support" icon="phone" href="https://join.slack.com/t/clubturnkey/shared_invite/zt-31v4yhgw6-PwBzyNsWCCBTk2xft3EoHQ" iconType="solid" horizontal />

  <Card title="Whitepaper" icon="link" href="https://whitepaper.turnkey.com/" iconType="solid" horizontal />
</CardGroup>

# Turnkey's products

Turnkey covers two main use cases: embedded wallets and transaction automation.

## Embedded wallets

Turnkey's embedded wallets offer the most secure way to integrate wallets into your app. With Turnkey, you can create millions of embedded wallets on behalf of your users for a flawless onboarding and in-app experience.

### Features

| Feature               | Description                                                                             |
| :-------------------- | :-------------------------------------------------------------------------------------- |
| Embedded wallet kit   | Speed up your integration with pre-built UI components                                  |
| Authentication        | Authenticate users via email, phone number, biometrics, social logins, etc.             |
| Policies              | Determine delegated access and co-ownership controls.                                   |
| Multichain support    | Sign transactions across chains with out-of-the-box support for most chains and assets. |
| Pre-generated wallets | Streamline onboarding by generating wallets for your users before authentication.       |
| Sessions              | Sign multiple transactions without requiring additional approvals.                      |
| Account abstraction   | Access simple integrations for gas sponsorship and smart contract wallets.              |
| Import + export       | Migrate existing wallets in and out of Turnkey without exposure.                        |
| Delegated access      | Onchain wallets with flexible co-ownership controls.                                    |

## Transaction automation

Turnkey's transaction automation empowers teams to automate complex workflows at scale with granular policies for transaction limits, user permissions, and more.

### Features

| Feature                   | Description                                                                             |
| :------------------------ | :-------------------------------------------------------------------------------------- |
| Multichain Support        | Sign transactions across chains with out-of-the-box support for most chains and assets. |
| Authentication            | Access wallets via email, phone number, biometrics, social logins, etc.                 |
| API-based authentication  | Create API keys with limited permissions for specific applications or use cases.        |
| Compliance (audit trail)  | Track events and changes across the stack, ensuring accountability.                     |
| Import + export           | Easily migrate existing private keys without exposure.                                  |
| Multi-signature approvals | Set a quorum of users for approving and/or denying transactions.                        |

# Concepts

Before getting started, we highly recommend familiarizing yourself with Turnkey's core concepts to ensure a smooth implementation. At the core of Turnkey is an important concept: instead of directly managing private keys, wallets are accessed through authenticators like passkeys, social logins, or API keys.

### Core terms:

* **Organizations (parent orgs)**: The initial parent organization typically represents an entire Turnkey-powered application.
* **Sub-organizations (sub-orgs)**: Fully segregated organizations, typically representing an end user, nested under the parent organization. Parent orgs cannot modify the contents of a sub-org.
* **Resources**: All identifiers within parent orgs such as users, policies, and wallets are collectively referred to as resources.
* **Users**: Resources within organizations or sub-organizations that can submit activities to Turnkey via a valid credential.
* **Authenticators**: Each parent org, sub-org and user contain their own sets of authenticators that you can configure, including their own wallets, API keys, and private keys.
* **Activities**: All actions Organizations can take such as signing transactions or creating users are known as activities.
* **Policies**: Policies govern all activities and permissions within Organizations.
* **Root users**: Users with root permissions, meaning they can bypass the policy engine to take any action within that specific organization.
* **Root quorum**: A pre-determined consensus threshold that consists of a set of Root Users. This consensus threshold must be reached in order for any root permissions to take place.
* **Wallets**: A collection of cryptographic private/public key pairs that share a common seed. HD seed phrases can generate multiple wallet accounts (addresses) for signing operations.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/img/diagrams/org-diagram.png" />
</Frame>

There is no set relationship between organizations, sub-organizations, activities, wallets, and resources.
This makes Turnkey highly flexible and configurable to any use case.

For a more in-depth overview, learn more [here](/concepts/overview).

# SDKs

Turnkey provides a variety of client libraries for building with embedded wallets, transaction automation,
and other common workflows. We also have several wrappers for popular web3 libraries for easy integration
into existing dApps. We recommend reviewing our concepts, account setup and solution pages before moving
forward with our SDKs.

<div className="flex justify-center mb-4">
  <h3 class="flex whitespace-pre-wrap group font-semibold">
    <span class="cursor-pointer">Embedded Wallets</span>
  </h3>
</div>

<div style={{ justifyContent: "space-evenly" }} className="flex gap-4 items-center">
  <SquareCard icon={<Logo id="react" className="h-8 w-8" />} label="React" href="/sdks/react" />

  <SquareCard icon={<Logo id="react-native" className="h-8 w-8" />} label="React Native" href="/sdks/react-native" />

  <SquareCard icon={<Logo id="ios-swift" className="h-8 w-8" />} label="iOS (Swift)" href="/sdks/swift" />

  <SquareCard icon={<Logo id="flutter" className="h-8 w-8" />} label="Flutter" href="/sdks/flutter" />

  <SquareCard icon={<Logo id="typescript" className="h-8 w-8" />} label="Browser" href="/sdks/javascript-browser" />
</div>

<div className="flex justify-center mb-4">
  <h3 class="flex whitespace-pre-wrap group font-semibold">
    <span class="cursor-pointer">Transaction Automation</span>
  </h3>
</div>

<div style={{ justifyContent: "space-evenly" }} className="flex gap-4 items-center">
  <SquareCard icon={<Logo id="go" className="h-8 w-8" />} label="Go" href="/sdks/golang" />

  <SquareCard icon={<Logo id="ruby" className="h-8 w-8" />} label="Ruby" href="/sdks/ruby" />

  <SquareCard icon={<Logo id="python" className="h-8 w-8" />} label="Python" href="/sdks/python" />

  <SquareCard icon={<Logo id="rust" className="h-8 w-8" />} label="Rust" href="/sdks/rust" />

  <SquareCard icon={<Logo id="typescript" className="h-8 w-8" />} label="Server" href="/sdks/javascript-server" />
</div>

### AI-ready docs

Turnkey documentation is fully integrated with AI tooling. Whether you're chatting with GPT, coding with Cursor,
or building your own LLM assistant, our docs are structured for direct ingestion and deep context—plus,
search and chat with specific pages right from your IDE or browser. Explore the [docs](/developer-reference/using-llms).

# Security

Turnkey is the first verifiable key management system of its kind, securing millions of wallets and private keys
for a wide variety of use cases. Turnkey's security architecture ensures that raw private keys are never exposed
to Turnkey, your software, or your team. We provide end-to-end private key generation and access control within
secure enclaves. Our [whitepaper](https://whitepaper.turnkey.com/) covers our holistic security model in-depth,
and speaks to our vision for building verifiable key management infrastructure. Learn more about our approach to
security [here](/security/our-approach).

# Account setup

Before diving into the code, let's set up your organization and spin up an API keypair to unlock the full
potential of Turnkey! Get started [here](/getting-started/quickstart).

# Support

To chat with our account team, please reach out [here](https://www.turnkey.com/contact-us).\
For support, product feedback, and input, join our community Slack channel
[here](https://join.slack.com/t/clubturnkey/shared_invite/zt-31v4yhgw6-PwBzyNsWCCBTk2xft3EoHQ).


# Aptos support on Turnkey
Source: https://docs.turnkey.com/networks/aptos



## Address derivation

Turnkey supports Aptos address derivation with `ADDRESS_TYPE_APTOS`. Aptos addresses are derived from the Ed25519 curve, which Turnkey fully supports.

## Transaction construction and signing

Turnkey supports Aptos transaction signing through our core signing capabilities. We have an example repository that demonstrates how to construct and sign Aptos transactions:

* [`examples/with-aptos`](https://github.com/tkhq/sdk/tree/main/examples/with-aptos): demonstrates transaction construction and broadcast on Aptos.

## Example

Here's a comprehensive example showing how to integrate Turnkey with the Aptos SDK for transaction signing:

```typescript
import { Turnkey } from "@turnkey/sdk-server";
import {
  AptosClient,
  AptosAccount,
  TxnBuilderTypes,
  BCS,
  TransactionBuilder,
  HexString,
} from "aptos";

// Custom Turnkey signer for Aptos
class TurnkeyAptosSigner {
  private turnkeyClient: Turnkey;
  private aptosClient: AptosClient;
  private address: string;
  private organizationId: string;

  constructor(
    apiPrivateKey: string,
    apiPublicKey: string,
    organizationId: string,
    address: string,
    nodeUrl: string = "https://fullnode.mainnet.aptoslabs.com/v1"
  ) {
    this.turnkeyClient = new Turnkey({
      apiBaseUrl: "https://api.turnkey.com",
      apiPrivateKey,
      apiPublicKey,
      defaultOrganizationId: organizationId,
    });

    this.aptosClient = new AptosClient(nodeUrl);
    this.address = address;
    this.organizationId = organizationId;
  }

  // Get the account address
  getAddress(): string {
    return this.address;
  }

  // Sign a transaction using Turnkey
  async signTransaction(
    rawTxn: TxnBuilderTypes.RawTransaction
  ): Promise<Uint8Array> {
    // Serialize the raw transaction to BCS
    const serializer = new BCS.Serializer();
    rawTxn.serialize(serializer);
    const toSign = serializer.getBytes();

    // Sign the serialized transaction with Turnkey
    const signResult = await this.turnkeyClient.signRawPayload({
      organizationId: this.organizationId,
      signWith: this.address,
      payload: Buffer.from(toSign).toString("hex"),
      encoding: "hex",
    });

    // Return the signed transaction bytes
    return Buffer.from(signResult.signature, "hex");
  }

  // Submit a transaction
  async submitTransaction(payload: any): Promise<string> {
    try {
      // Create a raw transaction from the payload
      const rawTxn = await this.createRawTransaction(payload);

      // Sign the transaction
      const signature = await this.signTransaction(rawTxn);

      // Get the authenticator
      const authenticator = new TxnBuilderTypes.TransactionAuthenticatorEd25519(
        new TxnBuilderTypes.Ed25519PublicKey(
          // Note: In a real implementation, you would need to get the actual public key
          new Uint8Array(32) // Placeholder - replace with actual public key
        ),
        new TxnBuilderTypes.Ed25519Signature(signature)
      );

      // Create a signed transaction
      const signedTxn = new TxnBuilderTypes.SignedTransaction(
        rawTxn,
        authenticator
      );

      // Submit the transaction
      const pendingTxn = await this.aptosClient.submitSignedBCSTransaction(
        BCS.bcsToBytes(signedTxn)
      );

      return pendingTxn.hash;
    } catch (error) {
      console.error("Error submitting transaction:", error);
      throw error;
    }
  }

  // Helper method to create a raw transaction
  private async createRawTransaction(
    payload: any
  ): Promise<TxnBuilderTypes.RawTransaction> {
    const account = await this.aptosClient.getAccount(this.address);
    const chainId = await this.aptosClient.getChainId();

    // Create a raw transaction
    return new TxnBuilderTypes.RawTransaction(
      TxnBuilderTypes.AccountAddress.fromHex(this.address),
      BigInt(account.sequence_number),
      payload,
      BigInt(2000), // Max gas amount
      BigInt(100), // Gas unit price
      BigInt(Math.floor(Date.now() / 1000) + 30), // Expiration timestamp (30 seconds from now)
      new TxnBuilderTypes.ChainId(chainId)
    );
  }
}

// Example usage: Transfer coins
async function transferCoins() {
  const signer = new TurnkeyAptosSigner(
    process.env.API_PRIVATE_KEY!,
    process.env.API_PUBLIC_KEY!,
    process.env.ORGANIZATION_ID!,
    process.env.APTOS_ADDRESS!, // Your Aptos address in Turnkey
    "https://fullnode.testnet.aptoslabs.com/v1" // Testnet URL
  );

  const recipientAddress = "0x..."; // Recipient address
  const amount = 1000000; // Amount in octas (1 APT = 100,000,000 octas)

  // Create a transfer transaction payload
  const payload = new TxnBuilderTypes.TransactionPayloadEntryFunction(
    TxnBuilderTypes.EntryFunction.natural(
      "0x1::coin",
      "transfer",
      [
        new TxnBuilderTypes.TypeTagStruct(
          TxnBuilderTypes.StructTag.fromString("0x1::aptos_coin::AptosCoin")
        ),
      ],
      [
        BCS.bcsToBytes(
          TxnBuilderTypes.AccountAddress.fromHex(recipientAddress)
        ),
        BCS.bcsSerializeUint64(amount),
      ]
    )
  );

  try {
    const txnHash = await signer.submitTransaction(payload);
    console.log(`Transaction submitted successfully! Hash: ${txnHash}`);
    return txnHash;
  } catch (error) {
    console.error("Error transferring coins:", error);
    throw error;
  }
}
```

## Aptos Network Support

Turnkey supports:

* Aptos Mainnet
* Aptos Testnet
* Aptos Devnet

## Key Features for Aptos

* **Ed25519 Signing**: Turnkey fully supports the Ed25519 curve used by Aptos
* **BCS Format Support**: Sign transactions serialized in the Binary Canonical Serialization format
* **Integration Example**: Our example repository provides a reference implementation for integrating with the Aptos ecosystem

## Benefits of Using Turnkey with Aptos

* **Secure Key Management**: Private keys are securely stored in Turnkey's infrastructure
* **Policy Controls**: Apply custom policies to authorize transactions based on criteria
* **Developer-Friendly**: Integrate with existing Aptos development workflows
* **Multi-environment Support**: Use the same code across testnet and mainnet environments

## Move Development

Aptos utilizes the Move programming language for smart contracts. When developing Move smart contracts on Aptos, Turnkey can securely manage your private keys for:

* Deploying Move modules
* Executing Move functions
* Managing account resources

If you're building on Aptos and need assistance with your Turnkey integration, feel free to contact us at [hello@turnkey.com](mailto:hello@turnkey.com), on [X](https://x.com/turnkeyhq/), or [on Slack](https://join.slack.com/t/clubturnkey/shared_invite/zt-31v4yhgw6-PwBzyNsWCCBTk2xft3EoHQ).


# Bitcoin support on Turnkey
Source: https://docs.turnkey.com/networks/bitcoin



## BIP32 and BIP44: the basis for Turnkey wallets

[BIP32](https://en.bitcoin.it/wiki/BIP_0032) and [BIP44](https://en.bitcoin.it/wiki/BIP_0044) are standards developed in the Bitcoin ecosystem. Turnkey closely follows this to power [Wallets](/concepts/wallets) since they're adopted within Bitcoin and outside, spanning many other ecosystems.

## BIP39: mnemonics

Turnkey supports importing and exporting keys in mnemonics form, following [BIP39](https://en.bitcoin.it/wiki/BIP_0039). This standard is now a de-facto standard across virtually all blockchains today.

## Address derivation

You can derive Bitcoin addresses when creating a Turnkey wallet or private key. The address types we support currently:

* P2PKH (Pay-To-Public-Key-Hash)
* P2SH (Pay-To-Script-Hash)
* P2WPKH (Pay-to-Witness-Public-Key-Hash) -- [segwit-enabled](https://learnmeabitcoin.com/technical/upgrades/segregated-witness/)
* P2WSH (Pay-to-Witness-Script-Hash) -- [segwit-enabled](https://learnmeabitcoin.com/technical/upgrades/segregated-witness/)
* P2TR (Pay-to-Taproot) -- [taproot-enabled](https://cointelegraph.com/learn/a-beginners-guide-to-the-bitcoin-taproot-upgrade)

Bitcoin addresses change depending on the network you're using (more precisely, their prefix!). When you derive an address the network will be part of the address format. We support the following networks:

* Mainnet (`MAINNET`)
* Testnet (`TESTNET`)
* Regtest (`REGTEST`)
* Signet (`SIGNET`)

For example:

* To derive a P2TR address on testnet, use `ADDRESS_FORMAT_BITCOIN_TESTNET_P2TR`.
* To derive a P2SH address on mainnet, use `ADDRESS_FORMAT_BITCOIN_MAINNET_P2SH`.

## Schnorr signatures and tweaks

The historical signature scheme for Bitcoin is [ECDSA](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm). Turnkey supports ECDSA of course, but we also support [Schnorr signatures](https://en.wikipedia.org/wiki/Schnorr_signature) for Taproot addresses.

To sign with Schnorr, pass a taproot (P2TR) address inside of your activity's `signWith` parameter. Turnkey's signer will switch to Schnorr and apply the correct cryptographic [tweak](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#constructing-and-spending-taproot-outputs) before signing.

## SDK example

If you want to get started with Bitcoin we encourage you to look at the following SDK example: [`examples/with-bitcoin`](https://github.com/tkhq/sdk/tree/main/examples/with-bitcoin). It showcases transaction construction and signing with [`bitcoinjs-lib`](https://github.com/bitcoinjs/bitcoinjs-lib), a widely used JS library.

This demo contains a client-side [signer](https://github.com/tkhq/sdk/blob/main/examples/with-bitcoin/src/signer.ts) which seamlessly integrates Turnkey signing with this library for both taproot and non-taproot output signatures. Let us know if you're interested in using it. We have not yet published it as a standalone NPM package, but could do it if we hear enough interest!


# Cosmos support on Turnkey
Source: https://docs.turnkey.com/networks/cosmos



## Address derivation

Turnkey supports Cosmos address derivation. The address formats we support follow the [Cosmos SDK](https://docs.cosmos.network/) standard for bech32 addresses.

## Transaction construction and signing

To construct and sign Cosmos transactions with Turnkey, we offer:

* [`@turnkey/cosmjs`](https://www.npmjs.com/package/@turnkey/cosmjs): exports a `TurnkeyDirectWallet` that serves as a drop-in replacement for a CosmJS direct wallet. It includes support for `signDirect`.

See it in action in our example:

* [`examples/with-cosmjs`](https://github.com/tkhq/sdk/tree/main/examples/with-cosmjs): demonstrates transaction construction and broadcast on Cosmos.

## Example

Here's a minimal example showing how to initialize a Turnkey signer for Cosmos and perform basic operations:

<CodeGroup>
  ```typescript example.ts [expandable]
  import { Turnkey } from "@turnkey/sdk-server";
  import { TurnkeyDirectWallet } from "@turnkey/cosmjs";
  import { toHex } from "@cosmjs/encoding";
  import { SigningStargateClient } from "@cosmjs/stargate";

  // Initialize the Turnkey client
  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPrivateKey: process.env.API_PRIVATE_KEY,
    apiPublicKey: process.env.API_PUBLIC_KEY,
    defaultOrganizationId: process.env.ORGANIZATION_ID,
  });

  const signer = await initializeCosmosSigner(turnkeyClient);

  // Connect to a Cosmos chain RPC endpoint
  const rpcEndpoint = "https://rpc.celestia-arabica-11.com";
  const client = await SigningStargateClient.connectWithSigner(
    rpcEndpoint,
    signer
  );

  // Get account balance
  const balance = await client.getAllBalances(signer.address);

  const recipient = "celestia1vsvx8n7f8dh5udesqqhgrjutyun7zqrgehdq2l";
  const amount = coins(1000, "utia");
  const fee = calculateFee(200000, GasPrice.fromString("0.01usei"));

  const result = await client.sendTokens(
    signer.address,
    recipient,
    amount,
    fee,
    "Sent via Turnkey"
  );

  const result = await signingClient.sendTokens(
    signer.address,
    recipient,
    [{ denom: "utia", amount: transactionAmount }],
    {
      amount: [{ denom: "utia", amount: "20000" }],
      gas: "200000",
    },
    "Hello from Turnkey!"
  );
  ```

  ```typescript wallet.ts [expandable]
  import { type TurnkeyApiClient } from "@turnkey/sdk-server";
  import { TurnkeyDirectWallet } from "@turnkey/cosmjs";

  // Connect to Cosmos and initialize signer
  export async function initializeCosmosSigner(turnkeyClient: TurnkeyApiClient) {
    // Create a Turnkey-powered Cosmos signer
    const signer = await TurnkeyDirectWallet.init({
      config: {
        client: turnkeyClient.apiClient(),
        organizationId: process.env.ORGANIZATION_ID,
        signWith: process.env.COSMOS_ADDRESS, // Your Cosmos address in Turnkey
      },
      prefix: "cosmos", // Change to the appropriate chain prefix (e.g., "celestia", "osmo", etc.)
    });

    // Get the account details
    const accounts = await wallet.getAccounts();
    const account = accounts[0];

    console.log("Cosmos wallet address:", account.address);
    console.log("Public key:", toHex(account.pubkey));

    return signer;
  }
  ```
</CodeGroup>

## Supported Cosmos Chains

Turnkey supports various Cosmos ecosystem chains for address derivation and signing, including but not limited to:

* Cosmos Hub (ATOM)
* Celestia
* Osmosis
* Injective
* Juno
* Stargaze
* Akash
* Secret Network

## Key Features

* **Drop-in Replacement**: `TurnkeyDirectWallet` works as a direct replacement for standard CosmJS signers
* **Chain Agnostic**: Works with any Cosmos SDK-based chain by changing the prefix
* **Secure Signing**: All private keys remain secure in Turnkey's infrastructure
* **Policy Control**: Apply custom signing policies to control transaction approvals

If you are using a Cosmos chain we do not explicitly support, feel free to contact us at [hello@turnkey.com](mailto:hello@turnkey.com), on [X](https://x.com/turnkeyhq/), or [on Slack](https://join.slack.com/t/clubturnkey/shared_invite/zt-31v4yhgw6-PwBzyNsWCCBTk2xft3EoHQ).


# Ethereum (EVM) support on Turnkey
Source: https://docs.turnkey.com/networks/ethereum



## Address derivation

Turnkey supports EVM address derivation with `ADDRESS_TYPE_ETHEREUM`. This address format is valid across all EVM chains and L2s.

## Transaction construction and signing

To construct and sign an EVM transaction with Turnkey, we offer:

* [@turnkey/viem](https://github.com/tkhq/sdk/tree/main/packages/viem): contains a `createAccount` method to create a Turnkey-powered [custom account](https://viem.sh/docs/accounts/local) which [Viem](https://viem.sh/) can use seamlessly.
* [@turnkey/ethers](https://github.com/tkhq/sdk/tree/main/packages/ethers): contains a `TurnkeySigner` which implements Ethers' `AbstractSigner` interface. See [Ethers docs](https://docs.ethers.org/v6/api/providers/abstract-signer/#AbstractSigner).

## Transaction parsing, policies, and signing

Turnkey has built an EVM parser which runs in a secure enclave, to parse unsigned EVM transactions and extract useful metadata: transaction source, destination, amount, chain ID, and more. See the `EthereumTransaction` struct in our [policy language](/concepts/policies/language) page for a full list.

As a bonus, Turnkey also takes care of combining the signature with the original payload if you use the `SIGN_TRANSACTION` activity types: the input is the unsigned payload (RLP encoded), and the output is the signed RLP encoded transaction, ready to be broadcast!

Additionally, Turnkey supports signing operations over EIP-712 Typed Data payloads, with an accompanying `eth.eip_712` namespace in our policy engine that can be used for gatekeeping.  Additional details can be found [here](https://docs.turnkey.com/networks/ethereum#eip-712).

### Ethereum ABIs

You can use Ethereum ABIs in conjunction with our policy engine to secure users' transactions. See [the guide](/concepts/policies/smart-contract-interfaces) for more details.

### What transaction types does Turnkey support?

Turnkey supports the following transaction types: `legacy, EIP-2930 (Type 1), EIP-1559 (Type 2), EIP-4844 (Type 3), EIP-7702 (Type 4)`. These transactions will get parsed by our transaction parser, and are compatible with our [policy engine](https://docs.turnkey.com/concepts/policies/overview).

### EIP-4844 (Type 3) support

You can use Turnkey’s `SignTransaction` endpoint to parse and sign Type 3 transactions, which conform to the [EIP-4844 standard](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md).

We’ve also added Type 3 support to our policy engine by including the parameter `max_fee_per_blob_gas`. More details about our policy engine language can be found [here](https://docs.turnkey.com/concepts/policies/language#struct), and an example demonstrating how to use `@turnkey/viem` to sign Type 3 transactions can be found [here](https://github.com/tkhq/sdk/blob/main/examples/with-viem/src/eip4844/signTransaction.ts).

Note: for Type 3 transactions, we are specifically handling parsing for payloads containing only the transaction payload body, without any wrappers around blobs, commitments, or proofs.

Accepted: `tx_payload_body`, defined as: `rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, to, value, data, access_list, max_fee_per_blob_gas, blob_versioned_hashes, y_parity, r, s])`

Rejected: `rlp([tx_payload_body, blobs, commitments, proofs])`

* See that this is effectively wrapping the same tx\_payload\_body shape (defined above) alongside other blob-specific data
* We do not sign payloads that conform to this format. Payloads that consists of `rlp([tx_payload_body, blobs, commitments, proofs])` are not transactions, they're messages which are part of the gossip protocol to persist blobs on the beacon chain. In other words, they're not meant to be signed: the signatures / integrity is taken care of with the signed commitments & proofs inside of these messages.

See [https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md#blob-transaction](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md#blob-transaction) and [https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md#networking](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md#networking), respectively, for more.

### EIP-7702 (Type 4) support

In addition to adding support for Type 3 transactions, Turnkey now also supports Type 4 transactions, which conform to the [EIP-7702 standard](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-7702.md). From [https://eip7702.io/](https://eip7702.io/):

```
EIP-7702 gives superpowers to EOAs.

Specifically, it allows any EOA to set its code based on any existing smart contract. To do so, an EOA owner would sign an authorization that could then be submitted by anyone as part of the new transaction type. The code will be valid until replaced by another authorization. The authorization could be given for a single chain, or all chains at once.

This setup allows an EOA to mimic a smart contract account, particularly allowing transaction bundling, gas sponsorships, and custom permissioning schemes.
```

You can take advantage of Type 4 transaction support on Turnkey to:

1. Enable gasless transaction experiences: Design applications where transactions can be sponsored by third parties, removing the ETH requirement barrier for new users and simplifying onboarding.
2. Create seamless applications with transaction batching: Bundle multiple operations into single transactions, significantly reducing gas costs and improving UX for complex DeFi or high-frequency trading.
3. Implement flexible authentication systems: Build applications that can leverage passkeys and biometrics while maintaining compatibility with existing EOA infrastructure and reputation systems.

Type 4 transaction support is also live for our policy engine. Details about our engine language can be found [here](https://docs.turnkey.com/concepts/policies/language#struct), and an example demonstrating how to use @turnkey/viem to sign Type 4 transactions can be found [here](https://github.com/tkhq/sdk/blob/main/examples/with-viem/src/eip7702/signTransaction.ts).

### EIP-712

You can use Turnkey's `SignRawPayload` endpoint to sign payloads encoded as EIP-712 Typed Data, while also writing Policy Conditions which directly reference the attributes of this Typed Data.

This can be used to support integrations involving Hyperliquid, ERC-2612 Permits, or ERC-3009 Transfers, among many others.

SDK examples demonstrating the signing side of the above-mentioned integrations can be found below:

* Using `ethers`:
  * [hyperliquid](https://github.com/tkhq/sdk/tree/main/examples/with-ethers/src/eip712/hyperliquid.ts)
  * [erc-2612](https://github.com/tkhq/sdk/tree/main/examples/with-ethers/src/eip712/erc2612_permit.ts)
  * [erc-3009](https://github.com/tkhq/sdk/tree/main/examples/with-ethers/src/eip712/erc3009_transfer.ts)
* Using `viem`:
  * [hyperliquid](https://github.com/tkhq/sdk/tree/main/examples/with-viem/src/eip712/hyperliquid.ts)
  * [erc-2612](https://github.com/tkhq/sdk/tree/main/examples/with-viem/src/eip712/erc2612_permit.ts)
  * [erc-3009](https://github.com/tkhq/sdk/tree/main/examples/with-viem/src/eip712/erc3009_transfer.ts)

You can also find examples of EIP-712-aware Policies associated with these integrations on [our policy examples page](https://docs.turnkey.com/concepts/policies/examples#allow-signing-for-hyperliquid-approveagent-eip-712-payloads).

## Account abstraction

Turnkey is built to be flexible: a lot of our customers use Turnkey as a smart contract signer, alongside other types of signers.

This is so common that AA wallet providers have integrated Turnkey as a default solution in their documentation. Refer to our [AA Wallet](/reference/aa-wallets) documentation for further information.

## EIP-1193 provider

We've published an experimental package, which adheres to the [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193) standard. It's built to integrate seamlessly with a broad spectrum of EVM-compatible chains, offering capabilities like account management, transaction signing, and blockchain interaction.

## Wallet signer

Did you know? Turnkey activities can be signed with an API key, a passkey...or any Ethereum wallet if you use our package!

## Examples and demos

A lot of our demos use EVM chains and capabilities. The most complete demo is our **Demo Embedded wallet**, a fully-functional, hosted wallet which showcases (among other things) send and receive functionality on Sepolia.

Try it out at [wallet.tx.xyz](https://wallet.tx.xyz)!

The code behind this demo is open-source, available at [https://github.com/tkhq/demo-embedded-wallet/](https://github.com/tkhq/demo-embedded-wallet/)

If you're looking for shorter, more focused examples, here are a few worth checking out:

* [with-ethers](https://github.com/tkhq/sdk/tree/main/examples/with-ethers): demonstrates how to use Turnkey with Ethers
* [with-viem](https://github.com/tkhq/sdk/tree/main/examples/with-viem): demonstrates how to use Turnkey with Viem
* [with-zerodev-aa](https://github.com/tkhq/sdk/tree/main/examples/with-zerodev-aa): demonstrates how to use Turnkey with Zerodev + Viem to create sponsored transactions, and also EIP-7702 (Type 4) transactions
* [with-biconomy-aa](https://github.com/tkhq/sdk/tree/main/examples/with-biconomy-aa): demonstrates how to use Turnkey with Biconomy + Ethers / Viem to create sponsored transactions, including an example using Biconomy's Nexus Client
* [with-eth-passkeys-signer](https://github.com/tkhq/sdk/tree/main/examples/with-eth-passkeys-galore): demonstrates both Ethers and Viem integrations, with an optional Biconomy account abstraction integration.
* [with-gnosis](https://github.com/tkhq/sdk/tree/main/examples/with-gnosis): shows how to use Turnkey with [Gnosis (Safe)](https://safe.global/).
* [with-uniswap](https://github.com/tkhq/sdk/tree/main/examples/with-uniswap): shows how to use Turnkey with Uniswap, using Ethers.
* [with-eip-1193-provider](https://github.com/tkhq/sdk/tree/main/examples/with-eip-1193-provider): short example focused on EIP-1193 provider usage.

## Which EVM chains does Turnkey support?

Turnkey supports the EVM chains below for address derivation and signing arbitrary transactions:

* Arbitrum
* Aurora
* Avalanche C chain
* Avalanche Fuji
* Base
* Berachain
* BNB Smart Chain
* Celo
* Chiliz
* Cronos
* EON
* Ethereum
* Fantom
* Flare
* Gnosis
* Holesky Redstone
* Holesky Garnet
* Hyperliquid
* Lukso
* Linea
* Monad
* Moonbeam
* Optimism
* Palm
* Polygon
* Redstone
* Scroll
* zkSync
* Zora

If you are using an EVM chain we do not support, feel free to contact us at [hello@turnkey.com](mailto:hello@turnkey.com), on [X](https://x.com/turnkeyhq/), or [on Slack](https://join.slack.com/t/clubturnkey/shared_invite/zt-31v4yhgw6-PwBzyNsWCCBTk2xft3EoHQ).


# Movement
Source: https://docs.turnkey.com/networks/movement

Movement support on Turnkey

## Address derivation

Turnkey supports Movement address derivation. Movement is built on the Move VM and uses Ed25519 cryptography, which Turnkey fully supports.

## Transaction construction and signing

Turnkey supports Movement transaction signing through our core signing capabilities. We provide an example repository that demonstrates how to construct and sign Movement transactions:

* [`examples/with-movement`](https://github.com/tkhq/sdk/tree/main/examples/with-movement): demonstrates transaction construction and broadcast on Movement.

## Example

Here's a comprehensive example showing how to integrate Turnkey with Movement for transaction signing:

```typescript [expandable]
import { Turnkey } from "@turnkey/sdk-server";
import {
  MovementClient,
  AptosAccount,
  TxnBuilderTypes,
  BCS,
  HexString
} from "movement-sdk";

// Custom Turnkey signer for Movement
class TurnkeyMovementSigner {
  private turnkeyClient: Turnkey;
  private movementClient: MovementClient;
  private address: string;
  private organizationId: string;

  constructor(
    apiPrivateKey: string,
    apiPublicKey: string,
    organizationId: string,
    address: string,
    nodeUrl: string = "https://seed-node1.movementlabs.xyz"
  ) {
    this.turnkeyClient = new Turnkey({
      apiBaseUrl: "https://api.turnkey.com",
      apiPrivateKey,
      apiPublicKey,
      defaultOrganizationId: organizationId
    });

    this.movementClient = new MovementClient(nodeUrl);
    this.address = address;
    this.organizationId = organizationId;
  }

  // Get the account address
  getAddress(): string {
    return this.address;
  }

  // Sign a raw payload using Turnkey
  async signRawPayload(payload: Uint8Array): Promise<Uint8Array> {
    const hexPayload = Buffer.from(payload).toString('hex');

    const signResult = await this.turnkeyClient.signRawPayload({
      organizationId: this.organizationId,
      signWith: this.address,
      payload: hexPayload,
      encoding: "hex"
    });

    return Buffer.from(signResult.signature, 'hex');
  }

  // Submit a transaction to Movement
  async submitTransaction(payload: any): Promise<string> {
    try {
      // Get account info for sequence number
      const accountInfo = await this.movementClient.getAccount(this.address);
      const sequenceNumber = BigInt(accountInfo.sequence_number);

      // Get chain ID for the transaction
      const chainId = await this.movementClient.getChainId();

      // Build raw transaction
      const rawTx = new TxnBuilderTypes.RawTransaction(
        // Account address
        TxnBuilderTypes.AccountAddress.fromHex(this.address),
        // Sequence number
        sequenceNumber,
        // Transaction payload
        payload,
        // Max gas
        BigInt(10000),
        // Gas unit price
        BigInt(100),
        // Expiration timestamp (30 seconds from now)
        BigInt(Math.floor(Date.now() / 1000) + 30),
        // Chain ID
        new TxnBuilderTypes.ChainId(chainId)
      );

      // Serialize the transaction
      const serializer = new BCS.Serializer();
      rawTx.serialize(serializer);
      const toSign = serializer.getBytes();

      // Sign the transaction
      const signature = await this.signRawPayload(toSign);

      // In a real implementation, you would need the actual public key from the address
      // Here we use a placeholder
      const dummyPublicKey = new TxnBuilderTypes.Ed25519PublicKey(new Uint8Array(32));

      // Create authenticator
      const authenticator = new TxnBuilderTypes.TransactionAuthenticatorEd25519(
        dummyPublicKey,
        new TxnBuilderTypes.Ed25519Signature(signature)
      );

      // Create signed transaction
      const signedTx = new TxnBuilderTypes.SignedTransaction(
        rawTx,
        authenticator
      );

      // Submit transaction
      const txnResponse = await this.movementClient.submitTransaction(
        BCS.bcsToBytes(signedTx)
      );

      return txnResponse.hash;
    } catch (error) {
      console.error("Error submitting transaction:", error);
      throw error;
    }
  }
}

// Example usage: Transfer MOV tokens
async function transferMovTokens() {
  const signer = new TurnkeyMovementSigner(
    process.env.API_PRIVATE_KEY!,
    process.env.API_PUBLIC_KEY!,
    process.env.ORGANIZATION_ID!,
    process.env.MOVEMENT_ADDRESS!, // Your Movement address in Turnkey
    "https://testnet.movementlabs.xyz" // Use testnet URL for development
  );

  const recipientAddress = "0x..."; // Recipient address
  const amount = 1000000; // Amount (adjust decimal places as needed)

  // Create a transfer transaction payload
  const payload = new TxnBuilderTypes.TransactionPayloadEntryFunction(
    TxnBuilderTypes.EntryFunction.natural(
      "0x1::coin",
      "transfer",
      [new TxnBuilderTypes.TypeTagStruct(
        TxnBuilderTypes.StructTag.fromString("0x1::mov_coin::MOV")
      )],
      [
        BCS.bcsToBytes(TxnBuilderTypes.AccountAddress.fromHex(recipientAddress)),
        BCS.bcsSerializeUint64(amount)
      ]
    )
  );

  try {
    const txnHash = await signer.submitTransaction(payload);
    console.log(`Transaction submitted successfully! Hash: ${txnHash}`);
    return txnHash;
  } catch (error) {
    console.error("Error transferring tokens:", error);
    throw error;
  }
}

## Movement Network Support

Turnkey supports:

* Movement Mainnet
* Movement Testnet

## Key Features for Movement

* **Ed25519 Signing**: Turnkey fully supports the Ed25519 curve used by Movement
* **BCS Format Support**: Sign transactions serialized in the Binary Canonical Serialization format
* **Integration Example**: Our example repository provides a reference implementation for integrating with the Movement ecosystem

## Benefits of Using Turnkey with Movement

* **Secure Private Keys**: Keys are securely stored in Turnkey's infrastructure
* **Customizable Policies**: Implement rules to control when and how transactions are signed
* **Developer-Friendly**: Seamless integration with existing Movement development workflows
* **Enterprise-Ready**: Built for production environments with high security requirements

## Move Smart Contract Development

Movement leverages the Move VM for smart contracts. When developing Move smart contracts on Movement, Turnkey can securely manage your private keys for:

* Deploying Move modules
* Publishing packages
* Executing Move functions
* Managing on-chain resources

If you're building on Movement and need assistance with your Turnkey integration, feel free to contact us at [hello@turnkey.com](mailto:hello@turnkey.com), on [X](https://x.com/turnkeyhq/), or [on Slack](https://join.slack.com/t/clubturnkey/shared_invite/zt-31v4yhgw6-PwBzyNsWCCBTk2xft3EoHQ).
```


# Others
Source: https://docs.turnkey.com/networks/others



**Can't find your preferred network?**\
Turnkey is chain-agnostic, and our flexible infrastructure is built to
support underlying cryptographic curves, instead of specific chains and assets. If your chain isn’t mentioned, check if the underlying curve is compatible – we support signing for all chains and assets on the **Ed25519 and Secp256k1** curves.

This includes chains like:

* Algorand
* Avalanche
* Cardano
* Dogecoin
* Filecoin
* Hedera
* Litecoin
* Monero
* NEAR
* Polkadot
* Stellar
* Tezos
* TON (The Open Network)
* XRP
* …and more!

If you're unsure whether your chain is supported, don't hesitate to
[get in touch](https://www.turnkey.com/contact-us).

**Code example**\
Learn how to use Turnkey to interact with over 60 blockchain networks via
this [external demo](https://github.com/AdamikHQ/adamik-tutorial/tree/signer-turnkey).
Adamik's terminal-based application provides a user-friendly interface to explore the
following multichain capabilities, powered by Turnkey:

* Generating secure cryptographic keys
* Creating addresses for different networks
* Viewing account balances and token holdings
* Preparing, signing, and broadcasting transactions
* Visualizing API interactions in real time

**Want more support?**\
We are continuously evaluating and adding support for emerging assets and protocols.
If there are specific networks you'd like to see us offer deeper support for, or
if you're looking for more code examples, please let us know by contacting us at
[hello@turnkey.com](mailto:hello@turnkey.com), on X, or on Slack.


# Overview
Source: https://docs.turnkey.com/networks/overview

Turnkey operates at the **cryptographic curve** level rather than specific assets. As a result Turnkey is asset agnostic and can be used with any type of asset as long as we support the underlying curve.

## Multichain support at Turnkey

Turnkey is extremely flexible and supports all EVM and SVM chains, along with a vast majority of chains and assets across crypto. You don’t have to wait for us to add your preferred network.

This is because while other wallet infrastructure solutions focus on setting up support for each chain individually after they launch, Turnkey’s low-level approach focuses on supporting the underlying cryptographic curves: Secp2456k1 and Ed25519.

As a result, Turnkey is asset agnostic and can be used with any type of asset, as long as we support its corresponding curve.

## What is Turnkey's approach to supporting crypto assets?

Turnkey follows a tiered approach to supporting digital assets, ranging from supporting cryptographic curve support, to advanced transaction parsing and policy management. Each tier deepens the level of functionality, as outlined below:

**Tier 1: Curve-level support**

Cryptographic curves are our fundamental primitive, allowing Turnkey private keys to store and sign for any cryptocurrency that uses a supported curve. We currently support SECP256k1 and Ed25519 curves.

**Tier 2: Address derivation**

Turnkey abstracts address generation, automatically deriving addresses for supported cryptocurrencies.

For a full list of address formats you can derive on Turnkey, refer to [Address formats and Curves](/concepts/wallets).

**Tier 3: SDK for transaction construction and signing**

Our SDK provides tools and scripts to help in constructing and signing basic transactions, enabling an even smoother integration.

**Tier 4: Transaction parsing and policy creation**

At our highest level of support, Turnkey offers the ability to parse transactions and define custom policies based on transaction parameters.

| Tier   | Depth of support                 | EVM                                           | SVM                                           | BTC                                           | ATOM                                          | TRON                                          | SUI                                           | APT                                           | TON                                           | XRP                                           | SEI                                           |
| ------ | :------------------------------- | --------------------------------------------- | --------------------------------------------- | --------------------------------------------- | --------------------------------------------- | --------------------------------------------- | --------------------------------------------- | --------------------------------------------- | --------------------------------------------- | --------------------------------------------- | --------------------------------------------- |
| Tier 1 | Curve-level                      | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |
| Tier 2 | Address derivation               | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |
| Tier 3 | SDK construction and signing     | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |                                               |                                               |                                               |                                               |                                               |                                               |                                               |                                               |
| Tier 4 | Transaction parsing and policies | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |                                               |                                               | <Icon icon="square-check" iconType="solid" /> |                                               |                                               |                                               |                                               |                                               |

We are continuously evaluating and adding support for emerging assets and protocols. If there are specific cryptocurrencies you'd like to see us offer deeper support for, please let us know by contacting us at [hello@turnkey.com](mailto:hello@turnkey.com), on [X](https://x.com/turnkeyhq/), or [on Slack](https://join.slack.com/t/clubturnkey/shared_invite/zt-31v4yhgw6-PwBzyNsWCCBTk2xft3EoHQ).

For more details about each ecosystem, refer to the pages below:

<CardGroup cols="2">
  <Card title="Overview" icon="file-lines" iconType="solid" horizontal href="/networks/overview">
    Overview
  </Card>

  <Card title="Ethereum (EVM)" icon="file-lines" iconType="solid" horizontal href="/networks/ethereum">
    Ethereum (EVM)
  </Card>

  <Card title="Solana (SVM)" icon="file-lines" iconType="solid" horizontal href="/networks/solana">
    Solana (SVM)
  </Card>

  <Card title="Bitcoin" icon="file-lines" iconType="solid" horizontal href="/networks/bitcoin">
    Bitcoin
  </Card>

  <Card title="Cosmos" icon="file-lines" iconType="solid" horizontal href="/networks/cosmos">
    Cosmos
  </Card>

  <Card title="Tron" icon="file-lines" iconType="solid" horizontal href="/networks/tron">
    Tron
  </Card>

  <Card title="Sui" icon="file-lines" iconType="solid" horizontal href="/networks/sui">
    Sui
  </Card>

  <Card title="Sei" icon="file-lines" iconType="solid" horizontal href="/networks/sei">
    Sei
  </Card>

  <Card title="Aptos" icon="file-lines" iconType="solid" horizontal href="/networks/aptos">
    Aptos
  </Card>

  <Card title="Movement" icon="file-lines" iconType="solid" horizontal href="/networks/movement">
    Movement
  </Card>

  <Card title="Other" icon="file-lines" iconType="solid" horizontal href="/networks/others">
    Others
  </Card>
</CardGroup>


# Sei support on Turnkey
Source: https://docs.turnkey.com/networks/sei



## Address derivation

Turnkey supports Sei address derivation. Sei is part of the Cosmos ecosystem and uses the bech32 address format with the `sei` prefix. Addresses are derived using the SECP256k1 curve.

## Transaction construction and signing

Since Sei is based on the Cosmos SDK, you can leverage our Cosmos support for transaction construction and signing:

* [`@turnkey/cosmjs`](https://www.npmjs.com/package/@turnkey/cosmjs): our CosmJS integration works with Sei as well, allowing you to use a `TurnkeyDirectWallet` as a drop-in replacement.

## Example

Here's a practical example showing how to use Turnkey with Sei for a complete transaction flow:

<CodeGroup>
  ```typescript example.ts [expandable]
  import { Turnkey } from "@turnkey/sdk-server";
  import {
    SigningStargateClient,
    GasPrice,
    calculateFee,
  } from "@cosmjs/stargate";
  import { coins } from "@cosmjs/amino";

  // Import the initializeSeiSigner function from wallet.ts
  import { initializeSeiSigner } from "./wallet";

  // Initialize the Turnkey client
  const turnkeyClient = new Turnkey({
    apiBaseUrl: "https://api.turnkey.com",
    apiPrivateKey: process.env.API_PRIVATE_KEY,
    apiPublicKey: process.env.API_PUBLIC_KEY,
    defaultOrganizationId: process.env.ORGANIZATION_ID,
  });

  const signer = await initializeSeiSigner(turnkeyClient);

  // Connect to Sei network - use the appropriate endpoint for mainnet/testnet
  const rpcEndpoint = "https://sei-rpc.polkachu.com"; // Example RPC endpoint
  const client = await SigningStargateClient.connectWithSigner(
    rpcEndpoint,
    signer,
    {
      gasPrice: GasPrice.fromString("0.01usei"),
    }
  );

  const recipient = "sei1recipient..."; // Recipient address
  const amount = coins(1000000, "usei"); // 1 SEI
  const fee = calculateFee(200000, GasPrice.fromString("0.01usei"));

  const result = await client.sendTokens(
    signer.address,
    recipient,
    amount,
    fee,
    "Sent via Turnkey"
  );
  console.log("Transaction hash:", result.transactionHash);
  ```

  ```typescript wallet.ts [expandable]
  import { type TurnkeyApiClient } from "@turnkey/sdk-server";
  import { TurnkeyDirectWallet } from "@turnkey/cosmjs";

  // Connect to Sei and initialize signer
  export async function initializeSeiSigner(turnkeyClient: TurnkeyApiClient) {
    // Create a Turnkey-powered Sei signer
    const signer = await TurnkeyDirectWallet.init({
      config: {
        client: turnkeyClient.apiClient(),
        organizationId: process.env.ORGANIZATION_ID,
        signWith: process.env.SEI_ADDRESS, // Your Sei address in Turnkey
      },
      prefix: "sei", // Using the Sei prefix
    });

    // Get the account details
    const accounts = await signer.getAccounts();
    const account = accounts[0];

    console.log("Sei signer address:", account.address);
    console.log("Public key:", account.pubkey);

    return signer;
  }
  ```
</CodeGroup>

## Sei Network Support

Turnkey supports:

* Sei Mainnet (Pacific-1)
* Sei Testnet (Atlantic-2)

## Key Features for Sei

* **Cosmos SDK Compatibility**: Leverage the same tools used for Cosmos ecosystem
* **SECP256k1 Support**: Full support for Sei's cryptographic requirements
* **Flexible Signing**: Sign any Sei transaction format with Turnkey's signing API

## DApp Integration

For DApp developers looking to integrate with Sei, you can use Turnkey as a secure key management solution and combine it with:

* [Sei.js](https://www.npmjs.com/package/@sei-js/core) - Official JavaScript library for Sei
* [CosmJS](https://github.com/cosmos/cosmjs) - Popular JavaScript client library for the Cosmos ecosystem

## Benefits of Using Turnkey with Sei

* **Enhanced Security**: Private keys never leave Turnkey's secure infrastructure
* **Simplified Key Management**: No need to manage private keys in your application
* **Policy Control**: Apply transaction policies to control what can be signed
* **Multi-environment Support**: Use the same code across testnet and mainnet

If you're building on Sei and need assistance with your Turnkey integration, feel free to contact us at [hello@turnkey.com](mailto:hello@turnkey.com), on [X](https://x.com/turnkeyhq/), or [on Slack](https://join.slack.com/t/clubturnkey/shared_invite/zt-31v4yhgw6-PwBzyNsWCCBTk2xft3EoHQ).


# Solana (SVM) support on Turnkey
Source: https://docs.turnkey.com/networks/solana



## Address derivation

Turnkey supports Solana address derivation with `ADDRESS_TYPE_SOLANA`. Solana addresses are a simple encoding of the ed25519 public key.

## Transaction construction and signing

To construct and sign a Solana transaction we offer a `@turnkey/solana` NPM package. It offers a `TurnkeySigner` which integrates our remote signer with the official Solana [`web3js`](https://solana-labs.github.io/solana-web3.js/) library.

## Transaction parsing, policies, and signing

Turnkey has built a Solana parser which runs in a secure enclave, to parse unsigned transactions and extract metadata. Solana transactions are a list of instructions. We offer details about program keys, accounts, signers, and more. See the `SolanaTransaction` struct in our [policy language](/concepts/policies/language) page for a full list.

As a bonus, Turnkey also takes care of combining the signature with the original payload if you use the `SIGN_TRANSACTION` activity types: the input is the unsigned payload, and the output is the signed Solana transaction, ready to be broadcast onchain.

### Solana IDLs

You can use Solana IDLs in conjunction with our policy engine to secure users' transactions. See [the guide](/concepts/policies/smart-contract-interfaces) for more details.

## Import and export formats

Turnkey offers wallet or private key imports and export functionality. To be compatible with the Solana ecosystem, we support imports in mnemonics form (for wallet seeds, this is most common) or in base58 format (for single private key import or export).

See the [import](/embedded-wallets/code-examples/import) and [export](/embedded-wallets/code-examples/export) guides for more details.

## Wallet signer

Did you know? Turnkey activities can be signed with an API key, a passkey...or a Solana wallet if you use our [`@turnkey/wallet-stamper`](https://www.npmjs.com/package/@turnkey/wallet-stamper) package!

## Examples and demos

You can find an example of Solana transaction construction and broadcasting using `@turnkey/with-solana` in [`examples/with-solana`](https://github.com/tkhq/sdk/tree/main/examples/with-solana).

If you want to see [`@turnkey/wallet-stamper`](https://www.npmjs.com/package/@turnkey/wallet-stamper) in action, head to [`examples/with-wallet-stamper`](https://github.com/tkhq/sdk/tree/main/examples/with-wallet-stamper).


# Stacks
Source: https://docs.turnkey.com/networks/stacks



## Address derivation

Turnkey supports Stacks address derivation with `ADDRESS_FORMAT_COMPRESSED` and `ADDRESS_FORMAT_UNCOMPRESSED` address formats. Stacks addresses are derived from the secp256k1 curve, which Turnkey fully supports.

## Transaction construction and signing

Turnkey supports Stacks transaction signing through the core signing capabilities. We have an example respository that demonstrates how to construct and sign Stacks transactions:

> [examples/with-stacks:](https://github.com/tkhq/sdk/tree/main/examples/with-stacks) A sample script that demonstrates how to sign a [Stacks](https://docs.hiro.so/stacks/stacks.js) transaction with Turnkey. Stacks uses the secp256k1 cryptographic curve for transaction signing, but there some specific data formatting that takes place for the [signing process](https://github.com/stacksgov/sips/blob/main/sips/sip-005/sip-005-blocks-and-transactions.md#transaction-signing-and-verifying).

## Key Features for Stacks

* **secp256k1 signing**: Turnkey fully supports secp256k1 curve used by Stacks
* **Raw Transaction Signing**: Sign any Stacks transaction format with Turnkey's flexible signing API
* **Integration Example**: Our example repository provides a reference implementation

## Benefits of Using Turnkey with Stacks

* **Secure Key Management**: Private keys never leave Turnkey’s secure infrastructure
* **Developer Friendly**: Integrate with existing Stacks development workflows
* **Signing Policies**: Apply custom policies to control transaction approvals
* **Multi-address Support**: Manage multiple Stacks addresses under a single organization


# Sui support on Turnkey
Source: https://docs.turnkey.com/networks/sui



## Address derivation

Turnkey supports Sui address derivation with `ADDRESS_TYPE_SUI`. Sui addresses are derived from the Ed25519 curve, which Turnkey fully supports.

## Transaction construction and signing

Turnkey supports Sui transaction signing through the core signing capabilities. We provide an example repository that demonstrates how to construct and sign Sui transactions:

* [`examples/with-sui`](https://github.com/tkhq/sdk/tree/main/examples/with-sui): demonstrates transaction construction and broadcast on Sui.

## Example

Here's a practical example showing how to integrate Turnkey with the Sui SDK:

```typescript expandable
import * as dotenv from 'dotenv';
import * as path from 'path';
import { SuiClient, getFullnodeUrl } from '@mysten/sui/client';
import { Transaction } from '@mysten/sui/transactions';
import { Ed25519PublicKey } from '@mysten/sui/keypairs/ed25519';
import { messageWithIntent } from '@mysten/sui/cryptography';
import { Turnkey } from '@turnkey/sdk-server';
import { blake2b } from '@noble/hashes/blake2b';
import { bytesToHex } from '@noble/hashes/utils';

dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });

function toSerializedSignature({
  signature,
  pubKey,
}: {
  signature: Uint8Array;
  pubKey: Ed25519PublicKey;
}): string {
  const scheme = new Uint8Array([0x00]); // ED25519 flag
  const pubKeyBytes = pubKey.toRawBytes();
  const serialized = new Uint8Array(
    scheme.length + signature.length + pubKeyBytes.length
  );
  serialized.set(scheme, 0);
  serialized.set(signature, scheme.length);
  serialized.set(pubKeyBytes, scheme.length + signature.length);
  return Buffer.from(serialized).toString('base64');
}

async function main() {
  // load the variables from .env
  // SUI_ADDRESS and SUI_PUBLIC_KEY of the Turnkey signer
  const {
    ORGANIZATION_ID,
    API_PRIVATE_KEY,
    API_PUBLIC_KEY,
    SUI_ADDRESS,
    SUI_PUBLIC_KEY,
  } = process.env;

  // sending to the same address
  const recipient = SUI_ADDRESS;
  const amount = 1_000_000n; // 0.001 SUI

  const turnkeyClient = new Turnkey({
    apiBaseUrl: 'https://api.turnkey.com',
    apiPrivateKey: API_PRIVATE_KEY!,
    apiPublicKey: API_PUBLIC_KEY!,
    defaultOrganizationId: ORGANIZATION_ID!,
  });

  const provider = new SuiClient({ url: getFullnodeUrl('testnet') });
  const publicKey = new Ed25519PublicKey(Buffer.from(SUI_PUBLIC_KEY!, 'hex'));

  if (publicKey.toSuiAddress() !== SUI_ADDRESS) {
    throw new Error('SUI_PUBLIC_KEY does not match SUI_ADDRESS');
  }

  // fetch the user's SUI coin objects
  const coins = await provider.getCoins({
    owner: SUI_ADDRESS!,
    coinType: '0x2::sui::SUI',
  });
  if (!coins.data.length) throw new Error('No SUI coins');

  const tx = new Transaction();
  tx.setSender(SUI_ADDRESS!);
  tx.setGasPrice(await provider.getReferenceGasPrice());
  tx.setGasBudget(5_000_000n);
  tx.setGasPayment([
    {
      objectId: coins.data[0]!.coinObjectId,
      version: coins.data[0]!.version,
      digest: coins.data[0]!.digest,
    },
  ]);
  const coin = tx.splitCoins(tx.gas, [tx.pure('u64', amount)]);
  tx.transferObjects([coin], tx.pure.address(recipient));

  const txBytes = await tx.build();

  const intentMsg = messageWithIntent('TransactionData', txBytes);
  const digest = blake2b(intentMsg, { dkLen: 32 });

  const { r, s } = await turnkeyClient.apiClient().signRawPayload({
    signWith: SUI_ADDRESS!,
    payload: bytesToHex(digest),
    encoding: 'PAYLOAD_ENCODING_HEXADECIMAL',
    hashFunction: 'HASH_FUNCTION_NOT_APPLICABLE',
  });

  const signature = Buffer.from(r + s, 'hex');
  const serialized = toSerializedSignature({ signature, pubKey: publicKey });

  const result = await provider.executeTransactionBlock({
    transactionBlock: Buffer.from(txBytes).toString('base64'),
    signature: serialized,
    requestType: 'WaitForEffectsCert',
    options: { showEffects: true },
  });

  console.log('Transaction digest:', result.digest);
}

main().catch((err) => {
  console.error('Error:', err);
  process.exit(1);
});
```

## Sui Network Support

Turnkey supports:

* Sui Mainnet
* Sui Testnet
* Sui Devnet

## Key Features for Sui

* **Ed25519 Signing**: Turnkey fully supports the Ed25519 curve used by Sui
* **Raw Transaction Signing**: Sign any Sui transaction format with Turnkey's flexible signing API
* **Integration Example**: Our example repository provides a reference implementation

## Benefits of Using Turnkey with Sui

* **Secure Key Management**: Private keys never leave Turnkey's secure infrastructure
* **Developer Friendly**: Integrate with existing Sui development workflows
* **Signing Policies**: Apply custom policies to control transaction approvals
* **Multi-user Support**: Manage multiple Sui addresses under a single organization

If you're building on Sui and need assistance with Turnkey integration, feel free to contact us at [hello@turnkey.com](mailto:hello@turnkey.com), on [X](https://x.com/turnkeyhq/), or [on Slack](https://join.slack.com/t/clubturnkey/shared_invite/zt-31v4yhgw6-PwBzyNsWCCBTk2xft3EoHQ).


# Tron support on Turnkey
Source: https://docs.turnkey.com/networks/tron



## Address derivation

Turnkey supports Tron address derivation with `ADDRESS_TYPE_TRON`. Tron addresses are derived from the same SECP256k1 curve that is used for Ethereum addresses, but with a different address encoding format.

## Transaction construction and signing

Tron's transaction format is supported for signing in Turnkey. You can use the core signing capabilities to sign Tron transactions by constructing the transaction following the Tron protocol specifications and then using Turnkey's signing API.

## Example

Here's a more complete example of how to integrate Turnkey with TronWeb for transaction signing:

```typescript [expandable]
import { Turnkey } from "@turnkey/sdk-server";
import { TronWeb } from "tronweb";

// Initialize Turnkey client
const turnkeyClient = new Turnkey({
  apiBaseUrl: "https://api.turnkey.com",
  apiPrivateKey: process.env.API_PRIVATE_KEY,
  apiPublicKey: process.env.API_PUBLIC_KEY,
  defaultOrganizationId: process.env.ORGANIZATION_ID,
});

// Initialize TronWeb without a private key
const tronWeb = new TronWeb({
  fullHost: "https://api.shasta.trongrid.io", // Testnet
});

const turnkeyAddress = process.env.TRON_ADDRESS; // Your Tron address in Turnkey
const recipientAddress = "TYour_Recipient_Address";
const amount = 100; // Amount in SUN (1 TRX = 1,000,000 SUN)

// 1. Create an unsigned transaction
const unsignedTx = await tronWeb.transactionBuilder.sendTrx(
  recipientAddress,
  amount,
  turnkeyAddress
);

// Sign with Turnkey
const { r, s, v } = await turnkeyClient.apiClient().signRawPayload({
  organizationId: process.env.ORGANIZATION_ID,
  signWith: turnkeyAddress,
  payload: unsignedTx.raw_data_hex,
  encoding: "PAYLOAD_ENCODING_HEXADECIMAL",
});

// Add the signature to the transaction
unsignedTx["signature"] = r + s + v;

// 3. Broadcast the signed transaction
const result = await tronWeb.trx.sendRawTransaction(unsignedTx);

console.log("Transaction sent! ID:", result.txid);
```

## Tron Transaction Types

You can use Turnkey to sign various Tron transaction types:

* TRX transfers
* TRC10 token transfers
* TRC20 token transfers (smart contract interactions)
* Smart contract deployments
* Smart contract function calls
* Delegate/UnDelegate resource to another user
* Freeze/Unfreeze TRX to receives resources
* Update account permission to implement multisig

## Networks

Turnkey supports:

* Tron Mainnet
* Tron Shasta Testnet
* Tron Nile Testnet

## Policy Engine Integration

The policy engine currently supports the following Tron contract types:

* TransferContract - TRX transfers
* TriggerSmartContract - Smart contract, including but not limited to TRC-20, invocations
* DelegateResourceContract - Delegate resources, bandwidth or energy, to another user, use for gas sponsorship
* UnDelegateResourceContract - UnDelegate the resources delegated to an user
* FreezeBalanceV2Contract - Freeze TRX to receive bandwidth or energy
* UnfreezeBalanceV2Contract - Unfreeze frozen TRX
* AccountPermissionUpdateContract - Update permissions on an account, can be used for [multisig](https://developers.tron.network/docs/multi-signature)

A full field breakdown can be found in our [policy language definition](/concepts/policies/language) and examples can be found in [Tron policy examples](/concepts/policies/examples#tron)

To reference a Tron contract in the policy language you must specify the index of the contract in the contracts array: `tron.tx.contract[0]`. While Tron only currently supports 1 contract in this array, this could change in the future.

## Integration with Tron Tools

Turnkey can be integrated with popular Tron development tools such as:

* [TronWeb](https://github.com/tronprotocol/tronweb) - The official JavaScript API for interacting with the Tron network
* [TronBox](https://github.com/tronprotocol/tronbox) - A development framework for Tron smart contracts

## Benefits of Using Turnkey with Tron

* **Enhanced Security**: Private keys never leave Turnkey's secure infrastructure
* **Policy Controls**: Apply transaction policies to control what can be signed
* **Simplified Key Management**: No need to manage private keys in your application code
* **Multi-signature Support**: Enable quorum-based approvals for transactions

If you have any questions about using Turnkey with Tron or need assistance with integration, feel free to contact us at [hello@turnkey.com](mailto:hello@turnkey.com), on [X](https://x.com/turnkeyhq/), or [on Slack](https://join.slack.com/t/clubturnkey/shared_invite/zt-31v4yhgw6-PwBzyNsWCCBTk2xft3EoHQ).


# Embedded wallets implementation guide
Source: https://docs.turnkey.com/production-checklist/embedded-wallet

Designing your embedded wallet implementation

Turnkey is built to give you flexibility in exactly how you integrate.
This guide outlines the most important architectural and implementation choices that you'll make as you integrate wallets into your app.
It's designed to help you move quickly, avoid common pitfalls, and launch with confidence.

## Control model: Decide who holds the access

This is one of the most important architectural decisions you'll make: who is in control of the wallets you create in your app.

WIth Turnkey embedded wallets, each wallet is created in a segregated sub-organization. You can configure who has access to resources
in that sub-org at the time of creation. Turnkey offers a wide spectrum of options here, from fully user-controlled to fully app-controlled
and everything in between.

* **Fully user-controlled:** Only the user can authorize actions. Your backend has zero access. This option is best for personal wallets or
  any use case or audience where self-custody is important.

* **Fully app-controlled:** Your backend holds the authenticators used to authorize actions on behalf of the user. Simple UX and no
  restrictions on when or how actions are triggered, useful for things like limit orders or automated flows.

* **Delegated access:** The user controls the wallet, but your backend is granted narrow signing permissions via Turnkey's policy engine.
  Ideal for transaction automation without taking on full control.

* **Shared custody:** Both the user and your backend (or, the “co-signer) hold authenticators, and actions require approval from both.
  Accomplished via root quorum settings, like a 2-of-2 signing requirement, this setup can offer improved security depending on the level
  of independent validation done at the co-signer level.

Most teams choose user-controlled or delegated access models, but Turnkey supports the full spectrum and allows you to make the choice
that's right for your business.

## Authentication: Decide how users access their wallets

Another key design choice is how users will authenticate to authorize actions. Every API request to Turnkey must include a signature, or stamp,
over the POST body – that means every request to Turnkey needs to be authorized by a valid authenticator.

Turnkey supports a range of authentication methods that can be enabled **individually or in combination.** You can configure which methods are
allowed when getting started, and can always enable more options later as your product evolves.

* **Passkeys:** WebAuthn-based authentication using device biometrics or security keys. Provides the strongest combination of security and UX
  when supported by the user's browser and device.

* **Email (magic link or OTP):** Passwordless login using a one-time link or code sent to the user's email. Ubiquitous, familiar,
  and often the easiest option for onboarding.

* **Social login (OAuth):** Sign in with providers like Google or Apple. Smooth UX and fast setup for users already logged into those ecosystems.
  Requires OIDC configuration.

* **SMS (OTP):** Login via a code sent by text message. Convenient in some markets but generally less secure due to SIM-swap risk.

* **Multiple methods:** You can enable multiple authenticators per user — for example, allowing passkey + email fallback,
  or social login + SMS recovery. This can improve account recovery or accessibility across devices.

Most teams guide users toward one or two authentication methods based on their product goals, but if your use case demands maximum flexibility,
you can enable any or all of the above and let users choose.

Just like with the control model, there's no single right answer - the best approach depends on who your users are and how much control or
recovery flexibility you want to offer.

## Session handling: Decide how to manage session credentials

In Turnkey, sessions are just asymmetric key pairs held client-side that can be used to authorize actions. Once a user signs in,
they can take multiple actions like viewing balances or signing transactions without re-authenticating each time.
When designing your session approach, there are two key decisions to make: where sessions are stored, and how long they last.

Storage\
Turnkey supports multiple storage approaches for session credentials, each with tradeoffs depending on platform and use case.

IndexedDB session (web only): For web apps that want stronger session persistence without relying on iframes or exposing credentials to your app’s JavaScript runtime, Turnkey supports using the [SubtleCrypto](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto) API to generate unextractable asymmetric key pairs and store them securely in the browser’s IndexedDB.

This approach enables long-lived, client-held sessions that survive page reloads, tab closures, and even browser restarts - **without ever exposing the private key** to your JavaScript code.

Turnkey’s SDK provides helpers to:

* Create a new session by generating a P-256 key pair via `crypto.subtle.generateKey()`
* Sign requests
* Store and retrieve the key using IndexedDB under a given session ID
* Abstractions built on top of the `IndexedDBStamper` that simplify authentication flows

This is currently the **most persistent** session model for modern browsers that support WebCrypto. It is especially valuable in Progressive Web App (PWA) contexts or when iframe and localStorage approaches are insufficient.

To see a full working example, check out our [IndexedDB sdk example](https://github.com/tkhq/sdk/tree/main/examples/with-indexed-db). Or our [Web demo application](https://github.com/tkhq/demo-ewk) that leverages abstractions such as the `IndexedDbClient` for full e2e authentication flows.

Iframe-based session: Turnkey hosts a secure iframe at [https://auth.turnkey.com](https://auth.turnkey.com) which can be used to store the session credential
used to authorize actions, without exposing those credentials to your app. This method is secure and browser-isolated, but:

* Sessions last only as long as the iframe persists
* iOS aggressively clears iframe storage, making it less reliable on mobile
* React Native does not support iframes

Local storage: The session credential can also be stored directly in Local Storage. This allows the credential to persist across tabs,
reloads, or components in web apps. However, your app's domain can access Local Storage, so credentials must be handled with care.

SecureStorage (mobile only): On mobile devices, session credentials can be stored in the device's native secure storage layer,
such as Keychain (iOS) or Keystore (Android). This offers the strongest guarantees for durability and isolation in native mobile apps.

Duration\
Session credentials are time-bound and expire after the duration you specify. This is set via the expirationSeconds parameter
when the session is created. The default is 900 seconds (15 minutes), but you can configure this to suit your needs.

To read more about sessions and how to manage them, head to the [Sessions Overview page](https://docs.turnkey.com/authentication/sessions#sessions).

## Wallet type: Decide between smart contract and key-based wallets

Turnkey supports two types of wallets: smart contract wallets and key-based wallets. Both are fully compatible with Turnkey's signing
infrastructure — the difference lies in how the wallet behaves on-chain, and what additional infrastructure it requires.

HD wallets generate addresses and private keys from a single seed, and work across multiple chains using standard derivation paths.
They're contractless, chain-agnostic, and compatible with any network that supports standard signing curves — no bundlers or on-chain
deployment required.

Smart contract wallets give you more flexibility. These wallets use a smart contract to manage access control, enabling features like gas
sponsorship, modular recovery, or batching. Turnkey can act as the signer behind these contracts, whether you're using your own implementation
or integrating with frameworks like ZeroDev or Alchemy's Account Kit.

Use smart contract wallets when you need advanced features. Otherwise, key-based wallets are simpler, faster, and work everywhere.

## Wallet portability: Should users be able to import/export?

Turnkey supports both import and export of private keys via secure iframe flows.

Export lets users back up their wallet (e.g. display their mnemonic phrase). Import lets users bring an existing wallet into Turnkey.

You do not need to offer either of these, but we do recommend enabling export to ensure users can bring their funds with them if they need.

Import/export flows never expose the raw private key to your backend; they happen entirely in an isolated iframe and are encrypted client-side.


# Production Checklist
Source: https://docs.turnkey.com/production-checklist/production-checklist

This checklist contains recommendations and steps specifically for deploying an Embedded Wallet production environment.

## Production Setup

* Many of our customers prefer to maintain separate Development and Production [organizations](/concepts/organizations). If you choose to do so, ensure your production environment is referencing the correct organization ID.
* Ensure you have an active subscription via the Account Settings page in the Turnkey dashboard.
* If you are on an Enterprise plan, confirm your production organization ID with your account rep.

<Warning>
  Double check our [resource limits](/concepts/resource-limits) and [rate
  limits](/faq#do-you-have-any-rate-limits-in-place-in-your-public-api) to
  ensure your implementation will not trigger these limits at production scale.
</Warning>

## Security

* Lock down your [root quorum](/concepts/users/root-quorum). We recommend a quorum of at least 3 with a threshold of at least 2.
* Ensure any team members with critical permissions, especially root quorum members, have set up at least two authenticators for their account (e.g., touchID plus a hardware authenticator like a Yubikey).
* Avoid using root user permissions for routine operations and instead use standard users with permissions explicitly granted via policies to limit the surface area of a compromised user.
* Confirm that all API keys are stored securely and not embedded in exposed or vulnerable parts of the codebase. API keys should be stored in a secure, encrypted environment and should never be hard-coded in publicly accessible repositories or client-side code.

## Logging

* Key identifiers in our service include sub-organization IDs, wallet IDs and addresses. Ensure these identifiers are securely stored, associated with your users as necessary.
* Set up logging for activities and include relevant identifiers needed for audit, compliance, or troubleshooting purposes. We recommend logging activity IDs, status, creation date, as well as credential IDs and public keys of the approvers. You should also log other resource IDs if relevant for your data model (policies, tags, wallets, accounts, etc)

## Errors and Retries

* Activity submission is optimistically synchronous. In most cases activities will be completed and returned right away (synchronously), but if there is a lot of activity in a single organization, activities will be processed asynchronously. Make sure you handle PENDING activities by polling a few times until their completion. You can use [createActivityPoller](https://github.com/tkhq/sdk/blob/d9ed2aefc92d298826a40e821f959b019ea1936f/packages/http/src/async.ts#L101) to do this if you're using our Typescript SDK.
* Implement retry strategies for API calls, adjusting for various error types and avoiding over-retrying on critical failures. Incorporate [rate limiting](/faq#do-you-have-any-rate-limits-in-place-in-your-public-api) and exponential backoff in retry mechanisms.
* Set up monitoring to detect and alert on patterns of failures


# Transaction Automation Implementation Guide
Source: https://docs.turnkey.com/production-checklist/transaction-automation

Implementing transaction automation with Turnkey

Turnkey's infrastructure provides a secure, flexible way to manage crypto operations at scale, letting you automate everything from
routine payments and treasury transfers to smart contract deployments and NFT minting.

In this guide, we'll walk through the key decisions you'll face integrating Turnkey, and how to design a high-throughput workflow
without compromising on security or user experience.

## Wallet structure: how to organize and scale your wallets

Every transaction starts with a wallet. The way you structure them will shape how scalable and maintainable your automation setup is.

**Option 1:** Single wallet with many accounts (HD path fan-out)\
By default, Turnkey wallets use a hierarchical deterministic (HD) structure. That means you can generate unlimited accounts
from a single wallet seed, each with its own address. This is ideal for:

* Managing multiple user deposit addresses
* Creating large numbers of accounts for batching or privacy
* Assigning different onchain roles (e.g. one account for contract deployment, another for transfers)

This approach scales well and stays simple: one wallet, one policy, multiple accounts.

**Option 2:** Multiple wallets in a single org\
Use this when you need separation by use case. For example:

* One wallet for treasury ops
* One for NFT mints
* One for sequencing contracts

Policies can be set at the wallet level to enforce clear boundaries (e.g. only certain users or services can touch the NFT minting wallet).
Note Turnkey's [resource limits](https://docs.turnkey.com/concepts/resource-limits#resource-limits) and ensure your intended
scaled implementation fits within those limits.

**Option 3:** Separate sub-orgs per wallet\
This option is best when you need strict isolation — e.g. multi-tenant environments, or wallets with different authentication requirements.
Each sub-org has its own root users and policy namespace. Downside: more setup, more moving parts.

Most teams use a combination: they generate many accounts under a few wallets and reserve sub-orgs for user-facing or high-risk cases.

## Trigger model: what kicks off transactions

Transaction automation can be reactive, proactive, or user-driven. The right model depends on your use case.

**Event-driven (most common):**\
A transaction is triggered by an external event — a webhook, an internal job, or an offchain signal. Examples:

* Market resolution triggers a payout
* Onchain price changes trigger a rebalancing tx
* A user hits a “claim” button in your app

Use a background worker or event system to translate that trigger into a signing request.

**Scheduled:**\
Useful for treasury management, yield compounding, or periodic distribution flows. Run a job hourly/daily and trigger signing from there.

**Manual with automation fallback:**\
Sometimes a human should have the final say, but you want the transaction to be ready to go. You can submit a tx to Turnkey
that requires approval, then notify a signer via Slack, email, or dashboard.

Tip: Think in terms of "intent capture" (when does your system decide something needs to happen) vs. "signing execution"
(when and how does it actually get signed).

## Policy model: what rules do you want enforced?

Policies are your automation safety net. Every action goes through the policy engine before it's allowed, and is explicitly denied by default.

You'll want to decide:\
**How many approvers?**

* Use single-party approvals for low-risk flows (e.g. daily payouts)
* Add quorum-based approvals (2-of-N) for anything that could move real money
* You can enforce consensus based on value thresholds, contract targets, asset type, and more

**Which users can do what?**

* Assign narrow permissions to service accounts (e.g. only sign txs from wallet A to address X)
* Add additional controls per user role or tag (e.g. “engineer” vs. “ops”)

**What transactions are allowed?**

* Restrict by destination address (eth.tx.to)
* Restrict by method ID (eth.tx.data\[:4])
* Restrict by value (eth.tx.value)
* Combine all of the above with consensus rules

**How do you enforce UX constraints?**

* Require user co-signing for certain transactions
* Allow delegated signing within strict bounds
* Use different policies for different environments (e.g. testnet policy vs. mainnet)

Most automation systems have 3-5 core policies and evolve them as their product grows. Start tight, then expand.

## Integration model: which interface drives automation?

All interfaces (CLI, SDK, API) go through the same policy and enclave flow. The only difference is where your logic lives.

**CLI:**\
Best for prototyping or scripting internal workflows (e.g. rotate a key, create a wallet). You can also use it in CI pipelines.

**SDK:**\
Ideal for integrating into apps or backend services. Available in multiple programming languages. Handles signing, retries,
and activity submission.

**Direct API:**\
Use this if you want full control or are building from a non-standard language. Slightly more effort to get right, but fully supported.

**Dashboard:**\
Not for automation — but useful for manual approval flows, audit trails, and monitoring.

**Common pattern:**

* Use SDK in your backend to submit signing requests
* Use webhook or polling to detect consensus-needed flows
* Use CLI for one-off or recovery flows
* Use dashboard to inspect what happened

Graveyard - add back when IndexedDb launches

By default, session keys are stored in IndexedDB when running in the browser. These keys are non-extractable and can't be accessed by your app,
by Turnkey, or by anything else running on the page. On mobile, session keys will typically be stored in the device's secure storage layer
(e.g. Keychain or Keystore) depending on the SDK and environment.

The biggest decision is how long sessions should last. Longer-lived sessions reduce friction, enabling users to stay signed in across reloads,
tabs, or app restarts. For most embedded wallet use cases, long-lived sessions in IndexedDB strike a good balance between usability and safety.

Scoping\
You'll also want to decide whether your sessions should be scoped.

Scoped sessions allow you to define exactly what a given session key is allowed to do — and enforce it via Turnkey's policy engine. For example,
you can issue sessions that:

* are read-only
* can only sign transactions below a certain value
* can only interact with specific contracts or functions (e.g. a swap function on Uniswap)

This gives you a flexible way to enforce step-up authentication flows (e.g. OTP for read-only, passkey + OTP for full signing),
build approval-based transaction flows, or safely grant session access in more complex environments.


# Fiat Onramp
Source: https://docs.turnkey.com/products/embedded-wallets/features/fiat-on-ramp

Turnkey’s Fiat Onramp lets your end users convert traditional currency (USD, EUR, etc.) into crypto assets (ETH, USDC, BTC, etc.) directly within your application.

## Overview

By embedding Turnkey’s SDK and leveraging our Fiat Onramp you get:

* Seamless user flows: No need to redirect off-site, users stay within your UI.
* Multiple payment rails: Credit/debit cards, bank transfers (ACH, SEPA), and more.
* Provider flexibility: You can choose between onramp providers, MoonPay and Coinbase, or run parallel flows.
* Compliance & KYC: Identity verification flows are built in from providers.

## Access and Pricing

Fiat Onramp is available to all Enterprise customers. To enable this feature, please reach out to the Turnkey team ([help@turnkey.com](mailto:help@turnkey.com)).

## Prerequisites

1. Choose which Onramp provider(s) you want to integrate with. See our current list of supported [Onramp Providers](#on-ramp-providers) below for coverage and pricing to best fit your needs.
2. Create an account with your chosen Onramp provider(s) and complete the required KYB process.
3. Once your KYB application has been approved, you will be provisioned API Keys. You can then securely send your provisioned API Keys to Turnkey's Product Success team via pgp, secure email, or another secure channel. Turnkey will securely encrypt your API Keys.
4. You're now ready to start using Turnkey's Fiat Onramp.

### Onramp Providers

| Provider |                                                                                                            |                                                                                                                |                                                                                                     |                                                                                                                        |
| :------- | :--------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- |
| Coinbase | [Payment Methods](https://docs.cdp.coinbase.com/onramp-&-offramp/developer-guidance/payment-methods)       | [Supported Currencies](https://onramp-asset-availability.vercel.app/)                                          | [Country Support](https://onramp-asset-availability.vercel.app/)                                    | [Fees](https://docs.cdp.coinbase.com/onramp-&-offramp/developer-guidance/faq#what-fees-do-you-charge%3F)               |
| MoonPay  | [Payment Methods](https://support.moonpay.com/customers/docs/all-supported-payment-methods?lng=en#on-ramp) | [Supported Currencies](https://support.moonpay.com/customers/docs/moonpays-supported-currencies?lng=en#buying) | [Country Support](https://support.moonpay.com/customers/docs/moonpays-unsupported-countries?lng=en) | [Fees](https://support.moonpay.com/customers/docs/all-supported-payment-methods?lng=en#what-are-the-fees-with-moonpay) |

## Demos

### Coinbase

The Coinbase demo is running in a sandbox environment which means:

* KYC information is mocked
* Purchases are completed with test credit cards
* Onramp transactions are simulated

<Frame>
  <video controls muted width="auto" height="auto">
    <source src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/videos/embedded-wallets/fiat-on-ramp/coinbase-demo.mp4" type="video/mp4" />

    Your browser does not support HTML5 video.
  </video>
</Frame>

#### Using the Coinbase demo

1. Complete KYC
   * Phone number: `(555) 555-5555`
   * Email: `onramp@yourdomain.com`
   * Credit Card Information
     1. Name on card: `Jane Doe`
     2. Card number: `4242 4242 4242 4242`
     3. Expiry date: `01/29`
        * Any future `MM/YY` date is valid
     4. CVC: `123`
        * Any three digit number is valid
   * Billing address: enter any valid address
2. Verify your mobile number
   * Enter any 6 digit code
     * Coinbase does not send an OTP code in sandbox mode

### MoonPay

The MoonPay demo is running in a sandbox environment which means:

* KYC information is mocked
  * 3D-Secure verification is simulated
* Purchases are completed with test credit cards
* Onramp transactions are executed on testnets
  * You can view your transactions on the testnet block explorer

<Frame>
  <video controls muted width="auto" height="auto">
    <source src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/videos/embedded-wallets/fiat-on-ramp/moonpay-demo.mp4" type="video/mp4" />

    Your browser does not support HTML5 video.
  </video>
</Frame>

#### Using the MoonPay demo

1. Enter a valid email address to receive an OTP code
2. Enter the OTP code sent to your email address
3. Re-enter the prefilled form values to confirm order
   * Credit Card CVC: `123`
   * 3D-Secure 2 Authentication Password: `Checkout1!`

## Implementation Guide

See the [Fiat Onramp Code Example](/embedded-wallets/code-examples/fiat-on-ramp) for more details on how to implement.


# Multichain support
Source: https://docs.turnkey.com/products/embedded-wallets/features/multi-chain-support

Overview of our multichain network support.

Turnkey delivers robust multichain support that enables seamless integration across a variety of cryptocurrency ecosystems. Leveraging secure cryptographic fundamentals and advanced transaction solutions, our platform simplifies managing digital assets across multiple networks.

Explore more about each network:
ss

<CardGroup cols="2">
  <Card title="Overview" icon="file-lines" iconType="solid" horizontal href="/networks/overview">
    Overview
  </Card>

  <Card title="Ethereum (EVM)" icon="file-lines" iconType="solid" horizontal href="/networks/ethereum">
    Ethereum (EVM)
  </Card>

  <Card title="Solana (SVM)" icon="file-lines" iconType="solid" horizontal href="/networks/solana">
    Solana (SVM)
  </Card>

  <Card title="Bitcoin" icon="file-lines" iconType="solid" horizontal href="/networks/bitcoin">
    Bitcoin
  </Card>

  <Card title="Cosmos" icon="file-lines" iconType="solid" horizontal href="/networks/cosmos">
    Cosmos
  </Card>

  <Card title="Tron" icon="file-lines" iconType="solid" horizontal href="/networks/tron">
    Tron
  </Card>

  <Card title="Sui" icon="file-lines" iconType="solid" horizontal href="/networks/sui">
    Sui
  </Card>

  <Card title="Sei" icon="file-lines" iconType="solid" horizontal href="/networks/sei">
    Sei
  </Card>

  <Card title="Aptos" icon="file-lines" iconType="solid" horizontal href="/networks/aptos">
    Aptos
  </Card>

  <Card title="Movement" icon="file-lines" iconType="solid" horizontal href="/networks/movement">
    Movement
  </Card>

  <Card title="Other" icon="file-lines" iconType="solid" horizontal href="/networks/others">
    Others
  </Card>
</CardGroup>


# null
Source: https://docs.turnkey.com/products/transaction-automation/features/export-wallets



The process of exporting wallets or private keys from Turnkey is broken up into two primary steps:

<Steps>
  <Step>
    Export the wallet or private key via Turnkey. You must specify the wallet or
    private key ID, as well as a target public key, which the wallet or private
    key will be encrypted to. Encryption ensures that the key material is only
    accessible by the client, and cannot be extracted by any man-in-the-middle
    (MITM)
  </Step>

  <Step>Decrypt the resulting bundle returned by Turnkey</Step>
</Steps>

See the [Enclave to end-user secure channel](/security/enclave-secure-channels) for more technical details.

## Implementation Guides

See [Code Examples](/embedded-wallets/code-examples/export) for more details.


# null
Source: https://docs.turnkey.com/products/transaction-automation/features/import-wallets



The process of importing wallets or private keys into Turnkey is broken up into three primary steps:

<Steps>
  <Step>
    Initialize the import process. This produces an import bundle, containing a
    public key and signature. These artifacts will be used in the next step to
    ensure that key material is only accessible by Turnkey, and cannot be
    extracted by any man-in-the-middle (MITM)
  </Step>

  <Step>Encrypt the key material to the artifacts from the previous step</Step>
  <Step>Import the encrypted bundle to Turnkey</Step>
</Steps>

See the [Enclave to end-user secure channel](/security/enclave-secure-channels) for more technical details.

## Implementation Guides

See [Code Examples](/embedded-wallets/code-examples/import) for more details.


# Multichain support
Source: https://docs.turnkey.com/products/transaction-automation/features/multi-chain-support

Overview of our multichain network support.

Turnkey delivers robust multichain support that enables seamless integration across a variety of cryptocurrency ecosystems. Leveraging secure cryptographic fundamentals and advanced transaction solutions, our platform simplifies managing digital assets across multiple networks.

Explore more about each network:

<CardGroup cols="2">
  <Card title="Overview" icon="file-lines" iconType="solid" horizontal href="/networks/overview">
    Overview
  </Card>

  <Card title="Ethereum (EVM)" icon="file-lines" iconType="solid" horizontal href="/networks/ethereum">
    Ethereum (EVM)
  </Card>

  <Card title="Solana (SVM)" icon="file-lines" iconType="solid" horizontal href="/networks/solana">
    Solana (SVM)
  </Card>

  <Card title="Bitcoin" icon="file-lines" iconType="solid" horizontal href="/networks/bitcoin">
    Bitcoin
  </Card>

  <Card title="Cosmos" icon="file-lines" iconType="solid" horizontal href="/networks/cosmos">
    Cosmos
  </Card>

  <Card title="Tron" icon="file-lines" iconType="solid" horizontal href="/networks/tron">
    Tron
  </Card>

  <Card title="Sui" icon="file-lines" iconType="solid" horizontal href="/networks/sui">
    Sui
  </Card>

  <Card title="Sei" icon="file-lines" iconType="solid" horizontal href="/networks/sei">
    Sei
  </Card>

  <Card title="Aptos" icon="file-lines" iconType="solid" horizontal href="/networks/aptos">
    Aptos
  </Card>

  <Card title="Movement" icon="file-lines" iconType="solid" horizontal href="/networks/movement">
    Movement
  </Card>

  <Card title="Other" icon="file-lines" iconType="solid" horizontal href="/networks/others">
    Others
  </Card>
</CardGroup>


# QuorumOS
Source: https://docs.turnkey.com/products/transaction-automation/features/security/quorum-os



# Overview

QuorumOS is Turnkey’s minimal, immutable Linux unikernel designed for high-security enclaves. It provides:

* A deterministic build system ensuring reproducible, auditable artifacts.
* A small trusted computing base, reducing attack surface.
* An initialization and attestation framework that verifies only authorized code runs within the enclave.
* Integration with hardware root-of-trust modules (e.g., AWS Nitro Security Module) to establish secure execution environments.


# Remote Attestation
Source: https://docs.turnkey.com/products/transaction-automation/features/security/remote-attestation



Remote attestation enables an enclave to cryptographically prove its identity and integrity to a remote verifier. Key points:

* Enclaves generate a signed quote containing measurements (hashes) of their code and configuration.
* Only quotes signed by a hardware root of trust (e.g., AWS Nitro Security Module) are considered valid.
* The verifier checks the quote against expected measurements to ensure no unauthorized modifications.
* Attestation workflows typically follow:
  1. Host application sends an attestation request to the enclave.
  2. Enclave performs measurement, signs the quote, and returns it.
  3. Host or external verifier validates the signature and measurements.

This process establishes trust before any sensitive data or operations are performed within the enclave.


# Secure Hardware
Source: https://docs.turnkey.com/products/transaction-automation/features/security/secure-hardware



Secure hardware provides strong isolation and attestation for sensitive operations:

* Hardware-enforced isolation: secure enclaves have no external networking or persistent storage.
* Root quorum: use ≥3 members with threshold ≥2; each critical user should set up multiple authenticators (e.g., Touch ID, YubiKey).
* Store API keys securely in hardware security modules (HSMs) or encrypted vaults; never hard-code keys in code or client-side.
* Use HPKE-based secure channels for enclave ↔ end-user communication.
* Leverages hardware root-of-trust modules (e.g., AWS Nitro Security Module) for cryptographic attestation.


# Account Abstraction Wallets
Source: https://docs.turnkey.com/reference/aa-wallets

Turnkey offers flexible infrastructure to create and manage keys. These keys can be used as a signer inside of an [Account Abstraction wallet](https://www.erc4337.io/), and we've partnered with [Alchemy](https://www.alchemy.com/) and [ZeroDev](https://zerodev.app/) to integrate in a few lines of code.

## Alchemy's Account Kit

You can use Turnkey with Alchemy's Account Kit via the [aa-signers](https://accountkit.alchemy.com/signer/what-is-a-signer) package to generate embedded wallets, and leverage [aa-alchemy](https://accountkit.alchemy.com/signer/custom-signer#implementing-smartaccountsigner) to create smart accounts for your users.

Visit [the Alchemy Account Kit documentation](https://www.alchemy.com/docs/wallets/signer/what-is-a-signer#alchemy-signer) for more information.

## ZeroDev Wallets

By combining Turnkey with ZeroDev you can create AA wallets with powerful functionalities such as sponsoring gas, batching transactions, and more.

Visit [the ZeroDev documentation](https://docs.zerodev.app/sdk/signers/turnkey) for more information.

## Biconomy Smart Accounts

Create a Biconomy Smart Account and add a Turnkey signer to manage your private key and authentication methods by using Turnkey's API.

For detailed code snippets and an integration guide, refer to the [Biconomy documentation](https://docs.biconomy.io/new/getting-started/getting-started).

Ethereum's latest EIP-7702 standard gives superpowers to Externally Owned Accounts (EOAs). Biconomy has a guide on how to leverage gas abstracted transactions with Turnkey and Biconomy, enabling Turnkey EOAs to become smart accounts through delegation to Nexus. The tutorial showcases gas abstracted batch execution - users can pay gas fees with ERC20 tokens from their EOA. Refer to [Biconomy documentation](https://docs.biconomy.io/new/integration-guides/wallets-and-signers/turnkey) to get started.

## permissionless.js Accounts

permissionless.js is a TypeScript library built on viem for building with ERC-4337 smart accounts, bundlers, paymasters, and user operations.

permissionless.js defines the `SmartAccountSigner` interface which supports Turnkey as a signer. You can find a detailed example for integrating a Turnkey signer with permissionless.js in the [Pimlico documentation](https://docs.pimlico.io/permissionless/how-to/signers/turnkey).


# Embedded Wallet Kit (EWK)
Source: https://docs.turnkey.com/reference/embedded-wallet-kit

Turnkey offers a suite of react components to create embedded wallets without having to setup a backend by using Next.js [server actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations) and associated directives. Each component uses the **indexedDbClient** from [@turnkey/sdk-react](https://www.npmjs.com/package/@turnkey/sdk-react).

<Note>
  An example is hosted [here](https://wallets.turnkey.com/), and reference to the code can be found [here](https://github.com/tkhq/demo-ewk).
</Note>

## How to Use Turnkey EWK

To use the embedded wallet kit effectively, your project is required to:

1. Use **Next.js 13+** with the [/app directory structure](https://nextjs.org/docs/app) to leverage server actions.

2. Import Turnkey's default styles in your `layout.tsx` or equivalent entry point:

   ```js
   import "@turnkey/sdk-react/styles";
   ```

3. **Set up environment variables** in your `.env` file to configure API connections and optional OAuth providers.

**Environment Variables**:

| Variable                         | Description                                                                                                                  |
| -------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |
| `TURNKEY_API_PUBLIC_KEY`         | Your Turnkey API public key *(required)*.                                                                                    |
| `TURNKEY_API_PRIVATE_KEY`        | Your Turnkey API private key *(required)*.                                                                                   |
| `NEXT_PUBLIC_BASE_URL`           | Base URL for Turnkey API *(default: `https://api.turnkey.com`)*.                                                             |
| `NEXT_PUBLIC_ORGANIZATION_ID`    | Your Turnkey organization ID *(required)*.                                                                                   |
| `NEXT_PUBLIC_EXPORT_IFRAME_URL`  | URL for the Turnkey wallet export iframe *(default: `https://export.turnkey.com`)*.                                          |
| `NEXT_PUBLIC_IMPORT_IFRAME_URL`  | URL for the Turnkey wallet import iframe *(default: `https://import.turnkey.com`)*.                                          |
| `NEXT_PUBLIC_GOOGLE_CLIENT_ID`   | Google OAuth Client ID *(required only if enabling Google login in `authConfig`)*.                                           |
| `NEXT_PUBLIC_APPLE_CLIENT_ID`    | Apple OAuth Client ID *(required only if enabling Apple login in `authConfig`)*.                                             |
| `NEXT_PUBLIC_FACEBOOK_CLIENT_ID` | Facebook OAuth Client ID *(required only if enabling Facebook login in `authConfig`)*.                                       |
| `NEXT_PUBLIC_OAUTH_REDIRECT_URI` | OAuth Redirect URI *(required only if enabling Google, Apple, or Facebook login, e.g., `https://your-app.ngrok-free.app/`)*. |

## **1. Authentication with the `Auth` Component**

The `Auth` component provides authentication functionality, including email, passkey, phone, and social logins.

**Usage Example**:

```js
import { Auth } from "@turnkey/sdk-react";
import { toast } from "sonner";

function AuthPage() {
  const handleAuthSuccess = async () => {
    console.log("Auth successful!"); // You can now use your indexedDbClient to make requests!
  };

  const handleAuthError = (errorMessage: string) => {
    toast.error(errorMessage);
  };

  const authConfig = {
    emailEnabled: true,
    passkeyEnabled: true,
    phoneEnabled: false,
    googleEnabled: true,
    appleEnabled: false,
    facebookEnabled: false,
  };

  const configOrder = ["socials", "email", "phone", "passkey"];

  return (
    <Auth
      authConfig={authConfig}
      configOrder={configOrder}
      onAuthSuccess={handleAuthSuccess}
      onError={handleAuthError}
    />
  );
}

export default AuthPage;
```

Your component should look like the below

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/reference/img/auth.png" alt="auth" />
</Frame>

## **2. Importing and Exporting Wallets**

The `Import` and `Export` components allow users to import or export wallets securely.

**Import Wallet Example**:

```js
import { Import } from "@turnkey/sdk-react";
import { toast } from "sonner";

function ImportWallet() {
  const handleImportSuccess = async () => {
    toast.success("Wallet successfully imported!");
  };

  const handleImportError = (errorMessage: string) => {
    toast.error(errorMessage);
  };

  return (
    <Import
      onHandleImportSuccess={handleImportSuccess}
      onError={handleImportError}
    />
  );
}

export default ImportWallet;
```

**Export Wallet Example**:

```js
import { Export } from "@turnkey/sdk-react";
import { toast } from "sonner";

function ExportWallet() {
  const walletId = "your-wallet-id";

  const handleExportSuccess = async () => {
    toast.success("Wallet successfully exported!");
  };

  const handleExportError = (errorMessage: string) => {
    toast.error(errorMessage);
  };

  return (
    <Export
      walletId={walletId}
      onHandleExportSuccess={handleExportSuccess}
      onError={handleExportError}
    />
  );
}

export default ExportWallet;
```

Your components should look like the below

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/reference/img/export_button.png" alt="export" />
</Frame>

Import

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/reference/img/import_button.png" alt="import" />
</Frame>

## **3. Optional: Customizing Themes with `TurnkeyThemeProvider`**

The `TurnkeyThemeProvider` allows you to apply custom styles using CSS variables. This is optional and can be used to customize Turnkey components to match your application's design.

**Usage Example**:

```js
import { TurnkeyThemeProvider } from "@turnkey/sdk-react";

const customTheme = {
  "--text-primary": "#333333",
  "--button-bg": "#4c48ff",
  "--button-hover-bg": "#3b38e6",
};

export default function App() {
  return (
    <TurnkeyThemeProvider theme={customTheme}>
      <YourComponent />
    </TurnkeyThemeProvider>
  );
}
```

You can customize any CSS variable used by Turnkey components. For the full list of available variables, refer to the [this .css file](https://github.com/tkhq/sdk/blob/main/packages/sdk-react/src/components/theme.css) Below is an example of a dark mode theme.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/reference/img/auth_with_theme.png" alt="auth with theme" />
</Frame>


# How to Integrate Gasless Transactions On Solana With Turnkey
Source: https://docs.turnkey.com/reference/solana-gasless-transactions



Turnkey offers flexible infrastructure to create and manage private keys. By combining the secure private key infrastructure and with gas abstracted transactions, developers can easily integrate account abstraction features for any Turnkey-powered wallets.

## **Setting up Gasless Transactions on Solana (SVM)**

Turnkey offers deep and robust support for the [<u>Solana (SVM) ecosystem</u>](https://docs.turnkey.com/networks/solana). We utilize the Ed25519 cryptographic curve as the primitive for signing transactions, provide address derivation support, and make it easy to integrate for SVM through various SDKs. Beyond this, Solana developers can also leverage SVM transaction parsing and policies, managed by the Turnkey Policy Engine. 

Here’s how to take advantage of Turnkey’s composable primitives for gas abstraction:

### **Option 1: Using Solana Address Fee Payer**

For this approach, we will leverage [examples/with-solana](https://github.com/tkhq/sdk/tree/main/examples/with-solana), a full example of Solana transaction construction, and broadcasting using [@turnkey/with-solana](https://www.npmjs.com/package/@turnkey/solana). For a more comprehensive, full-stack example that leverages passkeys, check out [<u>examples/with-solana-passkeys</u>](https://github.com/tkhq/sdk/tree/main/examples/with-solana-passkeys).

\
First, you’ll need to use one of the two optional environmental variables: `SOLANA_ADDRESS_FEE_PAYER`. While optional, the variable is necessary to create a separate fee payer address. The setup is as simple as passing in the fee payer address into the [<u>withFeePayer.ts</u>](https://github.com/tkhq/sdk/blob/main/examples/with-solana/src/withFeePayer.ts)

```javascript
// Assumes `turnkeyClient` is initialized and `createNewSolanaWallet` is available.

let feePayerAddress = process.env.SOLANA_ADDRESS_FEE_PAYER;
if (!feePayerAddress) {
  feePayerAddress = await createNewSolanaWallet(turnkeyClient.apiClient());
  console.log(`\nYour new Solana address: "${feePayerAddress}"`);
} else {
  console.log(
    `\nUsing existing Solana address from ENV: "${feePayerAddress}"`,
  );
}
```

### **Option 2: Build a Paymaster on Solana using Turnkey**

This method showcases the flexibility of Turnkey infrastructure and was written and open sourced by another developer building on top of Turnkey. Please note that the repo referenced below is not maintained by Turnkey itself.

[<u>Build a Paymaster on Solana using Turnkey</u>](https://github.com/tkhq/turnkey-solana-paymaster) is easy to follow and will guide you from start to finish:

1. Admin: Setting up Turnkey account, API keys, and Solana public/private key pairs
2. Installing Dependencies
3. Frontend Implementation
4. Backend Implementation
5. Receiving and Broadcasting the Completed Transactions

## **Setting up Gasless Transactions on Ethereum (EVM)**

At the moment, Turnkey does not offer out-of-the-box gas sponsorships for the EVM ecosystem. This may change soon, and any updates will be announced via our official channels. 

For now, you can leverage Turnkey’s partnerships with ZeroDev and Alchemy to provide gasless experiences to the end-users. Refer to the [<u>Account Abstraction article</u>](https://docs.turnkey.com/reference/aa-wallets#:~:text=Account%20Abstraction%20wallet) for more information.

## **Thinking about gasless transactions for other chains?**

If you have questions, feedback, or find yourself in need of a gas abstraction or integration that doesn’t exist yet, please get in touch with us!

* Join our slack community [<u>here</u>](https://join.slack.com/t/clubturnkey/shared_invite/zt-31v4yhgw6-PwBzyNsWCCBTk2xft3EoHQ)
* Contact us at [<u>hello@turnkey.com</u>](mailto:hello@turnkey.com)


# How To Integrate Gasless Transactions On Tron With Turnkey
Source: https://docs.turnkey.com/reference/tron-gasless-transactions



Turnkey offers flexible infrastructure to create and manage private keys. By combining the secure private key infrastructure and with gas abstracted transactions, developers can easily integrate account abstraction features for any Turnkey-powered wallets.

## **Setting up Gasless Transactions on Tron (TVM)**

Turnkey offers deep and robust support for the [<u>Tron (TVM) ecosystem</u>](https://docs.turnkey.com/networks/tron). We utilize the SECP256K1 elliptic curve as the primitive for signing transactions, and provide address derivation support. Beyond this, Tron developers can also leverage TVM transaction parsing and policies for additional security and transaction granularity, all managed by the Turnkey Policy Engine.

Below, we demonstrate how to take advantage of Tron’s existing smart contract functions, combining it with Turnkey’s infrastructure to give end-users a gasless wallet experience, while maintaining the high standard for security, flexibility, and scalability.

### **Gasless Architecture: Setup guide**

1. **Stake TRX for Bandwidth (resource)**
   * Ensure that your organization’s Turnkey wallet is funded with a sufficient TRX balance

     > **TIP:** This can be a wallet contained within your parent organization
   * Initialize the staking activity by calling the [<u>freezeBalanceV2</u>](https://developers.tron.network/reference/freezebalancev2-1) function

     > Refer to Tron Network’s [<u>official documentation</u>](https://developers.tron.network/docs/) for further information
2. **Delegate the resource to end-user wallets**
   * After you’ve initialized the staking operation using freezeBalanceV2 (Step 1) you’re now able to delegate the resources to end-user wallets
   * From the staking wallet, make a call to the Tron network using [<u>DelegateResource</u>](https://developers.tron.network/reference/delegateresource-1) function
     * `owner_address`: Wallet that is staking TRX (Step 1A)
     * `receiver_address`: Wallet controlled by the end-user
     * `resource`: The resource you’re delegating, bandwidth
3. **Transaction flow (end-user)**
   * After the staking has been initialized and resources delegated, the user experience is trivial: end-user wallets (receiver\_address) can transact via the Tron network without needing to provide gas for their own transactions.

### **Leveraging delegateResource smart contract function**

As shown above, we are leveraging the existing [<u>DelegateResource</u>](https://developers.tron.network/reference/delegateresource-1) call to delegate bandwidth or energy resources to other accounts. Note that this operation requires you to have Tron’s native network token TRX staked in order to fund end-user’s transactions.

```shellscript
{
  "owner_address": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g",
  "receiver_address": "TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1",
  "balance": 1000000,
  "resource": "BANDWIDTH",
  "lock": false,
  "visible": true
}
```

> **Remember**: In the context of Tron, `owner_address` will be the Turnkey wallet that holds and stakes TRX. The `receiver_address` will be the end-user wallets.

### **Setting up Gasless Transactions on Ethereum (EVM) and Solana (SVM)**

At the moment, Turnkey does not offer out-of-the-box gas sponsorships for the EVM ecosystem. This may change soon, and any updates will be announced via our official channels. 

For now, you can leverage Turnkey’s partnerships with ZeroDev and Alchemy to provide gasless experiences to the end-users. Refer to the [<u>Account Abstraction article</u>](https://docs.turnkey.com/reference/aa-wallets#:~:text=Account%20Abstraction%20wallet) for more information.

For Solana, head on over to [<u>How to Integrate Gasless Transactions on Solana With Turnkey</u>](https://docs.turnkey.com/reference/solana-gasless-transactions) article to learn how to create an in-house Solana Paymaster!

### **Thinking about gasless transactions for other chains?**

If you have questions, feedback, or find yourself in need of a gas abstraction or integration that doesn’t exist yet, please get in touch with us! You  can

* Join our slack community [<u>here</u>](https://join.slack.com/t/clubturnkey/shared_invite/zt-31v4yhgw6-PwBzyNsWCCBTk2xft3EoHQ)
* Contact us at [<u>hello@turnkey.com</u>](mailto:hello@turnkey.com)


# ApiKeyStamper
Source: https://docs.turnkey.com/sdks/advanced/api-key-stamper



## Introduction

The [`@turnkey/api-key-stamper`](https://www.npmjs.com/package/@turnkey/api-key-stamper) package simplifies the process of using your public/private API keys and passkeys to stamp and approve activity requests for Turnkey's API. This stamping mechanism is central to the API's security, ensuring that each request is authenticated and authorized. For an in-depth understanding of API keys see [this section](/faq#why-do-you-require-a-public--private-key-pair-to-access-turnkey-api).

## Installing

To get started install the [`@turnkey/api-key-stamper`](https://www.npmjs.com/package/@turnkey/api-key-stamper) client.

<CodeGroup>
  ```bash npm
  pnpm i @turnkey/api-key-stamper
  ```

  ```bash pnpm
  pnpm i @turnkey/api-key-stamper
  ```

  ```bash yarn
  yarn add @turnkey/api-key-stamper
  ```
</CodeGroup>

## Initializing

The `ApiKeyStamper` class implements the `TStamper` interface used by the [TurnkeyClient](/sdks/advanced/turnkey-client) in the `@turnkey/http` module. It encapsulates the logic necessary to sign activity requests and generates the appropriate HTTP headers for authentication. To get started with an `ApiKeyStamper`, you can initialize it using its constructor:

### `constructor(config: TApiKeyStamperConfig): TStamper`

<ParamField body="config" type="TApiKeyStamperConfig" required>
  An object containing configuration settings for the stamper.
</ParamField>

<ParamField body="apiPrivateKey" type="string" required>
  Your Turnkey API private key.
</ParamField>

<ParamField body="apiPublicKey" type="string" required>
  Your Turnkey API public key.
</ParamField>

### Types

#### `TApiKeyStamperConfig`

```js
type TApiKeyStamperConfig = {
  apiPublicKey: string;
  apiPrivateKey: string;
};
```

#### `TStamper`

```js
interface TStamper {
  stamp: (input: string) => Promise<TStamp>;
};
```

#### Example

The example below shows how to initialize and use the `ApiKeyStamper` with the `TurnkeyClient` to make a request to Turnkey's [`/public/v1/query/whoami`](/api-reference/sessions/who-am-i) endpoint:

```js
import { TurnkeyClient } from "@turnkey/http";
import { ApiKeyStamper } from "@turnkey/api-key-stamper";

// Following best practices, define parameters in your .env file
const baseUrl = process.env.TURNKEY_BASE_URL || "https://api.turnkey.com";
const apiPublicKey = process.env.TURNKEY_API_PUBLIC_KEY;
const apiPrivateKey = process.env.TURNKEY_API_PRIVATE_KEY;

// Initialize the API key stamper
const stamper = new ApiKeyStamper({ apiPublicKey, apiPrivateKey });

// Initialize the Turnkey client
const tk = new TurnkeyClient({ baseUrl }, stamper);

// Now you can make authenticated requests using the APIKeyStamper
const whoami = await tk.getWhoami({
  organizationId: "<Your Org ID>",
});
```

## Methods

### `stamp: (input: string) => Promise<TStamp>`

Creates a digital stamp which includes the public key, signature scheme, and a signature.

#### Parameters

<ParamField body="payload" type="string" required>
  The payload that needs to be stamped.
</ParamField>

#### Types

##### `TStamp`

```js
type TStamp = {
  stampHeaderName: string;
  stampHeaderValue: string;
};
```


# IframeStamper
Source: https://docs.turnkey.com/sdks/advanced/iframe-stamper



## Introduction

The [`@turnkey/iframe-stamper`](https://www.npmjs.com/package/@turnkey/iframe-stamper) package, while sharing a similar purpose with the `@turnkey/api-key-stamper`, caters specifically to the unique context of iframes. This package is designed for stamping requests within an iframe, using credentials for Turnkey's API, but operates distinctly from the API key stamper. Unlike the API key stamper, which has direct access to the API private key to compute signatures or stamps directly, the iframe stamper interacts with credentials in a more indirect manner.

It leverages the `postMessage` communication mechanism to send and receive messages within the iframe, ensuring the credential does not leave its secure environment. This approach is particularly crucial in sensitive flows such as [Email Auth](/authentication/email), and [Key or Wallet Export](/wallets/export-wallets), where heightened security is required. The `@turnkey/iframe-stamper` works in tandem with `@turnkey/http`, facilitating secure and efficient communication in these specific use cases.

By bridging the gap between the iframe's isolated environment and Turnkey's API, the iframe stamper plays a pivotal role in maintaining the integrity and security of the credential while ensuring seamless operation within the iframe context.

## Installing

To start using the `@turnkey/iframe-stamper` client, install it as follows:

<CodeGroup>
  ```bash npm
  npm i @turnkey/iframe-stamper
  ```

  ```bash pnpm
  pnpm i @turnkey/iframe-stamper
  ```

  ```bash yarn
  yarn add @turnkey/iframe-stamper
  ```
</CodeGroup>

## Initializing

The IframeStamper class, part of the @turnkey/iframe-stamper package, is designed for stamping Turnkey requests through credentials in an iframe. It's used with @turnkey/http for constructing various flows. The class can manage iframe interactions for credential insertion, wallet exports, and request stamping. Here's how you can initialize an IframeStamper:

### `constructor(config: TIframeStamperConfig): IframeStamper`

#### Parameters

<ParamField body="config" type="TIframeStamperConfig" required>
  An object containing configuration settings for the iframe stamper.
</ParamField>

<ParamField body="iframeUrl" type="string" required>
  The URL of the iframe to be used.
</ParamField>

<ParamField body="iframeElementId" type="string" required>
  The ID to assign to the iframe element.
</ParamField>

<ParamField body="iframeContainer" type="HTMLElement | null | undefined" required>
  The container element in which the iframe will be inserted.
</ParamField>

#### Types

##### `TIframeStamperConfig`

```js
type TIframeStamperConfig = {
  iframeUrl: string;
  iframeElementId: string;
  iframeContainer: HTMLElement | null | undefined;
};
```

#### Example

For full example check out the [email-auth](https://github.com/tkhq/sdk/tree/main/examples/email-auth) example in our SDK repo. You should also read up [Email Auth](/authentication/email) for more information on the technical details of how it works.

## Methods

### `init: () => Promise<string>`

Initializes the iframe stamper by inserting the iframe into the DOM and establishing communication with it. This method returns a promise that resolves to the iframe's public key, which is used for subsequent operations like credential injection or request stamping.

#### Example

```js
import { IframeStamper } from "@turnkey/iframe-stamper";
import { TurnkeyClient } from "@turnkey/http";

const TurnkeyIframeContainerId = "turnkey-iframe-container";
const TurnkeyIframeElementId = "turnkey-iframe";

const iframeStamper = new IframeStamper({
  iframeUrl: process.env.IFRAME_URL!,
  iframeContainer: document.getElementById(TurnkeyIframeContainerId),
  iframeElementId: TurnkeyIframeElementId,
});

// This inserts the iframe in the DOM and returns the public key
const publicKey = await iframeStamper.init();
```

### `injectCredentialBundle: (bundle: string) => Promise<boolean>`

Injects a new credential bundle into the iframe, a process used in email authentication flows. The method requires an encrypted credential bundle, which should be encrypted to the iframe's initial public key using HPKE ([RFC 9180](https://www.rfc-editor.org/rfc/rfc9180.html)). Upon successful execution, it returns a `Promise<boolean>` that resolves to `true` if the bundle was successfully injected into the iframe, or `false` otherwise.

#### Parameters

<ParamField body="bundle" type="string" required>
  The encrypted credential bundle that needs to be injected into the iframe. This bundle should be encrypted with the iframe's initial public key using HPKE ([RFC 9180](https://www.rfc-editor.org/rfc/rfc9180.html)).
</ParamField>

#### Example

```
// .. Add imports and init iframeStamper

// Pasted into the iFrame by the user
const credentialBundle = "<your-encrypted-credentials-bundle>";

// Injects a new credential in the iframe
const injected = await iframeStamper.injectCredentialBundle(credentialBundle);
```

### `injectKeyExportBundle: (bundle: string) => Promise<boolean>`

Injects an export bundle into the iframe. This method is used during key export flows. The bundle should be encrypted to the iframe's initial public key using HPKE ([RFC 9180](https://www.rfc-editor.org/rfc/rfc9180.html)). This method returns a `Promise<boolean>` which resolves to `true` if the bundle was successfully injected into the iframe, or `false` otherwise.

#### Parameters

<ParamField body="bundle" type="string" required>
  The encrypted export bundle that needs to be injected into the iframe. This bundle should be encrypted with the iframe's initial public key using HPKE ([RFC 9180](https://www.rfc-editor.org/rfc/rfc9180.html)).
</ParamField>

#### Example

```js
// .. Add imports and init the IframeStamper

// Pasted into the iFrame by the user
const walletExportBundle = "<your-encrypted-wallet-export-bundle>";

const injected =
  await iframeStamper.injectWalletExportBundle(walletExportBundle);
```

### `injectWalletExportBundle: (bundle: string) => Promise<boolean>`

Injects a wallet export bundle into the iframe. This method is typically used during wallet export flows. The bundle should be encrypted to the iframe's initial public key using HPKE (RFC 9180). It returns a `Promise<boolean>` which resolves to `true` if the bundle is successfully injected into the iframe, or `false` otherwise.

#### Parameters

<ParamField body="bundle" type="string" required>
  The encrypted wallet export bundle to be injected into the iframe. This bundle must be encrypted using the iframe's initial public key according to HPKE (RFC 9180) standards.
</ParamField>

#### Example

```js
// .. Add imports and init the IframeStamper

// Pasted into the iFrame by the user
const walletExportBundle = "<your-encrypted-wallet-export-bundle>";

const injected =
  await iframeStamper.injectWalletExportBundle(walletExportBundle);
```

### `publicKey: () => string | null`

Returns the public key of the iframe, or `null` if the underlying iframe isn't properly initialized. This method is useful for retrieving the public key which is necessary for various operations like credential injection or request stamping.

#### Example

```js
// .. Add imports and init the IframeStamper

const iframePublicKey = iframeStamper.publicKey();
```

### `clear: () => void`

Removes the iframe from the DOM. This method is useful for cleaning up the iframe when it is no longer needed. It ensures that the iframe is properly disposed of, preventing potential memory leaks or other unintended side effects.

#### Example

```js
// .. Add imports and init the IframeStamper

iframeStamper.clear();
```


# TurnkeyClient
Source: https://docs.turnkey.com/sdks/advanced/turnkey-client



## Introduction

The [`@turnkey/http`](https://www.npmjs.com/package/@turnkey/http) package is a fully-typed lower-level HTTP client for developers integrating with Turnkey.

## Installing

To get started install the [`@turnkey/http`](https://www.npmjs.com/package/@turnkey/http) client.

<CodeGroup>
  ```bash npm
  npm i @turnkey/http
  ```

  ```bash pnpm
  pnpm i @turnkey/http
  ```

  ```bash yarn
  yarn add @turnkey/http
  ```
</CodeGroup>

## Initializing

Create a new client for use in your JavaScript/Typescript applications.

You can initialize a new **`TurnkeyClient`** using the **`TurnkeyClient`** constructor. The **`TurnkeyClient`** serves as your entry point to interact with the Turnkey API.

### Parameters

<ParamField body="config" type="THttpConfig" required>
  An object containing configuration settings for the client.
</ParamField>

<ParamField body="baseUrl" type="string" required>
  The base URL for the Turnkey API. Note: An error `Missing base URL. Please verify env vars.` will be thrown if a value is not provided.
</ParamField>

<ParamField body="stamper" type="TStamper" required>
  An instance of a stamper class (e.g. [**`ApiKeyStamper`**](/sdks/advanced/api-key-stamper)) used to create signatures for authenticating API requests.
</ParamField>

Currently Turnkey provides 3 stampers:

* applications signing requests with Passkeys or webauthn devices should use [`@turnkey/webauthn-stamper`](/sdks/advanced/webauthn-stamper)
* applications signing requests with API keys should use [`@turnkey/api-key-stamper`](/sdks/advanced/api-key-stamper)
* applications that need to sign requests within an iframe, particularly when handling sensitive operations like Auth, or Key or Wallet Export, should use the [`@turnkey/iframe-stamper`](/sdks/advanced/iframe-stamper).

You can also implement the TStamper interface yourself. For more information on implementing a custom stamper checkout the [API Design](/developer-reference/api-overview/intro) docs.

### Types

#### `THttpConfig`

```bash
type THttpConfig = {
  baseUrl: string;
};
```

#### `TStamper`

```bash
interface TStamper {
  stamp: (input: string) => Promise<TStamp>;
}
```

### Example

```js
import { TurnkeyClient } from "@turnkey/http";
import { ApiKeyStamper } from "@turnkey/api-key-stamper";

// Following best practices, define parameters in your .env file
const baseUrl = process.env.TURNKEY_BASE_URL || "https://api.turnkey.com";
const apiPublicKey = process.env.TURNKEY_API_PUBLIC_KEY;
const apiPrivateKey = process.env.TURNKEY_API_PRIVATE_KEY;

// Initialize the API key stamper
const stamper = new ApiKeyStamper({ apiPublicKey, apiPrivateKey });

// Initialize the Turnkey client and then you're ready to use the Turnkey client! 🎉
const client = new TurnkeyClient({ baseUrl }, stamper);
```


# WalletStamper
Source: https://docs.turnkey.com/sdks/advanced/wallet-stamper



## Introduction

The [`@turnkey/wallet-stamper`](https://www.npmjs.com/package/@turnkey/wallet-stamper) package provides a flexible mechanism for using your Solana or EVM wallet to stamp and approve activity requests for Turnkey's API. This stamping process leverages your wallet's signature key to authenticate requests securely.

## Installing

To get started, install the [`@turnkey/wallet-stamper`](https://www.npmjs.com/package/@turnkey/wallet-stamper) client.

<CodeGroup>
  ```bash npm
  npm i @turnkey/wallet-stamper
  ```

  ```bash pnpm
  pnpm i @turnkey/wallet-stamper
  ```

  ```bash yarn
  yarn add @turnkey/wallet-stamper
  ```
</CodeGroup>

## Initializing

The `WalletStamper` class implements the `TStamper` interface used by the [TurnkeyClient](/sdks/advanced/turnkey-client) in the [`@turnkey/http`](https://www.npmjs.com/package/@turnkey/http) package. It encapsulates the logic necessary to sign activity requests using your wallet and generate the appropriate HTTP headers for authentication.

### `constructor(wallet: WalletInterface): TStamper`

#### Parameters

<ParamField body="wallet" type="WalletInterface" required>
  An object representing your wallet, either a Solana or EVM wallet.
</ParamField>

<ParamField body="type" type="string" required>
  The type of wallet, either `solana` or `evm`.
</ParamField>

<ParamField body="signMessage" type="function" required>
  A function that signs a message using your wallet's private key.
</ParamField>

<ParamField body="recoverPublicKey" type="function" required>
  A function that recovers the public key from the signed message (required for EVM wallets).
</ParamField>

#### Types

##### `SolanaWalletInterface`

```js
export interface SolanaWalletInterface extends BaseWalletInterface {
  recoverPublicKey: () => string;
  type: "solana";
}
```

##### `EvmWalletInterface`

```js
export interface EvmWalletInterface extends BaseWalletInterface {
  recoverPublicKey: (message: string, signature: string) => Promise<string>;
  type: "evm";
}
```

##### `WalletInterface`

```js
export type WalletInterface = SolanaWalletInterface | EvmWalletInterface;
```

## Methods

### `stamp: (input: string) => Promise<TStamp>`

Signs the payload using the wallet's private key and returns the stamp to be used in the HTTP headers for authenticating requests to Turnkey's API.

#### Parameters

<ParamField body="payload" type="string" required>
  The payload that to be stamped. This is the stringified JSON request body that you want to send to Turnkey's API.
</ParamField>

#### Types

##### `TStamp`

```js
type TStamp = {
  stampHeaderName: string;
  stampHeaderValue: string;
};
```

##### `TStamper`

```js
interface TStamper {
  stamp: (input: string) => Promise<TStamp>;
}
```

## Example

The example below shows how to initialize and use the `WalletStamper` with the `TurnkeyClient` to make a request to Turnkey's [`/public/v1/query/whoami`](/api-reference/sessions/who-am-i) endpoint:

```js
// Import the dependencies for the Solana
import { Keypair } from "@solana/web3.js";
import { decodeUTF8 } from "tweetnacl-util";
import nacl from "tweetnacl";

import { TurnkeyClient } from "@turnkey/http";
import { WalletStamper, SolanaWalletInterface } from "@turnkey/wallet-stamper";

class SolanaWallet implements SolanaWalletInterface {
  keypair = Keypair.fromSecretKey(SOLANA_PRIVATE_KEY);
  type = "solana" as const;

  async signMessage(message: string): Promise<string> {
    const messageBytes = decodeUTF8(message);
    const signature = nacl.sign.detached(messageBytes, this.keypair.secretKey);
    return Buffer.from(signature).toString("hex");
  }

  recoverPublicKey(): string {
    // Convert the base24 encoded Solana wallet public key (the one displayed in the wallet)
    // into the ed25519 decoded public key
    const ed25519PublicKey = Buffer.from(
      this.keypair.publicKey.toBuffer(),
    ).toString("hex");
    return ed25519PublicKey;
  }
}

// Instantiate the WalletStamper with the SolanaWallet
const walletStamper = new WalletStamper(new SolanaWallet());

// Instantiate the TurnkeyClient with the WalletStamper
const client = new TurnkeyClient({ baseUrl: BASE_URL }, walletStamper);

// You're now ready to make requests to Turnkey's API 🎉
```

## Conclusion

The `WalletStamper` class provides a seamless integration with Turnkey's API, enabling you to leverage your existing wallet for secure, authenticated requests. By following this guide, you can quickly set up and start using `WalletStamper` in your projects.


# WebauthnStamper
Source: https://docs.turnkey.com/sdks/advanced/webauthn-stamper



## Introduction

The [`@turnkey/webauthn-stamper`](https://www.npmjs.com/package/@turnkey/webauthn-stamper) package is used for stamping requests made to Turnkey's API with WebAuthn credentials, but specifically for use with passkeys.

For more information on passkeys and WebAuthn refer to [this section](/authentication/passkeys/introduction).

## Installing

To get started install the [`@turnkey/webauthn-stamper`](https://www.npmjs.com/package/@turnkey/webauthn-stamper) client.

<CodeGroup>
  ```bash npm
  npm i @turnkey/webauthn-stamper
  ```

  ```bash pnpm
  pnpm i @turnkey/webauthn-stamper
  ```

  ```bash yarn
  yarn add @turnkey/webauthn-stamper
  ```
</CodeGroup>

## Initializing

The `WebauthnStamper` class is a utility designed to facilitate the process of creating a digital stamp using WebAuthn credentials. This stamp is essential for authenticating requests made to a web server or API that utilizes WebAuthn for secure, passwordless authentication. You can initialize a new `WebauthnStamper` using the WebauthnStamper constructor:

### `constructor(config: TWebauthnStamperConfig): WebauthnStamper`

#### Parameters

<ParamField body="config" type="TWebauthnStamperConfig" required>
  An object containing configuration settings for the stamper.
</ParamField>

<ParamField body="rpId" type="string" required>
  The RPID ("Relying Party ID") for your origin. For an origin named `https://www.example.com`, the RPID is typically `example.com`. If you're testing on localhost, the RPID should be `localhost`.
</ParamField>

<ParamField body="timeout" type="number">
  The time in milliseconds before the stamp request times out. Defaults to 300000 milliseconds (5 minutes) if not specified.
</ParamField>

<ParamField body="userVerification" type="UserVerificationRequirement">
  Specifies the user verification requirements. Can be set to values like `required`, `preferred`, or `discouraged`. Defaults to `preferred` if not provided.
</ParamField>

<ParamField body="allowCredentials" type="PublicKeyCredentialDescriptor[]">
  An array of credential descriptors specifying the credentials to be allowed during authentication. This is optional and defaults to an empty array.
</ParamField>

#### Types

##### `TWebauthnStamperConfig`

```js
type TWebauthnStamperConfig = {
  rpId: string;
  timeout?: number;
  userVerification?: UserVerificationRequirement;
  allowCredentials?: PublicKeyCredentialDescriptor[];
};
```

##### `UserVerificationRequirement`

```js
type UserVerificationRequirement = "discouraged" | "preferred" | "required";
```

Refer to our guide on [using passkeys](/authentication/passkeys/options#userverification) for more information on this type and its usage.

##### `PublicKeyCredentialDescriptor`

```js
interface PublicKeyCredentialDescriptor {
  id: BufferSource;
  transports?: AuthenticatorTransport[];
  type: PublicKeyCredentialType;
}
```

Refer to our guide on [using passkeys](/authentication/passkeys/options#allowcredentials) for more information on this type and its usage.

#### Example

```js
import { WebauthnStamper } from "@turnkey/webauthn-stamper";
import { TurnkeyClient } from "@turnkey/http";

const stamper = new WebAuthnStamper({
  rpId: "example.com",
});

// New HTTP client able to sign with passkeys!
const httpClient = new TurnkeyClient(
  { baseUrl: "https://api.turnkey.com" },
  stamper,
);
```

## Methods

### `stamp: (input: string) => Promise<TStamp>`

Creates a digital stamp, which includes the public key, signature scheme, and a signature based on WebAuthn credentials.

#### Parameters

<ParamField body="input" type="string" required>
  The Turnkey activity request, or query to be sent to Turnkey's API.
</ParamField>

#### Types

##### `TStamp`

```js
type TStamp = {
  stampHeaderName: string;
  stampHeaderValue: string;
};
```


# Using the CLI
Source: https://docs.turnkey.com/sdks/cli

This quickstart will guide you through Turnkey’s onboarding, adding an API key, creating a wallet, and signing your first Ethereum transaction.

## Create your Turnkey Organization

* Visit [app.turnkey.com/dashboard/auth/initial](https://app.turnkey.com/dashboard/auth/initial) and enter your email address
* Confirm your email by clicking on the link inside of the confirmation email
* Follow the prompts to add your first authenticator and create your organization

## Find your Organization ID

All API requests require an organization ID. Yours can be located in the user dropdown menu at the top right corner of the dashboard.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/sdks/img/quickstart/find_organization_id.png" alt="Find organization ID" />
</Frame>

For convenience, it's worth setting this as a permanent shell variable:

```bash
export ORGANIZATION_ID="<Your Org ID>"
```

## Add an API key

Turnkey API Keys are generic public / private key pairs that allow you to make requests to our API. To generate a new key pair, we'll use the Turnkey CLI.

#### Installing `turnkey`

```bash
brew install tkhq/tap/turnkey
```

We are employing [Homebrew](https://brew.sh/) in this guide as a quick and easy install path. For an installation path that **requires no trust in external parties**, refer to our [CLI repo](https://github.com/tkhq/tkcli).

#### Generate an API key[​](#generate-an-api-key "Direct link to Generate an API key")

```bash
turnkey generate api-key --organization $ORGANIZATION_ID --key-name quickstart
```

When you run this command, Turnkey’s CLI generates an API key pair and **stores the API private key locally**. Copy the `publicKey` field in the output. In the next step, we'll add this to our User.

#### Add your public API key

Navigate to your user page by clicking on "User Details" in the user dropdown menu.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/sdks/img/quickstart/find_user_details.png" alt="Find user details" />
</Frame>

Click on "Create API keys" and follow the prompts to add the generated public API key. You'll be required to authenticate with the same authenticator used during onboarding. After this succeeds, you should be all set to interact with our API.

NOTES:

* if you would like to manually copy your locally stored public/private API key files (e.g. `key.public`, `key.private`), you will have to save the files without newlines (which occupy extra bytes). For example, for VIM, use `:set binary noeol` or `:set binary noendofline` before writing.
* only P-256 keys (API\_KEY\_CURVE\_P256) are currenlty supported

## Create a Wallet

Wallets are collections of cryptographic key pairs typically used for sending and receiving digital assets. To create one, we need to provide a name:

```bash
turnkey wallets create --name default --key-name quickstart
```

## Create an Ethereum account

To create a cryptographic key pair on our new Wallet, we need to pass our desired address format:

```bash
turnkey wallets accounts create --wallet default --address-format ADDRESS_FORMAT_ETHEREUM --key-name quickstart
```

This command will produce an Ethereum address (e.g. `0x08cb1216C95149DF66978b574E484869512CE2bF`) that we'll need to sign a transaction. You can see your new Wallet account with:

```bash
turnkey wallets accounts list --wallet default --key-name quickstart
```

## Sign a Transaction

Now you can sign an Ethereum transaction with this new address with our [`sign_transaction` endpoint](/api-reference/signing/sign-transaction). Make sure to replace the `unsignedTransaction` below with your own. You can use our [simple transaction generator](https://build.tx.xyz) if you need a quick transaction for testing:

```json
turnkey request --path /public/v1/submit/sign_transaction --body '{
    "timestampMs": "'"$(date +%s)"'000",
    "type": "ACTIVITY_TYPE_SIGN_TRANSACTION_V2",
    "organizationId": "'"$ORGANIZATION_ID"'",
    "parameters": {
      "type": "TRANSACTION_TYPE_ETHEREUM",
      "signWith": "<Your Ethereum address>",
      "unsignedTransaction": "<Your Transaction>"
    }
}' --key-name quickstart
```

If you'd like to broadcast your transaction, you can easily do so via [Etherscan](https://etherscan.io/pushTx).

## Next Steps

* Check out our [examples](/getting-started/examples) to see what can be built
* Learn more about [Organizations](/concepts/organizations) and [Wallets](/concepts/wallets)
* See our [API design](/developer-reference/api-overview/intro) or dive into our [API reference](/api-reference/overview)


# Flutter
Source: https://docs.turnkey.com/sdks/flutter

This documentation contains guides for using the Flutter SDK.

We have created a set of Dart packages that can be used to interact with the Turnkey API. These can be combined to create a fully-featured Flutter app, powered by Turnkey.

## Packages

| Package Name                       | Description                                                                                                                                                                               | Link                                                                                           |
| ---------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------- |
| turnkey\_sdk\_flutter              | A Flutter package that simplifies the integration of the Turnkey API into Flutter applications. It provides secure session management, authentication, and cryptographic operations       | [turnkey\_sdk\_flutter](https://pub.dev/packages/turnkey_sdk_flutter)                          |
| turnkey\_http                      | A lower-level, fully typed HTTP client for interacting with the Turnkey API.                                                                                                              | [turnkey\_http](https://pub.dev/packages/turnkey_http)                                         |
| turnkey\_api\_key\_stamper         | A Dart package for API stamping functionalities. It is meant to be used with Turnkey's HTTP package.                                                                                      | [turnkey\_api\_key\_stamper](https://pub.dev/packages/turnkey_api_key_stamper)                 |
| turnkey\_flutter\_passkey\_stamper | A Flutter package for stamping payloads with passkeys. It is meant to be used with Turnkey's HTTP package.                                                                                | [turnkey\_flutter\_passkey\_stamper](https://pub.dev/packages/turnkey_flutter_passkey_stamper) |
| turnkey\_crypto                    | This package consolidates common cryptographic utilities used across our applications, particularly primitives related to keys, encryption, and decryption in a pure Dart implementation. | [turnkey\_crypto](https://pub.dev/packages/turnkey_crypto)                                     |
| turnkey\_encoding                  | This package contains decoding and encoding functions used by other Turnkey packages.                                                                                                     | [turnkey\_encoding](https://pub.dev/packages/turnkey_encoding)                                 |

You can visit [Turnkey's pub.dev publisher page](https://pub.dev/publishers/turnkey.com/packages) to see all all the packages we have published and install them in your Flutter project.

## Getting Started

The easiest way to build a Flutter app with Turnkey is to use our [Flutter demo app](https://github.com/tkhq/dart-sdk/tree/main/examples/flutter-demo-app) as a starter. This app is a fully-featured example that demonstrates how to use the Turnkey's Flutter SDK to authenticate users, create wallets, export wallets, sign messages, and more.

The app includes a backend [JavaScript server](https://github.com/tkhq/dart-sdk/tree/main/examples/flutter-demo-app/api-server) which uses [@turnkey/sdk-server](https://www.npmjs.com/package/@turnkey/sdk-server) to make requests to Turnkey that must be signed by the parent organization. An example of a request that must be signed by the parent organization is creating a [sub-organization](/concepts/sub-organizations). [(code reference)](https://github.com/tkhq/dart-sdk/blob/51405520d721910961fa942ddc5f5a3030783b9b/examples/flutter-demo-app/api-server/src/controllers/turnkey-api.ts#L139-L178)

Some requests made to Turnkey must be signed by the sub-organization. These are written in Dart and are ran by the app directly. You can find these requests in the app's [TurnkeyProvider](https://github.com/tkhq/dart-sdk/blob/main/examples/flutter-demo-app/lib/providers/turnkey.dart). An example of a request that must be signed by the sub-organization is creating a wallet. [(code reference)](https://github.com/tkhq/dart-sdk/blob/51405520d721910961fa942ddc5f5a3030783b9b/examples/flutter-demo-app/lib/providers/turnkey.dart#L531-L559)

## Video

<Frame>
  <video src="https://github.com/tkhq/dart-sdk/raw/refs/heads/main/examples/flutter-demo-app/assets/videos/flutter-demo.mov" width="100%" height="420" controls />
</Frame>

#### Complete the installation and setup by following the instructions in the [README](https://github.com/tkhq/dart-sdk/blob/main/examples/flutter-demo-app/README.md) file.


# Golang
Source: https://docs.turnkey.com/sdks/golang

Turnkey offers native tooling for interacting with the API using Golang. See [https://github.com/tkhq/go-sdk](https://github.com/tkhq/go-sdk) for more details.



# SDK Reference
Source: https://docs.turnkey.com/sdks/introduction

Turnkey provides a variety of client and server SDKs which simplify interacting with Turnkey's API. The SDKs offer methods, utilities, and helper functions to quickly implement features and perform common workflows.

The following SDK reference tables separate our SDKs by Client and Server. The column headers indicate the specific languages or frameworks for which we have an SDK. The rows indicate a specific feature or capability that Turnkey provides.

A green checkmark in the table indicates that the SDK provides either a complete implementation for a feature or helper methods exist and can be composed in a few lines of code to implement a workflow. If no checkmark is present it means the SDK does not offer support for that feature.

Turnkey also has several [wrappers for popular web3 libraries](/category/web3-libraries) to streamline integration into existing dApps.

## Client Side SDKs

|                               | TypeScript                                    | React                                         | React Native                                  | Flutter                                       | iOS                                           |
| ----------------------------- | --------------------------------------------- | --------------------------------------------- | --------------------------------------------- | --------------------------------------------- | --------------------------------------------- |
| **Authentication**            |                                               |                                               |                                               |                                               |                                               |
| Email                         | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |
| SMS                           | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |
| Passkey                       | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |
| Google                        | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |
| Facebook                      | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |
| Apple                         | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |
| Web3 Wallets                  | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |                                               |                                               |                                               |
| **Embedded Wallets**          |                                               |                                               |                                               |                                               |                                               |
| Wallet Creation               | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |
| Signing                       | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |
| Import                        | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |
| Export                        | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |
| **Arbitrary Request Signing** |                                               |                                               |                                               |                                               |                                               |
| Stamping                      | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |

## Server Side SDKs

|                       | TypeScript                                    | Go                                            | Ruby                                          | Rust                                          | Python                                        |
| --------------------- | --------------------------------------------- | --------------------------------------------- | --------------------------------------------- | --------------------------------------------- | --------------------------------------------- |
| **Authentication**    | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |
| **Wallet Management** | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |                                               |                                               |
| **Policy Management** | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |                                               |                                               |


# JavaScript Browser
Source: https://docs.turnkey.com/sdks/javascript-browser



## Overview

The [`@turnkey/sdk-browser`](https://www.npmjs.com/package/@turnkey/sdk-browser) package enables developers to build browser-based applications that interact with the Turnkey API using multiple authentication methods.

It includes:

* `indexedDbClient`: The recommended client for authentication and session creation using secure, unextractable P-256 keys stored in the browser’s IndexedDB.
* `passkeyClient`: For passkey registration and signing flows.
* `iframeClient`: Used for secure credential injection and import/export operations.
* `walletClient`: For signing with external wallets like MetaMask.

If you're building with React, check out our [`@turnkey/sdk-react`](https://www.npmjs.com/package/@turnkey/sdk-react) package.

## Installation

<CodeGroup>
  ```bash NPM
  npm install @turnkey/sdk-browser
  ```

  ```bash Yarn
  yarn add @turnkey/sdk-browser
  ```
</CodeGroup>

## Initialization

```ts
import { Turnkey } from "@turnkey/sdk-browser";

const turnkey = new Turnkey({
  apiBaseUrl: "https://api.turnkey.com",
  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
});
```

## Authentication

### `loginWithPasskey`

Creates a session for a user authenticated with a passkey. The session is stored in `localStorage`, and signing operations are done with an unextractable keypair stored in IndexedDB.

```ts
const passkeyClient = turnkey.passkeyClient();
const indexedDbClient = await turnkey.indexedDbClient();
await indexedDbClient.init();

const publicKey = await indexedDbClient.getPublicKey();

await passkeyClient.loginWithPasskey({
  sessionType: "SESSION_TYPE_READ_WRITE",
  publicKey,
  expirationSeconds: 900,
});
```

### `loginWithBundle`

Used to authenticate a user with a credential bundle (e.g. from Email Auth). Must be used from an `iframeClient`.

```ts
const iframeClient = await turnkey.iframeClient({
  iframeUrl: "https://auth.turnkey.com",
  iframeContainer: document.getElementById("iframe-container"),
});

await iframeClient.loginWithBundle({
  bundle: "credential-bundle",
  expirationSeconds: 900,
});
```

### `loginWithSession`

Logs in using a session string (JWT) that was created elsewhere (e.g. server action). Only valid on `indexedDbClient`.

```ts
await indexedDbClient.loginWithSession("jwt-session-string");
```

### `loginWithWallet`

Uses a Web3 wallet to authenticate the user and store a read-write session.

```ts
const walletClient = turnkey.walletClient(new EthereumWallet());

await walletClient.loginWithWallet({
  sessionType: "SESSION_TYPE_READ_WRITE",
  publicKey: await walletClient.getPublicKey(),
  expirationSeconds: 900,
});
```

### `refreshSession`

Refreshes the current session and extends its expiration time. The correct `publicKey` must be provided for read-write sessions.

```ts
await indexedDbClient.refreshSession({
  sessionType: "SESSION_TYPE_READ_WRITE",
  publicKey: await indexedDbClient.getPublicKey(),
  expirationSeconds: 900,
});
```

## IndexedDbClient

The `indexedDbClient` is the recommended way to manage secure keys for session-based authentication.

### `init`

Initializes and stores an unextractable P-256 keypair in the browser.

```ts
await indexedDbClient.init();
```

### `getPublicKey`

Returns the base64url-encoded public key of the stored keypair.

```ts
const publicKey = await indexedDbClient.getPublicKey();
```

### `clear`

Removes all key material from IndexedDB.

```ts
await indexedDbClient.clear();
```

### `resetKeyPair`

Deletes and regenerates the stored keypair.

```ts
await indexedDbClient.resetKeyPair();
```

## IframeClient

Primarily used for secure credential injection and key export/import.

### `injectCredentialBundle`

Injects a read-write session credential bundle into the iframe.

```ts
await iframeClient.injectCredentialBundle("bundle");
```

### `injectWalletExportBundle`

```ts
await iframeClient.injectWalletExportBundle("bundle", "org-id");
```

### `injectKeyExportBundle`

```ts
await iframeClient.injectKeyExportBundle("bundle", "org-id", "PEM");
```

### `injectImportBundle`

```ts
await iframeClient.injectImportBundle("bundle", "org-id", "user-id");
```

### `extractWalletEncryptedBundle`

```ts
const walletBundle = await iframeClient.extractWalletEncryptedBundle();
```

### `extractKeyEncryptedBundle`

```ts
const keyBundle = await iframeClient.extractKeyEncryptedBundle();
```

### `getEmbeddedPublicKey`

```ts
const pubkey = await iframeClient.getEmbeddedPublicKey();
```

### `initEmbeddedKey`

```ts
const pubkey = await iframeClient.initEmbeddedKey();
```

### `clearEmbeddedKey`

```ts
await iframeClient.clearEmbeddedKey();
```

## PasskeyClient

### `createUserPasskey`

Registers a new passkey using WebAuthn.

```ts
const passkey = await passkeyClient.createUserPasskey({
  publicKey: {
    rp: { name: "My App" },
    user: { name: "user@example.com", displayName: "User" },
  },
});
```

## WalletClient

### `getPublicKey`

```ts
const publicKey = await walletClient.getPublicKey();
```

### `getWalletInterface`

```ts
const wallet = walletClient.getWalletInterface();
```

## Session Management

### `getSession`

Returns the active session if it exists and hasn’t expired.

```ts
const session = await turnkey.getSession();
```

### `getRawSession`

Returns the raw JWT string if a valid session exists.

```ts
const jwt = await turnkey.getRawSession();
```

### `logout`

Clears all stored session and client data.

```ts
await turnkey.logout();
```

## Top-Level SDK Methods

### `passkeyClient()`

```ts
const passkeyClient = turnkey.passkeyClient();
```

### `indexedDbClient()`

```ts
const indexedDbClient = await turnkey.indexedDbClient();
```

### `iframeClient()`

```ts
const iframeClient = await turnkey.iframeClient({
  iframeUrl: "https://auth.turnkey.com",
  iframeContainer: document.getElementById("iframe-container"),
});
```

### `walletClient(wallet)`

```ts
const walletClient = turnkey.walletClient(new EthereumWallet());
```

### `serverSign(methodName, params, [serverSignUrl])`

```ts
const result = await turnkey.serverSign("method", [param1, param2]);
```

## Examples

<CardGroup>
  <Card title="Implementing an embedded wallet authentication flow with Passkeys" href="/embedded-wallets/code-examples/create-sub-org-passkey" icon="square-1" iconType="solid" horizontal />

  <Card title="Implementing an embedded wallet authentication flow with email" href="/embedded-wallets/code-examples/authenticate-user-email" icon="square-2" iconType="solid" horizontal />

  <Card title="Signing Transactions" href="/embedded-wallets/code-examples/signing-transactions" icon="square-3" iconType="solid" horizontal />
</CardGroup>


# JavaScript Server
Source: https://docs.turnkey.com/sdks/javascript-server

The [`@turnkey/sdk-server`](https://www.npmjs.com/package/@turnkey/sdk-server) package exposes functionality that lets developers build server-side functionality for applications that interact with the Turnkey API.

## Overview

It exposes a ready-made API client class which manages the process of constructing requests to the Turnkey API and authenticating them with a valid API key. Furthermore, it exposes API proxies that forward requests from your application's client that need to be signed by parent organizations API key.

Use the [`@turnkey/sdk-server`](https://www.npmjs.com/package/@turnkey/sdk-server) package to handle server-side interactions for applications that interact with the Turnkey API.

## Installation

<CodeGroup>
  ```bash NPM
  npm install @turnkey/sdk-server
  ```

  ```bash Yarn
  yarn add @turnkey/sdk-server
  ```
</CodeGroup>

## Initializing

```js
import { Turnkey } from "@turnkey/sdk-server";

const turnkey = new Turnkey({
  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
  apiBaseUrl: "https://api.turnkey.com",
  apiPrivateKey: process.env.TURNKEY_API_PRIVATE_KEY,
  apiPublicKey: process.env.TURNKEY_API_PUBLIC_KEY,
});
```

#### Parameters

<ParamField body="config" type="TurnkeySDKServerConfig" required>
  An object containing configuration settings for the Server Client.
</ParamField>

<ParamField body="defaultOrganizationId" type="string" required>
  The root organization that requests will be made from unless otherwise specified
</ParamField>

<ParamField body="apiBaseUrl" type="string" required>
  The base URL that API requests will be sent to (use [https://api.turnkey.com](https://api.turnkey.com) when making requests to Turnkey's API)
</ParamField>

<ParamField body="apiPrivateKey" type="string">
  The API Private Key to sign requests with (this will normally be the API Private Key to your root organization)
</ParamField>

<ParamField body="apiPublicKey" type="string">
  The API Public Key associated with the configured API Private Key above
</ParamField>

## Creating Clients

Calls to Turnkey's API must be signed with a valid credential (often referred to in the docs as [stamping](/developer-reference/api-overview/stamps)) from the user initiating the API call. When using the Server SDK, the user initiating the API call is normally your root organization, and the API call is authenticated with the API keypair you create on the Turnkey dashboard.

#### `apiClient()`

The `apiClient` method returns an instance of the `TurnkeyApiClient` which will sign requests with the injected `apiPrivateKey`, and `apiPublicKey` credentials.

```js
const apiClient = turnkey.apiClient();
const walletsResponse = await apiClient.getWallets();

// this will sign the request with the configured api credentials
```

## Creating API Proxies

There are certain actions that are initiated by users, but require the activity to be signed by the root organization itself. Examples of this include the initial creation of the user `subOrganization` or sending an email to a user with a login credential as part of an `emailAuth` flow.

These can be implemented in your backend by creating an `apiClient` and handling requests from your browser application at different routes, but we have also provided a convenience method for doing this by having allowing a single `apiProxy` to handle requests at a single route and automatically sign specific user actions with the root organization's credentials.

#### expressProxyHandler()

The `expressProxyHandler()` method creates a proxy handler designed as a middleware for Express applications. It provides an API endpoint that forwards requests to the Turnkey API server.

```js
const turnkeyProxyHandler = turnkey.expressProxyHandler({
  allowedMethods: ["createSubOrganization", "emailAuth", "getSubOrgIds"],
});

app.post("/apiProxy", turnkeyProxyHandler);

// this will sign requests made with the client-side `serverSign` function with the root organization's API key for the allowedMethods in the config
```

#### 2. nextProxyHandler()

The `nextProxyHandler()` method creates a proxy handler designed as a middleware for Next.js applications. It provides an API endpoint that forwards requests to the Turnkey API server.

```js
// Configure the Next.js handler with allowed methods
const turnkeyProxyHandler = turnkey.nextProxyHandler({
  allowedMethods: ["createSubOrganization", "emailAuth", "getSubOrgIds"],
});

export default turnkeyProxyHandler;

// this will sign requests made with the client-side `serverSign` function with the root organization's API key for the allowedMethods in the config
```

## TurnkeyServerClient

The `@turnkey/sdk-server` exposes NextJS Server Actions. These server actions can be used to facilitate implementing common authentication flows.

### `sendOtp()`

Initiate an OTP authentication flow for either an `EMAIL` or `SMS`.

```typescript
import { server } from "@turnkey/sdk-server";
import { Turnkey } from "@turnkey/sdk-browser";

const turnkey = new Turnkey({
  apiBaseUrl: "https://api.turnkey.com",
  defaultOrganizationId: process.env.NEXT_PUBLIC_ORGANIZATION_ID!,
});

const indexedDbClient = turnkey.indexedDbClient();

const initAuthResponse = await server.sendOtp({
  suborgID: suborgId!,
  otpType,
  contact: value,
  userIdentifier: await indexedDbClient.getPublicKey(),
  ...(emailCustomization && { emailCustomization }),
  ...(sendFromEmailAddress && { sendFromEmailAddress }),
  ...(customSmsMessage && { customSmsMessage }),
  otpLength: 6,
  alphanumeric: true,
});

if (initAuthResponse?.otpId) {
  // Proceed to verifyOtp
} else {
  // Handle error
}
```

#### Parameters

<ParamField body="request" type="SendOtpRequest" required>
  An object containing the parameters to initiate an `EMAIL` or `SMS` OTP authentication flow.
</ParamField>

<ParamField body="suborgID" type="string" required>
  The ID of the sub organization for the given request.
</ParamField>

<ParamField body="otpType" type="string" required>
  The type of OTP request, either `EMAIL` or `SMS`.
</ParamField>

<ParamField body="contact" type="string" required>
  The contact information (email or phone number) where the OTP will be sent.
</ParamField>

<ParamField body="userIdentifier" type="string" required>
  The public key or other identifier used for rate limiting and logging.
</ParamField>

<ParamField body="customSmsMessage" type="string">
  Use to customize the SMS message.
</ParamField>

<ParamField body="emailCustomization" type="EmailCustomization">
  Use to customize the OTP email content.
</ParamField>

<ParamField body="sendFromEmailAddress" type="string">
  Provide a custom email address which will be used as the sender.
</ParamField>

<ParamField body="otpLength" type="number">
  Optionally specify the OTP length.
</ParamField>

<ParamField body="alphanumeric" type="boolean">
  Optionally specify whether to use alphanumeric codes. Defaults to true.
</ParamField>

### `verifyOtp()`

Verify the OTP Code sent to the user via `EMAIL` or `SMS`.

```typescript
import { server } from "@turnkey/sdk-server";
import { Turnkey } from "@turnkey/sdk-browser";

const turnkey = new Turnkey({
  apiBaseUrl: "https://api.turnkey.com",
  defaultOrganizationId: process.env.NEXT_PUBLIC_ORGANIZATION_ID!,
});

const indexedDbClient = turnkey.indexedDbClient();

const verifyResponse = await server.verifyOtp({
  otpId,
  otpCode,
  sessionLengthSeconds,
});

if (verifyResponse?.verificationToken) {
  const sessionResponse = await server.createOtpSession({
    suborgID: suborgId,
    verificationToken: verifyResponse.verificationToken,
    publicKey: await indexedDbClient.getPublicKey(),
    sessionLengthSeconds,
  });

  if (sessionResponse?.token) {
    await indexedDbClient.loginWithSession(sessionResponse);
    await onValidateSuccess();
  } else {
    // Handle session creation error
  }
} else {
  // Handle verification failure
}
```

#### Parameters

<ParamField body="request" type="VerifyOtpRequest" required>
  An object containing the parameters to verify an OTP authentication attempt.
</ParamField>

<ParamField body="otpId" type="string" required>
  The ID returned by `sendOtp()` representing the OTP attempt.
</ParamField>

<ParamField body="otpCode" type="string" required>
  The OTP code entered by the user.
</ParamField>

<ParamField body="sessionLengthSeconds" type="number">
  Optional. The session lifetime in seconds. Defaults to 900 seconds (15 minutes).
</ParamField>

### `createOauthSession()`

Complete an OAuth authentication flow after obtaining an OIDC token from the OAuth provider. This creates a Turnkey session bound to the provided public key.

```typescript
import { server } from "@turnkey/sdk-server";
import { Turnkey } from "@turnkey/sdk-browser";

const turnkey = new Turnkey({
  apiBaseUrl: "https://api.turnkey.com",
  defaultOrganizationId: process.env.NEXT_PUBLIC_ORGANIZATION_ID!,
});

const indexedDbClient = turnkey.indexedDbClient();

const oauthSession = await server.createOauthSession({
  suborgID: suborgId!,
  oidcToken: credential,
  publicKey: await indexedDbClient.getPublicKey(),
  sessionLengthSeconds: authConfig.sessionLengthSeconds,
});

if (oauthSession?.session) {
  await indexedDbClient.loginWithSession(oauthSession);
  await onAuthSuccess();
} else {
  // Handle failure
}
```

#### Parameters

<ParamField body="request" type="CreateOauthSessionRequest" required>
  An object containing the parameters to create a Turnkey session via OIDC.
</ParamField>

<ParamField body="suborgID" type="string" required>
  The ID of the sub organization for the authenticated user.
</ParamField>

<ParamField body="oidcToken" type="string" required>
  The OIDC token received from the third-party provider.
</ParamField>

<ParamField body="publicKey" type="string" required>
  The public key to bind the session to (used for stamping requests).
</ParamField>

<ParamField body="sessionLengthSeconds" type="number">
  Optional. Session lifetime in seconds. Defaults to 900 seconds (15 minutes).
</ParamField>

### `sendCredential()`

Send a login credential to a user's email address.

```typescript
import { server } from "@turnkey/sdk-server";

const sendCredentialResponse = await server.sendCredential({
  email,
  targetPublicKey: authIframeClient?.iframePublicKey!,
  organizationId: suborgId!,
  ...(apiKeyName && { apiKeyName }),
  ...(sendFromEmailAddress && { sendFromEmailAddress }),
  ...(sessionLengthSeconds && { sessionLengthSeconds }),
  ...(invalidateExisting && { invalidateExisting }),
  ...(emailCustomization && { emailCustomization }),
  ...(sendFromEmailAddress && { sendFromEmailAddress }),
});
```

#### Parameters

<ParamField body="request" type="InitEmailAuthRequest" required>
  An object containing the parameters to send a login credential via email.
</ParamField>

<ParamField body="email" type="string" required>
  The email address provided by the user.
</ParamField>

<ParamField body="targetPublicKey" type="string" required>
  The public key of the target user.
</ParamField>

<ParamField body="organizationId" type="string" required>
  The ID of the sub organization for the given request.
</ParamField>

<ParamField body="apiKeyName" type="string">
  The name of the API Key.
</ParamField>

<ParamField body="userIdentifier" type="string">
  IP Address, iframePublicKey, or other unique identifier used for rate
  limiting.
</ParamField>

<ParamField body="sessionLengthSeconds" type="number">
  Specify the length of the session in seconds. Defaults to 900 seconds or 15
  minutes.
</ParamField>

<ParamField body="invalidateExisting" type="boolean">
  Invalidate all pre-existing sessions. Defaults to `false`.
</ParamField>

<ParamField body="emailCustomization" type="EmailCustomization">
  An option to customize the email.
</ParamField>

<ParamField body="sendFromEmailAddress" type="string">
  Provide a custom email address which will be used as the sender of the email.
</ParamField>


# Migration Path
Source: https://docs.turnkey.com/sdks/migration-path

This guide aims to cover the process for migrating from lower-level Turnkey SDK (i.e. `@turnkey/{ http, api-key-stamper, webauthn-stamper, iframe-stamper }`) libraries, to our more recent abstractions: `@turnkey/{ sdk-browser, sdk-server, sdk-react }`

### Why migrate?

Turnkey’s low-level libraries allow developers to get as close to the bare Turnkey metals as possible, allowing you to specify all request parameters. While some may desire this configurability, it does have a slight cost of convenience. Enter our higher-order libraries — `@turnkey/{ sdk-browser, sdk-server, sdk-react }` abstract away the details that most developers don’t need to configure, enabling you to focus more on business logic and less on configuration.

### How to migrate?

In short, this depends on your use case. Here are some example paths:

**Turnkey in the server**

If you’re using Turnkey in a backend setting, you’re most likely using a combination of `@turnkey/http` and `@turnkey/api-key-stamper`. The transition to using `@turnkey/sdk-server` is fairly straightforward: just bring your API key details, and you’ll be able to reduce the amount of code you need to include.

**Turnkey on the client**

In a browser setting, you’re most likely using `@turnkey/http` and `@turnkey/api-key-stamper` and/or `@turnkey/iframe-stamper`. If you’re using NextJS or React in general, you’ll benefit from using `@turnkey/sdk-react`.

We’ve included some details on making these transitions below:

### Examples

**Turnkey in the server**

To illustrate the difference, here’s an example creating a new Ethereum wallet via a combination of `@turnkey/http` and `@turnkey/api-key-stamper`:

```js
import { TurnkeyClient } from "@turnkey/http";
import { ApiKeyStamper } from "@turnkey/api-key-stamper";

const turnkeyClient = new TurnkeyClient(
  { baseUrl: "https://api.turnkey.com" },
  new ApiKeyStamper({
    apiPublicKey: process.env.API_PUBLIC_KEY!,
    apiPrivateKey: process.env.API_PRIVATE_KEY!,
  }),
);

const activityResponse = await turnkeyClient.createWallet({
  type: "ACTIVITY_TYPE_CREATE_WALLET",
  timestampMs: String(Date.now()),
  organizationId: process.env.ORGANIZATION_ID!,
  parameters: {
    walletName: "ETH Wallet",
    accounts: [
      {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: "m/44'/60'/0'/0/0",
        addressFormat: "ADDRESS_FORMAT_ETHEREUM",
      },
    ],
  },
});

const newAddress =
  activityResponse.activity.result.createWalletResult?.addresses[0];
```

And here’s how you might do the same with just `@turnkey/sdk-server`:

```js
import { Turnkey, DEFAULT_ETHEREUM_ACCOUNTS } from "@turnkey/sdk-server";

const turnkeyClient = new Turnkey({
  apiBaseUrl: "https://api.turnkey.com",
  apiPublicKey: process.env.API_PUBLIC_KEY!,
  apiPrivateKey: process.env.API_PRIVATE_KEY!,
  defaultOrganizationId: process.env.ORGANIZATION_ID!,
});

const { walletId, addresses } = await turnkeyClient.apiClient().createWallet({
  walletName: "ETH Wallet",
  accounts: DEFAULT_ETHEREUM_ACCOUNTS,
});

const newAddress = addresses[0];
```

As you can see, much less boilerplate and dealing with low-level details such as activity types and nested results.

**Turnkey on the client**

Here’s a similar illustration, starting with an initial combination of `@turnkey/http` and `@turnkey/webauthn-stamper`

```js
import { TurnkeyClient } from "@turnkey/http";
import { WebauthnStamper } from "@turnkey/webauthn-stamper";

const turnkeyClient = new TurnkeyClient(
  { baseUrl: "https://api.turnkey.com" },
  new WebauthnStamper({
    rpId: "localhost", // for testing locally
  }),
);

const activityResponse = await turnkeyClient.createWallet({
  type: "ACTIVITY_TYPE_CREATE_WALLET",
  timestampMs: String(Date.now()),
  organizationId: process.env.ORGANIZATION_ID!,
  parameters: {
    walletName: "ETH Wallet",
    accounts: [
      {
        curve: "CURVE_SECP256K1",
        pathFormat: "PATH_FORMAT_BIP32",
        path: "m/44'/60'/0'/0/0",
        addressFormat: "ADDRESS_FORMAT_ETHEREUM",
      },
    ],
  },
});

const newAddress =
  activityResponse.activity.result.createWalletResult?.addresses[0];
```

And here’s how you might do the same with just `@turnkey/sdk-react`:

```js
import { TurnkeyProvider } from "@turnkey/sdk-react";

// Configure once in the root of your app (e.g. _app.tsx)
const turnkeyConfig = {
  apiBaseUrl: "https://api.turnkey.com",
  defaultOrganizationId: process.env.NEXT_PUBLIC_ORGANIZATION_ID!,
  rpId: process.env.NEXT_PUBLIC_RPID!,
  iframeUrl: "https://auth.turnkey.com",
};

// Wrap your app in the provider
export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html>
      <body>
        <TurnkeyProvider
          config={turnkeyConfig}
        >
          {children}
        </TurnkeyProvider>
      </body>
    </html>
  );
}

// ... and now you can use PasskeyClient anywhere in your app (no need to re-initialize each time!)

const { passkeyClient } = useTurnkey();

const { walletId, addresses } = await passkeyClient!.createWallet({
  walletName: "ETH Wallet",
  accounts: DEFAULT_ETHEREUM_ACCOUNTS,
});

const newAddress = addresses[0];
```

For examples of the new SDK library paradigm in practice, please refer to our [Demo Wallet](https://wallet.tx.xyz/) (code can be found [here](https://github.com/tkhq/demo-embedded-wallet)).


# Python
Source: https://docs.turnkey.com/sdks/python

Turnkey offers support for interacting with the API using Python. See [https://github.com/tkhq/python-sdk](https://github.com/tkhq/python-sdk) for more details.

# Turnkey Python SDK

This repository contains support for interacting with the Turnkey API using Python.

Unlike other languages ([Typescript](https://github.com/tkhq/sdk), [Ruby](https://github.com/tkhq/ruby-sdk)), we do not yet offer a full SDK for Rust.

If you are working on a project in Python and would benefit from a Python SDK please open an issue or get in touch with us at [hello@turnkey.com](mailto:hello@turnkey.com) to discuss prioritizing this.

## Stamper

The Stamper utility stamps requests to the Turnkey API and authenticates your calls. To use it, fill out the fields at the top of the stamper script:

```python
ENDPOINT = "https://api.turnkey.com/public/v1/whoami"
API_PUBLIC_KEY = "<Your Turnkey API Public Key (02xx)>"
API_PRIVATE_KEY = "<Your Turnkey API Private Key>"
ORG_ID = "<Your Organization ID>"
```

You can find the script and examples in the [python-sdk repo](https://github.com/tkhq/python-sdk).


# React
Source: https://docs.turnkey.com/sdks/react



## Overview

The [`@turnkey/sdk-react`](https://www.npmjs.com/package/@turnkey/sdk-react) package wraps the functionality from the [`@turnkey/sdk-browser`](https://www.npmjs.com/package/@turnkey/sdk-browser) package to allow developers to build React-based applications that interact with the Turnkey API with different types of authentication.

It allows developers to use the same clients exposed in [`@turnkey/sdk-browser`](https://www.npmjs.com/package/@turnkey/sdk-browser) that enable requests to the API authenticated via different auth methods powered by passkeys or user sessions (using iframes)​. It also contains the same methods to manage information and state related to authentication like auth bundles and sessions, retrieving user information and server signing API requests.

Use the [`@turnkey/sdk-react`](https://www.npmjs.com/package/@turnkey/sdk-react) package when you’re building React-based frontend applications that interact with the Turnkey API.

## Installation

<CodeGroup>
  ```bash NPM
  npm install @turnkey/sdk-react
  ```

  ```bash Yarn
  yarn add @turnkey/sdk-react
  ```
</CodeGroup>

## Initializing

In `App.tsx` (or equivalent file)

```ts
import { TurnkeyProvider } from "@turnkey/sdk-react";

const turnkeyConfig = {
  apiBaseUrl: "https://api.turnkey.com",
  // prefix with NEXT_PUBLIC for NextJS
  defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
  // your application's domain
  rpId: process.env.RPID,
  iframeUrl: "https://auth.turnkey.com",
  // The URL that the Turnkey SDK will send requests to for signing operations.
  // This should be a backend endpoint that your application controls.
  serverSignUrl: "http://localhost:3000/api"
}

For further context on RPID's for passkeys, used in the above example, [look here](/authentication/passkeys/options#rp).

<div className="App">
  <TurnkeyProvider config={turnkeyConfig}>
    // Rest of app ...
  </TurnkeyProvider>
</div>
```

#### Parameters

<ParamField body="config" type="TurnkeySDKBrowserConfig" required>
  An object containing configuration settings for the Browser Client.
</ParamField>

<ParamField body="defaultOrganizationId" type="string" required>
  The root organization that requests will be made from unless otherwise specified. For example, if you are using methods that require signing with an auth credential from a sub-organization, you will need to specify the sub-organization's ID in your client's config.
</ParamField>

<ParamField body="apiBaseUrl" type="string" required>
  The base URL that API requests will be sent to (use [https://api.turnkey.com](https://api.turnkey.com) when making requests to Turnkey's API)
</ParamField>

<ParamField body="rpId" type="string">
  The [Relying Party](https://developer.mozilla.org/en-US/docs/Glossary/Relying_party) ID used for WebAuthn flows (will default to the value returned from `window.location.hostname` unless otherwise specified)
</ParamField>

<ParamField body="serverSignUrl" type="string">
  The URL to send requests that need to be signed from a backend codebase by the root organization's API key if using the `serverSign` flow
</ParamField>

## Using the React SDK to interact with Turnkey

The [`@turnkey/sdk-react`](https://www.npmjs.com/package/@turnkey/sdk-react) is a package that provides abstractions on top of the [`@turnkey/sdk-browser`](https://www.npmjs.com/package/@turnkey/sdk-browser) package, for usage in React-based applications.

In any React component nested under the `TurnkeyProvider`, you'll be able to call `useTurnkey()` as in the following example. You can also instantiate clients like `passkeyClient` and `indexedDbClient` by pulling them out of the provider directly as [such](/sdks/migration-path#turnkey-on-the-client-1).

```ts
import { useTurnkey } from "@turnkey/sdk-react";

const { passkeyClient, indexedDbClient } = useTurnkey();

const loginWithPasskey = async () => {
  await passkeyClient?.login();
};

const loginWithOauth = async (oidcToken: string, suborgID: string) => {
  const publicKey = await indexedDbClient?.getPublicKey();

  const response = await fetch("/api/auth/oauth", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      suborgID,
      oidcToken,
      publicKey,
    }),
  });

  const session = await response.json();

  if (session?.session) {
    await indexedDbClient?.loginWithSession(session);
  }
};
```

For more complete and in depth examples using the [`@turnkey/sdk-react`](https://www.npmjs.com/package/@turnkey/sdk-react) package, check out our [Code Examples](/category/code-examples) section.


# React Native
Source: https://docs.turnkey.com/sdks/react-native

This documentation contains guides for using Turnkey's React Native compatible [JavaScript packages](https://github.com/tkhq/sdk/tree/main/packages).

Using these packages combined will help you create a fully-featured React Native app, powered by Turnkey.

## React Native Compatible Packages

| Package Name                          | Description                                                                                                                                                                                     | Link                                                                                                         |
| ------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------ |
| @turnkey/http                         | A lower-level, fully typed HTTP client for interacting with the Turnkey API.                                                                                                                    | [@turnkey/http](https://www.npmjs.com/package/@turnkey/http)                                                 |
| @turnkey/crypto                       | This package consolidates common cryptographic utilities used across our applications, particularly primitives related to keys, encryption, and decryption in a pure JavaScript implementation. | [@turnkey/crypto](https://www.npmjs.com/package/@turnkey/crypto)                                             |
| @turnkey/api-key-stamper              | A JavaScript package for API stamping functionalities. It is meant to be used with Turnkey's HTTP package.                                                                                      | [@turnkey/api-key-stamper](https://www.npmjs.com/package/@turnkey/api-key-stamper)                           |
| @turnkey/encoding                     | This package contains decoding and encoding functions used by other Turnkey packages.                                                                                                           | [@turnkey/encoding](https://www.npmjs.com/package/@turnkey/encoding)                                         |
| @turnkey/react-native-passkey-stamper | A React Native package for stamping payloads with passkeys. It is meant to be used with Turnkey's HTTP package.                                                                                 | [@turnkey/react-native-passkey-stamper](https://www.npmjs.com/package/@turnkey/react-native-passkey-stamper) |
| @turnkey/sdk-react-native             | A package to simplify integration of the Turnkey API. It provides secure session management, authentication, and cryptographic operations.                                                      | [@turnkey/sdk-react-native](https://www.npmjs.com/package/@turnkey/sdk-react-native)                         |
| @turnkey/ethers                       | A package for integrating Turnkey signers with the Ethers.js library.                                                                                                                           | [@turnkey/ethers](https://www.npmjs.com/package/@turnkey/ethers)                                             |
| @turnkey/solana                       | A package for integrating Turnkey signers with the Solana blockchain.                                                                                                                           | [@turnkey/solana](https://www.npmjs.com/package/@turnkey/solana)                                             |
| @turnkey/cosmjs                       | A package for integrating Turnkey Signers with the CosmJS library.                                                                                                                              | [@turnkey/cosmjs](https://www.npmjs.com/package/@turnkey/cosmjs)                                             |
| @turnkey/viem                         | Contains helpers to use Viem with Turnkey.                                                                                                                                                      | [@turnkey/viem](https://www.npmjs.com/package/@turnkey/viem)                                                 |

You can see all of Turnkey's JavaScript packages on [npmjs](https://www.npmjs.com/search?q=keywords:Turnkey).

## Getting Started

The easiest way to build a React Native app with Turnkey is to use our [React Native demo wallet](https://github.com/tkhq/react-native-demo-wallet) as a starter. This app is a fully-featured example that demonstrates how to use the Turnkey's JavaScript packages to authenticate users, create wallets, export wallets, sign messages, and more.

The app includes a backend [JavaScript server](https://github.com/tkhq/react-native-demo-wallet/blob/main/app/turnkey%2Bapi.ts) which uses [@turnkey/sdk-server](https://www.npmjs.com/package/@turnkey/sdk-server) to make requests to Turnkey that must be signed by the parent organization. An example of a request that must be signed by the parent organization is creating a [sub-organization](/concepts/sub-organizations). [(code reference)](https://github.com/tkhq/react-native-demo-wallet/blob/6200e34563ed5076a1f7305c9aaa8f65d9242b53/app/turnkey%2Bapi.ts#L132-L192)

Some requests made to Turnkey must be signed by the sub-organization. These are ran by the app directly. You can find these requests in the app's [TurnkeyProvider](https://github.com/tkhq/react-native-demo-wallet/blob/main/providers/turnkey.tsx). An example of a request that must be signed by the sub-organization is creating a wallet. [(code reference)](https://github.com/tkhq/react-native-demo-wallet/blob/6200e34563ed5076a1f7305c9aaa8f65d9242b53/providers/turnkey.tsx#L609-L642)

## Video

<Frame>
  <video src="https://github.com/tkhq/react-native-demo-wallet/raw/refs/heads/main/assets/videos/demo_video.mov" width="100%" height="420" controls />
</Frame>

**Complete the installation and setup by following the instructions in the [README](https://github.com/tkhq/react-native-demo-wallet/blob/main/README.md) file.**


# Ruby
Source: https://docs.turnkey.com/sdks/ruby

Turnkey offers native tooling for interacting with the API using Ruby. See [https://github.com/tkhq/ruby-sdk](https://github.com/tkhq/ruby-sdk) for more details.

This repository contains a Ruby gem, [`turnkey_client`](https://rubygems.org/gems/turnkey_client) to interact with the Turnkey API.

## Using Turnkey in your Ruby projects

To install `turnkey_client`, install it with bundler:

```rb
bundle add turnkey_client
```

Then `require` it in Ruby files to use it:

```rb
require "turnkey_client"

client = TurnkeyClient.configure do |c|
    c.api_public_key = "your API public key"
    c.api_private_key = "your API private key"
end

response = TurnkeyClient::SessionsApi.new(client).get_whoami({ organization_id: "your organization ID"})
puts response
```

See the [examples](./examples/) folder if you're looking for a complete sample project

## Examples

* [Whoami](./examples/whoami/): example showcasing API request signing in its simplest form
* [Signing](./examples/signing/): example showcasing wallet creation and ETH message signing

## Using Turnkey in your Rails projects

To use in Rails we recommend creating a new `config/initializers/turnkey.rb` file:

```rb
require 'turnkey_client'

TURNKEY_CLIENT = TurnkeyClient.configure do |config|
  c.api_public_key = "your API public key"
  c.api_private_key = "your API private key"
end
```

You can then use this in your controller or models with:

```rb
require 'turnkey_client'

TurnkeyClient::SessionsApi.new(TURNKEY_CLIENT).get_whoami({ organization_id: "your organization ID"})
```

## Re-generating `turnkey_client`

We use a swagger spec and [Swagger Codegen](https://github.com/swagger-api/swagger-codegen) to generate `turnkey_client`. To update this gem:

* Update the swagger spec in [`turnkey_client_inputs`](./turnkey_client_inputs/)
* Bump `gemVersion` in [`config.json`](./turnkey_client_inputs/config.json)
* Run `make`

## Updating codegen templates

We use custom templates to insert custom functionality, namely:

* added `openssl` as a dependency to load API keys
* added functionality to insert `X-Stamp` headers to requests for authentication
* modified `configure` function to require a valid P256 public/private key pair at initialization time

If you want to tweak something related to codegen itself, head ([here](./turnkey_client_inputs/templates/)), make the desired change, and re-generate `turnkey_client`

If you want to update templates with upstream this is a bit harder but possible: these templates were downloaded from [this folder](https://github.com/swagger-api/swagger-codegen-generators/tree/0f7eeb2ca53e5fff886ce1a609bce1b1e75063fe/src/main/resources/handlebars/ruby) (this is a permalink to the right git SHA). You can see all the changes made to these by looking at the history of changes in the templates folder: [https://github.com/tkhq/ruby-sdk/commits/main/turnkey\_client\_inputs/templates](https://github.com/tkhq/ruby-sdk/commits/main/turnkey_client_inputs/templates).

## Ruby

On Mac, Ruby will come installed automatically. However, the default version might not be compatible with certain gems, nor will it allow you to modify the default gems directory. To set up Ruby, there are many options: rbenv, rvm, asdf, chruby, etc. For example, rbenv can be set up by following the instructions [here](https://github.com/rbenv/rbenv?tab=readme-ov-file#installation).

## Rubocop

We use Rubocop for linting. To install:

```sh
$ gem install rubocop
```

And run:

```sh
$ rubocop
```

## Releasing on Rubygems.org

To build and release:

```sh
$ cd turnkey_client
$ gem build turnkey_client.gemspec
$ gem push turnkey_client-x.y.z.gem
```


# Rust
Source: https://docs.turnkey.com/sdks/rust

Turnkey offers native tooling for interacting with the API using Rust. See [https://github.com/tkhq/rust-sdk](https://github.com/tkhq/rust-sdk) for more details.



# Turnkey Swift SDK
Source: https://docs.turnkey.com/sdks/swift

This documentation contains guides for using the [Turnkey Swift SDK](https://github.com/tkhq/swift-sdk).

<CardGroup>
  <Card title="Proxy Middleware" href="/sdks/swift/proxy-middleware" icon="file-lines" iconType="solid" horizontal>
    Using the Proxy Middleware from the Turnkey Swift SDK
  </Card>

  <Card title="Register Passkey" href="/sdks/swift/register-passkey" icon="file-lines" iconType="solid" horizontal>
    Register Passkey
  </Card>
</CardGroup>


# Proxy Middleware
Source: https://docs.turnkey.com/sdks/swift/proxy-middleware

The [`ProxyMiddleware`](https://github.com/tkhq/swift-sdk/blob/bd8993b4b6b35c44d4a917b06dd44490961c4f28/Sources/Middleware/ProxyMiddleware.swift) is integrated into the `TurnkeyClient` through its initializer that accepts a proxy server URL.

## Overview

This setup is particularly useful for handling scenarios where direct authenticated requests are not feasible, such as during onboarding flows or when additional server-side processing is required before reaching Turnkey's backend.

## Initialize

Here's how you can initialize the `TurnkeyClient` with a proxy server URL:

```swift
import TurnkeySDK

// Initialize the TurnkeyClient with a proxy server URL
let turnkeyClient = TurnkeyClient(proxyURL: "https://your-proxy-server.com/api/turnkey-proxy")
```

This initializer configures the `TurnkeyClient` to route all requests through the specified proxy server. The proxy server is then responsible for forwarding these requests to a backend capable of authenticating them using an API private key. After authentication, the proxy server forwards the requests to Turnkey's backend and relays the response back to the client.

This setup is especially useful for operations like:

* Email [authentication](/authentication/email)
* Wallet [import](/wallets/import-wallets) & [export](/wallets/export-wallets)
* [Sub-organization creation](/concepts/sub-organizations#creating-sub-organizations)

## Request Header

The middleware adds an `X-Turnkey-Request-Url` header to each request, which contains the original request URL. This is used to forward the request to Turnkey's backend.

Example implementation of a Node.js proxy server:

```js
const express = require("express");
const app = express();

app.use(express.json());

app.post("/api/turnkey-proxy", async (req, res) => {
  // The original request URL e.g. https://api.turnkey.com/public/v1/submit/create_sub_organization
  const turnkeyApiRequestURL = req.headers["X-Turnkey-Request-Url"];

  // Remove the 'X-Turnkey-Request-Url' header
  delete req.headers["X-Turnkey-Request-Url"];

  try {
    // Forward the request to the original URL
    const response = await fetch(turnkeyApiRequestURL, {
      method: "POST",
      headers: req.headers,
      body: JSON.stringify(req.body),
    });

    // Get the response data
    const data = await response.json();

    // Data will be the response from the create sub-organization request
    // You may save this data to your database

    // Important: Send the exact response back to the client
    // This is necessary for TurnkeySDK to process the response correctly
    res.status(response.status).json(data);
  } catch (error) {
    console.error("Error forwarding request:", error);
    res.status(500).send("Internal Server Error");
  }
});

// Start the server
app.listen(3000, () => {
  console.log("Server is running on port 3000");
});
```

### Response Matching

It is crucial that the response from the developer's backend matches exactly with what would be expected from Turnkey's backend. Any discrepancy in the response format or data can cause the request to fail.

## Conclusion

While `ProxyMiddleware` is not required, it provides a convenient way to send requests on behalf of unauthenticated users looking to perform operations such as email authentication, wallet import/export, and sub-organization creation.


# Introduction
Source: https://docs.turnkey.com/sdks/swift/register-passkey

This guide explains how to use the `PasskeyManager` class to register a new passkey within your iOS application. We'll cover the necessary configurations and provide code examples with detailed explanations.

## Prerequisites

Before integrating passkey registration, ensure the following prerequisites are met. You may proceed to the [Passkey Registration](#passkey-registration) section if you have already configured the associated domains and the app site association file.

### Associated Domains Entitlement

Your app must have the Associated Domains capability enabled. This allows your app to access passkeys stored in the user's iCloud Keychain. Ensure that your domain supports HTTPS and is properly configured.

1. In Xcode, select your project and navigate to the Signing & Capabilities tab.
2. Click the + Capability button and add Associated Domains.
3. Add your domain to the Associated Domains section, prefixed with webcredentials:. For example:

```bash
webcredentials:your.domain.com
```

Reference: [Apple Developer Documentation - Supporting Associated Domains](https://developer.apple.com/documentation/xcode/supporting-associated-domains)

### Apple App Site Association File

Your domain must host an `apple-app-site-association` file that specifies the app identifiers allowed to access credentials. The file should be available at:

```bash
https://your.domain.com/.well-known/apple-app-site-association
```

The content of the file should include the webcredentials service, as shown:

```bash
{
  "webcredentials": {
    "apps": ["<your-app-prefix>.<your-app-bundle-id>"]
  }
}
```

Replace `<your-app-prefix>` and `<your-app-bundle-id>` with your actual App ID prefix and bundle identifier.

## Passkey Registration

Once the prerequisites are in place, you can proceed to implement passkey registration using `PasskeyManager`.

<Steps>
  <Step title="Import Required Modules">
    At the top of your `ViewController` or relevant class, import the necessary modules:

    ```swift ViewController.swift
    import UIKit
    import AuthenticationServices
    import Shared  // Import Shared to use PasskeyManager
    import TurnkeySDK    // Import TurnkeySDK to use TurnkeyClient
    ```
  </Step>

  <Step title="Initialize PasskeyManager">
    Create an instance of `PasskeyManager`, providing the [Relying Party Identifier](/authentication/passkeys/options#rp) and the [presentation anchor](https://developer.apple.com/documentation/authenticationservices/asauthorizationcontrollerpresentationcontextproviding/presentationanchor\(for:\)).

    ```swift ViewController.swift
    class ViewController: UIViewController {
        var passkeyManager: PasskeyManager?
        override func viewDidLoad() {
            super.viewDidLoad()
            // Additional setup if needed
        }
        // ... rest of the class
    }
    ```
  </Step>

  <Step title="Set Up User Interface">
    Implement a method to initiate passkey registration, typically triggered by a user action such as tapping a button.

    The `PasskeyManager` requires two parameters:

    * `rpId`: The relying party identifier, typically your domain. This must match the domain configured in the Associated Domains entitlement and the `apple-app-site-association` file.
    * `presentationAnchor`: The window in which the authentication services will present UI, usually obtained from `view.window`.

    ViewController.swift

    ```swift ViewController.swift
    @IBAction func registerPasskeyTapped(_ sender: Any) {
        guard let window = view.window else {
            print("No window available")
            return
        }

        let rpId = "your.domain.com"  // Replace with your actual domain
        let email = "user@example.com" // Replace with the user's email

        // Initialize PasskeyManager
        passkeyManager = PasskeyManager(rpId: rpId, presentationAnchor: window)

        // Register for passkey-related notifications
        // We'll define this method in the next step
        registerForPasskeyNotifications()

        // Start the passkey registration process
        passkeyManager?.registerPasskey(email: email)
    }
    ```
  </Step>

  <Step title="Register for Notifications">
    To handle the results of the passkey registration process, register for the relevant notifications provided by PasskeyManager.

    ```swift ViewController.swift
    func registerForPasskeyNotifications() {
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(passkeyRegistrationCompleted(_:)),
            name: .PasskeyRegistrationCompleted,
            object: nil
        )
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(passkeyRegistrationFailed(_:)),
            name: .PasskeyRegistrationFailed,
            object: nil
        )
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(passkeyRegistrationCanceled),
            name: .PasskeyRegistrationCanceled,
            object: nil
        )
    }
    ```
  </Step>

  <Step title="Cleanup">
    Remove the observers when they are no longer needed to avoid memory leaks.

    ```swift ViewController.swift
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    ```
  </Step>

  <Step title="Implement Notification Handlers">
    Define the methods that handle the passkey registration outcomes.

    ```swift ViewController.swift
    @objc func passkeyRegistrationCompleted(_ notification: Notification) {
        if let result = notification.userInfo?["result"] as? PasskeyRegistrationResult {
            // Handle successful registration
            print("Passkey registration completed.")
            print("Challenge: \(result.challenge)")
            print("Credential ID: \(result.attestation.credentialId)")
            // Send result to your server for verification and storage
        }
    }

    @objc func passkeyRegistrationFailed(_ notification: Notification) {
        if let error = notification.userInfo?["error"] as? PasskeyRegistrationError {
            // Handle registration failure
            print("Passkey registration failed with error: \(error.localizedDescription)")
            // Display an error message or take appropriate action
        }
    }

    @objc func passkeyRegistrationCanceled() {
        // Handle user cancellation
        print("Passkey registration was canceled by the user.")
        // Update UI or take appropriate action
    }
    ```
  </Step>
</Steps>

## Sign Up New User

After successful passkey registration, use the `PasskeyRegistrationResult` to sign up a new user by creating a sub-organization using the `TurnkeyClient` from the TurnkeySDK.

<Steps>
  <Step title="Initialize TurnkeyClient with Proxy">
    When handling the completion of passkey registration, set up the `TurnkeyClient` with a proxy server URL using the [`ProxyMiddleware`](/sdks/swift/proxy-middleware). This configuration is essential for situations where the parent organization's API keys are required to authenticate requests for creating a sub-organization. Your backend should relay the request to the Turnkey API, ensuring it is authenticated with the parent organization's API keys.

    ```swift ViewController.swift
    func signUpWithPasskey(with passkeyRegistrationResult: PasskeyRegistrationResult) {
        Task {
            do {
                // Initialize the TurnkeyClient with a proxy server URL
                let turnkeyClient = TurnkeyClient(proxyURL: "https://your-proxy-server.com/api/turnkey-proxy")

                // Proceed to the next substep...

            } catch {
                print("Error signing up new user: \(error)")
                // Handle error appropriately
            }
        }
    }
    ```

    <Info>
      The middleware adds an `X-Turnkey-Request-Url` header to each request, which contains the original request URL. For more details, see the [Proxy Middleware](/sdks/swift/proxy-middleware) guide.
    </Info>
  </Step>

  <Step title="Attestation Object">
    Construct the attestation object using the `PasskeyRegistrationResult`.

    ```swift ViewController.swift
    let attestation = Components.Schemas.Attestation(
        credentialId: passkeyRegistrationResult.attestation.credentialId,
        clientDataJson: passkeyRegistrationResult.attestation.clientDataJson,
        attestationObject: passkeyRegistrationResult.attestation.attestationObject,
        transports: [.AUTHENTICATOR_TRANSPORT_BLE]  // Adjust transports as needed
    )
    ```
  </Step>

  <Step title="Define Parameters">
    Set up the necessary parameters for the sub-organization and root user. We'll use the `passkeyRegistrationResult` we received in the previous step to create a passkey authenticator for this new sub-organization.

    ```swift ViewController.swift
    let parentOrganizationId = "your-parent-organization-id"
    let subOrganizationName = "New Sub Organization"

    // This should come from the user's input
    let email = "user@example.com"

    let rootUsers: [Components.Schemas.RootUserParamsV4] = [
        .init(
            userName: email,
            userEmail: email,
            apiKeys: [],
            authenticators: [
                .init(
                    // We use the passkey registration result to create the authenticator
                    authenticatorName: "Passkey",
                    challenge: passkeyRegistrationResult.challenge,
                    attestation: attestation
                )
            ],
            oauthProviders: []
        )
    ]

    let rootQuorumThreshold: Int32 = 1

    // Create an Ethereum wallet for the new sub-organization
    let wallet = Components.Schemas.WalletParams(
        walletName: "Default Wallet",
        accounts: [
            .init(
                curve: .CURVE_SECP256K1,
                pathFormat: .PATH_FORMAT_BIP32,
                path: "m/44'/60'/0'/0/0",
                addressFormat: .ADDRESS_FORMAT_ETHEREUM
            )
        ]
    )

    // Set optional parameters
    let disableEmailRecovery = false
    let disableEmailAuth = false
    let disableSmsAuth = false
    let disableOtpEmailAuth = false
    ```
  </Step>

  <Info>
    You can find more information about the optional parameters in the [Organization Features](/concepts/organizations#features) section of the documentation.
  </Info>

  <Step title="Create Sub-Organization">
    Use the `TurnkeyClient` to create the sub-organization with the provided parameters.

    ```swift ViewController.swift
    let output = try await turnkeyClient.createSubOrganization(
        organizationId: parentOrganizationId, // Organization ID can be empty when using proxy
        subOrganizationName: subOrganizationName,
        rootUsers: rootUsers,
        rootQuorumThreshold: rootQuorumThreshold,
        wallet: wallet,
        disableEmailRecovery: disableEmailRecovery,
        disableEmailAuth: disableEmailAuth,
        disableSmsAuth: disableSmsAuth,
        disableOtpEmailAuth: disableOtpEmailAuth
    )
    ```
  </Step>

  <Step title="Handle the Response">
    Process the response from the `createSubOrganization` call to retrieve information about the new sub-organization and root users.

    ```swift ViewController.swift
    // Handle the response
    switch output {
    case let .ok(response):
        switch response.body {
        case let .json(activityResponse):
            if let result = activityResponse.activity.result.createSubOrganizationResultV7 {
                print("Created sub-organization: \(result.subOrganizationId ?? "Unknown ID")")
                if let rootUserIds = result.rootUserIds {
                    print("Created root users: \(rootUserIds)")
                }
                // Proceed with additional setup or navigation as needed
            }
        }
    case let .undocumented(statusCode, undocumentedPayload):
        if let body = undocumentedPayload.body {
            let bodyString = try await String(decoding: body, as: UTF8.self)
            print("Undocumented response body: \(bodyString)")
        }
        print("Undocumented response: \(statusCode)")
    }
    ```
  </Step>
</Steps>

### References

* [Apple Developer Documentation - Supporting Passkeys](https://developer.apple.com/documentation/authenticationservices/public-private_key_authentication/supporting_passkeys)
* [Apple Developer Documentation - ASAuthorizationController](https://developer.apple.com/documentation/authenticationservices/asauthorizationcontroller)
* [Apple Developer Documentation - ASAuthorizationPlatformPublicKeyCredentialProvider](https://developer.apple.com/documentation/authenticationservices/asauthorizationplatformpublickeycredentialprovider)


# CosmJS
Source: https://docs.turnkey.com/sdks/web3/cosmjs

[`@turnkey/cosmjs`](https://www.npmjs.com/package/@turnkey/cosmjs) exports a `TurnkeyDirectWallet` that serves as a drop-in replacement for a CosmJS direct wallet. It includes support for `signDirect`. See full implementation [here](https://github.com/tkhq/sdk/tree/main/packages/cosmjs) for more details and examples.

```js
// Initialize a Turnkey Signer
const turnkeySigner = await TurnkeyDirectWallet.init({
  config: {
    ...
  },
  prefix: "celestia", // can be replaced with other Cosmos chains
});

const account = refineNonNull((await turnkeySigner.getAccounts())[0]);
const compressedPublicKey = toHex(account.pubkey);
const selfAddress = account.address;
```


# EIP 1193
Source: https://docs.turnkey.com/sdks/web3/eip-1193

[`@turnkey/eip-1193-provider`](https://www.npmjs.com/package/@turnkey/eip-1193-provider) is a Turnkey-compatible Ethereum provider that conforms to the [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193) standard. It's built to seamlessly integrate with a broad spectrum of EVM-compatible chains, offering capabilities like account management, transaction signing, and blockchain interaction.

See [`with-eip-1193-provider`](https://github.com/tkhq/sdk/tree/main/examples/with-eip-1193-provider) for an example.


# Ethers
Source: https://docs.turnkey.com/sdks/web3/ethers

[`@turnkey/ethers`](https://www.npmjs.com/package/@turnkey/ethers) exports a `TurnkeySigner` that serves as a drop-in replacement for an Ethers signer.

Out of the box, it supports `{ signTransaction | signMessage | signTypedData }`. See full implementation [here](https://github.com/tkhq/sdk/tree/main/packages/ethers) for more details and examples. Note that you must **bring your own provider and connect it** to the TurnkeySigner.

```js
// Initialize a Turnkey Signer
const turnkeySigner = new TurnkeySigner({
  ...
});

// Bring your own provider (such as Alchemy or Infura: https://docs.ethers.org/v6/api/providers/)
const network = "goerli";
const provider = new ethers.providers.InfuraProvider(network);
const connectedSigner = turnkeySigner.connect(provider);
```


# Solana
Source: https://docs.turnkey.com/sdks/web3/solana

We have released a package that you can use to sign transactions and messages: [`@turnkey/solana`](https://www.npmjs.com/package/@turnkey/solana). See [here](https://github.com/tkhq/sdk/tree/main/examples/with-solana) for an example.



# Viem
Source: https://docs.turnkey.com/sdks/web3/viem

[`@turnkey/viem`](https://www.npmjs.com/package/@turnkey/viem) provides a Turnkey [Custom Account](https://viem.sh/docs/accounts/custom.html#custom-account) (signer) which implements the signing APIs expected by Viem clients.

See [`with-viem`](https://github.com/tkhq/sdk/tree/main/examples/with-viem) and [`with-viem-and-passkeys`](https://github.com/tkhq/sdk/tree/main/examples/with-viem-and-passkeys) for examples.
See [`with-viem`](https://github.com/tkhq/sdk/tree/main/examples/with-viem) and [`with-viem-and-passkeys`](https://github.com/tkhq/sdk/tree/main/examples/with-viem-and-passkeys) for examples.


# Disaster Recovery
Source: https://docs.turnkey.com/security/disaster-recovery



We have a comprehensive disaster recovery process in place for all critical Turnkey data.

In particular, there are two main categories of data that we consider to be critical:

* **Organization data:** Core data within your organization, including details for users, encrypted private key material, policies, tags, activity history, etc.
* **Quorum Keys**: Keys used by members of the Quorum Set to boot secure applications, and perform sensitive actions within an enclave like decrypting private keys or making policy decisions.

For organization data, because all enclave applications are stateless, our persistence strategy is very similar to a traditional web application. Data is encrypted, stored redundantly across geographies, and consistently backed up and exported to our disaster recovery accounts.

For Quorum Keys, as described in [Quorum deployments](/security/quorum-deployments), we split the key between members of the Quorum set and have a level of redundancy in those shards. In the unlikely event that all members of the Quorum Set were to lose their active shares, we have a set of offline backup shares securely stored across geographically distributed locations.


# Enclave to end-user secure channels
Source: https://docs.turnkey.com/security/enclave-secure-channels



Turnkey does not trust anything running outside of secure enclaves. See [our approach](/security/our-approach) for more details. When enclaves and end-users need to exchange private information, we rely on a protocol based on [HPKE](https://datatracker.ietf.org/doc/html/rfc9180) to establish a **secure channel**.

This channel is a short-lived, one-way communication channel used in the following case:

* **Key import**: the end-user encrypts key material to a Turnkey enclave
* **Key export**: a Turnkey enclave encrypts key material to an end-user
* **Authentication**: a Turnkey enclave encrypts an API key credential to an end-user after authentication

Neither the client or the server should reused keys to send or receive more than one message. We want to avoid the recipient target key being used more then once in order to ensure [forward secrecy](https://en.wikipedia.org/wiki/Forward_secrecy); see [security details](#security-details) section for important details and caveats.

## HPKE Protocol

### Terms

* **Encapsulated Key** ("Encapped Key"): the public key of the sender used for ECDH.
* **Target Key Pair**: the key pair of the receiver that the sender encrypts to the public key of. Only one message should ever be encrypted to the public key.
* **Server**: a server inside of the enclave; normally an enclave application.
* **Client**: a client outside of the enclave; normally a turnkey end user.
* **Enclave HPKE Key Pair**: a key pair derived from the Quorum master seed specifically for the purpose of establishing secure channels with clients.

### Overview

This protocol builds on top of the HPKE standard ([RFC 9180](https://datatracker.ietf.org/doc/html/rfc9180)) by adding recipient pre-flight authentication so the client can verify it is sending ciphertext to a turnkey controlled enclave and the enclave can verify its sending ciphertext to the correct client. See the [security profile](#security-profile) section more details.

### HPKE Configuration

* KEM: `KEM_P256_HKDF_SHA256`
* KDF: `KDF_HKDF_SHA256`
* AEAD: `AEAD_AES256GCM`
* INFO: `turnkey_hpke` (raw bytes)
* Additional Associated Data: `EncappedPublicKey||ReceiverPublicKey`

### Protocol details

#### Server to Client

1. Client generates target pair and sends `clientTargetPub` key to server.
2. Server computes `ciphertext, serverEncappedPub = ENCRYPT(plaintext, clientTargetPub)` and clears `clientTargetPub` from memory.
3. Server computes `serverEncappedPub_sig_enclaveAuthPriv = SIGN(serverEncappedPub, enclaveAuthPriv)`.
4. Server sends `(ciphertext, serverEncappedPub, serverEncappedPub_sig_enclaveAuthPriv)` to client.
5. Client runs `VERIFY(serverEncappedPub, serverEncappedPub_sig_enclaveAuthPriv)`.
6. Client recovers plaintext by computing `DECRYPT(ciphertext, serverEncappedPub, clientTargetPriv)` and the client target pair is cleared from memory. If the target pair is used multiple times we increase the count of messages that an attacker with the compromised target private key can decrypt. There is no hard mechanism to prevent a faulty client from resubmitting the same target public key.

#### Client to Server

1. Client sends request to server for target key.
2. Server generates server target pair and computes `serverTargetPub_sig_enclaveAuthPriv = SIGN(serverTargetPub, enclaveAuthPriv)`.
3. Server sends `(serverTargetPub, serverTargetPub_sig_enclaveAuthPriv)` to client.
4. Client runs `VERIFY(serverTargetPub, serverTargetPub_sig_enclaveAuthPriv)`.
5. Client computes `ciphertext, clientEncappedPub = ENCRYPT(plaintext, serverTargetPub)` and clears serverTargetPub from memory.
6. Client sends `(ciphertext, clientEncappedPub)` to server and the client is cleared from memory.
7. Server recovers plaintext by computing `DECRYPT(ciphertext, clientEncappedPub, clientTargetPriv)` and server target pair is cleared from memory. If the target pair is used multiple times we increase the count of messages that an attacker with the compromised target private key can decrypt.

## Import flow

Turnkey's import functionality works by anchoring import in a **target encryption key** (TEK). This target encryption key is a standard P-256 key pair and is generated in the Turnkey secure enclave via a `INIT_IMPORT_WALLET` or `INIT_IMPORT_PRIVATE_KEY` activity. This TEK is encrypted to the enclave's quorum key and the TEK public key is returned in the activity response, following the protocol above.

The following diagram summarizes the flow:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/security/img/wallet_import_cryptography.png" alt="import cryptography" />
</Frame>

The client-side iframe plays the role of the client and encrypts the wallet's mnemonic or private key to the secure enclave using the protocol described above. The encrypted key material is then passed as a parameter inside of a signed `IMPORT_WALLET` or `IMPORT_PRIVATE_KEY` activity. During this activity, the Turnkey enclave uses its key pair to decrypt and import the encrypted key material.

## Export flow

Turnkey's export functionality works by anchoring export in a **target encryption key** (TEK). This target encryption key is a standard P-256 key pair and can be created in many ways: completely offline, or online inside of script using the web crypto APIs.

The following diagram summarizes the flow:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/security/img/wallet_export_cryptography.png" alt="export cryptography" />
</Frame>

The client-side iframe plays the role of the server: the public portion of this key pair is passed as a parameter inside of a signed `EXPORT_WALLET`, `EXPORT_PRIVATE_KEY`, or `EXPORT_WALLET_ACCOUNT` activity.

Turnkey's enclave encrypts the private key material (wallet mnemonic or private key) to the end-user's TEK using the protocol described in the previous section.

Once the activity succeeds, the encrypted mnemonic or private key can be decrypted by the end-user only.

## Auth flow

Unlike typical auth and recovery flows in the industry, Turnkey doesn't send unencrypted tokens. We use the protocol above to send credentials to end-users with no man-in-the-middle risk. This ensures that even if the content of an auth email is leaked, an attacker cannot decrypt and use the underlying credential. The following diagram summarizes the email auth flow:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/security/img/email_auth_cryptography.png" alt="email auth cryptography" />
</Frame>

Our email auth flow works by anchoring on a **target encryption key** (TEK). This target encryption key is a standard P-256 key pair and can be created in many ways: completely offline, or online inside of script using the web crypto APIs.

The public part of this key pair is passed as a parameter inside of a signed `INIT_OTP_AUTH` or `EMAIL_AUTH` activity.

Our enclave creates a fresh P256 key pair ("credential") and encrypts its private key to the recovering user's TEK using the protocol above.

Once the encrypted credential is received via email, it's decrypted where the target public key was originally created. The credential is then ready to be used to sign Turnkey activity requests.

Our OTP flows work similarly, except the bundle is not emailed to the user directly. Instead, it is returned as part of the `OTP_AUTH` activity results.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/security/img/otp_auth_cryptography.png" alt="OTP auth cryptography" />
</Frame>

## Security details

### Receiver pre-flight authentication

We achieve recipient authentication for both the server and client:

* **Client to Server**: client verifies that the server's target key is signed by the enclave. This check is critical for import/export flows. If the client accepts key material (e.g. a wallet seed) from a malicious party, they might not realize they have the wrong wallet (compromised seed because known or with bad entropy). If the client encrypts their seed to a malicious party, they lose funds directly. This is NOT required for authentication flows: the client can afford to decrypt and use a bad API key. A bad API key will simply produce an invalid signature when used.
* **Server to Client**: server relies on upstream checks by our policy engine, as well as the overall activity signing scheme to enforce rules that guarantee authenticity of the client's target key. Specifically, when the client sends their target public key, it is sent as part of a signed payload (the activity request), and that payload must be signed with an existing credential persisted in org data.

### Forward secrecy

The underlying HPKE spec does not provide forward secrecy on the recipient side since the target key can be long lived. To improve forward secrecy we specify that the target key should only be used once by the sender and receiver. We cannot enforce this strictly on the client-side because a client may choose to reuse their key.

### Sender authentication

We use `OpMod Base` because the sender's KEM private key is not long lived and thus does not need HPKE authentication. In order for this to be exploited one side's private key data would have to be leaked or an attacker would need to spoof a message from the sender. Turnkey mitigates this attack by layering a signature from an authentication key over payloads that contain ciphertext + encappedPub. Note that in the case of client to server the authentication signature is verified by the our policy engine. Read more about HPKE asymmetric authentication [here](https://datatracker.ietf.org/doc/html/rfc9180#name-authentication-using-an-asy).


# Non-Custodial Key Management
Source: https://docs.turnkey.com/security/non-custodial-key-mgmt



## Turnkey's non-custodial infrastructure

Turnkey has built a new model for private key management that utilizes secure enclaves — highly constrained compute environments that can cryptographically attest to the code running inside. All private key material is only decrypted within an enclave, and transaction signing happens according to customer-defined policies.

This novel security architecture means raw private keys themselves are never exposed to Turnkey, your software, or your team. Specifically, Turnkey stores encrypted private keys that are only decrypted when you authenticate to an auditable, tamper-proof secure enclave with your secret (e.g., API key or Passkey credentials). You (and/or your end users, depending on your implementation) remain the owner of your private keys and the funds controlled by those private keys at all times. See [quorum deployments](/security/quorum-deployments) for more details on how we provision secure enclaves to ensure you’re always in control of your private keys.

Although we're not a bank, by analogy to physical security, Turnkey's role is similar to that of a safety deposit box operator. Turnkey secures, and facilitates access to, the safety deposit boxes (wallets), but only the customer can unlock the safety deposit box and access the contents (digital assets) inside.

## Private key storage

Turnkey does not store unencrypted private keys, but rather persists encrypted private key ciphertext inside of our primary and disaster recovery databases. This ciphertext is only to be decrypted from within the bounds of a secure enclave running verified Turnkey applications. Our [security overview](/security/our-approach) goes over the process in depth.

## Non-custodial wallets for end users

In a wallet-as-a-service implementation model, it is possible for you, as a Turnkey customer, to configure your organization in a way that limits access to your end users’ funds and private keys. When a new end user signs up to your app, you will need to create a separate Turnkey sub-organization, user, and private key for that end user, accessible only by the end user’s secret (e.g., API key or Passkey credentials). With this implementation, only your end user will be able to authorize Turnkey to process a signature request by providing their secret. Use of the private key is limited to the end user via their secret. When a signature request is initiated by the end user’s secret, Turnkey’s functionality is limited to processing the request based on any policy rules that have been set, and returning the signed transaction to you for broadcast on chain.


# Our Approach
Source: https://docs.turnkey.com/security/our-approach



At Turnkey we've developed a security framework that allows us—and eventually our users—to prove that every system with security-critical workloads is running exactly the software we expect at any given time, that no single engineer can access any enclave or reconstruct a secret, and that the system remains safe as long as enclaves are not compromised.

At the highest level, Turnkey runs all critical workloads in **"Secure Enclaves,"** a type of Trusted Execution Environment. To run our secure enclaves we have built [QuorumOS](https://github.com/tkhq/qos) to give us the ability to remotely attest to the integrity of the machines and the code running. Every time we deploy, we attest to the code running in the enclaves prior to posting shares of core secrets into the enclave. This helps to **ensure that we can trust the secure applications running in the enclaves,** which perform actions such as private key generation, transaction signing, and policy evaluation.

QuorumOS gives us end-to-end transparency into the code we're running and ensures **no single developer at Turnkey can alter or deploy enclaves, or reconstruct core secrets.**

We augment that trust in the application layer by **ensuring the applications only act on verifiable data**; every single change to a customer's organization data must be approved and cryptographically stamped within an enclave before it is considered by the policy engine. The system architecture ensures that even if all systems outside of the enclaves fail, your crypto remains safe.

Over time, we plan to open source more of this stack to enable other developers to remotely attest to our stack themselves, and to allow clients to bring outside data into the policy engine via their own QuorumOS applications. This, and more, is covered in depth in our [whitepaper](https://whitepaper.turnkey.com).

Our security architecture is the foundation of the Turnkey product. Read on for deeper dives on each of the topics referenced above.


# Quorum Deployments
Source: https://docs.turnkey.com/security/quorum-deployments



To run our applications in secure enclaves, we built QuorumOS: a minimal, immutable, and deterministic Linux unikernel build system for use cases that require high security and accountability. QuorumOS also contains an initialization and attestation framework for running applications within this environment.

Each instance of QOS is configured with a Quorum Set – A group of individuals who hold shares of a service's master secret. This master secret is also called the Quorum Key.

After the service is launched, QOS responds to attestation requests and waits to receive key shares from QOS Operators or members of the Quorum Set. Once a threshold number of shares have been sent into the enclave it will reconstruct its core secret and launch the application it was provisioned with. This process is outlined in the images below:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/security/img/diagrams/deployment.png" alt="Quorum deployments" />
</Frame>

Remote attestation is the process by which core attributes of a machine can be retrieved and verified from a remote location. The enclave's secure co-processor, in this case AWS's NSM, observes the enclave as it is being launched and records certain important values such as the hash of the enclave image, the hash of the kernel, and the hash of the boot filesystem. This means that each attestation request verifies that the code actually running in the enclave is only the code we expect to be running.

After initialization, a user of the system can request an attestation document from the enclave. This document will be signed by AWS PKI and can be validated using the process outlined [here](https://docs.aws.amazon.com/enclaves/latest/user/verify-root.html#validation-process).

Every single artifact in our critical application infrastructure builds deterministically. Because of this, we can verify precisely what is running in every enclave in our infrastructure at any point in time. This is an area where Turnkey is completely differentiated.

As described above in the description of QOS, each enclave application is provisioned at launch with a set of key shares that, when a quorum is reached, is reconstructed into a master secret.

At Turnkey we actively use this remote attestation process during that enclave provisioning flow. After deploying a new release of any Turnkey enclave application, QOS Operators verify that an enclave is running a particular version of the application by actually building it themselves and verifying the value they received after building against those provided in the attestation document from the NSM. Once confirmed, they use a defined Production Laptop Provisioning Flow to post in their key share to the enclave application.

We hope to expose this functionality to clients directly soon, to create a new paradigm of transparency and verifiability in a SaaS product and encourage others to follow suit.


# Reporting a Vulnerability
Source: https://docs.turnkey.com/security/reporting-a-vulnerability



Turnkey highly values the security of our software, services, and systems and we actively encourage the ethical reporting of any security vulnerabilities discovered. We invite researchers and users to report potential security vulnerabilities to our Bug Bounty Program via the form below, which is our preferred path for vulnerability reports.  Alternatively, you may email us at [security@turnkey.com](mailto:security@turnkey.com). When submitting a report, please provide a thorough description of the vulnerability, including steps to reproduce it and its potential impact.

If you believe you have found very serious vulnerability, we ask that you encrypt the message to the `security.turnkey.com` PGP key (FP: `AD6C 3E61 17A5 886E 550E F8BB 3ACD E5EA 8DC7 9275`). This can also be found on Turnkey's website at [https://www.turnkey.com/.well-known/security.asc.txt](https://www.turnkey.com/.well-known/security.asc.txt)

Upon receiving a report, our team promptly assesses and prioritizes the vulnerability based on its severity and potential impact. We then take reasonable and appropriate steps to mitigate and remediate the identified risks in accordance with our internal policies and timelines. Where feasible, we will endeavor to keep the reporter informed throughout the process. Our approach is designed to ensure confidentiality and offer safe harbor to researchers, promising that those who report vulnerabilities ethically and in good faith will not face legal action.

We expect reporters to treat vulnerability reports submitted to Turnkey, along with all associated information and/or data, with a high degree of care, use it solely for the purpose of reporting to Turnkey, and to not disclose it to any third parties without our written consent. With the reporter's consent, we may publicly disclose details of the vulnerability and acknowledge their contribution after it has been resolved.

For further inquiries or more information about our program, please contact our security team at [security@turnkey.com](mailto:security@turnkey.com).

## Bug bounty submissions

Use the form below to directly submit vulnerabilities for triage and evaluation as part of our bug bounty program.

<iframe allow="clipboard-read; clipboard-write" src="https://bugcrowd.com/a9e1eca7-990e-4602-bf6d-a9f70df1c2fa/external/report" title="Security vulnerability submission form" id="bugcrowd-external-submission-form" scrolling="no" referrerpolicy="origin" width="100%" height="2500px" />


# Secure Enclaves
Source: https://docs.turnkey.com/security/secure-enclaves



A core security anchor at Turnkey is the ability to prove to ourselves and our users that all systems within secure enclaves are running exactly the software we expect at any given time. To accomplish this, all security-critical Turnkey services—including key generation, signing, and our policy engine—are deployed in secure enclaves.

Secure enclaves, also called Trusted Execution Environments, are highly constrained compute environments that support cryptographic attestation to verify the enclave's identity and ensure that only authorized code is running. These enclaves operate in hardware-enforced isolation –– they have no persistent storage, no interactive access, and no external networking.

The following outlines the structure of a single enclave application:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/security/img/diagrams/secure_enclaves.png" alt="Secure enclaves" />
</Frame>

In this diagram *Host* represents a standard AWS virtual machine. We run a basic application that receives traffic from the network and calls into the enclave. This creates a layer of insulation from our most secure environment and offers a convenient place to gather metrics and other operational information about the enclaves.

*Enclave* represents a machine with no external connectivity. The only connection it can have is a virtual serial connection to the host and its own secure co-processor. In AWS this is called the Nitro Security Module (NSM). This runs an instance of Turnkey's enclave operating system, QuorumOS (QOS), and a secure application running on top of QOS.


# Turnkey Shared Responsibility Model
Source: https://docs.turnkey.com/security/shared-responsibility-model



# Introduction

When integrating your product with Turnkey, it is critical to understand which security tasks are Turnkey’s responsibility, and which tasks are your responsibility.

Turnkey provides secure, scalable, and programmable crypto infrastructure. Flexibility is at the core of our product, which means you have the freedom to integrate Turnkey in ways that may or may not fully meet your product’s security requirements. As detailed below, you are responsible for securing both your Turnkey organization, and your integration with Turnkey.

## Turnkey’s responsibility: Security of the platform

Turnkey is responsible for securing the infrastructure that runs the services offered by Turnkey.

This includes the security of all Turnkey-authored code, from the code running within our enclaves to our SDKs, and everything in between.

Turnkey commits to securing the Confidentiality, Integrity, and Availability of the Turnkey platform. Turnkey’s responsibilities therefore include:

* Maintaining the confidentiality of secret materials stored with Turnkey, in particular but not limited to cryptocurrency private keys;
* Ensuring the integrity of all end user requests that are made to Turnkey’s system and all data associated with those requests; and
* Providing constant [availability](https://www.turnkey-status.com) of Turnkey’s services.

Turnkey also offers multiple options for various components of Turnkey’s product in order to accommodate customers with varying security and user experience profiles. This allows each Turnkey customer to choose a security approach tailored to their specific needs.

## Customer’s responsibility: Security using the platform

Customers are responsible for the decisions they make when using Turnkey. Each customer’s unique product and threat model play a critical role in determining the appropriate configurations and integration patterns, including choices that could impact security.

Customers are responsible for securely integrating their product with Turnkey. Turnkey provides extensive [documentation and examples](https://docs.turnkey.com/home) for building multiple products, including guidance on authentication flows, appropriate feature selection, credential management, and more. Each customer’s implementation choices differ significantly based on the unique integration of Turnkey, and therefore the ultimate responsibility remains with the customer to select the right approach.

In addition, customers are responsible for securing their Turnkey organizations. This requires the proper configuration for the [root quorum](https://docs.turnkey.com/concepts/users/root-quorum?share_chat=1ef47f7f-e895-4195-9590-af958441dedc), appropriate backups for authenticators, and properly securing authenticator credentials, such as API keys.

## Illustrations of the shared responsibility model

### Authentication and Authorization

* Turnkey is responsible for ensuring authentication correctness and that any action taken within an authenticated context is unable to exceed previously granted permissions.
* Customers are responsible for ensuring that authorization permissions are appropriately configured for each user and that user authentication credentials are securely managed.

### Policies

Turnkey has built and maintains a [policy engine](https://docs.turnkey.com/concepts/policies/overview), which is the foundation for granular controls and permissions when using Turnkey. Customers are able to use the policy engine to define key- and wallet-use policies specific to their needs.

* Turnkey is responsible for ensuring that policies are always evaluated correctly, reflecting the policy as authored by the customer.
* Customers are responsible for authoring valid policies that address their specific key and wallet permissions and usage requirements.

## Additional guidance on applying the shared responsibility model

Turnkey provides comprehensive documentation to help customers effectively manage their responsibilities within the shared responsibility model:

* [Evaluating the security of your root quorum configuration](https://docs.turnkey.com/concepts/users/root-quorum?share_chat=1ef47f7f-e895-4195-9590-af958441dedc)
* [Understanding Turnkey authentication](https://docs.turnkey.com/authentication/passkeys/introduction)
* [Turnkey Whitepaper: Understanding Turnkey’s architecture and security model](https://whitepaper.turnkey.com)


# Verifiable Data
Source: https://docs.turnkey.com/security/verifiable-data



Enclave applications in Turnkey's infrastructure are stateless, meaning there is no persistent data held behind the enclave boundary. Instead, data is stored in a PostgreSQL instance in our primary AWS account. Before any enclave application operates on account data, it first verifies that the data has been recently notarized by Turnkey's notarizer. A recent stamp could be the result of an update or be initiated by the heartbeat service.

By verifying the authenticity of data using cryptographic signatures (no passwords!) and timestamping, we enable zero-risk data sharing between these apps and block man-in-the-middle or downgrade attacks. The combination of these features results in a system and an audit trail that is verifiable end-to-end.

The entire Turnkey architecture including this verifiable data flow is described below:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/security/img/diagrams/architecture.png" alt="Turnkey architecture" />
</Frame>


# The Turnkey Whitepaper
Source: https://docs.turnkey.com/security/whitepaper



We have published an in-depth whitepaper describing the principles with which we've built Turnkey and explaining in great detail the infrastructure foundations as well as the system architecture underpinning our product.

Our whitepaper is available online at **[whitepaper.turnkey.com](https://whitepaper.turnkey.com)**.


# Co-signing Transactions
Source: https://docs.turnkey.com/signing-automation/co-signing-transactions

Learn how to set up and use co-signing (multi-sig) wallets with Turnkey.

## Introduction to Co-signing

Co-signing, often referred to as multi-signature (multi-sig), provides an enhanced layer of security for blockchain transactions. It requires approvals from multiple parties before a transaction can be executed. This guide details how to implement a 2/2 co-signing setup using Turnkey, where both the end-user (via passkey) and your application backend (via API key) must approve transactions.

## Co-signing Architecture

The following diagram illustrates the setup and transaction flow for a co-signing wallet managed by Turnkey and your backend application:

```mermaid
sequenceDiagram
    participant User
    participant Frontend
    participant Backend
    participant Turnkey

    %% Setup Phase
    Note over User,Turnkey: Setup Phase
    User->>Frontend: Sign up / Create wallet
    Frontend->>User: Request passkey creation
    User->>Frontend: Create passkey (attestation)
    Frontend->>Backend: Send user info & attestation
    Backend->>Turnkey: Create sub-org with 2 root users:<br/>1. User (passkey)<br/>2. Backend (API key)
    Backend->>Turnkey: Set root quorum threshold = 2
    Turnkey->>Backend: Return sub-org ID & wallet info
    Backend->>Backend: Store sub-org ID in user record
    Backend->>Frontend: Return wallet info
    Frontend->>User: Display wallet address

    %% Transaction Phase
    Note over User,Turnkey: Transaction Phase
    User->>Frontend: Initiate transaction
    Frontend->>User: Request passkey authentication
    User->>Frontend: Authenticate with passkey
    Frontend->>Turnkey: Submit transaction signing request
    Turnkey->>Turnkey: Verify user passkey signature
    Turnkey->>Frontend: Return activity fingerprint
    Frontend->>Backend: Send activity fingerprint for approval
    Backend->>Turnkey: Verify & validate activity details
    Backend->>Turnkey: Approve activity (using backend API key)
    Turnkey->>Turnkey: Sign transaction (requires both approvals)
    Turnkey->>Backend: Return signed transaction
    Backend->>Frontend: Return signed transaction
    Frontend->>User: Show transaction success
```

## Implementation Steps

<Steps>
  <Step title="Create a Sub-Organization with Multiple Root Users">
    To set up a multi-sig wallet in Turnkey, you first need to create a sub-organization with two root users.
    This sub-organization will function as a separate entity with its own wallet and security settings.

    The key configuration here is setting up:

    * A root user for the end-user, authenticated with their passkey
    * A root user for your application service, authenticated with an API key
    * A root quorum threshold of 2, requiring both users to approve critical operations

    This creates a true multi-sig arrangement where neither party can unilaterally control the wallet.
    The following code shows how to implement this setup on your backend:

    <CodeGroup>
      ```typescript app.ts [expandable] {43}
      import { turnkeyServer } from "./turnkey";
      import { DEFAULT_ETHEREUM_ACCOUNTS } from "@turnkey/sdk-browser";

      async function createMultiSigWallet(
        userId,
        userEmail,
        userPasskeyChallenge,
        userPasskeyAttestation
      ) {
        // Create a sub-organization with two root users and a threshold of 2
        const subOrg = await turnkeyServer.createSubOrganization({
          organizationId: process.env.TURNKEY_ORGANIZATION_ID,
          subOrganizationName: `Multi-Sig Wallet for ${userEmail}`,
          rootUsers: [
            // First root user - the end user with their passkey
            {
              userName: "End User",
              userEmail: userEmail,
              apiKeys: [],
              authenticators: [
                {
                  authenticatorName: "User Passkey",
                  challenge: userPasskeyChallenge,
                  attestation: userPasskeyAttestation,
                },
              ],
            },
            // Second root user - your application's service account
            {
              userName: "Application Service",
              userEmail: "service@yourapp.com",
              apiKeys: [
                {
                  apiKeyName: "Service API Key",
                  publicKey: process.env.SERVICE_API_PUBLIC_KEY,
                  curveType: "API_KEY_CURVE_SECP256K1",
                },
              ],
              authenticators: [],
            },
          ],
          // This is the key setting - requiring both users to approve
          rootQuorumThreshold: 2,
          wallet: {
            walletName: "Shared Wallet",
            accounts: DEFAULT_ETHEREUM_ACCOUNTS,
          },
        });

        // Save the sub-organization ID in your database
        await db.users.update({
          where: { id: userId },
          data: { turnkeySubOrgId: subOrg.organizationId },
        });

        return subOrg;
      }
      ```

      ```typescript turnkey.ts
      import { Turnkey } from "@turnkey/sdk-server";

      // Initialize server-side client
      export const turnkeyServer = new Turnkey({
        apiBaseUrl: "https://api.turnkey.com",
        apiPrivateKey: process.env.TURNKEY_API_PRIVATE_KEY,
        apiPublicKey: process.env.TURNKEY_API_PUBLIC_KEY,
        defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
      }).apiClient();

      ```
    </CodeGroup>
  </Step>

  <Step title="Client-Side Transaction Initiation">
    When the user wants to sign a transaction using their multi-sig wallet, they need to initiate the process from your frontend application.
    This step involves:

    * Authenticating the user with their passkey (handled automatically by Turnkey)
    * Creating a transaction signing request to Turnkey
    * Receiving an activity fingerprint that needs further approval
    * Forwarding this fingerprint to your backend for the second signature

    The transaction won't be fully signed yet - it will be in a "requires consensus" state until your backend approves it.
    Here's how to implement this flow in your frontend:

    <CodeGroup>
      ```typescript app.ts [expandable]
      import { turnkeyPasskeyClient } from "./turnkey";


      // User initiates a transaction signing
      async function initiateTransaction(txData, walletAddress) {
        // This will trigger the user's passkey authentication
        const signActivity = await turnkeyPasskeyClient.signTransaction({
          organizationId: subOrgId,
          parameters: {
            type: "TRANSACTION_TYPE_ETHEREUM",
            signWith: walletAddress,
            unsignedTransaction: txData,
          },
        });

        // The activity needs approval from the backend service
        // Send the activity fingerprint to your backend
        const response = await fetch("/api/proxy/turnkey/approve-transaction", {
          method: "POST",
          body: JSON.stringify({
            activityFingerprint: signActivity.fingerprint,
            subOrgId: subOrgId,
          }),
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include", // Include cookies for JWT authentication
        });

        const result = await response.json();
        return result;
      }
      ```

      ```typescript turnkey.ts
      import { Turnkey } from "@turnkey/sdk-browser";

      // Initialize server-side client
      export const turnkeyPasskeyClient = new Turnkey({
        apiBaseUrl: "https://api.turnkey.com",
        defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
      });
      ```
    </CodeGroup>
  </Step>

  <Step title="Backend Activity Approval">
    Your backend needs an endpoint to receive the activity fingerprint from the frontend and approve it using its own API key.

    <CodeGroup>
      ```typescript app.ts [expandable]
      import { turnkeyServer } from "./turnkey";
      import { verifyJwt } from "./authMiddleware"; // Assume standard JWT middleware

      // Endpoint to approve a transaction activity
      app.post(
        "/api/proxy/turnkey/approve-transaction",
        verifyJwt,
        async (req, res) => {
          const { activityFingerprint, subOrgId } = req.body;
          const { userId } = req.user;

          // --- Authorization Check ---
          // Verify the user is authorized for this subOrgId
          const user = await db.users.findUnique({
            where: { id: userId },
            select: { turnkeySubOrgId: true },
          });

          if (user?.turnkeySubOrgId !== subOrgId) {
            return res.status(403).json({ error: "Forbidden" });
          }
          // --- End Authorization ---

          try {
            // TODO: Validate the transaction details from the activity
            // Fetch the activity from Turnkey to inspect its contents
            // const activity = await turnkeyServer.getActivity({
            //   activityId: activityId, // Need activityId from fingerprint?
            //   organizationId: subOrgId
            // });
            // if (activity.details.isInvalid) { throw new Error(...) }
            
            // Approve the activity using the backend service's API key
            const approvalActivity = await turnkeyServer.approveActivity({
              organizationId: subOrgId,
              fingerprint: activityFingerprint,
            });

            // Once approved, the transaction is signed
            // You might want to poll getActivity or use Webhooks to get the signed tx
            // For simplicity, we assume success here
            return res.status(200).json({ success: true, message: "Transaction approved by backend" });
          } catch (error) {
            console.error("Error approving transaction:", error);
            return res.status(500).json({ error: "Failed to approve transaction" });
          }
        }
      );
      ```

      ```typescript turnkey.ts
      import { Turnkey } from "@turnkey/sdk-server";

      // Initialize server-side client
      export const turnkeyServer = new Turnkey({
        apiBaseUrl: "https://api.turnkey.com",
        apiPrivateKey: process.env.TURNKEY_API_PRIVATE_KEY,
        apiPublicKey: process.env.TURNKEY_API_PUBLIC_KEY,
        defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
      }).apiClient();
      ```
    </CodeGroup>
  </Step>
</Steps>

#### Security Considerations and Best Practices

* **Validation Before Approval**: Always validate transaction details (recipient, amount, etc.) before approving activities.
* **API Key Security**: Protect your backend service's API key.
* **Authorization**: Ensure the authenticated frontend user is authorized for the `subOrgId` they are interacting with.
* **Webhooks**: Use Turnkey Webhooks to get notified about activity status changes (e.g., when a transaction is fully signed and confirmed).


# Signing Transactions
Source: https://docs.turnkey.com/signing-automation/code-examples/signing-transactions

This is a guide to signing transactions in a server context. While these snippets leverage Ethers, it can be swapped out for other signers in the Viem or Solana contexts. An example for Ethers can be found , and  for Viem in the server context. A similar example with Solana can be found .

<Steps>
  <Step title="Initialize the Server Client">
    ```ts
    import { Turnkey } from "@turnkey/sdk-server";

    const turnkeyClient = new Turnkey({
      apiBaseUrl: "https://api.turnkey.com",
      defaultOrganizationId: process.env.TURNKEY_ORGANIZATION_ID,
      apiPrivateKey: process.env.API_PRIVATE_KEY,
      apiPublicKey: process.env.API_PUBLIC_KEY,
    });
    ```
  </Step>

  <Step title="Initialize an Ethers Provider and Turnkey Signer">
    ```ts
    import { ethers } from "ethers";
    import { TurnkeySigner } from "@turnkey/ethers";

    const provider = new ethers.JsonRpcProvider(<provider api url>);
    const turnkeySigner = new TurnkeySigner({
        client: turnkeyClient.apiClient(),
        organizationId: process.env.ORGANIZATION_ID!,
        signWith: process.env.SIGN_WITH!,
      });
    ```
  </Step>

  <Step title="Call `sendTransaction` with the Turnkey Signer">
    ```ts
    const transactionRequest = {
      to: "<destination address>",
      value: ethers.parseEther("<amount to send>"),
      type: 2,
    };
    const sendTransaction =
      await connectedSigner.sendTransaction(transactionRequest);
    ```
  </Step>
</Steps>


# Overview
Source: https://docs.turnkey.com/signing-automation/overview



export const Logo = ({id, className = "", fill = "", ...props}) => {
  if (id === "react") {
    return <svg xmlns="http://www.w3.org/2000/svg" viewBox="-11.5 -10.23174 23 20.46348" className={className} {...props}>
        <title>React Logo</title>
        <circle cx="0" cy="0" r="2.05" fill="#61dafb" />
        <g stroke="#61dafb" strokeWidth="1" fill="none">
          <ellipse rx="11" ry="4.2" />
          <ellipse rx="11" ry="4.2" transform="rotate(60)" />
          <ellipse rx="11" ry="4.2" transform="rotate(120)" />
        </g>
      </svg>;
  }
  if (id === "react-native") {
    return <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -12.5 256 256" className={className} {...props}>
        <title>React Native Logo</title>
        <path fill="#4e4e4e" d="M121.309004,84.6732585 C123.402504,81.5874152 125.694292,81.1950171 127.553451,81.1950171 C129.41261,81.1950171 132.509843,81.5874152 134.604162,84.6732585 C151.106348,107.339593 178.345607,152.492 198.439108,185.798721 C211.542532,207.519499 221.6069,224.201947 223.671721,226.324944 C231.422996,234.294992 242.053551,229.327949 248.230809,220.287799 C254.312201,211.387762 256.000111,205.138399 256.000111,198.471155 C256.000111,193.930186 167.895315,30.0714244 159.022317,16.4322117 C150.48936,3.31359639 147.710044,0 133.105527,0 L122.176721,0 C107.615631,0 105.511479,3.31359639 96.9777022,16.4322117 C88.1055238,30.0714244 0.0001105152,193.930186 0.0001105152,198.471155 C0.0001105152,205.138399 1.68839227,211.387762 7.76991495,220.287799 C13.9471241,229.327949 24.5775965,234.294992 32.3286259,226.324944 C34.3936934,224.201947 44.4580605,207.519499 57.5616485,185.798721 C77.654822,152.492 104.806818,107.339593 121.309004,84.6732585 Z" />
      </svg>;
  }
  if (id === "android-kotlin") {
    return <svg xmlns="http://www.w3.org/2000/svg" viewBox="-147 -70 294 345" className={className} {...props}>
        <title>Android Kotlin Logo</title>
        <g fill="#a4c639">
          <use stroke="#FFF" strokeWidth="14.4" xlinkHref="#b" />
          <use xlinkHref="#a" transform="scale(-1,1)" />
          <g id="a" stroke="#FFF" strokeWidth="7.2">
            <rect rx="6.5" transform="rotate(29)" height="86" width="13" y="-86" x="14" />
            <rect id="c" rx="24" height="133" width="48" y="41" x="-143" />
            <use y="97" x="85" xlinkHref="#c" />
          </g>
          <g id="b">
            <ellipse cy="41" rx="91" ry="84" />
            <rect rx="22" height="182" width="182" y="20" x="-91" />
          </g>
        </g>
        <g stroke="#FFF" strokeWidth="7.2" fill="#FFF">
          <path d="m-95 44.5h190" />
          <circle cx="-42" r="4" />
          <circle cx="42" r="4" />
        </g>
      </svg>;
  }
  if (id === "ios-swift") {
    return <svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
        <title>iOS Swift Logo</title>
        <path d="M59.3867 16.4501C59.3832 15.8528 59.3766 15.2558 59.3601 14.6578C59.3253 13.357 59.2484 12.0444 59.0172 10.7575C58.7826 9.4506 58.3991 8.2354 57.7947 7.0482C57.2014 5.8823 56.4258 4.8154 55.5006 3.8902C54.5756 2.965 53.5087 2.1895 52.3423 1.5959C51.1561 0.9922 49.9407 0.6088 48.635 0.3742C47.3474 0.1423 46.0348 0.0659 44.733 0.0307C44.1353 0.0145 43.5382 0.0077 42.9407 0.004C42.2315 0 41.5218 0 40.8128 0H25.0912H18.5781C17.8684 0 17.1595 0 16.4505 0.0041C15.8528 0.0078 15.255 0.0146 14.6582 0.0308C14.3328 0.0396 14.0067 0.051 13.6804 0.0667C12.7016 0.1139 11.7213 0.2004 10.7561 0.3743C9.77684 0.5503 8.84824 0.8099 7.94484 1.1834C7.64374 1.3078 7.34534 1.445 7.04874 1.5959C6.17394 2.0411 5.35494 2.5886 4.61004 3.2248C4.36174 3.4369 4.12164 3.6588 3.89044 3.8901C2.96504 4.8153 2.18944 5.8822 1.59614 7.0481C0.991738 8.2353 0.608738 9.4505 0.373938 10.7574C0.142938 12.0443 0.0661381 13.3569 0.0311381 14.6577C0.0147381 15.2557 0.00783811 15.8527 0.00393811 16.45C-0.000561889 17.1594 3.81111e-05 17.8689 3.81111e-05 18.5781V28.26V40.8125C3.81111e-05 41.5224 -0.000661889 42.2312 0.00393811 42.9411C0.00783811 43.5384 0.0147381 44.1354 0.0311381 44.7324C0.0661381 46.0339 0.142838 47.3468 0.373938 48.6331C0.608738 49.9396 0.991738 51.1559 1.59614 52.3428C2.18944 53.509 2.96504 54.5756 3.89044 55.5004C4.81514 56.426 5.88234 57.2014 7.04884 57.7954C8.23514 58.3992 9.45044 58.7821 10.7564 59.0167C12.0432 59.2483 13.3568 59.3253 14.6583 59.3601C15.2551 59.376 15.8529 59.3831 16.4506 59.3865C17.1596 59.3916 17.8685 59.3909 18.5782 59.3909H40.8128C41.5218 59.3909 42.2315 59.3916 42.9406 59.3865C43.5381 59.3831 44.1352 59.376 44.7329 59.3601C46.0347 59.3253 47.3473 59.2482 48.6349 59.0167C49.9406 58.7821 51.156 58.3991 52.3422 57.7954C53.5086 57.2015 54.5755 56.426 55.5005 55.5004C56.4257 54.5755 57.2014 53.509 57.7946 52.3428C58.399 51.1559 58.7825 49.9397 59.0171 48.6331C59.2483 47.3468 59.3252 46.0339 59.36 44.7324C59.3764 44.1354 59.383 43.5385 59.3866 42.9411C59.3912 42.2312 59.3908 41.5224 59.3908 40.8125V18.5781C59.3909 17.8689 59.3912 17.1594 59.3867 16.4501Z" fill="#F05138" />
        <path d="M47.0605 36.6607C47.0591 36.6589 47.0578 36.6576 47.0563 36.6559C47.122 36.4323 47.1898 36.2101 47.2473 35.9809C49.7123 26.16 43.6962 14.549 33.5157 8.43555C37.977 14.4834 39.9496 21.8088 38.197 28.215C38.0407 28.7864 37.8528 29.3348 37.6451 29.8678C37.4197 29.7197 37.1357 29.5516 36.7543 29.3413C36.7543 29.3413 26.6274 23.0886 15.6515 12.0291C15.3635 11.7388 21.5043 20.8061 28.4734 28.169C25.19 26.3263 16.0396 19.6686 10.2468 14.3667C10.9585 15.5536 11.805 16.6965 12.7355 17.7968C17.573 23.9317 23.8817 31.5012 31.4398 37.3137C26.1294 40.5635 18.6257 40.8162 11.1546 37.3171C9.30673 36.4511 7.56953 35.4062 5.96143 34.219C9.12393 39.2775 13.9946 43.6419 19.9227 46.1898C26.9922 49.2279 34.0223 49.0219 39.2583 46.2396L39.2542 46.2456C39.2781 46.2305 39.3085 46.214 39.3333 46.1987C39.5483 46.0831 39.7617 45.9654 39.9704 45.8411C42.4861 44.5353 47.4551 43.2105 50.1222 48.3999C50.7754 49.6699 52.1634 42.9395 47.0605 36.6607Z" fill="white" />
      </svg>;
  }
  if (id === "unity") {
    return <svg width="326" height="368" viewBox="0 0 326 368" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
        <title>Unity Logo</title>
        <path d="M325.729 258.325V86.6778L177.07 0.854004V66.7544L235.308 100.471C237.607 102.003 237.607 105.069 235.308 105.835L166.342 145.682C164.043 147.214 161.744 146.448 160.212 145.682L91.2463 105.835C88.9475 105.069 88.9475 101.237 91.2463 100.471L149.484 66.7544V0.854004L0.0585938 86.6778V258.325L56.7636 225.375V157.942C56.7636 155.643 59.8287 154.111 61.3613 154.877L130.327 194.724C132.626 196.256 133.392 197.789 133.392 200.088V279.781C133.392 282.08 130.327 283.613 128.794 282.846L70.5567 249.13L13.8517 282.08L162.511 368.67L311.17 282.846L254.465 249.896L196.227 283.613C193.928 285.145 191.629 283.613 191.629 280.547V200.854C191.629 198.555 193.162 196.256 194.695 195.49L263.66 155.643C265.959 154.111 268.258 155.643 268.258 158.708V226.141L325.729 258.325Z" fill="#4C4C4C" />
        <path d="M162.511 368.67L311.17 282.846L254.465 249.896L196.227 283.613C193.928 285.145 191.629 283.613 191.629 280.547V200.854C191.629 198.555 193.162 196.256 194.695 195.49L263.66 155.643C265.959 154.111 268.258 155.643 268.258 158.708V226.141L324.963 259.092V86.6777L162.511 180.931L162.511 368.67Z" fill="black" />
        <path d="M177.07 0.854004V66.7544L235.308 100.471C237.607 102.003 237.607 105.069 235.308 105.835L166.342 145.682C164.043 147.214 161.744 146.448 160.212 145.682L91.2463 105.835C88.9475 105.069 88.9475 101.237 91.2463 100.471L149.484 66.7544V0.854004L0.0585938 86.6778L162.511 180.931L324.963 86.6777L177.07 0.854004Z" fill="#808080" />
        <path d="M129.561 283.613L71.323 249.896L14.618 282.846L163.277 368.67V180.931L0.0585938 86.6778V258.325L56.7636 225.375V157.942C56.7636 155.643 59.8287 154.111 61.3613 154.877L130.327 194.724C132.626 196.256 133.392 197.789 133.392 200.088V279.781C134.158 282.846 131.859 285.145 129.561 283.613Z" fill="#4C4C4C" />
      </svg>;
  }
  if (id === "flutter") {
    return <svg width="214" height="264" viewBox="0 0 214 264" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
  <title>Flutter Logo</title>
  <path d="M132.28 0.0900002L213.95 0L76.9301 136.95L41.2201 172.46L0.590088 131.78L132.28 0.0900002ZM131.52 122.37C132.58 120.97 134.53 121.66 136.01 121.48L213.88 121.5L142.91 192.4L102.07 151.81L131.52 122.37Z" fill="#44D1FD" />
  <path d="M61.3601 192.47L102.07 151.81L142.91 192.4L143.08 192.58L102.08 233.2L61.3601 192.47Z" fill="#1FBCFD" />
  <path d="M102.08 233.2L143.08 192.58L213.91 263.48C187.23 263.54 160.56 263.46 133.89 263.52C132.37 263.86 131.43 262.47 130.46 261.61L102.08 233.2Z" fill="#08589C" />
</svg>;
  }
  if (id === "rest-api") {
    return <svg width="609" height="447" viewBox="0 0 609 447" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
        <title>Rest API Logo</title>
        <path d="M47.2 104.2H80.8C90.4 104.2 96.8 105.8 100 109C103.2 112.2 104.8 120.2 104.8 129.8V145.8C104.8 150.6 104.8 155.4 106.4 160.2C106.4 161.8 108 165 108 169.8H146.4V165C143.2 163.4 141.6 160.2 140 155.4C140 152.2 138.4 147.4 138.4 139.4V128.2C138.4 117 136.8 107.4 133.6 102.6C130.4 96.2002 125.6 93.0002 117.6 89.8002C127.2 86.6002 133.6 81.8002 136.8 73.8002C140 65.8002 143.2 57.8002 143.2 49.8002C143.2 43.4002 141.6 37.0002 140 32.2002C138.4 27.4002 135.2 22.6002 132 17.8002C127.2 13.0002 122.4 8.20019 116 6.60019C109.6 3.40019 101.6 1.80017 90.4 1.80017H10.4V168.2H44V104.2H47.2ZM47.2 32.2002H85.6001C92.0001 32.2002 98.4001 33.8002 101.6 35.4002C108 38.6002 111.2 45.0002 111.2 56.2002C111.2 65.8002 108 72.2002 101.6 75.4002C98.4001 77.0002 92.0001 78.6002 85.6001 78.6002H48.8V32.2002H47.2ZM215.2 96.2002H295.2V67.4002H215.2V32.2002H303.2V1.80017H180V169.8H306.4V139.4H215.2V96.2002ZM420 73.8002L391.2 67.4002C380 64.2002 372 62.6002 368.8 61.0002C364 57.8002 360.8 53.0002 360.8 48.2002C360.8 41.8002 364 37.0002 368.8 33.8002C373.6 30.6002 381.6 29.0002 391.2 29.0002C399.2 29.0002 405.6 30.6002 412 33.8002C420 38.6002 424.8 45.0002 424.8 54.6002H458.4C458.4 37.0002 450.4 22.6002 439.2 14.6002C426.4 5.00019 412 0.200195 394.4 0.200195C373.6 0.200195 357.6 5.00019 346.4 14.6002C335.2 24.2002 330.4 37.0002 330.4 51.4002C330.4 67.4002 336.8 80.2002 348 88.2002C354.4 93.0002 367.2 97.8002 384.8 101L402.4 104.2C413.6 105.8 420 109 424.8 112.2C429.6 115.4 432.8 120.2 432.8 125C432.8 134.6 428 141 418.4 144.2C413.6 145.8 405.6 147.4 397.6 147.4C383.2 147.4 373.6 144.2 367.2 137.8C364 134.6 362.4 128.2 360.8 120.2H327.2C327.2 137.8 333.6 150.6 346.4 161.8C359.2 173 376.8 176.2 397.6 176.2C418.4 176.2 436 171.4 447.2 161.8C458.4 152.2 464.8 139.4 464.8 123.4C464.8 109 460 97.8002 450.4 89.8002C442.4 81.8002 432.8 77.0002 420 73.8002ZM474.4 32.2002H524V169.8H559.2V32.2002H608.8V1.80017H474.4V32.2002ZM60 280.2L0.800049 446.6H37.6001L48.8 413H109.6L120.8 446.6H159.2L100 280.2H60ZM58.4 384.2L80.8 318.6L101.6 384.2H58.4ZM252 280.2H180V446.6H215.2V387.4H250.4C268 387.4 282.4 382.6 292 374.6C301.6 366.6 306.4 352.2 306.4 333C306.4 315.4 301.6 301 292 293C280.8 285 268 280.2 252 280.2ZM264.8 352.2C260 355.4 253.6 358.6 245.6 358.6H213.6V309H245.6C253.6 309 260 310.6 264.8 313.8C269.6 317 271.2 323.4 271.2 333C271.2 342.6 269.6 349 264.8 352.2ZM330.4 280.2H365.6V446.6H330.4V280.2Z" fill="#707070" />
      </svg>;
  }
  if (id === 'typescript') {
    return <svg xmlns="http://www.w3.org/2000/svg" fill="none" height="512" viewBox="0 0 512 512" width="512" className={className} {...props}>
          <rect fill="#3178c6" height="512" rx="50" width="512" />
          <rect fill="#3178c6" height="512" rx="50" width="512" />
          <path clip-rule="evenodd" d="m316.939 407.424v50.061c8.138 4.172 17.763 7.3 28.875 9.386s22.823 3.129 35.135 3.129c11.999 0 23.397-1.147 34.196-3.442 10.799-2.294 20.268-6.075 28.406-11.342 8.138-5.266 14.581-12.15 19.328-20.65s7.121-19.007 7.121-31.522c0-9.074-1.356-17.026-4.069-23.857s-6.625-12.906-11.738-18.225c-5.112-5.319-11.242-10.091-18.389-14.315s-15.207-8.213-24.18-11.967c-6.573-2.712-12.468-5.345-17.685-7.9-5.217-2.556-9.651-5.163-13.303-7.822-3.652-2.66-6.469-5.476-8.451-8.448-1.982-2.973-2.974-6.336-2.974-10.091 0-3.441.887-6.544 2.661-9.308s4.278-5.136 7.512-7.118c3.235-1.981 7.199-3.52 11.894-4.615 4.696-1.095 9.912-1.642 15.651-1.642 4.173 0 8.581.313 13.224.938 4.643.626 9.312 1.591 14.008 2.894 4.695 1.304 9.259 2.947 13.694 4.928 4.434 1.982 8.529 4.276 12.285 6.884v-46.776c-7.616-2.92-15.937-5.084-24.962-6.492s-19.381-2.112-31.066-2.112c-11.895 0-23.163 1.278-33.805 3.833s-20.006 6.544-28.093 11.967c-8.086 5.424-14.476 12.333-19.171 20.729-4.695 8.395-7.043 18.433-7.043 30.114 0 14.914 4.304 27.638 12.912 38.172 8.607 10.533 21.675 19.45 39.204 26.751 6.886 2.816 13.303 5.579 19.25 8.291s11.086 5.528 15.415 8.448c4.33 2.92 7.747 6.101 10.252 9.543 2.504 3.441 3.756 7.352 3.756 11.733 0 3.233-.783 6.231-2.348 8.995s-3.939 5.162-7.121 7.196-7.147 3.624-11.894 4.771c-4.748 1.148-10.303 1.721-16.668 1.721-10.851 0-21.597-1.903-32.24-5.71-10.642-3.806-20.502-9.516-29.579-17.13zm-84.159-123.342h64.22v-41.082h-179v41.082h63.906v182.918h50.874z" fill="#fff" fill-rule="evenodd" />
          </svg>;
  }
  if (id === "go") {
    return <svg xmlns="http://www.w3.org/2000/svg" xmlnsXlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 205.4 76.7" style={{
      enableBackground: "new 0 0 205.4 76.7"
    }} xmlSpace="preserve" className={className} {...props}>
        <title>Go Logo</title>
        <style type="text/css">{`.st0{fill:#00ACD7;}`}</style>
        <g>
          <g>
            <g>
              <g>
                <path className="st0" d="M15.5,23.2c-0.4,0-0.5-0.2-0.3-0.5l2.1-2.7c0.2-0.3,0.7-0.5,1.1-0.5h35.7c0.4,0,0.5,0.3,0.3,0.6l-1.7,2.6      c-0.2,0.3-0.7,0.6-1,0.6L15.5,23.2z" />
              </g>
            </g>
          </g>
        </g>
        <g>
          <g>
            <g>
              <g>
                <path className="st0" d="M0.4,32.4c-0.4,0-0.5-0.2-0.3-0.5l2.1-2.7c0.2-0.3,0.7-0.5,1.1-0.5h45.6c0.4,0,0.6,0.3,0.5,0.6l-0.8,2.4      c-0.1,0.4-0.5,0.6-0.9,0.6L0.4,32.4z" />
              </g>
            </g>
          </g>
        </g>
        <g>
          <g>
            <g>
              <g>
                <path className="st0" d="M24.6,41.6c-0.4,0-0.5-0.3-0.3-0.6l1.4-2.5c0.2-0.3,0.6-0.6,1-0.6h20c0.4,0,0.6,0.3,0.6,0.7L47.1,41      c0,0.4-0.4,0.7-0.7,0.7L24.6,41.6z" />
              </g>
            </g>
          </g>
        </g>
        <g>
          <g id="CXHf1q_3_">
            <g>
              <g>
                <path className="st0" d="M128.4,21.4c-6.3,1.6-10.6,2.8-16.8,4.4c-1.5,0.4-1.6,0.5-2.9-1c-1.5-1.7-2.6-2.8-4.7-3.8       c-6.3-3.1-12.4-2.2-18.1,1.5c-6.8,4.4-10.3,10.9-10.2,19c0.1,8,5.6,14.6,13.5,15.7c6.8,0.9,12.5-1.5,17-6.6       c0.9-1.1,1.7-2.3,2.7-3.7c-3.6,0-8.1,0-19.3,0c-2.1,0-2.6-1.3-1.9-3c1.3-3.1,3.7-8.3,5.1-10.9c0.3-0.6,1-1.6,2.5-1.6       c5.1,0,23.9,0,36.4,0c-0.2,2.7-0.2,5.4-0.6,8.1c-1.1,7.2-3.8,13.8-8.2,19.6c-7.2,9.5-16.6,15.4-28.5,17       c-9.8,1.3-18.9-0.6-26.9-6.6c-7.4-5.6-11.6-13-12.7-22.2c-1.3-10.9,1.9-20.7,8.5-29.3c7.1-9.3,16.5-15.2,28-17.3       c9.4-1.7,18.4-0.6,26.5,4.9c5.3,3.5,9.1,8.3,11.6,14.1C130,20.6,129.6,21.1,128.4,21.4z" />
              </g>
              <g>
                <path className="st0" d="M161.5,76.7c-9.1-0.2-17.4-2.8-24.4-8.8c-5.9-5.1-9.6-11.6-10.8-19.3c-1.8-11.3,1.3-21.3,8.1-30.2       c7.3-9.6,16.1-14.6,28-16.7c10.2-1.8,19.8-0.8,28.5,5.1c7.9,5.4,12.8,12.7,14.1,22.3c1.7,13.5-2.2,24.5-11.5,33.9       c-6.6,6.7-14.7,10.9-24,12.8C166.8,76.3,164.1,76.4,161.5,76.7z M185.3,36.3c-0.1-1.3-0.1-2.3-0.3-3.3       c-1.8-9.9-10.9-15.5-20.4-13.3c-9.3,2.1-15.3,8-17.5,17.4c-1.8,7.8,2,15.7,9.2,18.9c5.5,2.4,11,2.1,16.3-0.6       C180.5,51.3,184.8,44.9,185.3,36.3z" />
              </g>
            </g>
          </g>
        </g>
      </svg>;
  }
  if (id === "rust") {
    return <svg xmlns="http://www.w3.org/2000/svg" xmlnsXlink="http://www.w3.org/1999/xlink" version="1.1" width="300" height="200" viewBox="0 0 300 200" fill="none" className={className} {...props}>
  
      <g clip-path="url(#clip0_1_60)">
      <path d="M149.557 89.5213C119.349 89.5213 91.9026 93.1471 71.5833 99.0556V149.527C91.9026 155.436 119.349 159.062 149.557 159.062C184.132 159.062 215.085 154.312 235.876 146.827V101.757C215.085 94.2709 184.132 89.5213 149.557 89.5213ZM267.016 130.53L263.475 123.207C263.493 122.929 263.508 122.651 263.508 122.371C263.508 114.069 254.86 106.418 240.311 100.292V144.451C247.1 141.593 252.607 138.402 256.546 134.968C255.387 139.621 251.422 149.035 248.261 155.656C243.066 165.125 241.185 173.367 241.426 173.776C241.58 174.033 243.352 171.303 245.965 166.88C252.048 158.228 263.573 141.711 265.876 137.504C268.485 132.734 267.016 130.53 267.016 130.53ZM37.8609 122.855C37.8609 124.454 38.183 126.029 38.8047 127.574L36.6841 131.342C36.6841 131.342 34.9852 133.543 37.9767 138.185C40.6154 142.278 53.8325 158.301 60.8084 166.691C63.8049 170.993 65.8363 173.643 66.0142 173.387C66.2943 172.98 64.1514 164.904 58.2006 155.69C55.4239 150.741 52.1075 144.185 50.1171 139.342C55.6743 142.854 62.945 146.039 71.5833 148.78V96.9315C50.767 103.535 37.8609 112.71 37.8609 122.855Z" fill="#A52B00" />
      <path d="M145.791 12.8178L138.87 24.3578L135.496 24.6525L126.502 14.691C126.098 14.1723 125.552 13.7824 124.929 13.5688C124.307 13.3553 123.636 13.3275 122.998 13.4888C122.365 13.656 121.782 13.9704 121.295 14.4062C120.808 14.842 120.431 15.3869 120.196 15.9961L115.655 28.8365C114.582 29.0709 113.537 29.415 112.534 29.8633L101.814 21.7495C100.811 21.0829 99.2789 20.8397 98.1871 21.3121C97.5824 21.5999 97.0529 22.0238 96.6403 22.5507C96.2276 23.0775 95.9431 23.6927 95.8092 24.348L93.5997 37.9276L90.7157 39.4993L78.8963 33.9326C78.3091 33.611 77.6395 33.4704 76.9723 33.5287C76.3051 33.587 75.6702 33.8414 75.1478 34.26C74.0725 34.9195 73.4375 36.2948 73.3649 37.6209L73.8122 51.3456L71.3522 53.4459L58.6215 50.4098C57.2603 49.9631 55.9811 50.4519 54.9386 51.4857C54.4896 51.9727 54.1644 52.5602 53.9903 53.1988C53.8162 53.8374 53.7983 54.5084 53.9381 55.1554L56.993 68.4637C56.2644 69.3003 55.5847 70.1781 54.9571 71.0926L41.6897 70.5545C41.0333 70.5063 40.3771 70.65 39.8013 70.9682C39.2254 71.2864 38.7549 71.7652 38.4473 72.3461C37.796 73.5342 37.5523 75.0638 38.2294 76.3245L43.6552 88.6716L42.0269 91.642L29.1929 93.8942C28.529 93.9814 27.9003 94.2439 27.3719 94.6546C26.8435 95.0653 26.4345 95.6094 26.1871 96.2307C25.9676 96.8735 25.8849 97.555 25.9442 98.2316C26.0035 98.9082 26.2035 99.565 26.5314 100.16L34.2954 111.172L34.1572 111.749L12.3781 134.768C12.3781 134.768 9.20124 137.308 13.8985 143.497C18.1389 148.783 40.0229 170.063 51.5845 181.308C54.0496 184.603 56.9114 187.582 60.1052 190.18C60.6183 189.569 57.8258 179.255 48.2766 167.268C40.9039 156.411 31.3197 139.713 33.4212 137.833C33.4212 137.833 35.9702 134.593 41.2416 132.247C41.0378 132.077 41.0378 132.077 41.2416 132.247C41.2416 132.247 149.678 182.168 250.19 133.04C261.712 130.903 268.674 137.082 268.674 137.082C271.071 138.57 264.83 155.707 259.783 167.083C252.79 179.949 251.784 190.03 252.38 190.355C254.96 187.377 257.146 184.081 258.886 180.548C267.819 168.267 284.455 144.754 287.541 139.017C291.123 132.482 287.553 130.531 287.553 130.531L264.343 113.515L263.755 111.116L271.287 100.088C272.142 99.0705 272.198 97.5573 271.709 96.2802C271.482 95.6688 271.099 95.1269 270.599 94.7078C270.099 94.2887 269.498 94.0068 268.855 93.8898L255.815 91.635L254.428 88.7394L259.751 76.2077C260.064 75.5853 260.198 74.8882 260.137 74.1943C260.076 73.5004 259.824 72.8371 259.407 72.2784C258.746 71.2048 257.556 70.5546 256.244 70.6692L243.059 71.0666L240.939 68.4237L243.931 55.1528C244.074 54.5102 244.068 53.8434 243.914 53.2034C243.76 52.5633 243.461 51.9669 243.04 51.4597C242.591 50.946 242.01 50.5642 241.359 50.3553C240.709 50.1463 240.013 50.1182 239.348 50.2739L226.596 53.4616C225.733 52.764 224.911 52.0174 224.134 51.2256L224.453 37.6226C224.463 36.9635 224.322 36.3108 224.041 35.7144C223.759 35.1181 223.345 34.5939 222.829 34.1821C222.292 33.7678 221.643 33.5241 220.966 33.4824C220.289 33.4406 219.615 33.6029 219.031 33.9482L207.242 39.5029L204.267 37.8774L202.149 24.4872C202.062 23.8243 201.799 23.1967 201.388 22.6692C200.976 22.1417 200.431 21.7334 199.809 21.4863C199.222 21.1647 198.552 21.0242 197.885 21.0825C197.218 21.1407 196.583 21.3952 196.06 21.8137L185.422 29.7191L182.324 28.8583L177.803 16.0552C177.585 15.4164 177.207 14.844 176.705 14.3927C176.202 13.9414 175.592 13.6264 174.933 13.4777C174.265 13.3557 173.576 13.4079 172.934 13.6291C172.292 13.8503 171.717 14.2332 171.266 14.7407L162.324 24.7604L159.072 24.2902L152.212 12.8226C151.901 12.241 151.442 11.7516 150.881 11.4034C150.32 11.0553 149.677 10.8607 149.017 10.8391C147.688 10.7666 146.442 11.6297 145.791 12.8178Z" fill="url(#paint0_linear_1_60)" />
      <path d="M112.926 162.529C112.511 162.176 112.294 161.966 112.294 161.966L147.811 159.062C118.839 120.906 95.6291 151.301 93.1587 154.7V162.529H112.926ZM186.876 162.118C187.291 161.765 187.508 161.555 187.508 161.555L153.377 159.062C182.362 119.339 204.174 150.89 206.644 154.288V162.118H186.876Z" fill="black" />
      <path d="M241.473 124.234C241.473 124.234 237.611 139.655 213.443 155.873L206.718 157.468C206.718 157.468 184.813 117.587 153.787 162.52C153.787 162.52 163.441 156.936 189.341 163.783C189.341 163.783 177.423 181.995 153.454 181.397C153.454 181.397 176.424 208.981 211.445 169.167C211.445 169.167 248.464 154.876 251.46 124.234H241.473Z" fill="url(#paint1_linear_1_60)" />
      <path d="M169.503 104.468C169.503 104.468 180.338 92.6234 191.174 104.468C191.174 104.468 199.688 120.261 191.174 128.157C191.174 128.157 177.242 139.213 169.503 128.157C169.503 128.157 160.215 119.471 169.503 104.468Z" fill="black" />
      <path d="M182.047 108.862C182.047 113.474 179.324 117.213 175.966 117.213C172.607 117.213 169.884 113.474 169.884 108.862C169.884 104.25 172.607 100.51 175.966 100.51C179.324 100.51 182.047 104.25 182.047 108.862Z" fill="white" />
      <path d="M121.141 101.233C121.141 101.233 139.728 93.0177 144.801 111.355C144.801 111.355 150.115 132.729 129.538 133.936C129.538 133.936 103.298 128.89 121.141 101.233Z" fill="black" />
      <path d="M130.477 109.164C130.477 113.92 127.668 117.778 124.204 117.778C120.741 117.778 117.933 113.92 117.933 109.164C117.933 104.407 120.741 100.551 124.204 100.551C127.668 100.551 130.477 104.407 130.477 109.164Z" fill="white" />
      <path d="M93.2686 171.601C127.216 215.064 143.296 180.163 143.296 180.163C124.238 178.022 110.719 165.358 110.719 165.358C133.588 162.445 146.81 162.207 146.81 162.207C116.198 121.895 91.3628 158.402 91.3628 158.402C85.169 156.142 78.7965 147.521 74.0916 139.554L55.0932 133.965C76.9502 171.066 93.2686 171.601 93.2686 171.601Z" fill="url(#paint2_linear_1_60)" />
      </g>
      <defs>
      <linearGradient id="paint0_linear_1_60" x1="155.668" y1="198.802" x2="139.325" y2="11.6856" gradientUnits="userSpaceOnUse">
      <stop stop-color="#F74C00" />
      <stop offset="0.33" stop-color="#F74C00" />
      <stop offset="1" stop-color="#F49600" />
      </linearGradient>
      <linearGradient id="paint1_linear_1_60" x1="202.457" y1="190.703" x2="202.457" y2="124.234" gradientUnits="userSpaceOnUse">
      <stop stop-color="#CC3A00" />
      <stop offset="0.15" stop-color="#CC3A00" />
      <stop offset="0.74" stop-color="#F74C00" />
      <stop offset="1" stop-color="#F74C00" />
      </linearGradient>
      <linearGradient id="paint2_linear_1_60" x1="100.951" y1="193.421" x2="100.951" y2="133.965" gradientUnits="userSpaceOnUse">
      <stop stop-color="#CC3A00" />
      <stop offset="0.15" stop-color="#CC3A00" />
      <stop offset="0.74" stop-color="#F74C00" />
      <stop offset="1" stop-color="#F74C00" />
      </linearGradient>
      <clipPath id="clip0_1_60">
      <rect width="299" height="199" fill="white" transform="translate(0.719086 0.602844)" />
      </clipPath>
      </defs>
    </svg>;
  }
  if (id === "python") {
    return <svg width="112" height="113" viewBox="0 0 112 113" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
        <title>Python Logo</title>
        <path d="M55.5247 0.410099C50.9411 0.431397 46.5638 0.822317 42.7122 1.50385C31.366 3.50835 29.306 7.70395 29.306 15.4413V25.6601H56.1185V29.0663H29.306H19.2435C11.451 29.0663 4.62773 33.7501 2.49349 42.6601C0.0316724 52.8731 -0.0775229 59.2461 2.49349 69.9101C4.39942 77.8479 8.95104 83.5038 16.7435 83.5038H25.9622V71.2538C25.9622 62.4039 33.6194 54.5976 42.7122 54.5976H69.4935C76.9484 54.5976 82.8997 48.4594 82.8997 40.9726V15.4413C82.8997 8.17501 76.7698 2.71657 69.4935 1.50385C64.8875 0.737124 60.1084 0.388801 55.5247 0.410099Z" fill="url(#paint0_linear_1445_68)" />
        <path d="M86.2434 29.0664V40.9727C86.2434 50.2034 78.4175 57.9727 69.4934 57.9727H42.7122C35.3763 57.9727 29.3059 64.2511 29.3059 71.5977V97.1289C29.3059 104.395 35.6245 108.669 42.7122 110.754C51.1995 113.25 59.3384 113.701 69.4934 110.754C76.2436 108.8 82.8997 104.866 82.8997 97.1289V86.9102H56.1184V83.5039H82.8997H96.3059C104.098 83.5039 107.002 78.0685 109.712 69.9102C112.511 61.5113 112.392 53.4344 109.712 42.6602C107.786 34.9027 104.108 29.0664 96.3059 29.0664Z" fill="url(#paint1_linear_1445_68)" />
        <defs>
          <linearGradient id="paint0_linear_1445_68" x1="0.605957" y1="0.409179" x2="62.4326" y2="53.0941" gradientUnits="userSpaceOnUse">
            <stop stopColor="#5A9FD4" />
            <stop offset="1" stopColor="#306998" />
          </linearGradient>
          <linearGradient id="paint1_linear_1445_68" x1="70.5366" y1="97.9573" x2="48.3555" y2="66.875" gradientUnits="userSpaceOnUse">
            <stop stopColor="#FFD43B" />
            <stop offset="1" stopColor="#FFE873" />
          </linearGradient>
        </defs>
      </svg>;
  }
  if (id === 'ruby') {
    return <svg width="125" height="120" viewBox="0 0 125 120" fill="none" xmlns="http://www.w3.org/2000/svg" className={className} {...props}>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M34.0031 107.33C61.4691 111.08 88.4471 114.763 115.961 118.518C106.587 102.912 97.4541 87.705 88.2481 72.374L34.0031 107.33ZM123.713 20.947C121.292 24.583 118.866 28.216 116.448 31.854C108.144 44.347 99.8411 56.84 91.5451 69.339C91.0831 70.035 90.4841 70.587 91.1351 71.66C99.1511 84.897 107.104 98.173 115.077 111.437C116.335 113.532 117.607 115.619 119.234 117.629C120.846 85.436 122.457 53.242 124.068 21.049L123.713 20.947ZM14.2841 62.22C14.6591 62.575 15.5951 62.782 16.0311 62.567C23.7201 58.788 31.4581 55.093 38.9791 51.003C41.4321 49.67 43.3181 47.28 45.4311 45.342C52.4281 38.925 59.4141 32.495 66.3971 26.064C66.8241 25.669 67.3301 25.287 67.5851 24.789C70.0931 19.887 72.5581 14.96 75.1101 9.89102C72.0671 8.74701 69.1821 7.62801 66.2611 6.61001C65.8651 6.47201 65.2411 6.74601 64.8121 6.98501C58.0511 10.762 51.1631 14.338 44.6171 18.457C41.3421 20.518 38.6741 23.555 35.7741 26.2C31.1001 30.466 26.4321 34.742 21.8261 39.082C20.6041 40.234 19.4901 41.55 18.5381 42.936C15.3881 47.523 12.3321 52.176 9.13612 56.961C10.9221 58.808 12.5461 60.574 14.2841 62.22ZM42.3861 55.949C38.5611 72.108 34.7591 88.176 30.8301 104.772C49.2531 92.901 67.2511 81.304 85.1301 69.785C70.9021 65.18 56.7201 60.589 42.3861 55.949ZM119.017 21.103C103.451 23.704 88.2571 26.242 72.8671 28.813C78.1091 41.564 83.2461 54.059 88.5291 66.909C98.7501 51.55 108.769 36.499 119.017 21.103ZM43.0281 52.644C57.0451 57.194 70.7831 61.654 84.9201 66.244C79.6701 53.454 74.6001 41.111 69.4251 28.507C60.6101 36.566 51.9271 44.506 43.0281 52.644ZM14.8631 71.643C9.89212 83.526 5.09012 95.005 0.201117 106.691C9.59712 106.413 18.7051 106.144 28.1261 105.866C23.7031 94.454 19.3671 83.266 14.8631 71.643ZM28.4561 97.739L28.8021 97.663C32.1551 83.722 35.5561 69.877 38.9791 55.391C31.3431 59.36 24.0591 63.145 16.5761 67.035C20.3951 76.961 24.4671 87.432 28.4561 97.739ZM113.383 18.842C108.924 17.661 104.465 16.476 100.004 15.303C93.5921 13.617 87.1751 11.952 80.7671 10.251C79.9661 10.038 79.3871 9.89902 78.9161 10.864C76.6511 15.504 74.3161 20.109 72.0151 24.732C71.9441 24.875 71.9591 25.06 71.9041 25.419C85.7901 23.315 99.5831 21.224 113.374 19.134L113.383 18.842ZM87.5141 8.28802L123.857 18.342C121.773 12.403 119.84 6.89602 117.852 1.23202L87.5671 7.94701L87.5141 8.28802ZM31.5371 110.007C27.0361 109.488 22.4151 109.965 17.8501 110.044C14.1001 110.107 10.3501 110.25 6.60012 110.367C6.21412 110.379 5.82912 110.457 5.44412 110.873C36.4471 113.739 67.4491 116.605 98.4511 119.473L98.5141 119.059C88.5761 117.702 78.6371 116.345 68.6991 114.989C56.3151 113.298 43.9521 111.438 31.5371 110.007ZM0.814117 95.994C4.80912 86.724 8.78712 77.448 12.7981 68.185C13.1991 67.256 13.1681 66.625 12.3831 65.877C10.7051 64.28 9.14612 62.559 7.31212 60.651C4.83312 72.891 2.41512 84.828 -0.00488281 96.764L0.266117 96.891C0.451117 96.594 0.677117 96.313 0.814117 95.994ZM79.5541 5.84101C86.2911 4.10301 93.1261 2.74402 99.9211 1.22802C100.361 1.12902 100.791 0.984015 101.224 0.860015L101.157 0.528015C91.5861 1.81502 82.0161 3.10302 71.9631 4.45602C74.7041 5.65302 76.8161 6.54701 79.5541 5.84101Z" fill="#D91404" />
      </svg>;
  }
  return null;
};

export const SquareCard = ({icon, label, className = "", ...props}) => {
  return <a href={props.href} className=" not-prose font-normal group ring-0 ring-transparent overflow-hidden cursor-pointer ">
      <div className={`flex flex-col items-center ${className}`} {...props}>
        <div className="flex items-center p-5 justify-center rounded-lg border border-zinc-950/10 dark:border-white/10 bg-white dark:bg-transparent">
          {icon}
        </div>
        <span className="mt-2 text-sm text-zinc-950/80 dark:text-white/80 font-medium capitalize group-hover:border-zinc-950/10 group-hover:text-primary">
          {label}
        </span>
      </div>
    </a>;
};

Turnkey empowers teams to automate complex signing workflows at scale without compromising on security or flexibility. Transaction Automation provides the building blocks for creating custom solutions that make your product more secure, from role-based access controls to privacy-preserving smart contracts.

With Transaction Automation, you can:

* Automate millions of signatures with customizable security controls
* Implement role-based access controls and multi-party approvals
* Support any blockchain or asset type with our chain-agnostic, arbitrary signing capabilities
* Minimize attack surface area with our paranoid security model
* Easily migrate existing wallets and keys in and out of Turnkey

## Policy Engine

At the foundation of Transaction Automation is our policy engine.
Policies offer flexible controls and permissions within your organization
and enable a variety of use cases, including cross-border stablecoin payments,
treasury management, and more.

## What kind of policies can you create?

| Example                                                                            | Description                                                                                                                 |
| ---------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------- |
| [`deployer`](https://github.com/tkhq/sdk/tree/main/examples/deployer/)             | Compile and deploy a smart contract                                                                                         |
| [`rebalancer`](https://github.com/tkhq/sdk/tree/main/examples/rebalancer/)         | A demo application which showcases an example of how to use Turnkey for managing multiple types of keys & users             |
| [`sweeper`](https://github.com/tkhq/sdk/tree/main/examples/sweeper/)               | Sweep funds from one address to a different address                                                                         |
| [`trading-runner`](https://github.com/tkhq/sdk/tree/main/examples/trading-runner/) | A sample application demonstrating a trading operation, using various private keys, users, and policies, powered by Uniswap |

Almost all actions on Turnkey are implicitly denied by default.
See our [Policy Overview](/products/transaction-automation/policy-engine) for exceptions.

## Other use cases

### Staking operations

Staking teams can use Turnkey to streamline their operations and secure their keys. Automate critical workflows like:

* Mnemonic and key generation
* Rewards claiming and distribution
* Network voting and governance actions

## SDKs

<div className="flex gap-4 items-center justify-center">
  <SquareCard icon={<Logo id="go" className="h-8 w-8" />} label="Go" href="/sdks/golang" />

  <SquareCard icon={<Logo id="ruby" className="h-8 w-8" />} label="Ruby" href="/sdks/ruby" />

  <SquareCard icon={<Logo id="python" className="h-8 w-8" />} label="Python" href="/sdks/python" />

  <SquareCard icon={<Logo id="rust" className="h-8 w-8" />} label="Rust" href="/sdks/rust" />

  <SquareCard icon={<Logo id="typescript" className="h-8 w-8" />} label="Typescript" href="/sdks/javascript-server" />
</div>

## Next Steps

Dig into Transaction Automations features like multichain support, scoped API keys, multi-signature approvals, and [more](/products/transaction-automation/features/multi-chain-support).


# Claim links
Source: https://docs.turnkey.com/wallets/claim-links

Enable your users to send crypto to people who haven’t signed up yet through secure, non-custodial magic claim links. This feature creates pre-funded wallets that new users can claim by simply clicking a URL.

### How it works

You will create a temporary “escrow” wallet where funds are held securely until claimed, and embed an authenticator with access to this wallet in a URL.

When the new user clicks on the claim link, they will land directly in your app and see a wallet that’s already been topped up with crypto from an existing user. You can view an example of the feature below:

<Frame>![](https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/images/moonshot-demo.gif)</Frame>

### Implementation guide

**Step 1: Set up your application:**

Before you start building this feature, ensure:

* Your organization is set up with embedded wallets in a [<u>sub-organization model</u>](https://docs.turnkey.com/embedded-wallets/sub-organizations-as-wallets#sub-organizations-as-end-user-controlled-wallets): Each of your users should map to a dedicated sub-org in Turnkey.
* [<u>Email authentication</u>](https://docs.turnkey.com/embedded-wallets/sub-organization-auth) is enabled so that new users can sign up through a secure email flow.
* Your backend can store mapping records between transactions and sub-organizations

**Step 2: The Sender initiates the flow**

When an existing user (the “Sender”) wants to send funds to someone new, here’s what needs to happen:

<Steps>
  <Step title="Create a temporary sub-org">
    This sub-org acts as the escrow environment. It will: 

    * Contain a new “escrow” wallet 
    * Contain a root user with two authenticators: 
      * The Sender’s email or phone number, included so that they can reclaim funds later on if necessary. 
      * A programmatically generated API key (“Claim Key”). This key will later be passed to the Receiver via a claim link. 
  </Step>

  <Step title="Initialize transfer of funds">
    Initiate the transfer of funds from the Sender’s primary wallet to this new escrow wallet. 
  </Step>

  <Step title="Create and store Tx record">
    For added security, store a transaction record in your backend that maps a transaction id to this temporary sub-org id.  
  </Step>
</Steps>

<Tooltip tip="Using sessions">
  You can take all of these actions via a session to ensure the user experience
  is as simple as setting an amount and copying a link to send.
</Tooltip>

**Step 3: Generate and share the claim link**

<Steps>
  <Step title="Create your claim link">
    Construct a link containing, as query parameters: 

    * Base64-encoded private key from the Claim Key
    * Transaction id
  </Step>
</Steps>

You can now show the Sender a “Copy link” or “Share via…” button.

**Step 4: Receiver claims funds**

When the Receiver opens the link in your app:

<Steps>
  <Step>
    Your app parses the transaction id and looks up the associated temporary
    sub-org ID
  </Step>

  <Step title="Reconstruct claim key">
    Reconstruct the Claim Key using the private key from the URL and store it in
    local storage. Now, the Receiver has an API key in local storage that grants
    them the ability to send funds out of the escrow wallet. 
  </Step>

  <Step title="Create permanent sub-org">
    Guide the Receiver through your typical signup flow to create a permanent
    sub-organization containing a new permanent wallet (“Receiver Wallet”) and
    permanent authenticators. 
  </Step>

  <Step title="Use claim key to authorize fund transfer">
    Use the Claim Key in local storage to authorize transferring the claimable
    funds from the escrow wallet to the Receiver Wallet. 
  </Step>

  <Step title="Delete temporary sub-org">
    After successful transfer, delete the temporary sub-org using the Claim
    Key. 
  </Step>
</Steps>

The receiver now controls their own wallet under a permanent sub-org which contains the new funds.

If the funds are never claimed or the Sender wishes to revoke the gift for any reason, your app can allow the sender to reclaim them by using their email or phone number to restart a new session for the escrow sub-organization.


# Export wallets and keys
Source: https://docs.turnkey.com/wallets/export-wallets

Turnkey's export functionality allows your end users to backup or transfer a [Wallet](/concepts/wallets) by securely viewing the wallet's [mnemonic phrase](https://learnmeabitcoin.com/technical/mnemonic), a [Wallet Account](/concepts/wallets#accounts) or a raw [Private Key](/concepts/wallets#private-keys). We engineered this feature to ensure that the user can export their mnemonic or private key without exposing it to Turnkey or your application.

The process of exporting wallets, wallet accounts or private keys from Turnkey is broken up into two primary steps:

<Steps>
  <Step>
    Export the wallet, wallet account or private key via Turnkey. You must specify the wallet ID, wallet address or
    private key ID, as well as a target public key, which the wallet or private
    key will be encrypted to. Encryption ensures that the key material is only
    accessible by the client, and cannot be extracted by any man-in-the-middle
    (MITM)
  </Step>

  <Step>
    Decrypt the resulting bundle returned by Turnkey.
    This will result in the wallet mnemonic or the private key in case of exporting a wallet account or raw private key.
  </Step>
</Steps>

See the [Enclave to end-user secure channel](/security/enclave-secure-channels) for more technical details.

## Implementation guides

See [Code Examples](/embedded-wallets/code-examples/export) for more details.


# Fiat Onramp
Source: https://docs.turnkey.com/wallets/fiat-on-ramp

Turnkey’s Fiat Onramp lets your end users convert traditional currency (USD, EUR, etc.) into crypto assets (ETH, USDC, BTC, etc.) directly within your application.

## Overview

By embedding Turnkey’s SDK and leveraging our Fiat Onramp you get:

* Seamless user flows: No need to redirect off-site, users stay within your UI.
* Multiple payment rails: Credit/debit cards, bank transfers (ACH, SEPA), and more.
* Provider flexibility: You can choose between onramp providers, MoonPay and Coinbase, or run parallel flows.
* Compliance & KYC: Identity verification flows are built in from providers.

## Access and Pricing

Fiat Onramp is available to all Enterprise customers. To enable this feature, please reach out to the Turnkey team ([help@turnkey.com](mailto:help@turnkey.com)).

## Prerequisites

1. Choose which Onramp provider(s) you want to integrate with. See our current list of supported [Onramp Providers](#on-ramp-providers) below for coverage and pricing to best fit your needs.
2. Create an account with your chosen Onramp provider(s) and complete the required KYB process.
3. Once your KYB application has been approved, you will be provisioned API Keys. You can then securely send your provisioned API Keys to Turnkey's Product Success team via pgp, secure email, or another secure channel. Turnkey will securely encrypt your API Keys.
4. You're now ready to start using Turnkey's Fiat Onramp.

### Onramp Providers

| Provider |                                                                                                            |                                                                                                                |                                                                                                     |                                                                                                                        |
| :------- | :--------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- |
| Coinbase | [Payment Methods](https://docs.cdp.coinbase.com/onramp-&-offramp/developer-guidance/payment-methods)       | [Supported Currencies](https://onramp-asset-availability.vercel.app/)                                          | [Country Support](https://onramp-asset-availability.vercel.app/)                                    | [Fees](https://docs.cdp.coinbase.com/onramp-&-offramp/developer-guidance/faq#what-fees-do-you-charge%3F)               |
| MoonPay  | [Payment Methods](https://support.moonpay.com/customers/docs/all-supported-payment-methods?lng=en#on-ramp) | [Supported Currencies](https://support.moonpay.com/customers/docs/moonpays-supported-currencies?lng=en#buying) | [Country Support](https://support.moonpay.com/customers/docs/moonpays-unsupported-countries?lng=en) | [Fees](https://support.moonpay.com/customers/docs/all-supported-payment-methods?lng=en#what-are-the-fees-with-moonpay) |

## Demos

### Coinbase

The Coinbase demo is running in a sandbox environment which means:

* KYC information is mocked
* Purchases are completed with test credit cards
* Onramp transactions are simulated

<Frame>
  <video controls muted width="auto" height="auto">
    <source src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/videos/embedded-wallets/fiat-on-ramp/coinbase-demo.mp4" type="video/mp4" />

    Your browser does not support HTML5 video.
  </video>
</Frame>

#### Using the Coinbase demo

1. Complete KYC
   * Phone number: `(555) 555-5555`
   * Email: `onramp@yourdomain.com`
   * Credit Card Information
     1. Name on card: `Jane Doe`
     2. Card number: `4242 4242 4242 4242`
     3. Expiry date: `01/29`
        * Any future `MM/YY` date is valid
     4. CVC: `123`
        * Any three digit number is valid
   * Billing address: enter any valid address
2. Verify your mobile number
   * Enter any 6 digit code
     * Coinbase does not send an OTP code in sandbox mode

### MoonPay

The MoonPay demo is running in a sandbox environment which means:

* KYC information is mocked
  * 3D-Secure verification is simulated
* Purchases are completed with test credit cards
* Onramp transactions are executed on testnets
  * You can view your transactions on the testnet block explorer

<Frame>
  <video controls muted width="auto" height="auto">
    <source src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/videos/embedded-wallets/fiat-on-ramp/moonpay-demo.mp4" type="video/mp4" />

    Your browser does not support HTML5 video.
  </video>
</Frame>

#### Using the MoonPay demo

1. Enter a valid email address to receive an OTP code
2. Enter the OTP code sent to your email address
3. Re-enter the prefilled form values to confirm order
   * Credit Card CVC: `123`
   * 3D-Secure 2 Authentication Password: `Checkout1!`

## Implementation Guide

See the [Fiat Onramp Code Example](/embedded-wallets/code-examples/fiat-on-ramp) for more details on how to implement.


# Import wallets and keys
Source: https://docs.turnkey.com/wallets/import-wallets

Turnkey's import functionality allows your end users to securely transfer a [Wallet](/concepts/wallets) or a [Private Key](/concepts/wallets#private-keys) onto the Turnkey platform via CLI or an embedded iframe. We engineered this feature to ensure that the user can import their mnemonic or private key into a Turnkey secure enclave without exposing it to Turnkey or your application.

The process of importing wallets or private keys into Turnkey is broken up into three primary steps:

<Steps>
  <Step>
    Initialize the import process. This produces an import bundle, containing a
    public key and signature. These artifacts will be used in the next step to
    ensure that key material is only accessible by Turnkey, and cannot be
    extracted by any man-in-the-middle (MITM)
  </Step>

  <Step>Encrypt the key material to the artifacts from the previous step</Step>
  <Step>Import the encrypted bundle to Turnkey</Step>
</Steps>

See the [Enclave to end-user secure channel](/security/enclave-secure-channels) for more technical details.

## Implementation guides

See [Code Examples](/embedded-wallets/code-examples/import) for more details.


# Pre-generated wallets
Source: https://docs.turnkey.com/wallets/pregenerated-wallets

Turnkey allows you to pre-generate wallets for your user before they authenticate. This is helpful if you already know the users email or phone number, and want to create a deposit address for them or airdrop a reward before they authenticate to Turnkey.

To accomplish this, create a new sub-org for that user with a single root user. This root user should only have the end user’s email or phone number associated with it, and no other authenticators, which ensures that only the end user can claim the pre-generated wallet. When the end user wants to claim the wallet, they can complete [email auth](/authentication/email) flow to authenticate and sign a transaction or add a new authenticator.


# Integrating an embedded wallet with Wagmi
Source: https://docs.turnkey.com/wallets/wagmi



# Introduction

Turnkey wallets are embedded, web-based wallets that differ from injected wallets (like MetaMask).
While injected wallets store private keys locally and decrypt them using a password to sign transactions,
embedded wallets rely on UI-based authentication to access private keys that are securely stored and
managed by Turnkey.

With this concept in mind, we're going to build a custom Wagmi connector that communicates
with an embedded wallet rendered in a popup, enabling integration across multiple dApps.

## System components overview

Our system involves three key parts working together:

**Embedded Wallet (Pop-up):** A web application (likely React/Next.js) hosted by you.
This UI handles user authentication (passkeys via Turnkey), transaction signing, and communication with the dApp via `postMessage`.
It securely interacts with the Turnkey API. Reference the `popup-wallet-demo`'s [`@/apps/wallet`](https://github.com/tkhq/popup-wallet-demo/blob/6eb0b732d6a57dad229a39120299a1762040e0ad/apps/wallet) provides a concrete example.

**EIP-1193 Provider:** A JavaScript class implementing the [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193) standard.
It acts as the intermediary between the dApp and the popup embedded wallet. Reference the `popup-wallet-demo`'s [`@/apps/dapp/lib/eip1193-provider.ts`](https://github.com/tkhq/popup-wallet-demo/blob/6eb0b732d6a57dad229a39120299a1762040e0ad/apps/dapp/lib/eip1193-provider.ts) provides a concrete example.

**Wagmi Connector:** A custom connector built using Wagmi's `createConnector` utility. It wraps our EIP-1193 provider, making the wallet compatible with the Wagmi ecosystem. Reference the `popup-wallet-demo`'s [`@/apps/dapp/lib/connector.ts`](https://github.com/tkhq/popup-wallet-demo/blob/6eb0b732d6a57dad229a39120299a1762040e0ad/apps/dapp/lib/connector.ts) and [`@/apps/dapp/lib/wagmi.ts`](https://github.com/tkhq/popup-wallet-demo/blob/6eb0b732d6a57dad229a39120299a1762040e0ad/apps/dapp/lib/wagmi.ts) or `wagmi-demo`'s [`@/src/lib/connector.ts`](https://github.com/tkhq/wagmi-demo/blob/main/src/lib/connector.ts) and [`@/src/lib/wagmi.ts`](https://github.com/tkhq/wagmi-demo/blob/main/src/lib/wagmi.ts) for concrete examples.

## Architecture flow

The interaction sequence generally follows these steps:

**Connection:**

* A user on a dApp clicks "Connect Wallet" and selects your wallet.
* The dApp calls the `connect` method on your Wagmi connector.
* The connector initializes the EIP-1193 provider.
* The connector calls `provider.request({ method: 'eth_requestAccounts' })`, which opens your Embedded Wallet pop-up.
* The user authenticates in the pop-up and chooses which wallet account to connect.
* The pop-up returns the selected account(s) and `chainId` to the provider via `postMessage`.
* The provider resolves `eth_requestAccounts`, and the connector returns the account(s) and `chainId` to the dApp.

**RPC Request (e.g., `eth_sendTransaction`):**

* The dApp uses a Wagmi hook (e.g., `useSendTransaction`) which triggers a request.
* Wagmi sends the `eth_sendTransaction` request to your connector.
* The connector forwards the request to the EIP-1193 provider.
* The provider identifies this as a signing request and opens the Embedded Wallet pop-up (if not already open), sending the transaction details via `postMessage`.
* The user reviews and approves the transaction in the pop-up.
* The pop-up uses Turnkey to sign the transaction and potentially broadcast it (or return the signed transaction).
* The pop-up sends the transaction hash (or signed transaction) back to the provider via `postMessage`.
* The provider resolves the request promise, returning the result to the dApp via the connector.

**RPC Request (e.g., `eth_blockNumber`):**

* The dApp triggers a read-only request.
* Wagmi sends the `eth_blockNumber` request to your connector.
* The connector forwards it to the EIP-1193 provider.
* The provider identifies this as a read-only request and forwards it directly to a public RPC node.
* The public RPC node returns the result.
* The provider returns the result to the dApp via the connector.

## Flow diagram

```mermaid
sequenceDiagram
    participant DApp
    participant WagmiConnector
    participant EIP1193Provider
    participant EmbeddedWalletPopup
    participant PublicRPC
    participant TurnkeyAPI
    participant User

    %% Connection Flow
    DApp->>WagmiConnector: connect()
    WagmiConnector->>EIP1193Provider: initialize()
    WagmiConnector->>EIP1193Provider: request(eth_requestAccounts)
    EIP1193Provider->>EmbeddedWalletPopup: openPopup()
    %% User Authentication & Account Selection
    EmbeddedWalletPopup->>TurnkeyAPI: exchangeIdToken(idToken)
    TurnkeyAPI-->>EmbeddedWalletPopup: accessToken
    EmbeddedWalletPopup->>TurnkeyAPI: listAccounts(accessToken)
    TurnkeyAPI-->>EmbeddedWalletPopup: accounts
    EmbeddedWalletPopup->>User: display account picker
    Note over User,EmbeddedWalletPopup: selects account
    EmbeddedWalletPopup->>EIP1193Provider: postMessage(accounts, chainId)
    EIP1193Provider-->>WagmiConnector: resolve eth_requestAccounts
    WagmiConnector-->>DApp: connected(accounts, chainId)

    %% Signing Request Flow (e.g., eth_sendTransaction)
    DApp->>WagmiConnector: request({ method: 'eth_sendTransaction', params: [...] })
    WagmiConnector->>EIP1193Provider: request({ method: 'eth_sendTransaction', ... })
    EIP1193Provider->>EmbeddedWalletPopup: postMessage({ type: 'RPC_REQUEST', payload: {...} })
    Note over EmbeddedWalletPopup,TurnkeyAPI: User Approves & Signs Tx
    EmbeddedWalletPopup->>EIP1193Provider: postMessage({ type: 'RPC_RESPONSE', payload: { txHash: '0x...' } })
    EIP1193Provider-->>WagmiConnector: success(txHash)
    WagmiConnector-->>DApp: success(txHash)

    %% Read Request Flow (e.g., eth_call)
    DApp->>WagmiConnector: request({ method: 'eth_call', params: [...] })
    WagmiConnector->>EIP1193Provider: request({ method: 'eth_call', ... })
    EIP1193Provider->>PublicRPC: eth_call(...)
    PublicRPC-->>EIP1193Provider: result
    EIP1193Provider-->>WagmiConnector: success(result)
    WagmiConnector-->>DApp: success(result)
```

### Connect flow demo

<video src="https://mintlify.s3.us-west-1.amazonaws.com/turnkey-0e7c1f5b/assets/files/popup-auth-flow.mp4" autoplay loop muted playsinline controls class="rounded-md my-4 w-full max-w-2xl mx-auto" />

## Building the embedded wallet (pop-up)

The embedded wallet is a standalone web app (often a separate Next.js project)
that is opened in a pop-up when the provider executes `eth_requestAccounts`.

### Create the wallet page

Below is a minimal wallet UI plus a stubbed authentication button, shown side-by-side with Mintlify's `<CodeGroup>` component so you can copy either file.

<CodeGroup>
  ```tsx app/page.tsx
  import { AuthButton } from "@/components/auth";

  // A minimal wallet UI that only handles `eth_requestAccounts`
  export default function Page({
    searchParams,
  }: {
    searchParams: { request?: string };
  }) {
    // Decode the JSON-RPC request that the provider placed in the URL
    const rpcRequest = searchParams.request
      ? JSON.parse(decodeURIComponent(searchParams.request))
      : null;

    // Support connection only
    if (rpcRequest?.method !== "eth_requestAccounts") {
      return (
        <main className="flex min-h-screen items-center justify-center">
          <p>Unsupported method</p>
        </main>
      );
    }

    return (
      <main className="flex min-h-screen flex-col items-center justify-center gap-4">
        <h1 className="text-xl font-semibold">Connect Wallet</h1>
        <AuthButton />
      </main>
    );
  }
  ```

  ```tsx components/auth.tsx
  "use client";

  import { useState } from "react";
  import { authenticateWithTurnkey } from "@/lib/turnkey";

  export function AuthButton() {
    const [loading, setLoading] = useState(false);

    const handleConnect = async () => {
      setLoading(true);
      try {
        // Call your Turnkey helper to perform real auth & fetch accounts
        const { accounts, chainId } = await authenticateWithTurnkey();
        window.opener?.postMessage(
          { type: "ETH_ACCOUNTS", accounts, chainId },
          "*"
        );
        window.close();
      } finally {
        setLoading(false);
      }
    };

    return (
      <button
        className="rounded bg-indigo-600 px-4 py-2 text-white disabled:opacity-50"
        onClick={handleConnect}
        disabled={loading}
      >
        {loading ? "Connecting…" : "Sign In"}
      </button>
    );
  }
  ```

  ```ts lib/turnkey.ts
  import type { Address } from "viem";

  // Minimal placeholder – replace with full Turnkey SDK logic
  export async function authenticateWithTurnkey(): Promise<{
    accounts: readonly Address[];
    chainId: number;
  }> {
    /*
      Here you would:
        1. Invoke Turnkey passkey/OAuth flows.
        2. Retrieve the user's wallet address(es).
        3. Optionally create a sub-org if user is new.
    */

    return {
      accounts: ["0xAbc…"] as const,
      chainId: 17000,
    };
  }
  ```
</CodeGroup>

**How it works**

1. The provider opens the pop-up at `https://<your-wallet-host>/?request=<encoded-json-rpc>`.
2. The page decodes the `request` query parameter.\
   For the connection flow this will look like:
   ```json
   {
     "method": "eth_requestAccounts",
     "params": []
   }
   ```
3. When the user clicks **Connect Wallet** the `AuthButton` performs your authentication logic (Turnkey passkey, email-magic-link, etc.).
4. Once authenticated, the wallet sends a `postMessage` back to the opener containing the selected account(s) and `chainId`.\
   We will wire up that message handling in the next section.

With this single page in place you now have a functional authentication UI that the provider can open, fulfilling the first half of the connection flow:

```
DApp → Connector → Provider → (opens) Wallet UI → user authenticates → …
```

Next we will implement the message bridge in the provider and then expand the wallet to handle transaction and message signing.

### Post the account back to the opener

Inside your `AuthButton` (or wherever your auth logic resolves) send a message with the newly authenticated account:

```tsx components/auth.tsx
// ...after you have the accounts array and chainId
window.opener?.postMessage(
  {
    type: "ETH_ACCOUNTS",
    accounts, // e.g. ["0xAbc…"]
    chainId, // e.g. 17000 (Holesky)
  },
  "*"
);
// Optionally close the popup or show a success screen
```

> This keeps the wallet UI decoupled from the provider implementation—any parent window that understands the `ETH_ACCOUNTS` message can integrate.

## Implement a minimal EIP-1193 provider

Create `eip1193-provider.ts` in your dApp project. For the connection flow we only need to implement `eth_requestAccounts` and `eth_accounts`:

```ts eip1193-provider.ts [expandable]
import type { EIP1193RequestFn, EIP1193Provider } from "viem";

export function createEIP1193Provider(): EIP1193Provider {
  let popup: Window | null = null;
  let cachedAccounts: readonly `0x${string}`[] = [];

  const request: EIP1193RequestFn = async ({ method, params }) => {
    // Return cache immediately
    if (method === "eth_accounts") return cachedAccounts;

    if (method === "eth_requestAccounts") {
      return new Promise((resolve, reject) => {
        // 1. Listen for postMessage from wallet
        const handleMessage = (event: MessageEvent) => {
          const { type, accounts, chainId } = event.data || {};
          if (type !== "ETH_ACCOUNTS") return;
          window.removeEventListener("message", handleMessage);
          cachedAccounts = accounts;
          resolve(accounts);
        };
        window.addEventListener("message", handleMessage);

        // 2. Open wallet popup (centered)
        const w = 360,
          h = 600,
          left = window.screenX + (window.outerWidth - w) / 2,
          top = window.screenY + (window.outerHeight - h) / 2;
        popup = window.open(
          `http://localhost:3001?request=${encodeURIComponent(
            JSON.stringify({ method, params })
          )}`,
          "Berakin Wallet",
          `width=${w},height=${h},left=${left},top=${top}`
        );
        if (!popup) reject(new Error("Popup blocked"));
      });
    }

    throw new Error(`${method} not implemented in minimal provider`);
  };

  // Very small subset of the provider interface we need for Wagmi
  return {
    request,
    // no-ops for event listeners for now; Wagmi expects them to exist
    on: () => {},
    removeListener: () => {},
  } as EIP1193Provider;
}
```

This provider:

1. Caches accounts after the first successful connection.
2. Opens the wallet pop-up and waits for a `postMessage` containing `ETH_ACCOUNTS`.
3. Resolves the `eth_requestAccounts` promise and lets Wagmi continue.

## Wire it up in a Wagmi connector

Your minimal connector only needs the `connect` method to use the provider you just built. The full version from `popup-wallet-demo` already includes this; here's the shortened core for reference:

```ts connector.ts
export function berakinWalletConnector() {
  let provider: EIP1193Provider | null = null;

  return createConnector((config) => ({
    id: "berakinWallet",
    name: "Berakin Wallet",

    async connect() {
      provider = provider ?? createEIP1193Provider();
      const accounts = (await provider.request({
        method: "eth_requestAccounts",
      })) as readonly `0x${string}`[];
      return { accounts, chainId: 17000 };
    },

    async getProvider() {
      return provider ?? (provider = createEIP1193Provider());
    },
  }));
}
```

At this point you can:

1. Run your wallet project on `localhost:3001`.
2. Integrate the minimal provider + connector in a dApp.
3. Click **Connect Wallet** in the dApp → the pop-up opens → authenticate → dApp receives the account.

🎉 You now have a working end-to-end connection flow! Next we'll extend both the wallet UI and the provider to support signing transactions and messages.

## Add transaction and message signing

Connection works. Next, implement signing so the dApp can call `useSendTransaction`, `useSignMessage`, and related Wagmi hooks.

### Wallet-side components

<CodeGroup>
  ```tsx components/sign-transaction.tsx [expandable]
  "use client";

  import { useState } from "react";
  import type { Address } from "viem";
  import { signAndSend } from "@/lib/turnkey";

  interface Props {
    transaction: Record<string, unknown>; // raw tx params
    organizationId: string;
  }

  export function SignTransaction({ transaction, organizationId }: Props) {
    const [submitting, setSubmitting] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const handleApprove = async () => {
      setSubmitting(true);
      try {
        const txHash = await signAndSend(transaction, organizationId);
        window.opener?.postMessage(
          { type: "RPC_RESPONSE", method: "eth_signTransaction", result: txHash },
          "*"
        );
        window.close();
      } catch (err: unknown) {
        setError(String(err));
      } finally {
        setSubmitting(false);
      }
    };

    return (
      <div className="space-y-4">
        <h2 className="text-lg font-semibold">Review Transaction</h2>
        <pre className="max-h-60 overflow-auto rounded bg-zinc-900 p-2 text-sm">
          {JSON.stringify(transaction, null, 2)}
        </pre>
        {error && <p className="text-red-500">{error}</p>}
        <button
          className="rounded bg-indigo-600 px-4 py-2 text-white"
          onClick={handleApprove}
          disabled={submitting}
        >
          {submitting ? "Signing…" : "Approve & Sign"}
        </button>
      </div>
    );
  }
  ```

  ```tsx components/sign-message.tsx [expandable]
  "use client";

  import { useState } from "react";
  import type { Address } from "viem";
  import { signMessage } from "@/lib/turnkey";

  interface Props {
    method: "personal_sign" | "eth_sign";
    message: string;
    signWith: Address;
    organizationId: string;
  }

  export function SignMessage({
    method,
    message,
    signWith,
    organizationId,
  }: Props) {
    const [submitting, setSubmitting] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const handleApprove = async () => {
      setSubmitting(true);
      try {
        const signature = await signMessage({
          message,
          method,
          signWith,
          organizationId,
        });
        window.opener?.postMessage(
          { type: "RPC_RESPONSE", method, result: signature },
          "*"
        );
        window.close();
      } catch (err: unknown) {
        setError(String(err));
      } finally {
        setSubmitting(false);
      }
    };

    return (
      <div className="space-y-4">
        <h2 className="text-lg font-semibold">Sign Message</h2>
        <pre className="rounded bg-zinc-900 p-2 text-sm break-words whitespace-pre-wrap">
          {message}
        </pre>
        {error && <p className="text-red-500">{error}</p>}
        <button
          className="rounded bg-indigo-600 px-4 py-2 text-white"
          onClick={handleApprove}
          disabled={submitting}
        >
          {submitting ? "Signing…" : "Sign & Return"}
        </button>
      </div>
    );
  }
  ```

  ```ts lib/turnkey.ts (additional helpers) [expandable]
  // ...existing authenticateWithTurnkey above

  export async function signAndSend(
    tx: unknown,
    organizationId: string
  ): Promise<string> {
    /*
      1. Stamp the transaction with Turnkey.
      2. Broadcast via JSON-RPC.
    */
    return "0xdeadbeef";
  }

  export async function signMessage(args: {
    message: string;
    method: "personal_sign" | "eth_sign";
    signWith: Address;
    organizationId: string;
  }): Promise<string> {
    /*
      1. Create a Turnkey signing job.
      2. Return hex signature.
    */
    return "0xsignature";
  }
  ```
</CodeGroup>

### Provider extensions

Augment the provider so signing requests are routed through the popup.

```ts eip1193-provider.ts (diff) [expandable]
// inside createEIP1193Provider.request
if (
  method === "eth_signTransaction" ||
  method === "eth_sign" ||
  method === "personal_sign"
) {
  return popupRequest({ method, params });
}

// Convenience: wrap eth_sendTransaction to auto-sign & send raw tx
if (method === "eth_sendTransaction") {
  const [tx] = params as any[];
  const signed = await request({ method: "eth_signTransaction", params: [tx] });
  return request({ method: "eth_sendRawTransaction", params: [signed] });
}
```

`popupRequest` is the existing helper that opens/targets the window and resolves the corresponding `RPC_RESPONSE`.

### Summary

You now handle:

• Connection (`eth_requestAccounts`).\
• Transaction signing (`eth_signTransaction` / `eth_sendTransaction`).\
• Message signing (`personal_sign` / `eth_sign`).

From here you can layer additional EIP-1193 methods (chain switching, asset watch, etc.) as needed.

### Production considerations

The code samples target a minimal, easy-to-understand prototype. When moving to production, address the following:

• **Request IDs & queueing** – generate a unique `id` per RPC call, store promises by `id`, include it in every `postMessage` so concurrent requests cannot collide.\
• **Session persistence** – cache `accounts` and `chainId` in `localStorage` and return them on subsequent `eth_accounts` calls without re-authenticating.\
• **Popup cancellation & timeouts** – reject pending promises if the user closes the window or after a reasonable timeout.\
• **Network switching** – implement `wallet_switchEthereumChain`, update `store.chainId`, and emit `chainChanged`.\
• **Security** – validate `event.origin`, allow-list dApp domains, move hard-coded URLs (`localhost:3001`, RPC endpoints) into environment variables.\
• **Additional EIPs** – support `wallet_watchAsset`, `eth_addEthereumChain`, etc., if dApps require them.

Addressing these items will bring the prototype to production-ready quality without altering the core architecture documented above.


