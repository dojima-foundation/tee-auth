name: Full Project CI/CD

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - 'terraform/**'
      - '.github/workflows/renclave-v2.yml'
      - '.github/workflows/gauth.yml'
      - '.github/workflows/web.yml'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - 'terraform/**'
      - '.github/workflows/renclave-v2.yml'
      - '.github/workflows/gauth.yml'
      - '.github/workflows/web.yml'
  workflow_dispatch:
    inputs:
      run_all:
        description: 'Run all component tests'
        required: false
        default: false
        type: boolean

env:
  GO_VERSION: "1.23"
  RUST_VERSION: "1.82"
  NODE_VERSION: "20"
  POSTGRES_VERSION: "15"
  REDIS_VERSION: "7-alpine"
  # Environment-specific variables
  ENVIRONMENT: "dev"
  DOCKER_REGISTRY: "dojima0foundation"

jobs:
  renclave-v2:
    name: Renclave-v2
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          renclave-v2/target
          ~/.cargo/bin
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git/db
        key: renclave-v2-${{ hashFiles('renclave-v2/Cargo.lock') }}
        restore-keys: |
          renclave-v2-

    - name: Run Rust tests
      run: |
        cd renclave-v2
        cargo test --workspace --verbose

    - name: Build Rust release
      run: |
        cd renclave-v2
        cargo build --release --workspace

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./renclave-v2
        file: ./renclave-v2/docker/Dockerfile
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/renclave-v2:${{ env.ENVIRONMENT }},${{ env.DOCKER_REGISTRY }}/renclave-v2:${{ github.sha }}
        cache-from: type:gha
        cache-to: type:gha,mode=max
        labels: |
          org.opencontainers.image.title=renclave-v2
          org.opencontainers.image.description=Rust-based TEE enclave service
          org.opencontainers.image.source=https://github.com/dojima/tee-auth
          org.opencontainers.image.version=${{ github.sha }}

  gauth:
    name: Gauth
    runs-on: ubuntu-latest
    environment: dev
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: gauth
          POSTGRES_DB: gauth_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Install protoc
      uses: arduino/setup-protoc@v1
      
    - name: Install protoc plugins
      run: |
        cd gauth
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        
    - name: Generate protobuf code
      run: |
        cd gauth
        make proto
        
    - name: Run Go tests
      run: |
        cd gauth
        make test-unit
        
    - name: Build Go binary
      run: |
        cd gauth
        make build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./gauth
        file: ./gauth/docker/Dockerfile
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/gauth:${{ env.ENVIRONMENT }},${{ env.DOCKER_REGISTRY }}/gauth:${{ github.sha }}
        cache-from: type:gha
        cache-to: type:gha,mode=max
        labels: |
          org.opencontainers.image.title=gauth
          org.opencontainers.image.description=Go-based authentication service
          org.opencontainers.image.source=https://github.com/dojima/tee-auth
          org.opencontainers.image.version=${{ github.sha }}

  web:
    name: Web
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: 'dojima-foundation/tee-auth'
        ref: 'main'
        fetch-depth: 0
        clean: true
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      working-directory: ./web
      run: npm install

    - name: Fix showSnackbar calls
      working-directory: ./web
      run: |
        sed -i "s/showSnackbar('Session info loaded', 'success')/showSnackbar({ type: 'success', title: 'Session info loaded' })/g" src/app/dashboard/session-test/page.tsx
        sed -i "s/showSnackbar('Failed to load session info', 'error')/showSnackbar({ type: 'error', title: 'Failed to load session info' })/g" src/app/dashboard/session-test/page.tsx
        sed -i "s/showSnackbar(\`Loaded \${sessions.length} sessions\`, 'success')/showSnackbar({ type: 'success', title: \`Loaded \${sessions.length} sessions\` })/g" src/app/dashboard/session-test/page.tsx
        sed -i "s/showSnackbar('Failed to load sessions', 'error')/showSnackbar({ type: 'error', title: 'Failed to load sessions' })/g" src/app/dashboard/session-test/page.tsx
        sed -i "s/showSnackbar('Session refreshed successfully', 'success')/showSnackbar({ type: 'success', title: 'Session refreshed successfully' })/g" src/app/dashboard/session-test/page.tsx
        sed -i "s/showSnackbar('Failed to refresh session', 'error')/showSnackbar({ type: 'error', title: 'Failed to refresh session' })/g" src/app/dashboard/session-test/page.tsx
        sed -i "s/showSnackbar(\`Session validation: \${isValid ? 'Valid' : 'Invalid'}\`, isValid ? 'success' : 'error')/showSnackbar({ type: isValid ? 'success' : 'error', title: \`Session validation: \${isValid ? 'Valid' : 'Invalid'}\` })/g" src/app/dashboard/session-test/page.tsx
        sed -i "s/showSnackbar('Failed to validate session', 'error')/showSnackbar({ type: 'error', title: 'Failed to validate session' })/g" src/app/dashboard/session-test/page.tsx
        sed -i "s/showSnackbar('Session destroyed successfully', 'success')/showSnackbar({ type: 'success', title: 'Session destroyed successfully' })/g" src/app/dashboard/session-test/page.tsx
        sed -i "s/showSnackbar('Failed to destroy session', 'error')/showSnackbar({ type: 'error', title: 'Failed to destroy session' })/g" src/app/dashboard/session-test/page.tsx
        
        # Fix SessionManager.tsx
        sed -i "s/showSnackbar('Failed to load session information', 'error')/showSnackbar({ type: 'error', title: 'Failed to load session information' })/g" src/components/SessionManager.tsx
        sed -i "s/showSnackbar('Failed to load sessions', 'error')/showSnackbar({ type: 'error', title: 'Failed to load sessions' })/g" src/components/SessionManager.tsx
        sed -i "s/showSnackbar('Session refreshed successfully', 'success')/showSnackbar({ type: 'success', title: 'Session refreshed successfully' })/g" src/components/SessionManager.tsx
        sed -i "s/showSnackbar('Failed to refresh session', 'error')/showSnackbar({ type: 'error', title: 'Failed to refresh session' })/g" src/components/SessionManager.tsx
        sed -i "s/showSnackbar('Session destroyed successfully', 'success')/showSnackbar({ type: 'success', title: 'Session destroyed successfully' })/g" src/components/SessionManager.tsx
        sed -i "s/showSnackbar('Failed to destroy session', 'error')/showSnackbar({ type: 'error', title: 'Failed to destroy session' })/g" src/components/SessionManager.tsx
        
        # Fix SessionStatus.tsx
        sed -i "s/showSnackbar('Session refreshed', 'success')/showSnackbar({ type: 'success', title: 'Session refreshed' })/g" src/components/SessionStatus.tsx
        sed -i "s/showSnackbar('Failed to refresh session', 'error')/showSnackbar({ type: 'error', title: 'Failed to refresh session' })/g" src/components/SessionStatus.tsx

    # - name: Run tests
    #   working-directory: ./web
    #   run: npm run test

    - name: Build application
      working-directory: ./web
      run: npm run build -- --no-lint

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # - name: Build and push Docker image
    #   run: |
    #     echo "Current directory: $(pwd)"
    #     echo "Listing web directory:"
    #     ls -la web/
    #     echo "Changing to web directory..."
    #     cd web
    #     echo "New directory: $(pwd)"
    #     echo "Listing current directory:"
    #     ls -la
    #     echo "Running Docker build..."
    #     docker buildx build --cache-from type:gha --cache-to type:gha,mode=max --file Dockerfile --label "org.opencontainers.image.title=web" --label "org.opencontainers.image.description=Next.js web application" --label "org.opencontainers.image.source=https://github.com/dojima/tee-auth" --label "org.opencontainers.image.version=${{ github.sha }}" --tag ${{ env.DOCKER_REGISTRY }}/web:${{ env.ENVIRONMENT }} --tag ${{ env.DOCKER_REGISTRY }}/web:${{ github.sha }} --push .

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    environment: dev
    needs: [renclave-v2, gauth, web]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: gauth
          POSTGRES_DB: gauth_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        cd gauth
        go mod download
        cd ../web
        npm ci
        
    - name: Run integration tests
      run: |
        cd gauth
        make test-integration
        
    - name: Run E2E tests
      run: |
        cd web
        npx playwright install --with-deps
        npm run test:e2e

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    environment: dev
    needs: [renclave-v2, gauth, web, integration]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate test summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Component Status:" >> $GITHUB_STEP_SUMMARY
        echo "- **Renclave-v2**: ${{ needs.renclave-v2.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Gauth**: ${{ needs.gauth.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Web**: ${{ needs.web.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration**: ${{ needs.integration.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.renclave-v2.result }}" == "success" && "${{ needs.gauth.result }}" == "success" && "${{ needs.web.result }}" == "success" && "${{ needs.integration.result }}" == "success" ]]; then
          echo "✅ All components passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some components failed. Check individual job logs for details." >> $GITHUB_STEP_SUMMARY
        fi
